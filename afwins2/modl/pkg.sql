SET DEFINE OFF;
Prompt Package SIE_01_DESTN_EVENM_NOTFB_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_destn_evenm_notfb_pkg
  authid current_user is
  type typ_destn is record
  (
    nom_formt                               varchar2 (200),
    adres_destn                             varchar2 (500),
    numr_telph_destn                        varchar2 (16)
  );

  function resdr (pnu_seqnc_destn_confg in number,
                  pnu_seqnc_struc_aplic in number)
    return sie_01_destn_evenm_notfb_pkg.typ_destn;
end sie_01_destn_evenm_notfb_pkg;
/

Prompt Package SIE_01_DESTN_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_destn_pkg as
  procedure creer_destn (pnu_destn in number,
                         pva_nom_elemn in varchar2,
                         pnu_reslt_1 in number,
                         pnu_reslt_2 in number,
                         pnu_reslt_3 in number,
                         pnu_reslt_4 in number,
                         pnu_reslt_5 in number,
                         pnu_reslt_6 in number);
end sie_01_destn_pkg;
/

Prompt Package SIE_01_ELEMN_CONFG_EN_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_elemn_confg_en_pkg is
  kva_prefx_elemn_subst_mesg     constant varchar2 (30) default '[#';
  kva_sufx_elemn_subst_mesg      constant varchar2 (30) default '#]';

  procedure inser_elemn_confg_en (pnu_confg_evenm_notfb in vd_i_sie_01_elemn_confg_en.ref_confg_evenm_notfb%type,
                                  pva_code in vd_i_sie_01_elemn_confg_en.code%type,
                                  pva_ident_acces in vd_i_sie_01_elemn_confg_en.ident_acces%type,
                                  pva_ident_acces_formt in vd_i_sie_01_elemn_confg_en.ident_acces_formt%type);

  function formt_elemn_subst_mesg (pva_code in vd_i_sie_01_elemn_confg_en.code%type)
    return varchar2;
end sie_01_elemn_confg_en_pkg;
/

Prompt Package SIE_01_ERR_APEX_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_err_apex_pkg is
  gbo_mode_debug                          boolean default false;
  gbo_mode_simlt                          boolean default false;

  function obten_afich_err_code (pnu_prodt in number default null)
    return boolean;

  procedure gerer_err_apex (thepage in out nocopy htp.htbuf_arr);

  procedure lever_err_apex_mesg (pva_mesg in varchar2);

  procedure lever_err_apex_code (pva_code in varchar2,
                                 pva_valr_subst1 in varchar2 default null,
                                 pva_valr_subst2 in varchar2 default null,
                                 pva_valr_subst3 in varchar2 default null,
                                 pva_valr_subst4 in varchar2 default null,
                                 pva_valr_subst5 in varchar2 default null,
                                 pva_valr_subst6 in varchar2 default null,
                                 pva_valr_subst7 in varchar2 default null,
                                 pva_valr_subst8 in varchar2 default null,
                                 pva_valr_subst9 in varchar2 default null,
                                 pva_valr_subst10 in varchar2 default null,
                                 pva_code_prodt in varchar2 default null,
                                 pbo_afich_code in boolean default obten_afich_err_code);

  procedure lever_err_apex_systm_code (pva_code in varchar2,
                                       pva_valr_subst1 in varchar2 default null,
                                       pva_valr_subst2 in varchar2 default null,
                                       pva_valr_subst3 in varchar2 default null,
                                       pva_valr_subst4 in varchar2 default null,
                                       pva_valr_subst5 in varchar2 default null,
                                       pva_valr_subst6 in varchar2 default null,
                                       pva_valr_subst7 in varchar2 default null,
                                       pva_valr_subst8 in varchar2 default null,
                                       pva_valr_subst9 in varchar2 default null,
                                       pva_valr_subst10 in varchar2 default null,
                                       pva_code_systm in varchar2 default null,
                                       pbo_afich_code in boolean default obten_afich_err_code);

  procedure lever_err_apex (pnu_seqnc in number default null,
                            pva_valr_subst1 in varchar2 default null,
                            pva_valr_subst2 in varchar2 default null,
                            pva_valr_subst3 in varchar2 default null,
                            pva_valr_subst4 in varchar2 default null,
                            pva_valr_subst5 in varchar2 default null,
                            pva_valr_subst6 in varchar2 default null,
                            pva_valr_subst7 in varchar2 default null,
                            pva_valr_subst8 in varchar2 default null,
                            pva_valr_subst9 in varchar2 default null,
                            pva_valr_subst10 in varchar2 default null,
                            pbo_afich_code in boolean default obten_afich_err_code);

  function obten_mesg_infor_sucs
    return varchar2;

  function obten_mesg_infor_ereur
    return varchar2;

  procedure afich_mesg_infor_apex;

  procedure ajout_mesg_infor_sesn_mesg (pva_mesg in varchar2);

  procedure ajout_mesg_infor_sesn_code (pva_code_mesg in varchar2,
                                        pva_valr_subst1 in varchar2 default null,
                                        pva_valr_subst2 in varchar2 default null,
                                        pva_valr_subst3 in varchar2 default null,
                                        pva_valr_subst4 in varchar2 default null,
                                        pva_valr_subst5 in varchar2 default null,
                                        pva_valr_subst6 in varchar2 default null,
                                        pva_valr_subst7 in varchar2 default null,
                                        pva_valr_subst8 in varchar2 default null,
                                        pva_valr_subst9 in varchar2 default null,
                                        pva_valr_subst10 in varchar2 default null,
                                        pva_code_prodt in varchar2 default null);

  procedure ajout_mesg_infor_sesn_sys_code (pva_code_mesg in varchar2,
                                            pva_valr_subst1 in varchar2 default null,
                                            pva_valr_subst2 in varchar2 default null,
                                            pva_valr_subst3 in varchar2 default null,
                                            pva_valr_subst4 in varchar2 default null,
                                            pva_valr_subst5 in varchar2 default null,
                                            pva_valr_subst6 in varchar2 default null,
                                            pva_valr_subst7 in varchar2 default null,
                                            pva_valr_subst8 in varchar2 default null,
                                            pva_valr_subst9 in varchar2 default null,
                                            pva_valr_subst10 in varchar2 default null,
                                            pva_code_systm in varchar2 default null);

  procedure ajout_mesg_infor_utils_mesg (pva_mesg in varchar2,
                                         pnu_utils in number);

  procedure ajout_mesg_infor_utils_code (pva_code_mesg in varchar2,
                                         pnu_utils in number,
                                         pva_valr_subst1 in varchar2 default null,
                                         pva_valr_subst2 in varchar2 default null,
                                         pva_valr_subst3 in varchar2 default null,
                                         pva_valr_subst4 in varchar2 default null,
                                         pva_valr_subst5 in varchar2 default null,
                                         pva_valr_subst6 in varchar2 default null,
                                         pva_valr_subst7 in varchar2 default null,
                                         pva_valr_subst8 in varchar2 default null,
                                         pva_valr_subst9 in varchar2 default null,
                                         pva_valr_subst10 in varchar2 default null,
                                         pva_code_prodt in varchar2 default null);

  function gestn_mesg_err_apex (p_error in apex_error.t_error)
    return apex_error.t_error_result;
end sie_01_err_apex_pkg;
/

Prompt Package SIE_01_EVENM_NOTFB_CU_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_evenm_notfb_cu_pkg
  authid current_user as
  type typ_rec_destn is record
  (
    nom_formt                               varchar2 (4000),
    adres_courl                             varchar2 (200),
    numr_telph                              number (10),
    type_destn                              varchar2 (23)
  );

  type typ_tab_destn is table of typ_rec_destn
                          index by pls_integer;

  type typ_rec_piec_joint is record
  (
    nom                                     varchar2 (4000),
    mime_type                               varchar2 (200),
    contn                                   blob,
    tail                                    number
  );

  type typ_tab_piec_joint is table of typ_rec_piec_joint
                               index by pls_integer;

  procedure propg_evenm_notfb (pva_evenm_notfb in varchar2,
                               pnu_seqnc_struc_aplic in number,
                               pva_code_aplic in varchar2 default null,
                               pva_code_domn in varchar2 default null);

  procedure apliq_confg (pnu_confg in number,
                         pnu_seqnc_struc_aplic in number);

  function resdr_ocurn_destn (pnu_seqnc_destn_confg in number,
                              pnu_seqnc_struc_aplic in number)
    return sie_01_destn_evenm_notfb_pkg.typ_destn;
end sie_01_evenm_notfb_cu_pkg;
/

Prompt Package SIE_01_EVENM_NOTFB_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_evenm_notfb_pkg as
  procedure verfr_presn_doubl_aplic (pnu_evenm_notfb in number);

  function verfr_presn_doubl (pnu_hierc_aplic in number)
    return boolean;

  procedure ajout_confg_en_domn (pnu_domn_confg_en in number,
                                 pnu_domn_cible in number);
end sie_01_evenm_notfb_pkg;
/

Prompt Package SIE_01_GESTN_MESG_AIDE_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_gestn_mesg_aide_pkg is
  function obten_aide_page_item (pnu_numr_apex_page_item in number)
    return varchar2;

  function obten_aide_coln_ir (p_sesn in number,
                               p_ir_id in number,
                               p_ir_col_id in varchar2)
    return varchar2;
end sie_01_gestn_mesg_aide_pkg;
/

Prompt Package SIE_01_HIERC_APLIC_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_hierc_aplic_pkg as
  procedure creer_hierc_aplic (pnu_ref_evenm_notfb in number,
                               pnu_ref_atrib_struc_aplic in number,
                               pnu_aplic_prior in number default 0);

  procedure maj_hierc_aplic (pnu_seqnc in number,
                             pnu_aplic_prior in number);

  procedure suprm_hierc_aplic (pnu_seqnc in number);
end sie_01_hierc_aplic_pkg;
/

Prompt Package SIE_01_JAVSC_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_01_JAVSC_PKG" as
  procedure ajout_libr;

  procedure ajout_scrip_charg;
end sie_01_javsc_pkg;
/

Prompt Package SIE_01_LANG_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_01_LANG_PKG" as
  function obten_lang (pva_code in varchar2)
    return number;

  function obten_lang_sesn
    return number;

  function obten_code_lang_sesn
    return varchar2;

  function obten_lang_formt (pnu_lang in number)
    return varchar2;

  function obten_code_lang (pnu_lang in number)
    return varchar2;
end sie_01_lang_pkg;
/

Prompt Package SIE_01_MESG_TRADC_APEX_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_01_MESG_TRADC_APEX_PKG" as
  procedure pousr_mesg_dans_aplic_apex (pnu_prodt in number);

  procedure pousr_mesg (pnu_mesg_tradc_apex in number);
end sie_01_mesg_tradc_apex_pkg;
/

Prompt Package SIE_01_NOTFC_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_notfc_pkg as
  procedure notfc_sms (pnu_config_evenm_notfb in number,
                       pta_destn in sie_01_evenm_notfb_cu_pkg.typ_tab_destn,
                       pva_mesg in varchar2);

  procedure notfc_courl (pnu_config_evenm_notfb in number,
                         pta_destn in sie_01_evenm_notfb_cu_pkg.typ_tab_destn,
                         pcl_mesg in clob,
                         pva_objet in varchar2,
                         pta_piec_joint in sie_01_evenm_notfb_cu_pkg.typ_tab_piec_joint);
end sie_01_notfc_pkg;
/

Prompt Package SIE_01_TYPE_COMNC_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_01_type_comnc_pkg is
  kva_code_courl                 constant varchar2 (30) default 'COURL';
  kva_code_sms                   constant varchar2 (30) default 'SMS';
  kva_code_ecran                 constant varchar2 (30) default 'ECRAN';

  function obtnr_const (pva_const in varchar2)
    return varchar2;

  function obten_code (pnu_type_comnc in vd_i_sie_01_type_comnc.seqnc%type)
    return vd_i_sie_01_type_comnc.code%type;
end sie_01_type_comnc_pkg;
/

Prompt Package SIE_03_JOURN_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_03_JOURN_PKG" is
  --Ceci sert à séquencer, par session, les lignes dans sie_03_trace_exec
  gnu_fil                                 pls_integer default 0;
  --Ceci sert à calculer, par session, le temps écoulé depuis la dernière trace dans sie_03_trace_exec
  gts_dernr                               timestamp default systimestamp;

  type typ_tab_timst_fil is table of timestamp
                              index by pls_integer;

  gta_timst_fil                           typ_tab_timst_fil;


  procedure ecrir_journ (pva_expli in varchar2 default null,
                         pva_travl in varchar2 default null,
                         pva_code_clas_inter in varchar2 default null,
                         pbo_notfr_mesg_infor in boolean default false);

  procedure defnr_travl (pva_travl in varchar2);

  procedure purgr;
end sie_03_journ_pkg;
/

Prompt Package SIE_03_JOURN_UNITR_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_03_journ_unitr_pkg as
  procedure ajout_journ (actio_journ varchar2 default null,
                         don_nomnl varchar2 default null,
                         reslt varchar2 default null,
                         numr_err varchar2 default null);

  procedure ecrir_journ;

  procedure defnr_struc_aplic_hierc (pva_code_struc_aplic in varchar2,
                                     pnu_seqnc_struc_aplic in number);

  procedure suprm_struc_aplic_hierc (pva_code_struc_aplic in varchar2,
                                     pnu_seqnc_struc_aplic in number);

  procedure reint;
end sie_03_journ_unitr_pkg;
/

Prompt Package SIE_04_HISTR_NAVGT_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_04_histr_navgt_pkg as
  procedure genr_histr;

  procedure creer_histr_de_page_acuei;

  procedure creer_fil_arian_de_histr (pnu_histr_navgt in number);
end sie_04_histr_navgt_pkg;
/

Prompt Package SIE_05_FORML_NOYAU_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_05_FORML_NOYAU_PKG"
  authid current_user as
  gva_varbl_varch                         varchar2 (4000);
  gnu_varbl_numbr                         number;
  gda_varbl_date                          date;

  function resdr_condt_simple_booln (pva_forml in varchar2)
    return boolean;
end sie_05_forml_noyau_pkg;
/

Prompt Package SIE_06_RATIO_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_06_RATIO_PKG" is
  function resdr_ratio (pnu_valr in number,
                        pva_ratio in varchar2)
    return number;
end sie_06_ratio_pkg;
/

Prompt Package SIE_07_APEX_COLCT_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_07_apex_colct_pkg is
  empty_vc_arr                            wwv_flow_global.vc_arr2;
  empty_n_arr                             wwv_flow_global.n_arr;
  empty_d_arr                             wwv_flow_global.d_arr;

  procedure suprm_colct (pva_colct_name in varchar2);

  procedure creer_colct (pva_colct_name in varchar2);

  function obten_nombr_coln (pva_colct_name in varchar2)
    return number;

  procedure maj_colct_membr_atrib (pva_colct_name in varchar2,
                                   pnu_seqnc in number,
                                   pnu_atrib_numbr in number,
                                   pnu_valr in number);

  procedure maj_colct_membr_atrib (pva_colct_name in varchar2,
                                   pnu_seqnc in number,
                                   pnu_atrib_numbr in number,
                                   pva_valr in varchar2);

  procedure ajout_membr (pva_colct_name in varchar2,
                         pva_c001 in varchar2 default null,
                         pva_c002 in varchar2 default null,
                         pva_c003 in varchar2 default null,
                         pva_c004 in varchar2 default null,
                         pva_c005 in varchar2 default null,
                         pva_c006 in varchar2 default null,
                         pva_c007 in varchar2 default null,
                         pva_c008 in varchar2 default null,
                         pva_c009 in varchar2 default null,
                         pva_c010 in varchar2 default null,
                         pva_c011 in varchar2 default null,
                         pva_c012 in varchar2 default null,
                         pva_c013 in varchar2 default null,
                         pva_c014 in varchar2 default null,
                         pva_c015 in varchar2 default null,
                         pva_c016 in varchar2 default null,
                         pva_c017 in varchar2 default null,
                         pva_c018 in varchar2 default null,
                         pva_c019 in varchar2 default null,
                         pva_c020 in varchar2 default null,
                         pva_c021 in varchar2 default null,
                         pva_c022 in varchar2 default null,
                         pva_c023 in varchar2 default null,
                         pva_c024 in varchar2 default null,
                         pva_c025 in varchar2 default null,
                         pva_c026 in varchar2 default null,
                         pva_c027 in varchar2 default null,
                         pva_c028 in varchar2 default null,
                         pva_c029 in varchar2 default null,
                         pva_c030 in varchar2 default null,
                         pva_c031 in varchar2 default null,
                         pva_c032 in varchar2 default null,
                         pva_c033 in varchar2 default null,
                         pva_c034 in varchar2 default null,
                         pva_c035 in varchar2 default null,
                         pva_c036 in varchar2 default null,
                         pva_c037 in varchar2 default null,
                         pva_c038 in varchar2 default null,
                         pva_c039 in varchar2 default null,
                         pva_c040 in varchar2 default null,
                         pva_c041 in varchar2 default null,
                         pva_c042 in varchar2 default null,
                         pva_c043 in varchar2 default null,
                         pva_c044 in varchar2 default null,
                         pva_c045 in varchar2 default null,
                         pva_c046 in varchar2 default null,
                         pva_c047 in varchar2 default null,
                         pva_c048 in varchar2 default null,
                         pva_c049 in varchar2 default null,
                         pva_c050 in varchar2 default null,
                         pnu_n001 in number default null,
                         pnu_n002 in number default null,
                         pnu_n003 in number default null,
                         pnu_n004 in number default null,
                         pnu_n005 in number default null,
                         pda_d001 in date default null,
                         pda_d002 in date default null,
                         pda_d003 in date default null,
                         pda_d004 in date default null,
                         pda_d005 in date default null,
                         pcl_cl001 in clob default empty_clob (),
                         pbl_bl001 in blob default empty_blob (),
                         pxm_x001 in xmltype default null,
                         pva_genrt_md5 in varchar2 default 'NO');

  procedure suprm_membr (pva_colct_name in varchar2,
                         pnu_seqnc in number);

  function exist (pva_colct_name in varchar2)
    return boolean;

  procedure re_seqnc_colct (pva_colct_name in varchar2);
end sie_07_apex_colct_pkg;
/

Prompt Package SIE_07_CLOB_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_CLOB_PKG" as
  subtype typ_index is pls_integer;

  subtype typ_segmn is varchar2 (16000);

  type typ_arr_segmn is table of typ_segmn
                          index by typ_index;

  gar_segmn_vide                          typ_arr_segmn;
  gar_segmn_courn                         typ_arr_segmn;

  exc_ocurn_null                          exception;
  exc_mot_trop_long                       exception;

  subtype typ_mot_instr_debut_fin is varchar2 (32767);

  procedure creer_nouv;

  function creer_nouv
    return typ_index;

  procedure defnr_courn (pnu_index in typ_index);

  function tail (pnu_index in typ_index default null)
    return number;

  procedure ajout (pva_contn in varchar2,
                   pnu_index in typ_index default null);

  procedure ajout_ligne (pva_ligne in varchar2 default null,
                         pnu_index in typ_index default null);

  function obten (pnu_index in typ_index default null)
    return clob;

  procedure ajout_segmn (pse_segmn in typ_segmn);

  function clob_vers_table_segmn (pcl_clob in clob,
                                  pnu_longr_segmn in number default 16000)
    return typ_arr_segmn;

  procedure table_segmn_vers_clob (pcl_clob in out nocopy clob,
                                   par_segmn in  typ_arr_segmn);

  function table_segmn_vers_clob (par_segmn in typ_arr_segmn)
    return clob;

  function table_segmn_vers_clob
    return clob;

  function blob_vers_table_segmn (pbl_blob in blob,
                                  pnu_longr_segmn in number default 160)
    return typ_arr_segmn;

  procedure table_segmn_vers_blob (pbl_blob in out nocopy blob,
                                   par_segmn in  typ_arr_segmn);

  function table_segmn_vers_blob (par_segmn in typ_arr_segmn)
    return blob;

  function table_segmn_vers_blob
    return blob;

  function obten_table_segmn (pnu_index in typ_index default null,
                              pnu_longr_segmn in number default 16000)
    return typ_arr_segmn;

  procedure termn (pnu_index in typ_index default null);

  procedure replc (pcl_clob in out nocopy clob,
                   pva_chain_rechr in varchar2,
                   pva_chain_rempl in varchar2);

  function replc (pcl_clob in clob,
                  pva_chain_rechr in varchar2,
                  pva_chain_rempl in varchar2)
    return clob;

  function instr_lower (pcl_clob in clob,
                        pva_chain in varchar)
    return varchar2;

  function count_instr_lower (pcl_clob in out nocopy clob,
                              pva_chain in  varchar)
    return number;

  procedure instr_debut_fin (pcl_clob in out nocopy clob,
                             pva_debut in  varchar2,
                             pva_fin in    varchar2,
                             pnu_ofset_debut in pls_integer default 1,
                             pnu_ocurn in  pls_integer default 1,
                             pva_carct_non_autor in varchar2 default null,
                             pnu_debut   out pls_integer,
                             pnu_fin   out pls_integer,
                             pva_chain_compl   out varchar);

  procedure fusnr_clob (pnu_cible in typ_index,
                        pnu_sourc in typ_index);

  function convr_clob_vers_blob (pcl_clob in clob)
    return blob;
end;
/

Prompt Package SIE_07_JAVSC_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_JAVSC_PKG" as
  procedure ajout_scrip_charg;

  --01.01.1970
  function obten_date_debut_calnd_javsc
    return date
    result_cache;

  function obten_date_oracl_calnd_javsc (pnu_milsc in number)
    return date;
end sie_07_javsc_pkg;
/

Prompt Package SIE_07_SEMPH_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_SEMPH_PKG" is
  semph_non_dispn                         exception;

  function verfr_semph (pva_code in varchar2,
                        pva_varbl1 in varchar2,
                        pva_varbl2 in varchar2,
                        pva_varbl3 in varchar2,
                        pva_indic_exclu in varchar2 default 'N')
    return boolean;

  function obten_propr_semph_exclu (pva_code in varchar2,
                                    pva_varbl1 in varchar2,
                                    pva_varbl2 in varchar2,
                                    pva_varbl3 in varchar2)
    return varchar2;

  procedure obten_semph (pva_code in varchar2,
                         pva_varbl1 in varchar2,
                         pva_varbl2 in varchar2,
                         pva_varbl3 in varchar2,
                         pva_indic_exclu in varchar2 default 'N',
                         pnu_temps_atent in number default 5,
                         pva_page_perst in varchar2 default null);

  function obten_semph (pva_code in varchar2,
                        pva_varbl1 in varchar2,
                        pva_varbl2 in varchar2,
                        pva_varbl3 in varchar2,
                        pva_indic_exclu in varchar2 default 'N',
                        pnu_temps_atent in number default 5,
                        pva_page_perst in varchar2 default null)
    return number;

  procedure suprm_semph (pva_code in varchar2,
                         pva_varbl1 in varchar2,
                         pva_varbl2 in varchar2,
                         pva_varbl3 in varchar2);

  procedure suprm_semph (pnu_seqnc in number);

  procedure libr_semph_perst_page;
end sie_07_semph_pkg;
/

Prompt Package SIE_07_SQL_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_SQL_PKG"
  authid current_user as
  -- Déclaration des types publics
  type typ_rec_infor_coln is record
  (
    va_indic_expor                          varchar2 (1),
    nu_type_don                             number,
    va_nom                                  varchar2 (1999),
    va_libl                                 varchar2 (100),
    nu_largr                                number,
    va_type_largr                           varchar2 (5),
    nu_largr_reltv                          number,
    va_formt                                varchar2 (50),
    va_align_entet                          varchar2 (10),
    va_align_coln                           varchar2 (10),
    va_type_valr                            varchar2 (5),
    va_valr_varch                           varchar2 (4000),
    nu_valr_numbr                           number,
    da_valr_date                            date,
    ts_valr_timst                           timestamp
  );

  type typ_arr_infor_coln is table of typ_rec_infor_coln
                               index by binary_integer;

  type typ_arr_ndx_vc30 is table of number
                             index by varchar2 (30);

  function rempl_br (pva_chaine in varchar2,
                     pva_rempl_br in varchar2)
    return varchar2;

  function obten_type_valr (pnu_type_don in number)
    return varchar2;

  function ouvri_selct (pnu_ref_ir in number,
                        pnu_rpts_id in number,
                        pva_sql in    varchar2,
                        par_infor_coln in out nocopy typ_arr_infor_coln,
                        pva_rempl_br in varchar2)
    return number;

  function lire_ligne_selct (pnu_cursr in out number,
                             par_infor_coln in out nocopy typ_arr_infor_coln)
    return boolean;

  procedure fermr_selct (pnu_cursr in out number);
end;
/

Prompt Package SIE_07_SQL_UTIL_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_SQL_UTIL_PKG" as
  subtype typ_index is pls_integer;

  type typ_valr is record
  (
    va_expre                                varchar2 (32000),
    va_alias                                varchar2 (50)
  );

  type typ_liste_valrs is table of typ_valr
                            index by typ_index;

  gty_liste_valrs_vide                    typ_liste_valrs;

  -- Fonctions pour formater les différents types de données, prêts à insérer dans du SQL
  function v (pva_valr in varchar2)
    return varchar2;

  function nv (pnu_valr in number)
    return varchar2;

  function dv (pda_valr in date)
    return varchar2;


  -- Fonctions utilitaires
  function liste_valrs (pva_valr_01 in varchar2 default null,
                        pva_valr_02 in varchar2 default null,
                        pva_valr_03 in varchar2 default null,
                        pva_valr_04 in varchar2 default null,
                        pva_valr_05 in varchar2 default null,
                        pva_valr_06 in varchar2 default null,
                        pva_valr_07 in varchar2 default null,
                        pva_valr_08 in varchar2 default null,
                        pva_valr_09 in varchar2 default null,
                        pva_valr_10 in varchar2 default null,
                        pva_valr_11 in varchar2 default null,
                        pva_valr_12 in varchar2 default null,
                        pva_valr_13 in varchar2 default null,
                        pva_valr_14 in varchar2 default null,
                        pva_valr_15 in varchar2 default null,
                        pva_valr_16 in varchar2 default null,
                        pva_valr_17 in varchar2 default null,
                        pva_valr_18 in varchar2 default null,
                        pva_valr_19 in varchar2 default null,
                        pva_valr_20 in varchar2 default null,
                        pva_valr_21 in varchar2 default null,
                        pva_valr_22 in varchar2 default null,
                        pva_valr_23 in varchar2 default null,
                        pva_valr_24 in varchar2 default null,
                        pva_valr_25 in varchar2 default null,
                        pva_valr_26 in varchar2 default null,
                        pva_valr_27 in varchar2 default null,
                        pva_valr_28 in varchar2 default null,
                        pva_valr_29 in varchar2 default null,
                        pva_valr_30 in varchar2 default null,
                        pva_valr_31 in varchar2 default null,
                        pva_valr_32 in varchar2 default null,
                        pva_valr_33 in varchar2 default null,
                        pva_valr_34 in varchar2 default null,
                        pva_valr_35 in varchar2 default null,
                        pva_valr_36 in varchar2 default null,
                        pva_valr_37 in varchar2 default null,
                        pva_valr_38 in varchar2 default null,
                        pva_valr_39 in varchar2 default null,
                        pva_valr_40 in varchar2 default null,
                        pva_valr_41 in varchar2 default null,
                        pva_valr_42 in varchar2 default null,
                        pva_valr_43 in varchar2 default null,
                        pva_valr_44 in varchar2 default null,
                        pva_valr_45 in varchar2 default null,
                        pva_valr_46 in varchar2 default null,
                        pva_valr_47 in varchar2 default null,
                        pva_valr_48 in varchar2 default null,
                        pva_valr_49 in varchar2 default null,
                        pva_valr_50 in varchar2 default null)
    return typ_liste_valrs;

  function obten_liste_valrs (pty_liste_valrs in typ_liste_valrs)
    return varchar2;

  function fusn_liste_valrs (pty_liste_01 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_02 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_03 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_04 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_05 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_06 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_07 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_08 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_09 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_10 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_11 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_12 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_13 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_14 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_15 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_16 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_17 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_18 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_19 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_20 in typ_liste_valrs default gty_liste_valrs_vide)
    return typ_liste_valrs;

  function compt_liste_valrs (pty_liste_valrs in typ_liste_valrs)
    return number;

  function sous_selct (pva_liste_valrs in varchar2,
                       pva_nom_table in varchar2,
                       pva_condt in varchar2 default null,
                       pva_autre_claus in varchar2 default null)
    return varchar2;

  function sous_selct (pty_liste_valrs in typ_liste_valrs,
                       pva_nom_table in varchar2,
                       pva_condt in varchar2 default null,
                       pva_autre_claus in varchar2 default null)
    return varchar2;


  -- Fonctions d'insertion au script
  procedure ajout_ligne (pva_ligne in varchar2 default null);

  procedure ajout_comnt (pva_ligne in varchar2);


  -- Fonctions de construction de script
  procedure debtr (pva_titre_1 in varchar2 default null,
                   pva_titre_2 in varchar2 default null,
                   pbo_gestn_ereur in boolean default true);

  procedure debtr_bloc;

  procedure ignor_duplc_valr;

  procedure termn_bloc;

  procedure inser (pva_nom_table in varchar2,
                   pty_colns in typ_liste_valrs,
                   pty_liste_valrs in typ_liste_valrs,
                   pva_retr in varchar2 default null,
                   pva_into in varchar2 default null);

  procedure updat (pva_nom_table in varchar2,
                   pty_colns in typ_liste_valrs,
                   pty_liste_valrs in typ_liste_valrs,
                   pva_condt in varchar2 default null);

  function obten
    return clob;


  -- Fonctions de gestion d'erreurs
  procedure init_gestn_ereur;

  procedure debtr_bloc_gestn_ereur (pva_nom_bloc in varchar2);

  procedure termn_bloc_gestn_ereur;

  procedure rompr_bloc_gestn_ereur (pnu_nb_ligne in number default 500);

  procedure concl_gestn_ereur;
end;
/

Prompt Package SIE_07_UTIL_CHAIN_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_07_util_chain_pkg is
  --
  /*

  ***************************************************************************
  Header: ps_parse,v 1.0 00/11 12:00:00

         System  : HUMCUST
         Module  : HUMCUST.PS_PARSE
         Purpose : Parse data strings
         Author  : O'Reilly
  ***************************************************************************

  */
  --
  --
  --
  /*
  || PL/SQL table structures to hold atomics retrieved by parse_string.
  || This includes the table type definition, a table (though you can
  || declare your own as well, and an empty table, which you can use
  || to clear out your table which contains atomics.
  */
  type atoms_tabtype is table of varchar2 (32767)
                          index by binary_integer;

  atoms_table                             atoms_tabtype;
  empty_atoms_table                       atoms_tabtype;
  /*
  || The standard list of delimiters. You can over-ride these with
  || your own list when you call the procedures and functions below.
  || This list is a pretty standard set of delimiters, though.
  */
  std_delimiters                          varchar2 (50) := ' !@#$%^&*()-_=+\|`~{[]};:",<.>/?';

  /* Display contents of table using DBMS_OUTPUT */
  procedure display_atomics (table_in in atoms_tabtype,
                             num_rows_in in number);

  /*
  || The parse_string procedure: I provide two, overloaded definitions.
  || The first version puts all atomics into a PL/SQL table and would
  || be used in a PL/SQL Version 2 environment. The second version places
  || all atomics into a string, separating each atomic by a vertical bar.
  || (My code does NOT do any special handling when it finds a "|" in
  || the string. You have to deal with that when you extract the atomics.
  ||
  || See the program definition for more details on other parameters.
  */
  procedure parse_string (string_in in varchar2,
                          atomics_list_out   out atoms_tabtype,
                          num_atomics_out in out number,
                          delimiters_in in varchar2 := std_delimiters);

  procedure parse_string (string_in in varchar2,
                          atomics_list_out in out varchar2,
                          num_atomics_out in out number,
                          delimiters_in in varchar2 := std_delimiters);

  /* Count the number of atomics in a string */
  function number_of_atomics (string_in in varchar2,
                              count_type_in in varchar2 := 'ALL',
                              delimiters_in in varchar2 := std_delimiters)
    return integer;

  /* Return the Nth atomic in the string */
  function nth_atomic (string_in in varchar2,
                       nth_in in number,
                       count_type_in in varchar2 := 'ALL',
                       delimiters_in in varchar2 := std_delimiters)
    return varchar2;

  pragma restrict_references (number_of_atomics, wnds);
end sie_07_util_chain_pkg;
/

Prompt Package SIE_07_UTIL_COMPR_ZIP_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_07_util_compr_zip_pkg is
  /*

  Purpose:      Package handles zipping and unzipping of files

  Remarks:      by Anton Scheffer, see http://forums.oracle.com/forums/thread.jspa?messageID=9289744#9289744

                for unzipping, see http://technology.amis.nl/blog/8090/parsing-a-microsoft-word-docx-and-unzip-zipfiles-with-plsql
                for zipping, see http://forums.oracle.com/forums/thread.jspa?threadID=1115748&tstart=0

  Who     Date        Description
  ------  ----------  --------------------------------
  MBR     09.01.2011  Created
  SIE      08.08-2012  Adaptation et intégration à APEXFramework

  */

  type typ_rec_fichr is record
  (
    nom                                     varchar2 (1000),
    reprt                                   varchar2 (1000),
    contn                                   blob
  );

  type typ_tab_fichr is table of typ_rec_fichr
                          index by pls_integer;

  type typ_list_nom_fichr is table of varchar2 (2048);

  function extra_fichr (pbl_fichr_compr_zip in blob,
                        pva_encod in varchar2 default null,
                        pbo_extra_contn in boolean default true)
    return typ_tab_fichr;

  procedure ajout_fichr (pbl_fichr_compr in out blob,
                         pva_nom_fichr in varchar2,
                         pbl_fichr in blob);

  procedure clotr_fichr (pbl_fichr_compr in out blob,
                         pva_comnt in varchar2 default null);

  function obten_liste_nom_fichr (pbl_fichr_compr in blob,
                                  pva_encod in varchar2 := null)
    return typ_list_nom_fichr;

  function obten_fichr (pbl_fichr_compr in blob,
                        pva_nom_fichr in varchar2,
                        pva_encod in varchar2 := null)
    return blob;
end sie_07_util_compr_zip_pkg;
/

Prompt Package SIE_07_UTIL_CU_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_UTIL_CU_PKG"
  authid current_user as
  function obten_sourc_shutl_selct (pva_selct in varchar2)
    return varchar2;

  function obten_sourc_shutl_selct (pre_selct in sys_refcursor)
    return varchar2;
end sie_07_util_cu_pkg;
/

Prompt Package SIE_07_UTIL_NOYAU_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package sie_07_util_noyau_pkg is
  function obten_schem_apex
    return all_synonyms.table_owner%type;
end sie_07_util_noyau_pkg;
/

Prompt Package SIE_09_PILE_PKG;
/* Formatted on 04/12/2013 11:34:51 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_09_PILE_PKG" as
  procedure init_pile (pva_nom_pile in varchar2);

  function obten_niv_recrs_courn (pva_nom_pile in varchar2)
    return number;

  procedure empil_numbr (pva_nom_pile in varchar2,
                         pnu_seqnc in number);

  procedure empil_varch (pva_nom_pile in varchar2,
                         pva_clef in varchar2);

  procedure empil_rowid (pva_nom_pile in varchar2,
                         pro_rowid in rowid);

  function depil_numbr (pva_nom_pile in varchar2)
    return number;

  function depil_varch (pva_nom_pile in varchar2)
    return varchar2;

  function depil_rowid (pva_nom_pile in varchar2)
    return rowid;

  procedure mode_depil (pva_nom_pile in varchar2);

  procedure termn_utils_pile (pva_nom_pile in varchar2,
                              pbo_autor_pile_non_vide in boolean default false);

  procedure vider_pile;
end sie_09_pile_pkg;
/

Prompt Package SIE_10_DBA_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_10_DBA_PKG" as
  type typ_audit is record
  (
    nom_table                               varchar2 (50),
    seqnc                                   number (10),
    date_creat                              date,
    utils_creat                             varchar2 (30),
    date_modfc                              date,
    utils_modfc                             varchar2 (30)
  );

  type typ_arr_audit is table of typ_audit;

  procedure index_foreign_key (pva_schem in varchar2);

  procedure creer_trigr_audit (pva_schem in varchar2,
                               pva_nom_table in varchar2,
                               pbo_alimt_seqnc in boolean default true,
                               pbo_creat_seqnc in boolean default false,
                               pbo_audit_colmn in boolean default true,
                               pbo_creat_audit_colmn in boolean default false);

  procedure creer_vue (pva_schem in varchar2,
                       pva_nom_table in varchar2);

  function creer_trg_pile_table (pva_schema in varchar2,
                                 pva_table in varchar2,
                                 pva_table_abreg in varchar2,
                                 pbo_creat_bd in boolean default true)
    return varchar2;

  procedure creer_trg_pile_table (pva_schema in varchar2,
                                  pva_table in varchar2,
                                  pva_table_abreg in varchar2,
                                  pbo_creat_bd in boolean default true);

  function creer_fk (pva_cle in varchar2)
    return boolean;

  function obten_seqnc_max_table (pva_table varchar2)
    return number;

  procedure corgr_seqnc_trop_petit (pbo_mode_debug boolean default true);

  function audit_touts_table (pva_utils in varchar2 default null,
                              pda_date_minm in date default null,
                              pda_date_maxm in date default null)
    return typ_arr_audit
    pipelined;
end sie_10_dba_pkg;
/

Prompt Package SIE_11_APLIC_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_11_APLIC_PKG" is
  /*
    &api: afw
  */


  /*
        &nom: obten_lang_deft
    &descr: Retourne la langue primaire de l'application (vd_sie_01_lang.seqnc)
    &param: pnu_aplic in number
  */
  function obten_lang_deft (pnu_aplic in number)
    return number;

  /*
        &nom: obten_lang_deft_formt
    &descr: Retourne le code de la langue primaire de l'application (fr-ca)
    &param: pnu_aplic in number
  */
  function obten_lang_deft_formt (pnu_aplic in number)
    return varchar2;

  /*
        &nom: obten_aplic_sesn
    &descr: Retourne la sequence du produit (vd_sie_11_aplic.seqnc)
    &param:
  */
  function obten_aplic_sesn
    return number;

  /*
        &nom: obten_aplic
    &descr: Retourne la sequence du produit (vd_sie_11_aplic.seqnc)
    &param: pva_code_aplic in varchar2
  */
  function obten_aplic (pva_code_aplic in varchar2)
    return number;

  /*
        &nom: obten_aplic
    &descr: Retourne la sequence du produit (vd_sie_11_aplic.seqnc)
    &param: pva_code_aplic in varchar2
  */
  function obten_aplic (pnu_numr_apex in number)
    return number;

  /*
        &nom: obten_aplic_numr_apex
    &deprc: Utiliser obten_aplic (pnu_numr_apex in number)
    &param: pnu_numr_apex in number
  */
  function obten_aplic_numr_apex (pnu_numr_apex in number)
    return number;

  function obten_numr_apex_aplic (pnu_seqnc in number default null)
    return number;

  function obten_numr_apex_aplic (pva_code_aplic in varchar2)
    return number;

  function obten_code_aplic (pnu_seqnc in number default null)
    return varchar2;

  function obten_page_conxn (pnu_aplic in number default null)
    return number;

  function obten_numr_apex_page_conxn (pnu_aplic in number default null)
    return number;

  function obten_page_acuei (pnu_aplic in number default null)
    return number;

  function obten_numr_apex_page_acuei (pnu_aplic in number default null)
    return number;

  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic;

  function obten_numr_versn_aplic (pnu_numr_aplic in number default null)
    return number;

  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic;

  function obten_versn
    return varchar2;

  function obten_schem (pnu_seqnc in number default null)
    return varchar2;

  procedure defnr_varbl_numr_aplic;

  function obten_aplic_sga
    return number;

  function obten_aplic_sdp
    return number;

  function obten_code_aplic_sdp
    return varchar2;

  procedure inser_aplic (pva_code in varchar2,
                         pva_nom in varchar2,
                         pnu_numr_aplic_apex in number,
                         pnu_numr_versn_1 in number,
                         pnu_numr_versn_2 in number,
                         pnu_numr_versn_3 in number,
                         pnu_numr_versn_4 in number);

  function maj_aplic (pva_code in varchar2,
                      pva_nom in varchar2,
                      pnu_numr_aplic_apex in number,
                      pnu_ref_prodt in number,
                      pnu_ref_versn_courn in number default null)
    return number;

  function obten_lang (pva_code in varchar2)
    return number;

  function obten_lang_sesn (pva_code_deft in varchar2 default null)
    return number;

  function obten_code_lang_sesn (pva_code_deft in varchar2 default null)
    return varchar2;

  function obten_secrt_group_id (pnu_aplic in number)
    return number;

  function obten_theme_apex (pnu_aplic in number)
    return number;

  --OBSOLETE::CARLO
  /*procedure defnr_aplic_safp (pnu_aplic in number);*/

  --OBSOLETE::CARLO
  /*procedure chang_aplic_safp (pnu_aplic in number);*/

  --OBSOLETE::CARLO
  /*procedure chang_aplic (pnu_aplic in number);*/

  function obten_versn_courn (pnu_aplic in number)
    return number;

  function obten_aplic_authe (pnu_aplic in number default null)
    return number;

  function obten_prodt (pnu_aplic in vd_i_sie_11_aplic.seqnc%type)
    return vd_i_sie_11_prodt.seqnc%type;
end sie_11_aplic_pkg;
/

Prompt Package SIE_11_AUTHE_APEX_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_11_AUTHE_APEX_PKG" is
  function valid_utils (p_username in varchar2,
                        p_password in varchar2)
    return boolean;
end sie_11_authe_apex_pkg;
/

Prompt Package SIE_11_INSTA_AFW_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_11_insta_afw_pkg as
  --A ajouter avant l'execution de sie_11_insta_afw_pkg
  --grant execute on apex_040200.wwv_flow_security to afw_unit;
  --grant insert on apex_040200.wwv_flow_items to afw_unit;
  --grant insert on apex_040200.wwv_flow_page_plugs to afw_unit;
  --grant insert on apex_040200.wwv_flow_step_items to afw_unit;
  --grant insert on apex_040200.wwv_flow_processing to afw_unit;
  --grant insert on apex_040200.wwv_flow_shortcuts to afw_unit;
  --grant insert on apex_040200.wwv_flow_plugins to afw_unit;
  --grant execute on apex_040200.wwv_flow_wizard_api to afw_unit;
  --grant delete on apex_040200.wwv_flow_page_da_actions to afw_unit;
  --grant insert on apex_040200.wwv_flow_page_da_actions to afw_unit;
  --grant insert on apex_040200.wwv_flow_authentications to afw_unit;
  --grant update on apex_040200.wwv_flows to afw_unit;
  --grant insert on apex_040200.wwv_flow_security_schemes to afw_unit;

  --JIRA AFW-75.1

  --  grant insert on apex_040200.wwv_flow_plugin_events to afw_unit;
  --
  --  grant insert on apex_040200.wwv_flow_plugin_attributes to afw_unit;
  --
  --  grant insert on apex_040200.wwv_flow_plugin_attr_values to afw_unit;
  --
  --  grant insert on apex_040200.wwv_flow_plugin_files to afw_unit;
  --
  --  grant insert on apex_040200.wwv_flow_plugin_settings to afw_unit;

  --FIN JIRA AFW-75.1

  /******************************************************
  *
  *   Auteur : CONAL
  *   Version : AFW_040200 et APEX_040200
  *
  *   À noter : Il est important de tenir à jour chacune
  *   des procédures à chaque version AFW et APEX, et ce,
  *   jusqu'à ce qu'une version dynamique de ce module
  *   soit disponible.
  *
  *   Mode d'emploi
  *
  *   1 - Vérifier l'existance de la page globale et
  *       ajuster la constante "knu_page_globl"
  *   2 - Si elle n'est pas existante, la créer par APEX
  *   3 - exec sie_11_insta_afw_pkg.insta_afw_aplic_apex([NUMR_APLIC_APEX]);
  *
  ******************************************************/

  type typ_plugn is table of number
                      index by apex_040200.wwv_flow_plugins.name%type;

  gta_id_plugn                            typ_plugn;

  type typ_atrib_plugn is table of number
                            index by varchar2 (100);

  gta_id_atrib_plugn                      typ_atrib_plugn;

  procedure insta_afw_aplic_apex (pnu_id_apex in number);

  procedure verfr_afw_insta (pnu_numr_apex in number);

  procedure anals_versn_plugn (pnu_id_apex in number);

  --Supposons qu'il y a eu installation AVANT l'ajout des plugn_evenm et plugn_atrib
  procedure maj_evenm_atrib_plugn (pnu_numr_apex in number);
end sie_11_insta_afw_pkg;
/

Prompt Package SIE_11_MIGRT_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_11_migrt_pkg is
  gva_ligne_inser                         varchar2 (32767);
  gva_ligne_selct                         varchar2 (32767);
  gva_ligne_updat                         varchar2 (32767);
  gva_indic_migrt                         varchar2 (1) default 'N';
  gbo_presn_don                           boolean default false;

  procedure metr_a_jour_refrn (pnu_versn in number);

  procedure telch_fichr_expor_metdn_afw (pva_contx in varchar2,
                                         pnu_seqnc_contx in number,
                                         pva_nom_fichr in varchar2 default null,
                                         pva_schem in varchar2 default '/* NOM SCHEMA */');

  --Procédure pour le code générique
  procedure debt_enonc_inser (pva_table_tempr in varchar2);

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pva_valr in varchar2,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pnu_valr in number,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pda_valr in date,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pcl_valr in clob,
                                     pva_entit_refrn in varchar2);

  procedure termn_enonc_inser (pva_entit in varchar2);

  procedure trait_genrq (pnu_seqnc_entit in number,
                         pva_entit in varchar2,
                         vva_enonc_sql varchar2);

  procedure alimn_clob_selct (pnu_seqnc_entit in number,
                              pnu_seqnc_dev in number);

  procedure alimn_clob_updat (pnu_seqnc_entit in number,
                              pnu_seqnc_dev in number);

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pva_valr in varchar2,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pnu_valr in number,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pda_valr in date,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pcl_valr in clob,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pva_valr in varchar2,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pnu_valr in number,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pda_valr in date,
                                     pva_entit_refrn in varchar2);

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pcl_valr in clob,
                                     pva_entit_refrn in varchar2);

  procedure incre_nombr_ligne;
end sie_11_migrt_pkg;
/

Prompt Package SIE_11_PARMT_AFW_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_11_PARMT_AFW_PKG" is
  function obten_valr_parmt (pva_code_parmt in varchar)
    return varchar2;
end sie_11_parmt_afw_pkg;
/

Prompt Package SIE_11_PRODT_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_11_PRODT_PKG" is
  gva_base_url                            varchar2 (1000);

  /*
    &api: afw
  */

  /*
        &nom: obten_prodt_sesn
    &descr: Retourne la sequence du produit (vd_sie_11_prodt.seqnc)
    &param:
  */
  function obten_prodt_sesn
    return number;

  /*
        &nom: obten_prodt
    &descr: Retourne la sequence du produit (vd_sie_11_prodt.seqnc)
    &param: pva_code_prodt in varchar2
  */
  function obten_prodt (pva_code_prodt in varchar2)
    return number;

  function obten_code_prodt (pnu_seqnc in number default null)
    return varchar2;

  function obten_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_acuei%type;

  function obten_numr_apex_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number;

  function obten_page_acuei (pnu_prodt in number default null)
    return number;

  function obten_numr_apex_page_acuei (pnu_prodt in number default null)
    return number;

  function obten_aplic_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_comnt_bogue%type;

  function obten_numr_apex_aplic_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number;

  function obten_page_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_page_comnt_bogue%type;

  function obten_numr_apex_page_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number;

  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic;

  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic;

  function obten_versn
    return varchar2;

  /*
    function obten_schem (pnu_seqnc in number default null)
      return varchar2;
  */
  function obten_schem_afw
    return varchar2;

  function obten_dosr_fichr_prodt (pnu_seqnc in number default null)
    return varchar2;

  procedure inser_prodt (pva_code in varchar2,
                         pva_nom in varchar2,
                         pnu_numr_versn_1 in number,
                         pnu_numr_versn_2 in number,
                         pnu_numr_versn_3 in number,
                         pnu_numr_versn_4 in number);

  function maj_prodt (pva_code in varchar2,
                      pva_nom in varchar2,
                      pva_procd_expor_metdn in varchar2,
                      pnu_tail_tabl_extra in number,
                      pva_indic_extra_tout in varchar2,
                      pnu_ref_versn_courn in number default null)
    return number;

  procedure telvs_fichr (pcl_fichr in clob,
                         pva_nom_fichr in varchar2,
                         pbo_atach in boolean default true,
                         pva_contn_type in varchar2 default 'text/plain',
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0);

  procedure telvs_fichr (pbl_fichr in out nocopy blob,
                         pva_nom_fichr in varchar2,
                         pva_contn_type in varchar2,
                         pbo_atach in  boolean default true,
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0);

  function obten_lang (pva_code in varchar2)
    return number;

  function obten_lang_sesn (pva_code_deft in varchar2 default null)
    return number;

  function obten_code_lang_sesn (pva_code_deft in varchar2 default null)
    return varchar2;

  function obten_ident_envir (pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2;

  function obten_versn_courn (pnu_prodt in number)
    return number;

  function obten_jquer_ui_css_scope (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_tout_droit_resrv (pnu_prodt in number default null)
    return varchar2;

  function obten_url_acuei (pnu_prodt in number default obten_prodt_sesn)
    return varchar2;

  function obten_url_authe_cible_sesn
    return varchar2;

  procedure defnr_item_aplic_apex;

  function obten_page_inexs_maj_refrn (pnu_prodt in vd_i_sie_11_prodt.seqnc%type)
    return boolean;

  function obten_mesg_sucs_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_echec_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_fetch_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_suprm_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_modf_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_inser_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_aucun_don_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_trop_don_prodt (pnu_prodt in number default null)
    return varchar2;

  procedure deplr_formt_resrc_prodt (pnu_prodt in number);

  function obten_dosr_fichr_afw (pnu_prodt in number default null)
    return varchar2
    result_cache;

  function obten_base_url (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2;

  function obten_procd_entet_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_entet_pdf_ir%type;

  function obten_procd_pied_page_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_pied_page_pdf_ir%type;

  function obten_procd_coulr_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_plpdf_coulr%type;

  function obten_numr_versn_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2;

  function obten_numr_versn_prodt_afw
    return varchar2;

  function obten_nom (pnu_seqnc in number)
    return varchar2;

  procedure creer_mesg_base_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type,
                                   pnu_lang in vd_i_sie_01_lang.seqnc%type default null);
--OBSOLETE::CARLO
/*procedure defnr_prodt_safp (pnu_prodt in number);*/

--OBSOLETE::CARLO
/*procedure chang_prodt_safp (pnu_prodt in number);*/

end sie_11_prodt_pkg;
/

Prompt Package SIE_11_UTILS_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_11_UTILS_PKG" as
  procedure ajout_role (pnu_utils in number,
                        pva_role in varchar2);

  function verfc_role_prodt (pnu_seqnc_utils in number,
                             pnu_prodt_courn in number,
                             pva_role_reqs in varchar2)
    return boolean;

  function verfc_role_prodt (pnu_seqnc_utils in number,
                             pva_code_prodt in varchar2,
                             pva_role_reqs in varchar2)
    return boolean;

  function verfc_role_prodt_nombr (pnu_seqnc_utils in number,
                                   pnu_prodt_courn in number,
                                   pva_role_reqs in varchar2)
    return number;
end sie_11_utils_pkg;
/

Prompt Package SIE_11_VERSN_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_11_VERSN_PKG" is
  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic;

  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic;

  function obten_seqnc_versn_courn_prodt (pnu_seqnc_prodt in number)
    return varchar2
    deterministic;

  function obten_seqnc_versn_courn_aplic (pnu_seqnc_aplic in number)
    return varchar2
    deterministic;

  procedure copr_entit (pnu_versn_sourc in number,
                        pnu_versn_destn in number);

  procedure creer_versn_aplic (pnu_seqnc in number,
                               pnu_versn_niv1 in number,
                               pnu_versn_niv2 in number,
                               pnu_versn_niv3 in number default 0,
                               pnu_versn_niv4 in number default 0,
                               pva_code in varchar2 default null);

  procedure creer_versn_prodt (pnu_seqnc in number,
                               pnu_versn_niv1 in number,
                               pnu_versn_niv2 in number,
                               pnu_versn_niv3 in number default 0,
                               pnu_versn_niv4 in number default 0,
                               pva_code in varchar2 default null);

  procedure creer_versn_plugn (pnu_seqnc in number,
                               pnu_versn_niv1 in number,
                               pnu_versn_niv2 in number,
                               pnu_versn_niv3 in number default 0,
                               pnu_versn_niv4 in number default 0,
                               pva_code in varchar2 default null);

  procedure creer_versn_aplic_base (pnu_aplic in number);
end;
/

Prompt Package SIE_12_ARBRE_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_arbre_pkg as
  subtype tab_noeud is apex_application_global.vc_arr2;

  function obten_arbre (pnu_numr_apex_regn in number)
    return vd_i_sie_12_arbre.seqnc%type;

  procedure initl_arbre (pnu_numr_apex_regn in number);

  procedure ajout_liste_noeud (pnu_numr_apex_regn in number,
                               pta_liste_noeud in tab_noeud,
                               pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                               pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null);

  procedure fermr_liste_noeud (pnu_numr_apex_regn in number,
                               pta_liste_noeud in tab_noeud,
                               pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                               pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null);

  procedure ouvri_noeud (pnu_numr_apex_regn in number,
                         pva_noeud in varchar2,
                         pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                         pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null);

  procedure fermr_noeud (pnu_numr_apex_regn in number,
                         pva_noeud in varchar2,
                         pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                         pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null);

  function verfr_presn (pnu_numr_apex_regn in number)
    return boolean;

  function verfr_presn_sesn
    return boolean;

  function obten_indic_rafrc (pnu_numr_apex_regn in number)
    return vd_i_sie_12_arbre.indic_rafrc%type;

  procedure forcr_rafrc (pnu_numr_apex_regn in number,
                         pnu_utils in number default null);

  procedure rafrc_efect (pnu_numr_apex_regn in number,
                         pnu_utils in number default null);

  function obten_noeud_actif
    return varchar2;
end sie_12_arbre_pkg;
/

Prompt Package SIE_12_AUDIT_STRUC_APLIC_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_audit_struc_aplic_pkg as
  kva_creat                      constant varchar2 (3) default 'CRE';
  kva_modfc                      constant varchar2 (3) default 'MOD';
  kva_suprs                      constant varchar2 (3) default 'SUP';
  kva_afich                      constant varchar2 (3) default 'AFF';
  kva_persn                      constant varchar2 (3) default 'PER';

  procedure inscr_audit_afich_page;

  procedure inscr_audit (pnu_seqnc_struc_aplic in number,
                         pnu_prodt in number,
                         pva_code_struc_aplic in varchar2,
                         pva_type in varchar2,
                         pva_valr_formt in varchar2,
                         pan_ancn_valr in anydata default null,
                         pan_nouvl_valr in anydata default null);

  function inscr_audit (pnu_seqnc_struc_aplic in number,
                        pnu_prodt in number,
                        pva_code_struc_aplic in varchar2,
                        pva_type in varchar2,
                        pva_valr_formt in varchar2,
                        pan_ancn_valr in anydata default null,
                        pan_nouvl_valr in anydata default null)
    return number;
end sie_12_audit_struc_aplic_pkg;
/

Prompt Package SIE_12_CALND_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_calnd_pkg as
  function obten_date (pnu_numr_apex_regn in number)
    return date;

  function obten_mode (pnu_numr_apex_regn in number)
    return varchar2;

  function obten_type_agend
    return varchar2;

  function obten_selct_indic_journ_compl
    return varchar2;

  function obten_selct_date_debut
    return varchar2;

  function obten_selct_date_fin
    return varchar2;

  function obten_choix_evenm_ident
    return varchar2;

  function obten_deplc_evenm_ident
    return varchar2;

  function obten_deplc_indic_journ_compl
    return varchar2;

  function obten_deplc_date_debut
    return varchar2;

  function obten_deplc_date_fin
    return varchar2;

  function obten_ajust_evenm_ident
    return varchar2;

  function obten_ajust_date_fin
    return varchar2;

  procedure defnr_date (pnu_numr_apex_regn in number,
                        pva_date in varchar2);

  procedure defnr_mode (pnu_numr_apex_regn in number,
                        pva_mode in varchar2);

  procedure defnr_type_agend (pva_type in varchar2);
end sie_12_calnd_pkg;
/

Prompt Package SIE_12_DOMN_GROUP_UTILS_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_domn_group_utils_pkg as
  procedure maj_ocurn_group_expos (pnu_domn in number);

  procedure maj_tous_domn;
end sie_12_domn_group_utils_pkg;
/

Prompt Package SIE_12_DOMN_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_domn_pkg is
  procedure ajout_domn (pva_code in varchar2,
                        pva_nom in varchar2,
                        pva_descr in varchar2);

  procedure modfc_domn (pnu_seqnc in number,
                        pva_code in varchar2,
                        pva_nom in varchar2,
                        pva_descr in varchar2);

  procedure suprm_domn (pnu_seqnc in number);

  function obten_code_domn (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn.code%type;

  function ajout_utils (pnu_utils in number,
                        pnu_domn in number,
                        pda_debut_efect in date default sysdate,
                        pda_fin_efect in date default null)
    return vd_i_sie_12_domn_utils.seqnc%type;

  procedure ajout_utils (pnu_utils in number,
                         pnu_domn in number,
                         pda_debut_efect in date default sysdate,
                         pda_fin_efect in date default null);

  procedure modfc_utils (pnu_seqnc in number,
                         pda_debut_efect in date,
                         pda_fin_efect in date);

  procedure termn_utils (pnu_seqnc in number,
                         pda_fin_efect in date);

  procedure termn_utils (pnu_utils in number,
                         pnu_domn in number,
                         pda_fin_efect in date);

  procedure suprm_utils (pnu_seqnc in number);

  function obten_seqnc_domn (pva_code in vd_i_sie_12_domn.code%type)
    return vd_i_sie_12_domn.seqnc%type;

  function obten_nom_domn (pva_code in vd_i_sie_12_domn.code%type)
    return vd_i_sie_12_domn.nom%type;

  function obten_nom_domn (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn.nom%type;

  function obten_domn_sesn
    return vd_i_sie_12_domn.seqnc%type;

  function obten_code_domn_sesn
    return vd_i_sie_12_domn.code%type;

  function obten_nom_domn_sesn
    return vd_i_sie_12_domn.nom%type;

  function obten_domn_sesn_authe
    return number;

  function obten_code_domn_sesn_authe
    return varchar2;

  function obten_type_travl_deft (pnu_seqnc in number)
    return number;

  procedure chang_domn (pnu_domn in number);

  function obten_procd_authe_exter_afw (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn.procd_authe_exter_afw%type;

  function valdr_demnd_activ_compt_utils (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return boolean;

  function obten_domn (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn%rowtype;

  procedure alimn_type_travl (pnu_domn in vd_i_sie_12_domn.seqnc%type);

  procedure alimn_group_utils (pnu_domn in vd_i_sie_12_domn.seqnc%type,
                               pnu_modl_domn in vd_i_sie_12_domn.seqnc%type default 0);

  procedure alimn_modl_rechr (pnu_domn in vd_sie_12_domn.seqnc%type,
                              pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0);

  procedure alimn_domn_type_publc (pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                   pnu_modl_domn in vd_i_sie_12_domn.seqnc%type default 0);

  procedure alimn_profl_courl (pnu_domn in vd_sie_12_domn.seqnc%type,
                               pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0);

  procedure alimn_confg_evenm_notfb (pnu_domn in vd_sie_12_domn.seqnc%type,
                                     pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0);

  procedure alimn_domn_opert (pnu_domn in vd_sie_12_domn.seqnc%type,
                              pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0);

  procedure alimn_domn_fonct (pnu_domn in vd_sie_12_domn.seqnc%type,
                              pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0);

  procedure valdr_chevc_date_domn_utils (pnu_seqnc in vd_sie_12_domn_utils.seqnc%type,
                                         pnu_ref_domn in vd_sie_12_domn.seqnc%type,
                                         pnu_ref_utils in vd_sie_12_utils.seqnc%type,
                                         pda_date_debut in date,
                                         pda_date_fin in date);
end sie_12_domn_pkg;
/

Prompt Package SIE_12_FAVR_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_favr_pkg as
  function obten_favr (pnu_struc_aplic in number,
                       pnu_seqnc_struc_aplic in number,
                       pnu_utils in number default null)
    return number;

  procedure ajout_favr (pnu_struc_aplic in number,
                        pnu_seqnc_struc_aplic in number,
                        pnu_utils in number default null,
                        pbo_appel_plugn in boolean default true);

  procedure suprm_favr (pnu_struc_aplic in number,
                        pnu_seqnc_struc_aplic in number,
                        pnu_utils in number default null,
                        pbo_appel_plugn in boolean default true);

  function obten_icone_favr (pnu_seqnc_struc_aplic in number,
                             pnu_struc_aplic in number default null,
                             pnu_utils in number default null)
    return varchar2;
end sie_12_favr_pkg;
/

Prompt Package SIE_12_FONCT_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_fonct_pkg as
  function verif_activ_fonct_domn (pnu_struc_aplic in number)
    return boolean;

  function verif_activ_fonct_domn (pva_struc_aplic in varchar2)
    return boolean;

  procedure ajout_opert_domn (pnu_opert_domn in number,
                              pnu_domn_cible in number);

  procedure ajout_fonct_domn (pnu_domn_fonct in number,
                              pnu_domn_cible in number);

  function obten_liste_fonct (pnu_page in vd_i_sie_13_page.seqnc%type)
    return varchar2;
end sie_12_fonct_pkg;
/

Prompt Package SIE_12_GROUP_STAT_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_GROUP_STAT_PKG" as
  procedure creer_group_stat (pva_code in varchar2,
                              pva_nom in varchar2,
                              pva_descr in varchar2,
                              pva_code_prodt in varchar2);

  function creer_group_stat (pva_code in varchar2,
                             pva_nom in varchar2,
                             pva_descr in varchar2,
                             pva_code_prodt in varchar2)
    return number;

  procedure creer_stat (pnu_ref_group_stat in number,
                        pva_code in varchar2,
                        pva_nom in varchar2);

  procedure suprm_group (pnu_seqnc in number);
end sie_12_group_stat_pkg;
/

Prompt Package SIE_12_GROUP_UTILS_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_GROUP_UTILS_PKG" as
  function obten_code (pnu_group_utils in number)
    return varchar2;

  function obten_nom (pnu_group_utils in vd_sie_12_group_utils.seqnc%type)
    return varchar2;

  function obten_seqnc (pva_code in varchar2,
                        pnu_prodt in number default null,
                        pnu_domn in number default null)
    return number;

  function ajout_utils (pnu_utils in number,
                        pnu_group_utils in number,
                        pda_debut_efect in date default sysdate,
                        pda_fin_efect in date default null,
                        pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn)
    return vd_i_sie_12_lien_group_utils.seqnc%type;

  procedure ajout_utils (pnu_utils in number,
                         pnu_group_utils in number,
                         pda_debut_efect in date default sysdate,
                         pda_fin_efect in date default null,
                         pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn);

  procedure ajout_group_utils_domn (pnu_group_utils_sourc in vd_i_sie_12_group_utils.seqnc%type,
                                    pnu_domn_cible in vd_i_sie_12_domn.seqnc%type);

  procedure termn_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                         pnu_group_utils in vd_sie_12_group_utils.seqnc%type,
                         pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn);

  procedure activ_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                         pnu_group_utils in vd_sie_12_group_utils.seqnc%type,
                         pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn);

  function ajout_utils_super_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                                    pda_debut_efect in date default sysdate,
                                    pda_fin_efect in date default null,
                                    pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn)
    return number;

  procedure ajout_utils_super_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                                     pda_debut_efect in date default sysdate,
                                     pda_fin_efect in date default null,
                                     pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn);

  function ajout_utils_conxn_derv (pnu_utils in vd_sie_12_utils.seqnc%type,
                                   pda_debut_efect in date default sysdate,
                                   pda_fin_efect in date default null,
                                   pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn)
    return number;

  procedure ajout_utils_conxn_derv (pnu_utils in vd_sie_12_utils.seqnc%type,
                                    pda_debut_efect in date default sysdate,
                                    pda_fin_efect in date default null,
                                    pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn);

  procedure termn_utils_super_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                                     pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn);

  procedure termn_utils_conxn_derv (pnu_utils in vd_sie_12_utils.seqnc%type,
                                    pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn);
end sie_12_group_utils_pkg;
/

Prompt Package SIE_12_LDAP_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_ldap_pkg is
  function obten_servr_ldap (pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn)
    return vd_sie_12_servr_ldap%rowtype;

  function authe_apex (pva_code_utils in varchar2,
                       pva_mot_passe in varchar2)
    return boolean;

  function authe_dn (pva_code_utils in varchar2,
                     pva_mot_passe in varchar2)
    return boolean;

  function synch_utils (pva_nom in varchar2,
                        pva_prenm in varchar2,
                        pva_code in varchar2,
                        pva_courl in varchar2,
                        pva_indic_verl in varchar2 default 'N',
                        pva_indic_chang_mot_passe in varchar2 default 'O',
                        pva_indic_actif in vd_i_sie_12_utils.indic_actif%type default 'N',
                        pva_temp_dn in vd_i_sie_12_utils.parmt_authe_exter_afw%type default null,
                        pnu_domn in vd_i_sie_12_domn.seqnc%type default null)
    return vd_i_sie_12_utils.seqnc%type;
end sie_12_ldap_pkg;
/

Prompt Package SIE_12_MEMBR_STRUC_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_MEMBR_STRUC_PKG" as
  function obten_code_utils_de_seqnc (pnu_seqnc_membr_struc in number)
    return varchar2;
end;
/

Prompt Package SIE_12_MENU_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_menu_pkg as
  function obten_item_racn (pnu_menu in number)
    return number;

  procedure defnr_item_racn (pnu_menu in number,
                             pnu_item_racn in number);

  function obten_menu_actif
    return number;

  procedure defnr_menu_actif (pnu_menu in number);
end sie_12_menu_pkg;
/

Prompt Package SIE_12_MOT_PASSE_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_MOT_PASSE_PKG" is
  gbo_valdt_procd_niv_secrt               boolean default false;

  procedure defnr_mot_passe (pva_code_utils in varchar2,
                             pva_mot_passe in varchar2);

  procedure defnr_mot_passe (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                             pva_mot_passe in varchar2);

  function valdr_mot_passe (pva_code_utils in varchar2,
                            pva_mot_passe in varchar2)
    return boolean;

  function genr_mot_passe
    return varchar2;

  function valdr_secrt_mot_passe (pva_mot_passe in varchar2,
                                  pva_nom in varchar2 default null,
                                  pva_prenm in varchar2 default null)
    return boolean;

  function valdr_niv_secrt_mot_passe (pva_mot_passe in varchar2,
                                      pva_nom in varchar2 default null,
                                      pva_prenm in varchar2 default null,
                                      pnu_domn in vd_i_sie_12_domn.seqnc%type default null)
    return boolean;

  procedure reint_mot_passe_par_utils (pnu_utils in number,
                                       pva_mot_passe_actue in varchar2,
                                       pva_mot_passe in varchar2,
                                       pva_confr_mot_passe in varchar2);
end sie_12_mot_passe_pkg;
/

Prompt Package SIE_12_REQT_INTER_UTILS_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_reqt_inter_utils_pkg is
  function obten_reqt_inter_utils (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils%rowtype;

  function obten_reqt_inter_utils_ident (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type)
    return vd_i_sie_12_reqt_inter_utils%rowtype;

  function obten_ident (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return varchar2;

  function obten_url_inter (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return varchar2;

  function obten_url_inter_formt_html (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return varchar2;

  function obten_type_reqt_inter_code (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type)
    return varchar2;

  function obten_utils_reqt_inter_utils (pva_ident vd_i_sie_12_reqt_inter_utils.ident%type)
    return vd_i_sie_12_reqt_inter_utils.ref_utils%type;

  function reqt_creat_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                   pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                   pnu_numr_aplic_apex_cible in number,
                                   pnu_numr_page_apex_cible in number,
                                   pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type;

  function reqt_activ_compt_utils (
    pnu_utils in vd_i_sie_12_utils.seqnc%type,
    pnu_domn in vd_i_sie_12_domn.seqnc%type,
    pnu_numr_aplic_apex_cible in number,
    pnu_numr_page_apex_cible in number,
    pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type,
    pva_procd_persn in vd_i_sie_12_reqt_inter_utils.procd_persn_url_apres_authe%type default null
  )
    return vd_i_sie_12_reqt_inter_utils.seqnc%type;

  function reqt_reint_mot_passe (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                 pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                 pnu_numr_aplic_apex_cible in number,
                                 pnu_numr_page_apex_cible in number,
                                 pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type;

  function reqt_reint_mot_passe_exter (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                       pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                       pnu_numr_aplic_apex_cible in number,
                                       pnu_numr_page_apex_cible in number,
                                       pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type;

  function reqt_creat_initl_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                         pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                         pnu_numr_aplic_apex_cible in number,
                                         pnu_numr_page_apex_cible in number,
                                         pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type;

  function reqt_obten_code_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                  pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                  pnu_numr_aplic_apex_cible in number,
                                  pnu_numr_page_apex_cible in number,
                                  pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type;

  procedure demnd_reint_mot_passe_oubli (pva_code_utils in vd_i_sie_12_utils.code_utils%type,
                                         pva_courl in vd_i_sie_12_utils.courl%type,
                                         pva_code_domn in vd_i_sie_12_domn.code%type,
                                         pnu_numr_aplic_apex_cible in number,
                                         pnu_numr_page_apex_cible in number,
                                         pbo_indic_verl boolean default false);

  procedure demnd_code_utils_oubli (pva_courl in vd_i_sie_12_utils.courl%type,
                                    pva_code_domn in vd_i_sie_12_domn.code%type,
                                    pnu_numr_aplic_apex_cible in number,
                                    pnu_numr_page_apex_cible in number,
                                    pbo_indic_verl boolean default false);

  procedure demnd_activ_compt_utils (
    pnu_utils in vd_i_sie_12_utils.seqnc%type,
    pnu_domn in vd_i_sie_12_domn.seqnc%type,
    pnu_numr_aplic_apex_cible in number,
    pnu_numr_page_apex_cible in number,
    pbo_indic_desct boolean default false,
    pva_procd_persn in vd_i_sie_12_reqt_inter_utils.procd_persn_url_apres_authe%type default null
  );

  procedure infor_creat_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                     pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                     pnu_numr_aplic_apex_cible in number,
                                     pnu_numr_page_apex_cible in number,
                                     pbo_indic_activ_utils boolean default true);

  procedure infor_creat_initl_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                           pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                           pnu_numr_aplic_apex_cible in number,
                                           pnu_numr_page_apex_cible in number,
                                           pbo_indic_activ_utils boolean default true);

  procedure trait_reqt_inter_utils (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type);

  procedure defnr_aplic_authe_redrc_cible (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type);

  procedure trait_reqt_activ_compt_utils (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type);

  procedure trait_reqt_reint_mot_passe (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type,
                                        pva_mot_passe in varchar2,
                                        pva_confr_mot_passe in varchar2);
end sie_12_reqt_inter_utils_pkg;
/

Prompt Package SIE_12_SESN_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_sesn_pkg is
  function obten_sesn
    return number;
end;
/

Prompt Package SIE_12_STAT_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_STAT_PKG" as
  gva_indic_stat_systm                    varchar2 (1) default 'N';
  gbo_indic_evolt_stat_code               boolean default false;

  function obten_stat (pva_code_struc_aplic in varchar2,
                       pva_code_stat in varchar2,
                       pva_code_prodt in varchar2 default null)
    return number
    result_cache;

  function obten_stat_group_stat (pva_code_group_stat in varchar2,
                                  pva_code_stat in varchar2,
                                  pva_code_prodt in varchar2 default null)
    return number
    result_cache;

  function obten_code_stat (pnu_seqnc_stat in number)
    return varchar2
    result_cache;

  function obten_stat_initl_struc_aplic (pva_code_struc_aplic in varchar2,
                                         pva_code_prodt in varchar2 default null)
    return number
    result_cache;

  function obten_stat_initl_struc_aplic (pnu_struc_aplic in number)
    return number
    result_cache;

  function obten_stat_initl_group_stat (pva_code_group_stat in varchar2,
                                        pva_code_prodt in varchar2 default null)
    return number
    result_cache;

  function obten_stat_initl_group_stat (pnu_group_stat in number)
    return number
    result_cache;

  function obten_code_stat_initl_struc_ap (pva_code_struc_aplic in varchar2,
                                           pva_code_prodt in varchar2 default null)
    return varchar2
    result_cache;

  function obten_code_stat_initl_struc_ap (pnu_struc_aplic in number)
    return varchar2
    result_cache;


  function obten_code_stat_initl_group_st (pva_code_group_stat in varchar2,
                                           pva_code_prodt in varchar2 default null)
    return varchar2
    result_cache;

  function obten_code_stat_initl_group_st (pnu_group_stat in number)
    return varchar2
    result_cache;

  function obten_stat_formt (pva_code_stat in varchar2,
                             pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2
    result_cache;

  function obten_stat_formt (pnu_seqnc in number)
    return varchar2
    result_cache;

  function valdr_evolt_stat (pnu_stat_ancie in number,
                             pnu_stat_nouv in number)
    return boolean
    result_cache;

  function difrn_ordre (pnu_ref_stat_1 in number,
                        pnu_ref_stat_2 in number)
    return number
    result_cache;

  function obten_liste_formt (pnu_stat in number,
                              pva_code in varchar2)
    return varchar2
    result_cache;

  function obten_postn_reltv (pva_struc_aplic in varchar2,
                              pva_code_stat_base in varchar2,
                              pva_code_stat_cible in varchar2,
                              pva_code_prodt in varchar2 default null)
    return number
    result_cache;

  function obten_postn_reltv (pva_struc_aplic in varchar2,
                              pnu_code_stat_base in number,
                              pnu_code_stat_cible in number)
    return number
    result_cache;

  function obten_postn_reltv_group_stat (pva_group_stat in varchar2,
                                         pva_code_stat_base in varchar2,
                                         pva_code_stat_cible in varchar2,
                                         pva_code_prodt in varchar2 default null)
    return number
    result_cache;

  function obten_postn_reltv_group_stat (pva_group_stat in varchar2,
                                         pnu_code_stat_base in number,
                                         pnu_code_stat_cible in number)
    return number
    result_cache;

  procedure creer_stat (pnu_ref_struc_aplic in number,
                        pva_code in varchar2,
                        pva_nom in varchar2);

  procedure creer_stat_group_stat (pnu_group_stat in number,
                                   pva_code in varchar2,
                                   pva_nom in varchar2,
                                   pva_descr in varchar2);

  function creer_stat_group_stat (pnu_group_stat in number,
                                  pva_code in varchar2,
                                  pva_nom in varchar2,
                                  pva_descr in varchar2)
    return number;

  procedure maj_stat_group_stat (pnu_stat in number,
                                 pva_code in varchar2,
                                 pva_nom in varchar2,
                                 pva_descr in varchar2);

  procedure suprm_stat_group_stat (pnu_stat in number);
end sie_12_stat_pkg;
/

Prompt Package SIE_12_STRUC_APLIC_CU_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_struc_aplic_cu_pkg
  authid current_user is
  kva_elemn_titre_court          constant number (1) default 1;
  kva_elemn_titre                constant number (1) default 2;
  kva_elemn_descr                constant number (1) default 3;

  gva_valr_formt                          varchar2 (32767);

  /*  function exect_sql_reslt_elemn_varch (pva_sql in varchar2, pnu_cle_initl in number)
      return varchar2;
    */
  function resdr_elemn (pnu_struc_aplic in number,
                        pnu_seqnc_struc_aplic number,
                        pva_chemn_reslt in varchar2,
                        pva_formt in varchar2 default null)
    return varchar2;

  function obten_valr_formt (pnu_struc_aplic in number,
                             pnu_seqnc_struc_aplic in number,
                             pnu_elemn_desr in number default kva_elemn_titre)
    return varchar2;

  function obten_valr_atrib_formt (pnu_seqnc_atrib in number,
                                   pnu_seqnc_struc_aplic in number,
                                   pva_formt in varchar2 default null)
    return varchar2;
end sie_12_struc_aplic_cu_pkg;
/

Prompt Package SIE_12_STRUC_APLIC_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_STRUC_APLIC_PKG" as
  kva_elemn_titre_court          constant number (1) default 1;
  kva_elemn_titre                constant number (1) default 2;
  kva_elemn_descr                constant number (1) default 3;
  gva_valr_formt                          varchar2 (32767);

  function obten_struc_aplic_formt (pnu_seqnc_struc in number)
    return varchar2;

  function obten_struc_aplic_formt (pva_code_struc in varchar2,
                                    pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2;

  procedure obten_struc_aplic_formt (pva_code_struc in varchar2,
                                     pva_adjec_demns   out varchar2,
                                     pva_struc_aplic_formt   out varchar2);

  function obten_code (pnu_seqnc in number)
    return varchar2;

  function obten_seqnc (pva_code in varchar2,
                        pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return number;

  /*function obten_valr_formt (pnu_struc_aplic in number,
                             pnu_seqnc_struc_aplic in number,
                             pnu_elemn_desr in number default kva_elemn_titre)
    return varchar2;*/

  procedure creer_group (pnu_ref_struc_aplic in vd_i_sie_12_struc_aplic.seqnc%type);

  procedure creer_struc (pva_code in varchar2,
                         pva_nom in varchar2,
                         pva_descr in varchar2,
                         pva_code_prodt in varchar2);

  function creer_struc (pva_code in varchar2,
                        pva_nom in varchar2,
                        pva_descr in varchar2,
                        pva_code_prodt in varchar2)
    return number;

  procedure suprm_struc (pnu_seqnc in number);

  procedure modfr_struc (pnu_seqnc in number,
                         pva_code in varchar2,
                         pva_nom in varchar2,
                         pva_descr in varchar2);

  function obten_url_acces (pnu_seqnc_struc in number,
                            pnu_sspc in number,
                            pva_sapc in varchar2 default null,
                            pva_scpc in varchar2 default null,
                            pnu_sspi in number default null,
                            pva_sapi in varchar2 default null,
                            pva_scpi in varchar2 default null,
                            pnu_snpi in number default null,
                            pva_reint_sidf in varchar2 default 'N',
                            pva_valr_sess in varchar2 default null,
                            pva_valr_sidf in varchar2 default null)
    return varchar2;

  function obten_url_liste (pnu_seqnc_struc in number,
                            pva_sapc in varchar2 default null,
                            pva_scpc in varchar2 default null,
                            pnu_sspi in number default null,
                            pva_sapi in varchar2 default null,
                            pva_scpi in varchar2 default null,
                            pnu_snpi in number default null,
                            pva_reint_sidf in varchar2 default 'N',
                            pva_valr_sess in varchar2 default null,
                            pva_valr_sidf in varchar2 default null)
    return varchar2;

  procedure maj_atrib_struc_aplic (pnu_struc_aplic in vd_i_sie_12_struc_aplic.seqnc%type);

  procedure verfr_presn_tradc (pnu_struc_aplic number);

  function obten_atrib_struc_aplic (pva_prodt in vd_sie_11_prodt.code%type,
                                    pva_code_struc_aplic in vd_sie_12_struc_aplic.code%type,
                                    pva_nom_coln_atrib in vd_sie_12_atrib_struc_aplic.nom_coln%type)
    return vd_sie_12_atrib_struc_aplic.seqnc%type;

  function obten_nom_coln_atrib (pnu_seqnc in vd_sie_12_atrib_struc_aplic.nom_coln%type)
    return vd_sie_12_atrib_struc_aplic.nom_coln%type;
end sie_12_struc_aplic_pkg;
/

Prompt Package SIE_12_UTILS_PKG;
/* Formatted on 04/12/2013 11:34:52 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_UTILS_PKG" as
  gva_code_utils                          varchar2 (30);
  gva_code_utils_pour                     varchar2 (30) default null;
  gva_code_domn                           varchar2 (30);
  gva_code_domn_pour                      varchar2 (30) default null;

  procedure init;

  function obten_code_usagr_conct (pva_indic_forcr_apex in varchar2 default 'N')
    return varchar2;

  function obten_usagr_conct (pva_indic_forcr_apex in varchar2 default 'N')
    return number;

  function obten_nom_formt_de_code_utils (pva_code_utils in varchar2,
                                          pva_indic_conxn_pour in varchar2 default 'O',
                                          pva_indic_code in varchar2 default 'N')
    return varchar2;

  procedure genr_audits (pva_code_audits in varchar2);

  function obten_nom_formt (pnu_utils in number)
    return varchar2;

  function obten_nom_formt_de_utils (pnu_utils in number)
    return varchar2;

  function verfr_usagr_vald (pva_code_utils in varchar2)
    return boolean;

  function obten_utils_de_code (pva_code in varchar2)
    return number;

  function obten_utils_de_courl (pva_courl in varchar2)
    return number;

  function obten_utils_de_code_base_don (pva_code_base_don in varchar2)
    return number;

  function obten_cle_encry_utils_conct
    return raw;

  function obten_code_utils (pnu_seqnc in number)
    return varchar2;

  function creer_utils (pva_nom in varchar2,
                        pva_prenm in varchar2,
                        pva_code in varchar2,
                        pva_courl in varchar2,
                        pva_indic_verl in varchar2 default 'N',
                        pva_indic_chang_mot_passe in varchar2 default 'O',
                        pva_indic_actif in vd_i_sie_12_utils.indic_actif%type default 'N',
                        pva_parmt_authe_exter_afw in vd_i_sie_12_utils.parmt_authe_exter_afw%type default null)
    return number;

  function obten_courl_utils (pnu_utils in number)
    return varchar2;

  function obten_dernr_aplic (pnu_utils in number)
    return varchar2;

  procedure updat_dernr_aplic (pnu_utils in number,
                               pva_nouv_prodt in varchar2);

  function obten_dernr_domn (pnu_utils in number)
    return varchar2;

  procedure updat_dernr_domn (pnu_utils in number,
                              pva_nouv_domn in varchar2);

  function genr_code_utils (pva_nom in vd_i_sie_12_utils.nom%type,
                            pva_prenm in vd_i_sie_12_utils.prenm%type)
    return vd_i_sie_12_utils.code_utils%type;

  procedure defnr_item_aplic_apex;

  procedure modfr_nom_prenm_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                   pva_nom in vd_i_sie_12_utils.nom%type,
                                   pva_prenm in vd_i_sie_12_utils.prenm%type);

  procedure modfr_courl_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                               pva_courl in vd_i_sie_12_utils.courl%type);

  function obten_audit_usagr_conct
    return varchar2;

  function obten_usagr_conct_sql (pva_code_utils in varchar2)
    return number
    result_cache;

  function obten_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return vd_i_sie_12_utils%rowtype;

  procedure verlr_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type);

  procedure devrl_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type);

  procedure activ_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type);

  procedure desct_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type);

  function valdr_formt_code_utils (pva_code_utils in vd_i_sie_12_utils.code_utils%type)
    return boolean;

  function valdr_formt_courl_utils (pva_courl in vd_i_sie_12_utils.courl%type)
    return boolean;

  function verfc_apart_super_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return boolean;

  function verfc_apart_autor_conxn_derv (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return boolean;

  function obten_parmt_authe_exter_afw (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return vd_i_sie_12_utils.parmt_authe_exter_afw%type;
end sie_12_utils_pkg;
/

Prompt Package SIE_13_MENU_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_13_menu_pkg as
  gbo_menu_actif                          boolean default false;
  gnu_page_cible                          number default null;
  gnu_aplic_cible                         number default null;

  function obten_url_cible (pnu_item_menu in number)
    return varchar2;

  function obten_url_cible_js (pnu_item_menu in number,
                               pnu_item_racn in number default null) -- À utiliser que dans un menu avec un query dynamic (List dynamique)
    return varchar2;

  function valdt_noeud_actif (pnu_item_menu in number,
                              pnu_menu in number)
    return varchar2;

  function verfr_droit_acces (pnu_item_menu in number)
    return number;

  function verfr_enfan_exist (pnu_item_menu in number)
    return boolean;

  function obten_libl (pnu_item_menu in number)
    return varchar2;

  function trait_condt_afich (pnu_item_menu in number)
    return boolean;

  function trait_condt_afich_numbr (pnu_item_menu in number)
    return number;

  function obten_menu_sesn (pva_code_menu in varchar2,
                            pva_mode in varchar2 default 'PRODT')
    return number;

  function obten_menu_part_item_menu (pnu_item_menu in number)
    return number;

  function obten_resrc_aditn (pnu_menu in number)
    return varchar2;
end sie_13_menu_pkg;
/

Prompt Package SIE_13_MIME_TYPE_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_13_mime_type_pkg as
  function obten_seqnc (pva_mime_type in varchar2,
                        pva_nom_fichr in varchar2)
    return number;

  function obten_seqnc (pva_nom_fichr in varchar2)
    return number;

  function obten_icon (pnu_mime_type in number,
                       pva_indic_chemn_compl in varchar2 default 'O')
    return varchar2;

  function obten_type_fichr (pnu_mime_type in number)
    return number;
end sie_13_mime_type_pkg;
/

Prompt Package SIE_13_NAVGT_NOYAU_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_NAVGT_NOYAU_PKG" as
  type typ_item_rechr is record
  (
    nom_coln                                varchar2 (30),
    nom_item                                varchar2 (60),
    type_don                                varchar2 (60),
    formt                                   varchar2 (100),
    valr_rechr                              varchar2 (4000),
    indic_rechr                             varchar2 (1)
  );

  type typ_arr_item_rechr is table of typ_item_rechr
                               index by pls_integer;

  function obten_item_rechr (pnu_ref_page in number,
                             pva_schem in varchar2,
                             pva_table in varchar2,
                             pva_inclu_non_rechr in varchar2 default 'N')
    return typ_arr_item_rechr;

  function obten_sql (pnu_navgt in number)
    return varchar2;

  function obten_indic_extra_total (pnu_page in number)
    return varchar2;

  function obten_tail_tabl_extra (pnu_page in number)
    return number;

  function obten_indic_extra_total_prodt (pnu_prodt in number)
    return varchar2;

  function obten_tail_tabl_extra_prodt (pnu_prodt in number)
    return number;

  procedure suprm_navgt_courn;

  function creer_navgt (pva_indic_extra_total in varchar2,
                        pva_indic_extra_termn in varchar2,
                        pnu_nombr_rang_extra in number,
                        pva_selct in varchar2,
                        pnu_tail_tabl_extra in number,
                        pnu_rpts_id in number,
                        pnu_ref_ir in number)
    return number;

  function obten_navgt_courn (pnu_navgt out number,
                              pva_indic_extra_total out varchar2,
                              pva_indic_extra_termn out varchar2,
                              pnu_nombr_rang_extra out number,
                              pnu_tail_tabl_extra out number,
                              pnu_rpts_id out number,
                              pnu_ref_ir out number)
    return boolean;

  procedure maj_navgt (pnu_navgt in number,
                       pva_indic_extra_total in varchar2,
                       pva_indic_extra_termn in varchar2,
                       pnu_nombr_rang_extra in number,
                       pnu_rpts_id in number,
                       pnu_ref_ir in number);

  procedure ajout_elemn_navgt (pnu_navgt in number,
                               pnu_numr_elemn in number,
                               pnu_sspc in number,
                               pva_indic_courn in varchar2);

  procedure defnr_elemn_courn_sspc (pnu_sspc in number);

  function obten_sspc_numr_elemn (pva_indic_extra_termn in varchar2,
                                  pnu_numr in number,
                                  pnu_numr_elemn   out number)
    return number;

  function obten_sspc_numr_elemn (pva_indic_extra_termn in varchar2,
                                  pnu_numr in number)
    return number;

  function obten_numr_elemn_sspc (pnu_sspc in number)
    return number;
end;
/

Prompt Package SIE_13_NAVGT_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_NAVGT_PKG"
  authid current_user as
  type typ_rec_elemn is record
  (
    rn                                      number (10),
    seqnc                                   number (10),
    indic_courn                             varchar2 (1)
  );

  type typ_tab_navgt_elemt is table of typ_rec_elemn;

  function obten_rang
    return typ_tab_navgt_elemt
    pipelined;

  function obten_tout_rang
    return typ_tab_navgt_elemt
    pipelined;

  function obten_sspc (pnu_ofset in number default 1,
                       pbo_enreg_limt in boolean default false)
    return number;

  function obten_valr_formt (pnu_seqnc_elemn in number)
    return varchar2;

  function obten_url_suivn
    return varchar2;

  function obten_url_precd
    return varchar2;

  function obten_url_dernr (pva_indic_extra_termn in varchar2)
    return varchar2;

  function obten_url_premr
    return varchar2;

  procedure initl_navgt (pva_sql in varchar2 default null);

  procedure defnr_contx_navgt;

  function obten_numr_courn
    return number;

  procedure obten_premr_enreg;

  procedure obten_dernr_enreg;

  function verfr_presn_navgt
    return boolean;

  function formt_filtr_varch (pva_coln in varchar2,
                              pva_valr in varchar2)
    return varchar2;

  function formt_filtr_numbr (pva_coln in varchar2,
                              pva_valr in varchar2,
                              pva_formt in varchar2 default null)
    return varchar2;

  function formt_filtr_date (pva_coln in varchar2,
                             pva_valr in varchar2,
                             pva_formt in varchar2 default null)
    return varchar2;

  procedure ajout_filtr_rechr (pva_nouv_filtr in varchar2,
                               pbo_rempl_filtr_auto in boolean default false);

  procedure trait_mode_rechr;

  function est_en_mode_rechr
    return boolean;

  function est_en_mode_rechr_va
    return varchar2;

  procedure script_mode_rechr;

  procedure efect_rechr;
--procedure acept_rechr;

end sie_13_navgt_pkg;
/

Prompt Package SIE_13_OPERT_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_OPERT_PKG" as
  procedure creer_opert (pva_code_prodt in varchar2,
                         pva_code in varchar2,
                         pva_nom in varchar2,
                         pva_descr in varchar2,
                         pnu_ref_fonct in number default null);

  procedure suprm_opert (pnu_opert in number);

  procedure suprm_opert (pva_code_prodt in varchar2,
                         pva_code in varchar2);

  procedure modfc_code_opert (pva_code_prodt in varchar2,
                              pva_code_ancn in varchar2,
                              pva_code_nouv in varchar2,
                              pva_nom_nouv in varchar2,
                              pva_descr_nouv in varchar2);
end sie_13_opert_pkg;
/

Prompt Package SIE_13_PAGE_ITEM_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_PAGE_ITEM_PKG" as
  function obten_tradc_libl (pnu_item_id number)
    return varchar2;

  function obten_id_item (pnu_page in number,
                          pva_nom_item in varchar2)
    return number;

  procedure chang_modl_page_item (pnu_item_id in number,
                                  pnu_templ_final in number);
end sie_13_page_item_pkg;
/

Prompt Package SIE_13_PAGE_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_PAGE_PKG" as
  type typ_info_extra is record
  (
    va_cache                                varchar2 (5),
    va_schem                                varchar2 (30),
    va_table                                varchar2 (30),
    va_item_pk1                             varchar2 (100),
    va_coln_pk1                             varchar2 (30),
    va_item_pk2                             varchar2 (100),
    va_coln_pk2                             varchar2 (30)
  );

  procedure maj_pages_refrt_apex (pnu_ref_aplic in number default null);

  procedure maj_page_refrt_apex (pnu_page in number);

  procedure maj_table_a_partr_refrt_apex (pnu_ref_aplic in number default null,
                                          pva_indic_migrt in varchar2 default 'N');

  function genr_optio_liste_navgt
    return varchar2;

  function genr_elemn_liste_navgt
    return varchar2;

  procedure reint_exclu_liste_navgt;

  procedure ajout_exclu_liste_navgt (pva_code_elemn_navgt in varchar2);

  procedure cachr_liste_navgt;

  procedure forcr_afich_liste_navgt;

  procedure tradc_raprt_intrc;

  function obten_titre_page_lang
    return varchar2;

  function obten_page_sesn
    return number;

  function obten_page_zero_sesn
    return number;

  function obten_struc_aplic (pnu_page in number)
    return number;

  function obten_numr_apex_page (pnu_page in number default null)
    return number;

  function obten_info_extra (pnu_app_id in number,
                             pnu_app_page_id in number)
    return typ_info_extra;

  function obten_info_extra (pnu_ref_page number default null)
    return typ_info_extra;

  function exist_info_extra (pnu_app_id in number,
                             pnu_app_page_id in number)
    return boolean;

  function exist_info_extra (pnu_ref_page number default null)
    return boolean;

  function exist_info_extra_va (pnu_ref_page number default null)
    return varchar2;

  function obten_page_rechr (pnu_ref_page number default null)
    return number;

  function est_page_rechr (pnu_ref_page in number)
    return boolean;

  function obten_opert_dml (pva_reqt in varchar2 default null)
    return varchar2;

  function est_opert_inser (pva_reqt in varchar2 default null)
    return boolean;

  function est_opert_updat (pva_reqt in varchar2 default null)
    return boolean;

  function est_opert_delt (pva_reqt in varchar2 default null)
    return boolean;

  function est_opert_inser_va (pva_reqt in varchar2 default null)
    return varchar2;

  function est_opert_updat_va (pva_reqt in varchar2 default null)
    return varchar2;

  function est_opert_delt_va (pva_reqt in varchar2 default null)
    return varchar2;

  procedure chang_modl_page (pnu_numr_apex in number,
                             pnu_page_apex in number,
                             pnu_templ_initl in number,
                             pnu_templ_final in number);

  procedure defnr_item_aplic_apex;

  function obten_lien_editn_raprt
    return varchar2;

  function obten_modl_mesg_sucs (pnu_page in number default null,
                                 pnu_aplic in number default null)
    return varchar2;

  function obten_modl_mesg_ereur (pnu_page in number default null,
                                  pnu_aplic in number default null)
    return varchar2;

  function obten_nom_modl_page (pnu_page in number default null,
                                pnu_aplic in number default null)
    return varchar2;

  function obten_page_ir (pnu_page in number)
    return number;

  procedure reint_soums_page (pnu_numr_apex_aplic in number,
                              pnu_numr_apex_page in number,
                              pnu_sesn in number default sie_12_sesn_pkg.obten_sesn);
end sie_13_page_pkg;
/

Prompt Package SIE_13_PAGE_PREFR_NAVGT_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_PAGE_PREFR_NAVGT_PKG" as
  procedure ajout_prefr_navgt (pnu_page in number,
                               pnu_page_ir in number);

  procedure suprm_prefr_navgt (pnu_seqnc in number);
end sie_13_page_prefr_navgt_pkg;
/

Prompt Package SIE_13_PREFR_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_PREFR_PKG" as
  gva_valr                                varchar2 (4000);

  procedure sauvg_prefr_page (pnu_ref_aplic in number default null,
                              pnu_numr_page_apex in number default null);

  procedure charg_prefr_page (pnu_ref_aplic in number default null,
                              pnu_numr_page_apex in number default null);

  procedure sauvg_prefr (pnu_ref_prefr in number,
                         pva_valr in varchar2);

  function obten_boutn_actio_prefr
    return varchar2;
end sie_13_prefr_pkg;
/

Prompt Package SIE_13_RAPRT_INTER_CU_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_13_raprt_inter_cu_pkg
  authid current_user is
  type typ_seqnc_reprt_courn is table of number (10);

  --Important : la vue vs_sie_13_seqnc_ir_courn doit être déployée dans le schéma de l'application
  procedure defnr_ir_specf (pnu_page_apex in number,
                            pva_code_ir in varchar2 default null);

  function obten_seqnc_raprt_courn
    return typ_seqnc_reprt_courn
    pipelined;
end sie_13_raprt_inter_cu_pkg;
/

Prompt Package SIE_13_REGN_PILTB_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_REGN_PILTB_PKG" as
  function obten_contn_page_courn (pva_code in varchar2,
                                   pva_code_lang in varchar2 default null,
                                   pva_indic_etend_page_zero in varchar2 default 'N')
    return clob;

  procedure afich_contn_page_courn (pva_code in varchar2,
                                    pva_code_lang in varchar2 default null,
                                    pva_indic_etend_page_zero in varchar2 default 'N');

  function obten_contn_aide_page (pnu_page in number,
                                  pnu_lang in number)
    return clob;

  procedure afich_contn_aide_page (pnu_page in number,
                                   pnu_lang in number);
end sie_13_regn_piltb_pkg;
/

Prompt Package SIE_13_RESRC_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_13_resrc_pkg as
  function obten_chemn_resrc (pva_propr in varchar2,                                           --PRODT|STRUC_APLIC|PLUGN
                              pva_code_resrc in varchar2,
                              pva_code_formt in varchar2,
                              pva_code_ocurn in varchar2 default null)
    return varchar2;
end sie_13_resrc_pkg;
/

Prompt Package SIE_14_DOMN_VALR_CU_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_14_domn_valr_cu_pkg
  authid current_user as
  function obten_valr (pva_code_domn in varchar2,
                       pva_code_valr in varchar2,
                       pva_code_prodt in varchar2 default null)
    return varchar2;
end sie_14_domn_valr_cu_pkg;
/

Prompt Package SIE_14_DOMN_VALR_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_14_DOMN_VALR_PKG" as
  gbo_copie_domn                          boolean default false;

  type rec_valr is record
  (
    code_valr                               varchar2 (23),
    valr                                    varchar2 (2000)
  );

  type table_rec_valr is table of rec_valr;

  function obten_valr (pnu_seqnc_valr in number)
    return varchar2
    result_cache;

  function obten_valr_court (pnu_seqnc_valr in number)
    return varchar2
    result_cache;

  function obten_code (pnu_seqnc_valr in number)
    return varchar2
    result_cache;

  function obten_code_parnt (pnu_seqnc_valr in number)
    return varchar2
    result_cache;

  function obten_seqnc (pva_code_domn in varchar2,
                        pva_code_valr in varchar2,
                        pva_code_prodt in varchar2 default null)
    return number;

  function obten_valr (pva_code_domn in varchar2,
                       pva_code_valr in varchar2,
                       pva_code_prodt in varchar2 default null)
    return varchar2;

  function obten_valr_organ (pnu_seqnc_valr in number)
    return varchar2
    result_cache;

  function copr_domn_valr (pnu_domn_a_copr in number,
                           pnu_prodt_sourc in number default null,
                           pnu_prodt_destn in number default null)
    return number;

  function obten_enonc_sql (pnu_seqnc_domn_valr in number)
    return varchar2;

  function obten_table_valr (pnu_seqnc_domn_valr in number)
    return table_rec_valr
    pipelined;
end sie_14_domn_valr_pkg;
/

Prompt Package SIE_14_FORMT_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_14_FORMT_PKG" as
  function to_char2 (pnu_valr in number,
                     pva_formt in varchar2)
    return varchar2;

  function to_number2 (pva_valr in varchar2,
                       pva_formt in varchar2 default null)
    return number;

  function obten_seqnc (pva_defnt_formt in varchar2,
                        pva_code_prodt in varchar2 default sie_11_prodt_pkg.obten_code_prodt)
    return number;
end sie_14_formt_pkg;
/

Prompt Package SIE_15_AJAX_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_15_AJAX_PKG" as
  procedure obten_json_sql (pva_sql in varchar2);
end sie_15_ajax_pkg;
/

Prompt Package SIE_15_FTP_NOYAU_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_15_ftp_noyau_pkg
  authid current_user as
    /*
     *
     *  PL/SQL FTP Client
     *
*  Composite code built from a variety of sources and research
     *  Barry Chase (bsc7080mqc@myoracleportal.com)
     *  Original Version March 2002
     *  Last Update Sep 2006
     *
     *  Current Version 3.1.2
     *
     *
     *  OVERVIEW
     *  --------------------
     *  This package uses the standard packages UTL_FILE and UTL_TCP, along with LOBs to perform
     *  client-side FTP functionality as defined in the World Wide Web Consortium's RFC 959
     *  document - http://www.w3.org/Protocols/rfc959/
     *
     *  Works with PASV ftp connections only
     *
     *  The procedures and functions in this package allow single file transfer using
     *  standard TCP/IP connections.
     *
     *  LIMITATIONS
     *  --------------------
     *   Requires Oracle DB 9.2.x.x due to usage of UTL_FILE.READ_RAW and WRITE_RAW
     *
     *  USAGE
     *  --------------------
     *  Four primary functions are available for FTP - PUT, GET, RENAME, REMOVE
     *
     *  The PUT and GET functions are included for convenience to FTP one file at a time.
     *  REMOVE function deletes a file from a remote server.
     *  RENAME function renames a file on a remote server.
     *  LS and DIR functions provide remote directory listings
*  RMDIR and MKDIR functions provide directory creation/removal
*  VERIFY_SERVER function allows you to verify server up/down status as well as validate path
     *
     *  CREDITS
     *  --------------------
     *
     *  This package was developed through an initial 2 years of research. I have reviewed
     *  any number of partial and complete ftp solutions. None of them had everything that
     *  I desired. None of them worked exactly as hoped. Improvements have continued since then.
     *
     *  Good example is where the solution provided by Timothy Hall, which answered the question
     *  on how to read files from the filesystem into a LOB. His method worked, however there
     *  were some limitations, but an excellent beginning.
     *
     *  With this knowledge, I was able to implement binary support in the package where it had not
     *  previously been available.
     *
     *  Added MVS mainframe support as well, which was a limitation at first.
     *
     *  However, I still feel its important to give proper credit to those who have made their work public.
     *
     * --
     *  FTP_INTERFACE package created by Russ Johnson. rjohnson@braunconsult.com
     *   http://www.braunconsult.com
     *
     *  Much of the PL/SQL code in this package was based on Java code written by
     *  Bruce Blackshaw of Enterprise Distributed Technologies Ltd.  None of that code
     *  was copied, but the objects and methods greatly helped my understanding of the
     *  FTP Client process.
     *
     *  http://www.enterprisedt.com
     * --
     *
     * --
     *  Technical article wrriten by Dmitry Bouzolin. dbouzolin@yahoo.com
     *     http://www.quest-pipelines.com/newsletter-v3/0302_C.htm
     * --
     *
     * --
     *  FTP package created by Timothy Hall
     *  http://www.oracle-base.com/articles/9i/FTPFromPLSQL9i.php
     * --
     *
     * --
     *  FTP command reference
     *   http://cr.yp.to/ftp.html
     * --
     *
     * --
     *  Ask Tom - Oracle Forum
     *   http://asktom.oracle.com

     * --
     * Paul James donated support for LIST and NLIST commands
     * http://daemoncoder.blogspot.com/
     * http://technology.amis.nl/blog/1247/implementing-an-ftp-server-in-plsql
     *
     * --
     * --
     *  The W3C's RFC 959 that describes the FTP process.
     *  http://www.w3c.org
     * --
     *
     *
  */
  --
  --
  --
  -- Declarations
  --
  -- FTP_DEBUG flag
  --
  -- Use this flag to produce some additional
  -- dbms_output to analyze issues with the operations
  -- or enhance with additional features
  --
  --
  l_ftp_debug                             char (1) := 'N';
  --
  -- /* UTL_TCP Connection */
  u_data_con                              utl_tcp.connection;
  u_ctrl_con                              utl_tcp.connection;
  /* LOB  placeholders */
  --
  -- We use these to hold LOBs when working with
  -- the get_clob/get_blob and put_clob/put_blob and
  -- dir_clob and ls_clob
  --
  g_data_b                                blob;
  g_data_c                                clob;
  /*
   * Timeout
   *
  */
  --
  -- This controls the tcp connection itself.
  -- if it goes beyond this setting, then the connection
  -- will be terminated. You will get an error
  -- that says something to the effect that there
  -- was a TNS Network error
  --
  tx_timeout                              pls_integer := 240;
  -- 240 seconds := 4 minutes
  /*
   * Mainframe
  */
  --
  -- Right now this code supports mainframe (MVS systems)
  -- the presumption is that the server codes should be
  -- valid for other mainframe O/S setups. You may have
  -- test validate this for your environment
  --
  mainframe_connection                    boolean := false;
  mainframe_cmd                           varchar2 (32000);
  /*
   * System Type :: Get type using SYST command
  */
  --
  -- This is used within our code to control
  -- how remote directory listings are listed
  -- specifically regarding the headers above the
  -- directory listings.
  --
  -- It is conceivable that you could leverage
  -- the system type for other purposes.
  --
  v_system_type                           varchar2 (1000);
  v_system_type_reply                     varchar2 (1000);
  /*
   * Operation Mode
  *
  * LOB or FILE
  *
  * LOB means we will be inputing/outputing information as CLOB/BLOB
  * as opposed to FILE which is working with the local filesystem directly
  *
  */
  v_operation_mode                        varchar2 (10) := 'FILE';
  /**
   * Exceptions
   *
   */
  ctrl_exception                          exception;
  data_exception                          exception;
  /**
   * Constants - FTP valid response codes
   *
* These are pretty much the standard return codes
* for FTP servers. If you find that your return codes
* are different, then you will need to alter these codes
* accordingly.
*
   */
  --
  -- These define successful return codes
  -- if we receive codes different from these
  -- then we assume something did not go right
  --
  connect_code                   constant pls_integer := 220;
  user_code                      constant pls_integer := 331;
  login_code                     constant pls_integer := 230;
  pwd_code                       constant pls_integer := 257;
  pasv_code                      constant pls_integer := 227;
  cwd_code                       constant pls_integer := 250;
  mkd_code                       constant pls_integer := 257;
  rmd_code                       constant pls_integer := 250;
  --
  tsfr_start_code1               constant pls_integer := 125;
  tsfr_start_code2               constant pls_integer := 150;
  tsfr_end_code                  constant pls_integer := 226;
  tsfr_end_code_mf               constant pls_integer := 250;
  -- Had to add this code (tsfr_end_code_mf) because our mainframe success code was 250 and not 226 --
  quit_code                      constant pls_integer := 221;
  syst_code                      constant pls_integer := 215;
  type_code                      constant pls_integer := 200;
  delete_code                    constant pls_integer := 250;
  rnfr_code                      constant pls_integer := 350;
  rnto_code                      constant pls_integer := 250;
  site_code                      constant pls_integer := 200;
  noop_code                      constant pls_integer := 200;

  --

  /**
   * FTP File record datatype
   *
   * Elements:
   * localpath - local path is defined as the DBA Directories defined
   *             exception to this is when we are performing CLOB/BLOB
   *             operations instead of filesystem operations.
   * filename - filename and extension for the file to be received or sent
   * remotepath - full directory name in which the local file will be sent or the
   *            remote file exists.  Should be in UNIX format regardless of FTP server - '/one/two/three'
   * filetype - 'ASCII' or 'BINARY'
   * transfer_mode - 'PUT', 'GET', etc.
   * status - status of the transfer.  'ERROR' or 'SUCCESS'
   * error_message - meaningful (hopefully) error message explaining the reason for failure
   * bytes_transmitted - how many bytes were sent/received
   * trans_start - date/time the transmission started
   * trans_end - date/time the transmission ended
   *
   */
  type r_ftp_rec is record
  (
    localpath                               varchar2 (255),
    filename                                varchar2 (255),
    remotepath                              varchar2 (255),
    filetype                                varchar2 (20),
    transfer_mode                           varchar2 (30),
    status                                  varchar2 (40),
    error_message                           varchar2 (255),
    bytes_transmitted                       number,
    trans_start                             date,
    trans_end                               date
  );

  /**
   * FTP File Table - used to store many files for transfer
   *
   */
  type t_ftp_rec is table of r_ftp_rec
                      index by binary_integer;

  /*Bruno-Pierre Privé*/
  type typ_fichr is record
  (
    type_fichr                              varchar2 (1),
    nom                                     varchar2 (255),
    tail                                    number,
    date_modfc                              date
  );

  type type_tab_fichr is table of typ_fichr
                           index by pls_integer;

  t_fichr                                 type_tab_fichr;

  procedure mode_fichr (pbo_ecrir_dirct in boolean);

  --
  -- CREATE_PASV
  --
  -- Create the passive host IP and port number to connect to
  --
  procedure create_pasv (p_pasv_cmd in varchar2,
                         p_pasv_host   out varchar2,
                         p_pasv_port   out number);

  --
  -- VALIDATE_REPLY
  --
  -- Read a single or multi-line reply from the FTP server and VALIDATE
  -- it against the code passed in p_code.
  --
  -- Return TRUE if reply code matches p_code, FALSE if it doesn't or error
  -- occurs
  --
  -- Send full server response back to calling procedure
  --
  function validate_reply (p_ctrl_con in out utl_tcp.connection,
                           p_code in pls_integer,
                           p_reply   out varchar2)
    return boolean;

  --
  -- VALIDATE_REPLY
  --
  -- Read a single or multi-line reply from the FTP server and VALIDATE
  -- it against the code passed in p_code.
  --
  -- Return TRUE if reply code matches p_code1 or p_code2, FALSE if it doesn't or error
  -- occurs
  --
  -- Send full server response back to calling procedure
  --
  function validate_reply (p_ctrl_con in out utl_tcp.connection,
                           p_code1 in pls_integer,
                           p_code2 in pls_integer,
                           p_reply   out varchar2)
    return boolean;

  --
  -- TRANSFER_DATA
  --
  -- Handles actual data transfer.  Responds with status, error message, and
  -- transfer statistics.
  --
  -- Potential errors could be with connection or file i/o
  --
  procedure transfer_data (u_ctrl_connection in out utl_tcp.connection,
                           p_localpath in varchar2,
                           p_filename in varchar2,
                           p_filetype in varchar2,
                           p_pasv_host in varchar2,
                           p_pasv_port in pls_integer,
                           p_transfer_mode in varchar2,
                           v_status   out varchar2,
                           v_error_message   out varchar2,
                           n_bytes_transmitted   out number,
                           d_trans_start   out date,
                           d_trans_end   out date);

  --
  --
  -- FTP_FILES_STAGE
  --
  -- Handles connection to remote server and initial remote server commands
  --
  --
  --    * Function to handle FTP of files.
  --    * Returns TRUE if no batch-level errors occur.
  --    * Returns FALSE if a batch-level error occurs.
  --    *
  --    * Parameters:
  --    *
  --    * p_error_msg - error message for batch level errors
  --    * p_files - FTP_INTERFACE.t_ftp_rec table type.  Accepts
  --    *           list of files to be transferred
  --    *           returns the table updated with transfer status, error message,
  --    *           bytes_transmitted, transmission start date/time and transmission end
  --    *           date/time
  --    * p_username - username for FTP server
  --    * p_password - password for FTP server
  --    * p_hostname - hostname or IP address of server Ex: 'ftp.oracle.com' or '127.0.0.1'
  --    * p_port - port number to connect on.  FTP is usually on 21, but this may be overridden
  --    *          if the server is configured differently.
  --
  function ftp_files_stage (p_error_msg   out varchar2,
                            p_files in out t_ftp_rec,
                            p_username in varchar2,
                            p_password in varchar2,
                            p_hostname in varchar2,
                            p_port in pls_integer default 21)
    return boolean;

  --
  -- GET_LOCAL_BINARY_DATA
  --
  -- Load local binary file into BLOB
  --
  function get_local_binary_data (p_dir in varchar2,
                                  p_file in varchar2)
    return blob;

  --
  -- GET_REMOTE_BINARY_DATA
  --
  -- Loads remote binary file into BLOB
  --
  function get_remote_binary_data (u_ctrl_connection in out utl_tcp.connection)
    return blob;

  --
  -- GET_REMOTE_ASCII_DATA
  --
  -- Loads remote ascii file into CLOB
  --
  -- Note, we do not have a GET_LOCAL_ASCII_DATA because that code
  -- is found within the TRANSFER_DATA routine itself using UTL_FILE.GET_LINE
  -- operations
  --
  function get_remote_ascii_data (u_ctrl_connection in out utl_tcp.connection)
    return clob;

  --
  -- GET_REMOTE_LISTING_DATA
  --
  -- This is used for obtaining a remote directory listing
  -- and loading up into a CLOB
  --
  function get_remote_listing_data (u_ctrl_connection in out utl_tcp.connection,
                                    p_filename_filter in varchar2,
                                    p_tsfr_mode in varchar2)
    return clob;

  --
  -- PUT_LOCAL_BINARY_DATA
  --
  -- This is used to write out a BLOB
  -- to the local filesystem after
  -- retrieving data from remote server
  --
  procedure put_local_binary_data (p_data in blob,
                                   p_dir in varchar2,
                                   p_file in varchar2);

  --
  -- PUT_REMOTE_BINARY_DATA
  --
  -- This is used for upload BLOB
  -- to remote server after retrieving
  -- from local filesystem or passed
  -- via parameter as a BLOB e.g. PUT_BLOB function
  -- in this package.
  --
  procedure put_remote_binary_data (u_ctrl_connection in out utl_tcp.connection,
                                    p_data in blob);

  --
  -- PUT_REMOTE_ASCII_DATA
  --
  -- This is used for upload CLOB
  -- to remote server after retrieving
  -- when passed via parameter as a
  -- CLOB e.g. PUT_BLOB function in this package.
  --
  procedure put_remote_ascii_data (u_ctrl_connection in out utl_tcp.connection,
                                   p_data in clob);

  /**
   * Convenience function for single-file PUT
   *
   * Parameters:
   * localpath - local path is defined as the DBA Directories defined
   * p_filename - filename and extension for the file to be received or sent
   * p_remotepath - full directory name in which the local file will be sent or the
   *            remote file exists.  Should be in UNIX format regardless of FTP server - '/one/two/three'
   * p_username - username for FTP server
   * p_password - password for FTP server
   * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
   * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
   * v_error_message - meaningful (hopefully) error message explaining the reason for failure
   * n_bytes_transmitted - how many bytes were sent/received
   * d_trans_start - date/time the transmission started
   * d_trans_end - date/time the transmission ended
   * p_port - port number to connect to, default is 21
   * p_filetype - Default to ASCII but optionally can be BINARY
   * p_mainframe_ftp - Default FALSE. If target server is Mainframe MVS, must be TRUE.
  * p_mainframe_cmd - If Mainframe parm is TRUE, then this must have a value
  *                 For file transfers this would be the site command to define file layout
   */
  function put (p_localpath in varchar2,
                p_filename in varchar2,
                p_remotepath in varchar2,
                p_username in varchar2,
                p_password in varchar2,
                p_hostname in varchar2,
                v_status   out varchar2,
                v_error_message   out varchar2,
                n_bytes_transmitted   out number,
                d_trans_start   out date,
                d_trans_end   out date,
                p_port in pls_integer default 21,
                p_filetype in varchar2 := 'ASCII',
                p_mainframe_ftp in boolean default false,
                p_mainframe_cmd in varchar2 default null)
    return boolean;

  /**
   * Convenience function for single-file GET
   *
   * Parameters:
   * localpath - local path is defined as the DBA Directories defined
   * p_filename - filename and extension for the file to be received or sent
   * p_remotepath - full directory name in which the local file will be sent or the
   *            remote file exists.  Should be in UNIX format regardless of FTP server - '/one/two/three'
   * p_username - username for FTP server
   * p_password - password for FTP server
   * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
   * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
   * v_error_message - meaningful (hopefully) error message explaining the reason for failure
   * n_bytes_transmitted - how many bytes were sent/received
   * d_trans_start - date/time the transmission started
   * d_trans_end - date/time the transmission ended
   * p_port - port number to connect to, default is 21
   * p_filetype - Default to ASCII but optionally can be BINARY
   * p_mainframe_ftp - Default FALSE. If target server is Mainframe MVS, must be TRUE.
  * p_mainframe_cmd - If Mainframe parm is TRUE, then this must have a value
  *                 For file transfers this would be the site command to define file layout
   */
  function get (p_localpath in varchar2,
                p_filename in varchar2,
                p_remotepath in varchar2,
                p_username in varchar2,
                p_password in varchar2,
                p_hostname in varchar2,
                v_status   out varchar2,
                v_error_message   out varchar2,
                n_bytes_transmitted   out number,
                d_trans_start   out date,
                d_trans_end   out date,
                p_port in pls_integer default 21,
                p_filetype in varchar2 := 'ASCII',
                p_mainframe_ftp in boolean default false,
                p_mainframe_cmd in varchar2 default null)
    return boolean;

  /**
  * Convenience function for single-file DELETE
  *
  * Parameters:
  * p_localpath - Value will be NULL as it does not apply
  * p_filename - filename and extension for the file to be deleted on remote server
  * p_remotepath - full directory name in which the remote file exists.
 * Should be in UNIX format regardless of FTP server - '/one/two/three'
  * p_username - username for FTP server
  * p_password - password for FTP server
  * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
  * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
  * v_error_message - meaningful (hopefully) error message explaining the reason for failure
  * n_bytes_transmitted - how many bytes were sent/received
  * d_trans_start - date/time the transmission started
  * d_trans_end - date/time the transmission ended
  * p_port - port number to connect to, default is 21
  * p_filetype - Default to BINARY. Value is ignored during process.
  * p_mainframe_connection - Default FALSE. If target server is Mainframe MVS, must be TRUE.
  */
  function remove (p_localpath in varchar2,
                   p_filename in varchar2,
                   p_remotepath in varchar2,
                   p_username in varchar2,
                   p_password in varchar2,
                   p_hostname in varchar2,
                   v_status   out varchar2,
                   v_error_message   out varchar2,
                   n_bytes_transmitted   out number,
                   d_trans_start   out date,
                   d_trans_end   out date,
                   p_port in pls_integer default 21,
                   p_filetype in varchar2 := 'BINARY',
                   p_mainframe_connection in boolean default false)
    return boolean;

  /**
   * Convenience function for single-file  RENAME
   *
   * Parameters:
   * p_localpath - Value will be NULL as it does not apply
   * p_filename - Concatenated value of filename.ext | new_filename.ext on remote server
   * p_remotepath - full directory name in which the remote file exists.
  * Should be in UNIX format regardless of FTP server - '/one/two/three'
   * p_username - username for FTP server
   * p_password - password for FTP server
   * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
   * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
   * v_error_message - meaningful (hopefully) error message explaining the reason for failure
   * n_bytes_transmitted - how many bytes were sent/received
   * d_trans_start - date/time the transmission started
   * d_trans_end - date/time the transmission ended
   * p_port - port number to connect to, default is 21
   * p_filetype - Default to BINARY. Value is ignored during process.
   * p_mainframe_connection - Default FALSE. If target server is Mainframe MVS, must be TRUE.
   */
  function rename (p_localpath in varchar2,
                   p_filename in varchar2,
                   p_remotepath in varchar2,
                   p_username in varchar2,
                   p_password in varchar2,
                   p_hostname in varchar2,
                   v_status   out varchar2,
                   v_error_message   out varchar2,
                   n_bytes_transmitted   out number,
                   d_trans_start   out date,
                   d_trans_end   out date,
                   p_port in pls_integer default 21,
                   p_filetype in varchar2 := 'BINARY',
                   p_mainframe_connection in boolean default false)
    return boolean;

  /**
   * Convenience function for single-file  VERIFY_SERVER
   *
   * Parameters:
   * p_remotepath - full directory name you wish to verify along with server up/down status
   *              Should be in UNIX format regardless of FTP server - '/one/two/three'
   * p_username - username for FTP server
   * p_password - password for FTP server
   * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
   * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
   * v_error_message - meaningful (hopefully) error message explaining the reason for failure
   * p_port - port number to connect to, default is 21
   * p_filetype - Default to BINARY. Value is ignored during process.
   * p_mainframe_connection - Default FALSE. If target server is Mainframe MVS, must be TRUE.
   */
  function verify_server (p_remotepath in varchar2,
                          p_username in varchar2,
                          p_password in varchar2,
                          p_hostname in varchar2,
                          v_status   out varchar2,
                          v_error_message   out varchar2,
                          p_port in pls_integer default 21,
                          p_filetype in varchar2 := 'BINARY',
                          p_mainframe_connection in boolean default false)
    return boolean;

  /**
  * Convenience function for DIR - Long listing providing all details
  *
  * Parameters:
   * localpath - local path is defined as the DBA Directories defined
  * p_filename_filter - Pass nothing for all files to be displayed, or filename. Wildcard * allowed.
  * p_dir_filename     - Filename of Directory listing retrieved from remote server
  * p_remotepath - full directory name to get a list of files from
  *            Should be in UNIX format regardless of FTP server - '/one/two/three'
  * p_username - username for FTP server
  * p_password - password for FTP server
  * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
  * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
  * v_error_message - meaningful (hopefully) error message explaining the reason for failure
  * n_bytes_transmitted - how many bytes were sent/received
  * d_trans_start - date/time the transmission started
  * d_trans_end - date/time the transmission ended
  * p_port - port number to connect to, default is 21
  * p_filetype - Default to ASCII but optionally can be BINARY
  * p_mainframe_ftp - Default FALSE. If target server is Mainframe MVS, must be TRUE.
  */
  function dir (p_localpath in varchar2,
                p_filename_filter in varchar2 default null,
                p_dir_filename in varchar2 default 'remotedir_list.txt',
                p_remotepath in varchar2,
                p_username in varchar2,
                p_password in varchar2,
                p_hostname in varchar2,
                v_status   out varchar2,
                v_error_message   out varchar2,
                n_bytes_transmitted   out number,
                d_trans_start   out date,
                d_trans_end   out date,
                p_port in pls_integer default 21,
                p_filetype in varchar2 := 'ASCII',
                p_mainframe_ftp in boolean default false)
    return boolean;

    /**
* Convenience function for LS - Short listing only filenames
*
* Parameters:
 * localpath - local path is defined as the DBA Directories defined
* p_filename_filter - Pass nothing for all files to be displayed, or filename. Wildcard * allowed.
* p_dir_filename     - Filename of Directory listing retrieved from remote server
* p_remotepath - full directory name to get a list of files from
*            Should be in UNIX format regardless of FTP server - '/one/two/three'
* p_username - username for FTP server
* p_password - password for FTP server
* p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
* v_status - status of the transfer.  'ERROR' or 'SUCCESS'
* v_error_message - meaningful (hopefully) error message explaining the reason for failure
* n_bytes_transmitted - how many bytes were sent/received
* d_trans_start - date/time the transmission started
* d_trans_end - date/time the transmission ended
* p_port - port number to connect to, default is 21
* p_filetype - Default to ASCII but optionally can be BINARY
* p_mainframe_ftp - Default FALSE. If target server is Mainframe MVS, must be TRUE.
*/
  function ls (p_localpath in varchar2,
               p_filename_filter in varchar2 default null,
               p_dir_filename in varchar2 default 'remotedir_list.txt',
               p_remotepath in varchar2,
               p_username in varchar2,
               p_password in varchar2,
               p_hostname in varchar2,
               v_status   out varchar2,
               v_error_message   out varchar2,
               n_bytes_transmitted   out number,
               d_trans_start   out date,
               d_trans_end   out date,
               p_port in pls_integer default 21,
               p_filetype in varchar2 := 'ASCII',
               p_mainframe_ftp in boolean default false)
    return boolean;

  /*****************************************************************************
  **  Convenience function for single-file PUT
  **  Pass CLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function put_clob (p_filename in varchar2,
                     p_clob in clob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean;

  /*****************************************************************************
  **  Convenience function for single-file GET
  **  Pass CLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function get_clob (p_filename in varchar2,
                     p_clob   out clob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean;

  /*****************************************************************************
  **  Convenience function for single-file PUT
  **  Pass BLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function put_blob (p_filename in varchar2,
                     p_blob in blob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean;

  /*****************************************************************************
  **  Convenience function for single-file GET
  **  Pass BLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function get_blob (p_filename in varchar2,
                     p_blob   out blob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean;

  /*****************************************************************************
**  Convenience function for dir to local filename
**  Formats file information for ftp_files_stage function and calls it.
**
*****************************************************************************/
  function dir_clob (p_filename_filter in varchar2 default null,
                     p_clob   out clob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false)
    return boolean;

  /*****************************************************************************
  **  Convenience function for dir to local filename
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function ls_clob (p_filename_filter in varchar2 default null,
                    p_clob   out clob,
                    p_remotepath in varchar2,
                    p_username in varchar2,
                    p_password in varchar2,
                    p_hostname in varchar2,
                    v_status   out varchar2,
                    v_error_message   out varchar2,
                    n_bytes_transmitted   out number,
                    d_trans_start   out date,
                    d_trans_end   out date,
                    p_port in pls_integer default 21,
                    p_filetype in varchar2 := 'ASCII',
                    p_mainframe_ftp in boolean default false)
    return boolean;

  /**
   * Convenience function for create new directory command  MKDIR_REMOTE
   *
   * Parameters:
   * p_remotepath - full directory name in which you wish to switch to before creating new directory.
   *              Should be in UNIX format regardless of FTP server - '/one/two/three'
  * p_target_dir - Directory name you wish to create
   * p_username - username for FTP server
   * p_password - password for FTP server
   * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
   * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
   * v_error_message - meaningful (hopefully) error message explaining the reason for failure
   * p_port - port number to connect to, default is 21
   * p_mainframe_connection - Default FALSE. If target server is Mainframe MVS, must be TRUE.
   */
  function mkdir_remote (p_remotepath in varchar2,
                         p_target_dir in varchar2,
                         p_username in varchar2,
                         p_password in varchar2,
                         p_hostname in varchar2,
                         v_status   out varchar2,
                         v_error_message   out varchar2,
                         p_port in pls_integer default 21,
                         p_mainframe_connection in boolean default false)
    return boolean;

  /**
   * Convenience function for remove directory command RMDIR_REMOTE
   *
   * Parameters:
   * p_remotepath - full directory name in which you wish to switch to before removing a directory.
   *              Should be in UNIX format regardless of FTP server - '/one/two/three'
  * p_target_dir - Directory name you wish to create
   * p_username - username for FTP server
   * p_password - password for FTP server
   * p_hostname - FTP server IP address or host name Ex: 'ftp.oracle.com' or '127.0.0.1'
   * v_status - status of the transfer.  'ERROR' or 'SUCCESS'
   * v_error_message - meaningful (hopefully) error message explaining the reason for failure
   * p_port - port number to connect to, default is 21
   * p_mainframe_connection - Default FALSE. If target server is Mainframe MVS, must be TRUE.
   */
  function rmdir_remote (p_remotepath in varchar2,
                         p_target_dir in varchar2,
                         p_username in varchar2,
                         p_password in varchar2,
                         p_hostname in varchar2,
                         v_status   out varchar2,
                         v_error_message   out varchar2,
                         p_port in pls_integer default 21,
                         p_mainframe_connection in boolean default false)
    return boolean;
end sie_15_ftp_noyau_pkg;
/

Prompt Package SIE_15_FTP_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_15_ftp_pkg is
  /* THESE HAVE BEEN SETUP TO BE UTILIZED AS DIRECT CALLS VIA ORACLE APPLICATIONS */
  /* THEY RETURN FAILURE CODES APPROPRIATLY FOR USAGE IN REQUEST SETS AND PAGING ROUTINES */

  /* USE THIS PROCEDURE TO VERIFY THAT A SERVER AND PATH IS AVAILABLE */
  procedure verify_server (errbuf   out varchar2,
                           retcode   out number,
                           p_hostname in varchar2,
                           p_remotepath in varchar2,
                           p_username in varchar2,
                           p_password in varchar2,
                           p_mainframe_connection in varchar2 default 'F');

  /* USE THIS PROCEDURE TO COLLECT A REMOTE FILE TO THE DATABASE SERVER */
  /* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
  /* BINARY SUPPORTED */
  procedure get_remote_file (errbuf   out varchar2,
                             retcode   out number,
                             p_hostname in varchar2,
                             p_localpath in varchar2,
                             p_filename in varchar2,
                             p_remotepath in varchar2,
                             p_username in varchar2,
                             p_password in varchar2,
                             p_port in number default 21,
                             p_filetype in varchar2 default 'ASCII',
                             p_mainframe in varchar2 default 'F',
                             p_mainframe_command in varchar2 default null);

  function get_remote_file (p_filename in varchar2,
                            p_remotepath in varchar2,
                            p_hostname in varchar2,
                            p_username in varchar2,
                            p_password in varchar2,
                            p_port in number default 21,
                            p_filetype in varchar2 default 'BINARY')
    return blob;

  /* USE THIS PROCEDURE TO TRANSFER A LOCAL FILE TO A REMOTE SERVER LOCATION */
  /* BINARY SUPPORTED */
  /* IF BINARY, THEN LOCAL DIRECTORY MUST BE DEFINED AS DATABASE DIRECTORY */
  /* CONTACT DBA's TO VERIFY *?
  /* HINT : IT MIGHT BE A GOOD IDEA TO SETUP ALL XFER INTERFACE DIRECTORIES */
  procedure put_remote_file (errbuf   out varchar2,
                             retcode   out number,
                             p_hostname in varchar2,
                             p_localpath in varchar2,
                             p_filename in varchar2,
                             p_remotepath in varchar2,
                             p_username in varchar2,
                             p_password in varchar2,
                             p_filetype in varchar2 default 'ASCII',
                             p_mainframe in varchar2 default 'F',
                             p_mainframe_command in varchar2 default null);

  /* USE THIS PROCEDURE TO REMOVE A FILE FROM A REMOTE SERVER LOCATION */
  procedure remove_remote_file (errbuf   out varchar2,
                                retcode   out number,
                                p_hostname in varchar2,
                                p_filename in varchar2,
                                p_remotepath in varchar2,
                                p_username in varchar2,
                                p_password in varchar2,
                                p_mainframe in varchar2 default 'F');

  /* USE THIS PROCEDURE TO RENAME A FILE ON A REMOTE SERVER LOCATION */
  procedure rename_remote_file (errbuf   out varchar2,
                                retcode   out number,
                                p_hostname in varchar2,
                                p_filename in varchar2,
                                p_remotepath in varchar2,
                                p_username in varchar2,
                                p_password in varchar2,
                                p_mainframe in varchar2 default 'F');

  /* USE THIS PROCEDURE TO COLLECT A DIRECTORY LISTING */
  /* OF REMOTE SERVER TO A FILE ON THE LOCAL DATABASE SERVER */
  /* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
  --
  -- Only return filenames
  --
  procedure get_remote_dir_short (errbuf   out varchar2,
                                  retcode   out number,
                                  p_hostname in varchar2,
                                  p_localpath in varchar2,
                                  p_filename_filter in varchar2 default null,
                                  p_dir_filename in varchar2 default 'remotedir_list.txt',
                                  p_remotepath in varchar2,
                                  p_username in varchar2,
                                  p_password in varchar2,
                                  p_mainframe in varchar2 default 'F');

  /* USE THIS PROCEDURE TO COLLECT A DIRECTORY LISTING */
  /* OF REMOTE SERVER TO A FILE ON THE LOCAL DATABASE SERVER */
  /* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
  --
  -- Returns full detail (timestamps,permissions, filenames, filesizes,etc)
  --

  procedure get_remote_dir_long (errbuf   out varchar2,
                                 retcode   out number,
                                 p_hostname in varchar2,
                                 p_localpath in varchar2,
                                 p_filename_filter in varchar2 default null,
                                 p_dir_filename in varchar2 default 'remotedir_list.txt',
                                 p_remotepath in varchar2,
                                 p_username in varchar2,
                                 p_password in varchar2,
                                 p_port in number default 21,
                                 p_mainframe in varchar2 default 'F');


  /* Use this routine to return a failure code if not in production */
  /* This would be used as a first stage in a request set to ensure */
  /* a request set that includes the above FTP routines, that it    */
  /* it would not fire off if executed in a test instance.          */
  /*                                                                */
  /* It would require someone to skip the first step to make it the */
  /* request set run. However, in that event, they need to change   */
  /* the necessary parameters to control the correct user/password  */
  /* and server/path information                                    */
  /*                 */
  /* We have a custom package and table that we use to identify     */
  /* Production/QA/Test Instances. This data is used by shell       */
  /* scripts, PLSQL, etc. to alter behavior with respect to the     */
  /* Oracle environment. It ensures that we do not launch processes */
  /* in non-production environments, or if we wish them to launch   */
  /* how they launch (email addresses used, ftp servers used etc.)  */
  /* can be controlled. You could easily build something similar    */
  /*
     PROCEDURE is_not_prod (
        errbuf                     OUT      VARCHAR2
  ,     retcode                    OUT      NUMBER );

  */

  p_conn                                  utl_tcp.connection;
  v_parm_value                            varchar2 (4000);
  lvbusgroupid                            number;
  lbok                                    boolean;
  p_process_id                            pls_integer;
  p_sub_process_id                        pls_integer;
  p_from_name                             varchar2 (100);
  p_to_name                               varchar2 (4000);
  p_subject                               varchar2 (150);
  p_message                               varchar2 (32767);
  p_filename                              varchar2 (1000);
  p_priority                              char (1);
  p_path                                  varchar2 (1000);
  p_debug                                 char (1) := 'N';
  p_override                              varchar2 (4000);
  --
  -- p_database is populated by grabbing the SID of the current database
  --
  p_database                              varchar2 (100);
  --
  --   p_database                    VARCHAR2 ( 100 );
  --                                          := hum_time_tools.get_oracle_instance;
  p_database_string                       varchar2 (100) := ' - ' || p_database;

  type typ_fichr_sql is table of sie_15_ftp_noyau_pkg.typ_fichr;

  function list_dir_sql
    return typ_fichr_sql
    pipelined;
end sie_15_ftp_pkg;
/

Prompt Package SIE_15_HTP_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_15_HTP_PKG" as
  -- Écriture différée
  procedure ecrit_difr (pbo_ecrit_difr in boolean default true);

  procedure vider;

  procedure efect_subst (pcl_clob in out nocopy clob);

  function echap_atrib (pva_texte in varchar2)
    return varchar2;

  function echap_url (pva_texte in varchar2)
    return varchar2;

  function echap (pva_texte in varchar2,
                  pva_rempl_retr_br in varchar2 default 'N')
    return varchar2;

  procedure echap (pva_texte in varchar2                     /*,
                              pva_rempl_retr_br   in varchar2 default 'N'*/
                                        );

  procedure echap                                            /*(
                                               pva_rempl_retr_br   in varchar2 default 'N')*/
                 ;

  procedure ecrir (pva_ligne in varchar2,
                   pbo_retr in boolean default true);

  procedure ecrir;

  function obten (pbo_vider in boolean default true)
    return varchar2;

  function obten_arr (pbo_vider in boolean default true)
    return owa.vc_arr;

  function ouvri_bals (pva_nom in varchar2,
                       pva_parmt_1 in varchar2 default null,
                       pva_valr_1 in varchar2 default null,
                       pva_parmt_2 in varchar2 default null,
                       pva_valr_2 in varchar2 default null,
                       pva_parmt_3 in varchar2 default null,
                       pva_valr_3 in varchar2 default null,
                       pva_parmt_4 in varchar2 default null,
                       pva_valr_4 in varchar2 default null,
                       pva_parmt_5 in varchar2 default null,
                       pva_valr_5 in varchar2 default null,
                       pva_parmt_6 in varchar2 default null,
                       pva_valr_6 in varchar2 default null,
                       pva_parmt_7 in varchar2 default null,
                       pva_valr_7 in varchar2 default null,
                       pva_parmt_8 in varchar2 default null,
                       pva_valr_8 in varchar2 default null,
                       pva_parmt_9 in varchar2 default null,
                       pva_valr_9 in varchar2 default null,
                       pva_parmt_10 in varchar2 default null,
                       pva_valr_10 in varchar2 default null,
                       pva_extra in varchar2 default null)
    return varchar2;

  procedure ouvri_bals (pva_nom in varchar2,
                        pva_parmt_1 in varchar2 default null,
                        pva_valr_1 in varchar2 default null,
                        pva_parmt_2 in varchar2 default null,
                        pva_valr_2 in varchar2 default null,
                        pva_parmt_3 in varchar2 default null,
                        pva_valr_3 in varchar2 default null,
                        pva_parmt_4 in varchar2 default null,
                        pva_valr_4 in varchar2 default null,
                        pva_parmt_5 in varchar2 default null,
                        pva_valr_5 in varchar2 default null,
                        pva_parmt_6 in varchar2 default null,
                        pva_valr_6 in varchar2 default null,
                        pva_parmt_7 in varchar2 default null,
                        pva_valr_7 in varchar2 default null,
                        pva_parmt_8 in varchar2 default null,
                        pva_valr_8 in varchar2 default null,
                        pva_parmt_9 in varchar2 default null,
                        pva_valr_9 in varchar2 default null,
                        pva_parmt_10 in varchar2 default null,
                        pva_valr_10 in varchar2 default null,
                        pva_extra in varchar2 default null);

  function fermr_bals (pva_nom in varchar2)
    return varchar2;

  procedure fermr_bals (pva_nom in varchar2);

  function style (pva_parmt_1 in varchar2 default null,
                  pva_valr_1 in varchar2 default null,
                  pva_parmt_2 in varchar2 default null,
                  pva_valr_2 in varchar2 default null,
                  pva_parmt_3 in varchar2 default null,
                  pva_valr_3 in varchar2 default null,
                  pva_parmt_4 in varchar2 default null,
                  pva_valr_4 in varchar2 default null,
                  pva_parmt_5 in varchar2 default null,
                  pva_valr_5 in varchar2 default null,
                  pva_parmt_6 in varchar2 default null,
                  pva_valr_6 in varchar2 default null,
                  pva_parmt_7 in varchar2 default null,
                  pva_valr_7 in varchar2 default null,
                  pva_parmt_8 in varchar2 default null,
                  pva_valr_8 in varchar2 default null,
                  pva_parmt_9 in varchar2 default null,
                  pva_valr_9 in varchar2 default null,
                  pva_parmt_10 in varchar2 default null,
                  pva_valr_10 in varchar2 default null,
                  pva_extra in varchar2 default null)
    return varchar2;

  function bals_anchor (pva_url in varchar2,
                        pva_text in varchar2,
                        pva_parmt_1 in varchar2 default null,
                        pva_valr_1 in varchar2 default null,
                        pva_parmt_2 in varchar2 default null,
                        pva_valr_2 in varchar2 default null,
                        pva_parmt_3 in varchar2 default null,
                        pva_valr_3 in varchar2 default null,
                        pva_parmt_4 in varchar2 default null,
                        pva_valr_4 in varchar2 default null,
                        pva_parmt_5 in varchar2 default null,
                        pva_valr_5 in varchar2 default null,
                        pva_parmt_6 in varchar2 default null,
                        pva_valr_6 in varchar2 default null,
                        pva_parmt_7 in varchar2 default null,
                        pva_valr_7 in varchar2 default null,
                        pva_parmt_8 in varchar2 default null,
                        pva_valr_8 in varchar2 default null,
                        pva_parmt_9 in varchar2 default null,
                        pva_valr_9 in varchar2 default null,
                        pva_extra in varchar2 default null)
    return varchar2;

  function bals_image (pva_url in varchar2,
                       pva_parmt_1 in varchar2 default null,
                       pva_valr_1 in varchar2 default null,
                       pva_parmt_2 in varchar2 default null,
                       pva_valr_2 in varchar2 default null,
                       pva_parmt_3 in varchar2 default null,
                       pva_valr_3 in varchar2 default null,
                       pva_parmt_4 in varchar2 default null,
                       pva_valr_4 in varchar2 default null,
                       pva_parmt_5 in varchar2 default null,
                       pva_valr_5 in varchar2 default null,
                       pva_parmt_6 in varchar2 default null,
                       pva_valr_6 in varchar2 default null,
                       pva_parmt_7 in varchar2 default null,
                       pva_valr_7 in varchar2 default null,
                       pva_parmt_8 in varchar2 default null,
                       pva_valr_8 in varchar2 default null,
                       pva_parmt_9 in varchar2 default null,
                       pva_valr_9 in varchar2 default null,
                       pva_extra in varchar2 default null)
    return varchar2;

  procedure ecrir_clob (pcl_clob in out nocopy clob);
end sie_15_htp_pkg;
/

Prompt Package SIE_16_LOV_NOYAU_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_16_LOV_NOYAU_PKG" as
  function obten_lov_item (pnu_seqnc_item in number)
    return varchar2;
end;
/

Prompt Package SIE_16_LOV_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_16_LOV_PKG"
  authid current_user as
  gva_selct                               varchar2 (32500);
  gva_valr_rechr                          varchar2 (1000);
  gva_afich                               varchar2 (4000);

  function obten_valr_rechr
    return varchar2
    deterministic;

  function obten_afich_par_valr (pva_lov in varchar2,
                                 pva_valr in varchar2,
                                 pva_seprt in varchar2 default ':')
    return varchar2;

  function obten_lov_item (pnu_seqnc_item in number)
    return varchar2;
end;
/

Prompt Package SIE_16_VUE_PARMT_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_16_VUE_PARMT_PKG" is
  cursor cur_utils (pva_struc_aplic in varchar2,
                    pnu_membr_struc_admin in number,
                    pva_code_struc in varchar2,
                    gva_droit_acces in varchar2,
                    gva_droit_creat in varchar2,
                    gva_droit_modfc in varchar2,
                    gva_droit_suprs in varchar2,
                    gva_code_utils   out varchar2) is
    with gr_da as
           (select   ref_group_utils
              from   vd_i_sie_12_group_utils gu,
                     vd_i_sie_12_defnt_acces da,
                     vd_i_sie_12_struc_aplic sa
             where   (gva_droit_acces = 'N'
                   or (gva_droit_acces = 'O' and da.indic_acces != 'REFS' and da.indic_acces is not null))
                 and (gva_droit_creat = 'N'
                   or (gva_droit_creat = 'O' and da.indic_creat != 'REFS' and da.indic_creat is not null))
                 and (gva_droit_modfc = 'N'
                   or (gva_droit_modfc = 'O' and da.indic_modfc != 'REFS' and da.indic_modfc is not null))
                 and (gva_droit_suprs = 'N'
                   or (gva_droit_suprs = 'O' and da.indic_suprs != 'REFS' and da.indic_suprs is not null))
                 and sa.code = pva_struc_aplic
                 and gu.seqnc = da.ref_group_utils
                 and gu.code != 'SUPR_UTILS'
                 and sa.seqnc = da.ref_struc_aplic)
    select   st.nom nom_struc,
             ut.nom || ', ' || ut.prenm ref_utils_formt,
             ms.seqnc,
             ts.nom nom_type_struc,
             ut.code_utils
      from   vd_i_sie_12_utils ut,
             vd_i_sie_12_membr_struc ms,
             vd_i_sie_12_struc_admin st,
             vd_i_sie_12_type_struc ts,
             (select   distinct (lien_utils.ref_utils)
                from   sie_12_lien_group_utils lien_utils,
                       (select       ref_group_utils_lie
                              from   sie_12_lien_group_utils lgu
                        connect by   prior lgu.ref_group_utils_lie = lgu.seqnc
                                 and lgu.ref_utils is null
                                 and lgu.date_debut_efect <= sysdate
                                 and (lgu.date_fin_efect >= sysdate
                                   or lgu.date_fin_efect is null)
                        start with   exists
                                       (select   1
                                          from   gr_da
                                         where   lgu.ref_group in gr_da.ref_group_utils
                                             and lgu.ref_utils is null
                                             and lgu.date_debut_efect <= sysdate
                                             and (lgu.date_fin_efect >= sysdate
                                               or lgu.date_fin_efect is null))
                        union all
                        select   ref_group_utils ref_group
                          from   gr_da) group_utils
               where   lien_utils.ref_group = group_utils.ref_group_utils_lie
                   and lien_utils.ref_group_utils_lie is null
                   and lien_utils.date_debut_efect <= sysdate
                   and (lien_utils.date_fin_efect >= sysdate
                     or lien_utils.date_fin_efect is null)) utils
     where   utils.ref_utils = ut.seqnc
         and ut.seqnc = ms.ref_utils
         and (ut.date_expir >= sysdate
           or ut.date_expir is null)
         and ms.ref_struc_admin = st.seqnc
         and ms.date_debut_efect <= sysdate
         and (ms.date_fin_efect >= sysdate
           or ms.date_fin_efect is null)
         and (st.seqnc = (select   ref_struc_admin
                            from   vd_i_sie_12_membr_struc mss
                           where   mss.seqnc = pnu_membr_struc_admin)
           or pnu_membr_struc_admin is null)
         and (ts.code = pva_code_struc
           or pva_code_struc is null)
         and (ts.seqnc = st.ref_type_struc);

  type arr_typ_utils is table of cur_utils%rowtype;

  procedure creer_lov_utils_struc_aplic_1 (pva_struc_aplic in varchar2,
                                           pva_droit in varchar2,
                                           pnu_membr_struc_admin in number default null,
                                           pva_code_type_struc in varchar2 default null,
                                           pva_code_utils   out varchar2);

  function obten_lov_utils_struc_aplic
    return arr_typ_utils
    pipelined;

  function obten_membr_struc_de_code (pva_code in varchar2)
    return number;
end sie_16_vue_parmt_pkg;
/

Prompt Package SIE_17_ENVOI_COURL_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_17_ENVOI_COURL_PKG" as
  kva_destn_a                    constant varchar2 (10) default 'A';
  kva_destn_cc                   constant varchar2 (10) default 'CC';
  kva_destn_cci                  constant varchar2 (10) default 'CCI';
  kva_destn_uniq                 constant varchar2 (10) default 'UNIQ';

  subtype courl is binary_integer;

  subtype fil_atent is number (10);

  procedure defnr_servr (pva_servr in varchar2,
                         pnu_port in number default 25,
                         pva_domn in varchar2 default null);

  procedure creer (pva_nom_envoy in varchar2,
                   pva_adres_envoy in varchar2,
                   pva_sujet in varchar2,
                   pva_servr in varchar2 default null,
                   pnu_port in number default 25,
                   pva_domn in varchar2 default null,
                   pva_empla_walt in varchar2 default null,
                   pva_mot_passe_walt in varchar2 default null,
                   pbo_ssl in boolean default false);

  function creer (pva_nom_envoy in varchar2,
                  pva_adres_envoy in varchar2,
                  pva_sujet in varchar2,
                  pva_servr in varchar2 default null,
                  pnu_port in number default 25,
                  pva_domn in varchar2 default null,
                  pva_empla_walt in varchar2 default null,
                  pva_mot_passe_walt in varchar2 default null,
                  pbo_ssl in boolean default false)
    return courl;

  procedure defnr_courn (pco_courl in courl);

  function obten_courn
    return courl;

  procedure defnr_authe_simpl (pva_usagr in varchar2,
                               pva_mdp in varchar2);

  procedure formt_html;

  procedure ajout_destn (pva_nom in varchar2,
                         pva_adres in varchar2,
                         pva_type in varchar2 default kva_destn_a);

  procedure ajout_piece_joint (pbl_contn in blob,
                               pva_mime_type in varchar2,
                               pva_nom_fichr in varchar2);

  procedure ajout_ligne_corps (pva_ligne in varchar2,
                               pbo_saut_ligne in boolean default true);

  procedure ajout_corps (par_corps in owa.vc_arr);

  procedure debut_htp;

  procedure fin_htp;

  procedure anulr;

  function placr_fil_atent (pbo_efacr in boolean default true)
    return fil_atent;

  procedure placr_fil_atent (pbo_efacr in boolean default true);

  procedure envoy (pbo_envoi_difr in boolean default false);

  procedure envoy_fil_atent (pfa_fil_atent in fil_atent);

  procedure envoy_toute_fil_atent (pnu_envoi_max in number default 10);
end sie_17_envoi_courl_pkg;
/

Prompt Package SIE_17_ENVOI_TELCP_AXIAT_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_17_envoi_telcp_axiat_pkg as
  procedure envoy_telcp_simpl (pva_code_compt_axiat in varchar2,
                               pnu_a in number,
                               pva_destn_formt in varchar2,
                               pnu_domn in number,
                               pda_date_envo_difr in date default null);

  function envoy_telcp_simpl (pva_code_compt_axiat in varchar2,
                              pnu_a in number,
                              pva_destn_formt in varchar2,
                              pnu_domn in number,
                              pda_date_envo_difr in date default null)
    return number;

  procedure vider_file_atent (pva_code_compt_axiat in varchar2,
                              pnu_domn in number);

  procedure ajout_piece_joint (pnu_telcp_axiat in number,
                               pbl_contn in blob,
                               pnu_nombr_page in number,
                               pva_mime_type in varchar2,
                               pva_nom_fichr in varchar2);

  procedure termn_envoi (pnu_telcp_axiat in number);
end sie_17_envoi_telcp_axiat_pkg;
/

Prompt Package SIE_17_NOTFC_SMS_TWILIO_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_17_notfc_sms_twilio_pkg as
  type typ_arr_parmt is table of varchar2 (255)
                          index by pls_integer;

  type typ_arr_valr is table of varchar2 (255)
                         index by pls_integer;

  function obten_valr_iden (pva_iden in varchar2)
    return varchar2;

  procedure envoy_sms (pva_code_compt_twili in varchar2,
                       pnu_de in number,
                       pnu_a in number,
                       pva_mesg in varchar2,
                       pda_date_envo_difr in date default null);

  function envoy_sms (pva_code_compt_twili in varchar2,
                      pnu_de in number,
                      pnu_a in number,
                      pva_mesg in varchar2,
                      pda_date_envo_difr in date default null)
    return number;

  procedure vider_file_atent (pva_code_compt_twili in varchar2);

  procedure maj_file_atent (pva_code_compt_twili in varchar2);

  function obten_prix (pva_prix in varchar2)
    return number;

  procedure confr_stat_envoi (name_array in typ_arr_parmt,
                              value_array in typ_arr_valr);

  procedure recvr_sms (name_array in typ_arr_parmt,
                       value_array in typ_arr_valr);
end sie_17_notfc_sms_twilio_pkg;
/

Prompt Package SIE_17_PROFL_COURL_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_17_PROFL_COURL_PKG" as
  function obten_code (pnu_profl_courl in number)
    return varchar2;

  function obten_seqnc (pva_code_profl_courl in varchar2,
                        pva_code_domn in varchar2 default sie_12_domn_pkg.obten_code_domn_sesn)
    return number;

  procedure ajout_profl_courl_domn (pnu_domn_profl_courl in number,
                                    pnu_domn_cible in number);
end sie_17_profl_courl_pkg;
/

Prompt Package SIE_17_TRAVL_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_17_travl_pkg as
  procedure exect_envoi_sms;

  procedure exect_envoi_courl;

  procedure exect_envoi_telcp;
end sie_17_travl_pkg;
/

Prompt Package SIE_18_ITF_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_18_ITF_PKG" is
  procedure desct_forml_tablr;

  procedure defnr_ligne_titre (pva_code_titre in varchar2,
                               pva_type_champ in varchar2 default 'hidden');

  procedure cachr_champ (pva_code in varchar2,
                         pnu_declg in number,
                         pva_type_champ in varchar2 default 'hidden');
end sie_18_itf_pkg;
/

Prompt Package SIE_18_TABLR_FORM_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_18_TABLR_FORM_PKG" is
  function genr_html_color_pickr
    return varchar2;

  procedure obten_json_item_depsm;

  function obten_nom_coln_cle_primr
    return varchar2;
end sie_18_tablr_form_pkg;
/

Prompt Package SIE_19_BOUTN_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_19_BOUTN_PKG" as
  gbo_prise_charg                         boolean := false;

  gva_mesg_aide_contx                     varchar2 (4000);

  procedure defnr_varbl_sesn;
end sie_19_boutn_pkg;
/

Prompt Package SIE_19_CLE_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_19_CLE_PKG" as
  function obten_cle_formt (pnu_cle in number)
    return varchar2;
end sie_19_cle_pkg;
/

Prompt Package SIE_19_FONCT_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_19_FONCT_PKG" as
  function obten_nom_lang (pnu_fonct in number,
                           pnu_lang in number default null)
    return varchar2;

  function obten_descr_lang (pnu_fonct in number,
                             pnu_lang in number default null)
    return varchar2;

  function obten_afich_atrib (pnu_dispn_fonct in number,
                              pva_atrib in varchar2)
    return boolean;

  function obten_titre_atrib (pnu_dispn_fonct in number,
                              pnu_item_id in number)
    return varchar2;

  function obten_url_impre
    return varchar2;

  function obten_url_enreg_precd
    return varchar2;

  function obten_url_enreg_suivn
    return varchar2;

  function obten_url_premr_enreg
    return varchar2;

  function obten_url_dernr_enreg
    return varchar2;

  procedure obten_aide_cle_fonct (pnu_sidf in number,
                                  pnu_lang in number);

  function obten_fonct (pva_code in varchar2)
    return number;

  procedure desct_fonct (pva_code in varchar2);

  procedure obten_avert_fonct_non_dispn (pnu_sidf in number,
                                         pnu_lang in number);
end sie_19_fonct_pkg;
/

Prompt Package SIE_19_JAVSC_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_19_JAVSC_PKG" as
  gbo_prise_charg                         boolean;

  gva_fonct_javsc                         varchar2 (4000);

  function obten_furtr_indic_inter
    return varchar2;

  procedure ajout_scrip_charg;
end sie_19_javsc_pkg;
/

Prompt Package SIE_20_DOCMN_PKG;
/* Formatted on 04/12/2013 11:34:53 PM (QP5 v5.185.11230.41888) */
create or replace package sie_20_docmn_pkg as
  function obten_sect_simpl_docmn (pva_code_struc_aplic in varchar2,
                                   pnu_seqnc_struc_aplic in number,
                                   pva_code_sectn_docmn in varchar2)
    return varchar2;

  procedure creer_detl_docmn;

  function formt_propr_docmn (pnu_docmn in number)
    return varchar2;
end sie_20_docmn_pkg;
/

Prompt Package SIE_20_MODL_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_20_modl_pkg as
  function obten_indic (pva_valr in varchar2)
    return varchar2;

  procedure maj_modls_refrn (pnu_versn_prodt in number default null);

  function detrm_fonct (pva_nom_packg in varchar2,
                        pva_nom_objet in varchar2,
                        pnu_numr_surch in number)
    return boolean;

  function detrm_fonct_numbr (pva_nom_packg in varchar2,
                              pva_nom_objet in varchar2,
                              pnu_numr_surch in number)
    return number;

  function detrm_type_don (pva_type_don in varchar2)
    return number;

  function long_to_vc2 (pva_objet_id in varchar2,
                        pnu_subpr_id in number,
                        pnu_seqnc in number)
    return varchar2;

  function obten_modl_formt (pnu_seqnc in number)
    return varchar2;

  function obten_propr_sous_modl_formt (pnu_seqnc in number)
    return varchar2;

  function obten_modl_parmt_formt (pnu_seqnc in number)
    return varchar2;
end sie_20_modl_pkg;
/

Prompt Package SIE_21_ACTIO_DYNMQ_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_actio_dynmq_pkg
  authid current_user is
  type typ_code_plugn is table of varchar2 (30)
                           index by varchar2 (30);

  gta_code_plugn                          typ_code_plugn;
  gva_redrc_url_dynmq                     varchar2 (4000);
  kva_redrc_url_dynmq            constant varchar2 (30) default 'S_SIE_21_REDRC_URL_DYNMQ_FONCT';

  function valdr_prise_charg (pva_code_plugn in varchar2)
    return boolean;

  function obten_id_regn_afect (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return number;

  function obten_elemn_afect (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return varchar2;

  function obten_elemn_decln (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return varchar2;

  function genr_plugn_confr_sauvg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_plugn_confr_sauvg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_plugn_confr_sauvg_reint (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_sie_18_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_sie_18_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_plugn_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_plugn_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_plugn_navgt_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_plugn_gestn_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_plugn_popup_lov_ir (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_plugn_popup_lov_ir (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_plugn_cliqr_selct_texte (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_matrc_raprt_sql (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_group_entet_raprt_sql (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_group_entet_raprt_inter (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_boutn_jquer_ui (p_dynamic_action in apex_plugin.t_dynamic_action,
                                p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_raprt_sql_rang_drag (p_dynamic_action in apex_plugin.t_dynamic_action,
                                     p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_raprt_inter_rang_drag (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_afich_dialg_ifram (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_afich_dialg_ifram (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_fermr_dialg_ifram (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_afich_regn_dialg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_fermr_regn_dialg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_soumt_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_soumt_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_suprm_item_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_dml_obten_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                                p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_dml_obten_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                                p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_afich_mesg_procs (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_afich_mesg_procs (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_afich_mesg_infor (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_afich_mesg_infor (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_sie_13_menu_redrc (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_sie_13_menu_redrc (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_sie_13_aide_page_item (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_sie_13_aide_page_item (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_sie_13_aide_page (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_sie_13_aide_page (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_redrc_url (p_dynamic_action in apex_plugin.t_dynamic_action,
                           p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_redrc_url_dynmq (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_redrc_url_dynmq (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_trans_ident_coln_ir (p_dynamic_action in apex_plugin.t_dynamic_action,
                                     p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_pris_charg_navgt (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_sie_41_forml_repns (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_sie_41_forml_repns (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_sie_12_modfr_mot_passe (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_soumt_blob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_soumt_blob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;

  function genr_initl_comps (p_dynamic_action in apex_plugin.t_dynamic_action,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function genr_sie_21_navgt_enreg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result;

  function ajax_sie_21_navgt_enreg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result;
end sie_21_actio_dynmq_pkg;
/

Prompt Package SIE_21_AUTHE_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_authe_pkg
  authid current_user is
  function sentn (p_authentication in apex_plugin.t_authentication,
                  p_plugin in apex_plugin.t_plugin,
                  p_is_public_page in boolean)
    return apex_plugin.t_authentication_sentry_result;

  function authe_12_utils (p_authentication in apex_plugin.t_authentication,
                           p_plugin in apex_plugin.t_plugin,
                           p_password in varchar2)
    return apex_plugin.t_authentication_auth_result;

  function authe_11_utils (p_authentication in apex_plugin.t_authentication,
                           p_plugin in apex_plugin.t_plugin,
                           p_password in varchar2)
    return apex_plugin.t_authentication_auth_result;
end sie_21_authe_pkg;
/

Prompt Package SIE_21_AUTOR_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_autor_pkg
  authid current_user is
  function genr_autor_acces_page (p_authorization in apex_plugin.t_authorization,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_creat (p_authorization in apex_plugin.t_authorization,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_modfc (p_authorization in apex_plugin.t_authorization,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_suprs (p_authorization in apex_plugin.t_authorization,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_super_utils (p_authorization in apex_plugin.t_authorization,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_opert_dml (p_authorization in apex_plugin.t_authorization,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_admin_prodt (p_authorization in apex_plugin.t_authorization,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_admin_domn (p_authorization in apex_plugin.t_authorization,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;

  function genr_autor_devlp_prodt (p_authorization in apex_plugin.t_authorization,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result;
end sie_21_autor_pkg;
/

Prompt Package SIE_21_ITEM_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_item_pkg
  authid current_user is
  type typ_code_plugn is table of varchar2 (30)
                           index by varchar2 (30);

  gta_code_plugn                          typ_code_plugn;

  function valdr_prise_charg (pva_code_plugn in varchar2)
    return boolean;

  function genr_plugn_item_masq (p_item in apex_plugin.t_page_item,
                                 p_plugin in apex_plugin.t_plugin,
                                 p_value in varchar2,
                                 p_is_readonly in boolean,
                                 p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result;

  function genr_plugn_item_popup_lov_ir (p_item in apex_plugin.t_page_item,
                                         p_plugin in apex_plugin.t_plugin,
                                         p_value in varchar2,
                                         p_is_readonly in boolean,
                                         p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result;

  function genr_plugn_item_popup_arbor (p_item in apex_plugin.t_page_item,
                                        p_plugin in apex_plugin.t_plugin,
                                        p_value in varchar2,
                                        p_is_readonly in boolean,
                                        p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result;

  function genr_tokn_input (p_item in apex_plugin.t_page_item,
                            p_plugin in apex_plugin.t_plugin,
                            p_value in varchar2,
                            p_is_readonly in boolean,
                            p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result;

  function ajax_tokn_input (p_item in apex_plugin.t_page_item,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result;

  function genr_champ_rechr (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin,
                             p_value in varchar2,
                             p_is_readonly in boolean,
                             p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result;

  function ajax_champ_rechr (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result;

  function genr_plugn_chosn (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin,
                             p_value in varchar2,
                             p_is_readonly in boolean,
                             p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result;

  function ajax_plugn_chosn (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result;

  function genr_selct_2 (p_item in apex_plugin.t_page_item,
                         p_plugin in apex_plugin.t_plugin,
                         p_value in varchar2,
                         p_is_readonly in boolean,
                         p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result;

  function ajax_selct_2 (p_item in apex_plugin.t_page_item,
                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result;
end sie_21_item_pkg;
/

Prompt Package SIE_21_PLUGN_ARBRE_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_arbre_pkg
  authid current_user as
  type typ_rec_enreg_arbre is record
  (
    titre                                   varchar2 (200),
    type                                    varchar2 (30),
    valr                                    varchar2 (100),
    aide_insta                              varchar2 (200),
    titre_aide_insta                        varchar2 (200),
    lien                                    varchar2 (4000),
    id                                      varchar2 (100),
    id_parnt                                varchar2 (100),
    trier_par                               varchar2 (200)
  );

  type typ_table_rec_enreg_arbre is table of typ_rec_enreg_arbre;

  type typ_rec_confg_plugn is record
  (
    seqnc                                   number (10),
    enonc_pre_reqt                          varchar2 (4000),
    code                                    varchar2 (23),
    nom_table                               varchar2 (30),
    coln_titre                              varchar2 (30),
    coln_type                               varchar2 (30),
    coln_valr                               varchar2 (30),
    coln_titre_aide_insta                   varchar2 (30),
    coln_aide_insta                         varchar2 (30),
    coln_lien                               varchar2 (30),
    coln_id                                 varchar2 (30),
    coln_id_parnt                           varchar2 (30),
    enonc_condt                             varchar2 (400),
    indic_comnc_par_racn                    varchar2 (1),
    indic_comnc_par_coln_parnt_nul          varchar2 (1),
    enonc_condt_comnc_par                   varchar2 (400),
    enonc_trier_par                         varchar2 (400),
    indic_renmr                             varchar2 (1),
    indic_deplc                             varchar2 (1),
    image_sprit                             varchar2 (400),
    largr_regn_arbre                        number (10),
    hautr_regn_arbre                        number (10),
    item_noeud                              varchar2 (4000),
    obten_json_arbre_nombr_niv              number (10),
    obten_json_noeud_nombr_niv              number (10),
    mode_cache                              varchar2 (23),
    numr_page_apex                          number,
    indic_charg_progr                       varchar2 (1),
    nom_procd_glisr_elemn_arbre             varchar2 (92),
    nom_procd_depsr_elemn_arbre             varchar2 (92)
  );

  type typ_rec_glisr_elemn is record
  (
    vva_glisr_elemn                         varchar2 (4000),
    vva_depsr_elemn                         varchar2 (4000)
  );

  gre_glisr_elemn                         typ_rec_glisr_elemn;

  kva_s_noeud_actif              constant varchar2 (60) default 'S_SIE_12_ARBRE_NOEUD_ACTIF';

  function obten_enreg_confg_plugn (pnu_numr_apex_regn in number)
    return typ_rec_confg_plugn;

  procedure genr_json_arbre (pnu_numr_apex_regn in number);

  procedure genr_json_racn_arbre (pnu_numr_apex_regn in number);

  procedure genr_json_arbre_contx (pnu_numr_apex_regn in number);

  procedure genr_json_arbre_compl (pnu_numr_apex_regn in number);

  procedure genr_json_noeud (pnu_numr_apex_regn in number,
                             pva_noeud in varchar2);

  procedure actio_ouvri_noeud (pnu_numr_apex_regn in number,
                               pva_noeud in varchar2);

  procedure actio_fermr_noeud (pnu_numr_apex_regn in number,
                               pva_noeud in varchar2);

  procedure actio_selct_noeud (pnu_numr_apex_regn in number,
                               pva_noeud in varchar2);

  procedure actio_glisr_elemn_arbre (pnu_numr_apex_regn in number,
                                     pva_glisr_elemn in varchar2,
                                     pva_depsr_elemn in varchar2);

  procedure genr_json_type_noeud (pnu_numr_apex_regn in number);

  procedure initl_arbre (pnu_numr_apex_regn in number);

  procedure forcr_rafrc (pva_code in varchar2,
                         pnu_numr_page_apex in number,
                         pnu_utils in number default null);

  procedure rafrc_efect (pva_code in varchar2,
                         pnu_numr_page_apex in number,
                         pnu_utils in number default null,
                         pnu_numr_apex in number default sie_11_aplic_pkg.obten_numr_apex_aplic);

  function obten_chemn_resrc_simpl_noeud (pnu_noeud in number,
                                          pva_formt_bals_img in varchar2 default 'N')
    return varchar2;

  procedure bascl_arbre_sesn (pnu_numr_apex_regn in number);

  procedure creer_noeud_deft (pnu_seqnc in number);
end sie_21_plugn_arbre_pkg;
/

Prompt Package SIE_21_PLUGN_BLOB_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_blob_pkg is
  kva_nom_colct_blob             constant varchar2 (255) default 'CA_SIESOLUTIONS_SIE21_COLCT_BLOB';

  function obten_nom_colct
    return varchar2;

  procedure creer_colct;

  procedure suprm_colct;

  function colct_exist
    return boolean;

  procedure ajout_membr_colct (pva_nom_fichr in varchar2,
                               pva_mime_type in varchar2,
                               pbl_fichr in out nocopy blob);
end sie_21_plugn_blob_pkg;
/

Prompt Package SIE_21_PLUGN_CALND_COULR_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_calnd_coulr_pkg as
  function obten_image_aperc_coulr (pnu_ordre_presn in number,
                                    pva_libl in varchar2 default null,
                                    pva_titre in varchar2 default null)
    return varchar2;

  procedure defnr_css;
end sie_21_plugn_calnd_coulr_pkg;
/

Prompt Package SIE_21_PLUGN_CALND_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_calnd_pkg
  authid current_user as
  kva_s_mode                     constant varchar2 (60) default 'S_SIE_21_CALND_MODE';
  kva_s_date                     constant varchar2 (60) default 'S_SIE_21_CALND_DATE';
  kva_s_type_agend               constant varchar2 (60) default 'S_SIE_21_CALND_TYPE_AGEND';
  kva_s_selct_indic_journ_compl  constant varchar2 (60) default 'S_SIE_21_CALND_SELCT_INDIC_JOURN_COMPL';
  kva_s_selct_date_debut         constant varchar2 (60) default 'S_SIE_21_CALND_SELCT_DATE_DEBUT';
  kva_s_selct_date_fin           constant varchar2 (60) default 'S_SIE_21_CALND_SELCT_DATE_FIN';
  kva_s_choix_evenm_ident        constant varchar2 (60) default 'S_SIE_21_CALND_CHOIX_EVENM_IDENT';
  kva_s_deplc_ident              constant varchar2 (60) default 'S_SIE_21_CALND_DEPLC_EVENM_IDENT';
  kva_s_deplc_indic_journ_compl  constant varchar2 (60) default 'S_SIE_21_CALND_DEPLC_INDIC_JOURN_COMPL';
  kva_s_deplc_date_debut         constant varchar2 (60) default 'S_SIE_21_CALND_DEPLC_DATE_DEBUT';
  kva_s_deplc_date_fin           constant varchar2 (60) default 'S_SIE_21_CALND_DEPLC_DATE_FIN';
  kva_s_ajust_ident              constant varchar2 (60) default 'S_SIE_21_CALND_AJUST_EVENM_IDENT';
  kva_s_ajust_date_fin           constant varchar2 (60) default 'S_SIE_21_CALND_AJUST_DATE_FIN';
  kva_formt_date_javsc_in        constant varchar2 (34) default 'fmDay, fmDD fmMonth, YYYY, HH24:MI';
  kva_formt_date_javsc_out       constant varchar2 (14) default 'YYYYMMDDHH24MI';

  type typ_rec_config_plugn is record
  (
    enonc_pre_reqt                          varchar2 (4000),
    ref_dv_vue_deft                         number (10),
    conct_propr_entet_gauch                 varchar2 (500),
    conct_propr_entet_centr                 varchar2 (500),
    conct_propr_entet_droit                 varchar2 (500),
    conct_propr_entet_gauch_formt           varchar2 (500),
    conct_propr_entet_centr_formt           varchar2 (500),
    conct_propr_entet_droit_formt           varchar2 (500),
    indic_evenm_modfb                       varchar2 (1),
    nombr_mints_inter                       number (4),
    heure_debut_norml                       varchar2 (10),
    heure_fin_norml                         varchar2 (10),
    heure_debut_exten                       varchar2 (10),
    heure_fin_exten                         varchar2 (10),
    nom_table                               varchar2 (30),
    coln_ident                              varchar2 (30),
    coln_agend                              varchar2 (30),
    coln_indic_journ_compl                  varchar2 (30),
    coln_indic_evenm_modfb                  varchar2 (30),
    coln_date_journ_compl                   varchar2 (30),
    coln_date_fin_journ_compl               varchar2 (30),
    coln_date_debut                         varchar2 (30),
    coln_date_fin                           varchar2 (30),
    coln_titre                              varchar2 (30),
    coln_descr                              varchar2 (30),
    coln_type                               varchar2 (30),
    coln_titre_aide_insta                   varchar2 (30),
    coln_aide_insta                         varchar2 (30),
    coln_lien                               varchar2 (30),
    largr_regn_calnd                        number (4),
    agend_nom_table                         varchar2 (30)
  );

  type typ_rec_evenm is record
  (
    vva_ident                               varchar2 (4000),
    vva_agend                               varchar2 (4000),
    vva_indic_journ_compl                   varchar2 (4000),
    vva_indic_modfb                         varchar2 (4000),
    vda_date_journ_compl                    date,
    vda_date_fin_journ_compl                date,
    vda_date_debut                          date,
    vda_date_fin                            date,
    vva_titre                               varchar2 (4000),
    vva_descr                               varchar2 (4000),
    vva_clas_css                            varchar2 (4000),
    vva_titre_aide_insta                    varchar2 (4000),
    vva_aide_insta                          varchar2 (4000),
    vva_lien                                varchar2 (4000)
  );

  gre_evenm                               typ_rec_evenm;

  type typ_tab_rec_evenm is table of typ_rec_evenm
                              index by pls_integer;

  function obten_enreg_config_plugn (pnu_numr_apex_regn in number)
    return typ_rec_config_plugn;

  function obten_clas_css (pnu_numr_apex_regn in number,
                           pva_agend in varchar2)
    return varchar2;

  procedure obten_json_evenm_agend (pnu_numr_apex_regn in number,
                                    pnu_date_debut_milsc in number,
                                    pnu_date_fin_milsc in number,
                                    pva_agend in varchar2);

  procedure obten_json_evenm (pnu_numr_apex_regn in number,
                              pva_ident in varchar2);

  function obten_prop_entet_formt (pva_conct_enten in varchar2)
    return varchar2;

  procedure defnr_etat_calnd (pnu_numr_apex_regn in number,
                              pva_mode in varchar2,
                              pnu_date_debut_milsc in number);

  procedure initl_actio_sesn;

  procedure defnr_actio_selct (pva_indic_journ_compl in varchar2,
                               pva_date_debut in varchar2,
                               pva_date_fin in varchar2);

  procedure defnr_actio_choix_evenm (pva_ident in varchar2);

  procedure defnr_actio_deplc_evenm (pva_ident in varchar2,
                                     pva_indic_journ_compl in varchar2,
                                     pva_date_debut in varchar2,
                                     pva_date_fin in varchar2);

  procedure defnr_actio_ajust_evenm (pva_ident in varchar2,
                                     pva_date_fin in varchar2);

  procedure valdr_heure (pva_heure_debut in varchar2,
                         pva_heure_fin in varchar2,
                         pva_heure_debut_exten in varchar2 default null,
                         pva_heure_fin_exten in varchar2 default null);

  function obten_vue_jour
    return varchar2;

  function obten_vue_jour_simpl
    return varchar2;

  function obten_vue_semn
    return varchar2;

  function obten_vue_semn_simpl
    return varchar2;

  function obten_vue_mois
    return varchar2;
end sie_21_plugn_calnd_pkg;
/

Prompt Package SIE_21_PLUGN_CALND_TYPE_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_calnd_type_pkg as
  function obten_image_aperc_coulr (pnu_type_afich in number,
                                    pva_titre in varchar2 default null,
                                    pva_id_distn in varchar2 default null)
    return varchar2;
end sie_21_plugn_calnd_type_pkg;
/

Prompt Package SIE_21_PLUGN_CONFR_SAUVG_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_confr_sauvg_pkg
  authid current_user is
  kva_s_mesg                     constant varchar2 (60) default 'S_SIE_21_CONFR_SAUVG_MESG';
  kva_s_reqt                     constant varchar2 (60) default 'S_SIE_21_CONFR_SAUVG_REQT';

  function obten_mesg_confr
    return varchar2;

  procedure defnr_mesg_confr (pva_mesg in varchar2);

  function obten_reqt_sauvg
    return varchar2;

  procedure defnr_reqt_sauvg (pva_liste_reqt in varchar2);

  procedure obten_json_item_confr;

  procedure obten_json_reqt_sauvg;
end sie_21_plugn_confr_sauvg_pkg;
/

Prompt Package SIE_21_PLUGN_DIALG_IFRAM_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_dialg_ifram_pkg is
  procedure defnr_contx_apres_fermt_dialg;

  procedure fermr_dialg;

  procedure redrg_page_acuei_js;
end sie_21_plugn_dialg_ifram_pkg;
/

Prompt Package SIE_21_PLUGN_MENU_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_menu_pkg
  authid current_user as
  type typ_rec_confg_plugn is record
  (
    seqnc                                   number (10),
    ref_dv_type_menu_code                   varchar2 (23),
    ref_dv_orien_menu_code                  varchar2 (23),
    ref_dv_coulr_theme_code                 varchar2 (23),
    ref_dv_coulr_princ_code                 varchar2 (23),
    ref_dv_formt_menu_code                  varchar2 (23),
    ref_menu                                number (10)
  );

  type typ_rec_confg_plugn_item is record
  (
    seqnc                                   number (10),
    clas_css_racn                           varchar2 (60),
    clas_css_elemn                          varchar2 (60),
    etend_nombr_coln                        number (1),
    ref_item_menu                           number (10),
    ref_plugn_menu                          number (10),
    ref_dv_align_valr_organ                 varchar2 (60)
  );

  kva_s_menu_actif               constant varchar2 (60) default 'S_SIE_21_MENU_ACTIF';

  function obten_enreg_confg_plugn (pnu_numr_apex_regn in number)
    return typ_rec_confg_plugn;

  function obten_enreg_confg_plugn_item (pnu_plugn_menu in number,
                                         pnu_item_menu in number)
    return typ_rec_confg_plugn_item;

  function obten_plugn_menu (pva_code_prodt in vd_i_sie_11_prodt.code%type,
                             pva_code_menu in vd_i_sie_21_plugn_menu.code%type)
    return number;

  function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
    return varchar2;

  procedure maj_plugn_item_menu (pnu_plugn_menu in number);

  /*
    MODE : COLN = Menu avec columnwidth (Coin arrondi)
           COMPL = Menu avec fullwidth (Barre complète)
  */
  procedure creer_entet (pva_encap_menu in varchar2,
                         pva_coulr_menu in varchar2,
                         pva_mode in varchar2 default 'COLN');

  procedure fermr_entet;

  procedure creer_sectn (pva_id in varchar2 default null,
                         pva_clas in varchar2 default null,
                         pva_align in varchar2 default null);

  procedure fermr_sectn;

  procedure creer_liste (pva_clas in varchar2 default null);

  procedure fermr_liste;

  procedure creer_liste_desrd (pva_clas in varchar2 default null);

  procedure fermr_liste_desrd;

  procedure ecrir (pva_libl in varchar2,
                   pva_type_bals in varchar2 default 'a',
                   pva_clas in varchar2 default null,
                   pva_url_cible in varchar2 default null);

  function obten_clas_css_elemn (pnu_plugn_item_menu in number)
    return varchar2;

  function obten_clas_css_racn (pnu_plugn_item_menu in number)
    return varchar2;

  procedure genr_elemn_no_drop (pva_libl in varchar2,
                                pva_url_cible in varchar2 default null);

  procedure creer_elemn_drop (pva_libl in varchar2,
                              pva_url_cible in varchar2 default null,
                              pva_clas_liste in varchar2 default null,
                              pva_align in varchar2 default null);

  procedure fermr_elemn_drop;

  procedure creer_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item);

  procedure fermr_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item);

  procedure genr_tabl (pty_rec_plugn_item in typ_rec_confg_plugn_item);

  function obten_contn (pnu_plugn_item_menu in number)
    return varchar2;

  function obten_align (pnu_plugn_item_menu in number)
    return varchar2;

  function obten_formt_menu (pnu_plugn_menu in number)
    return varchar2;

  function obten_coulr_menu (pnu_plugn_menu in number)
    return varchar2;

  function obten_usagr_formt_sesn
    return varchar2;
end sie_21_plugn_menu_pkg;
/

Prompt Package SIE_21_PLUGN_NAVGT_ENREG_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_navgt_enreg_pkg
  authid current_user as
  function valdr_prise_charg
    return boolean;

  function obten_url_premr_enreg
    return varchar2;

  function obten_url_dernr_enreg
    return varchar2;

  function obten_url_suivn_enreg
    return varchar2;

  function obten_url_precd_enreg
    return varchar2;

  function obten_regn_gauch
    return varchar2;

  function obten_regn_droit
    return varchar2;

  procedure desct_navgt_enreg;

  --Process doit être séquence 9.1
  function valdr_plugn_activ
    return boolean;
end sie_21_plugn_navgt_enreg_pkg;
/

Prompt Package SIE_21_PLUGN_SELCT_2_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_plugn_selct_2_pkg is
  procedure genr_item_tag (p_item in apex_plugin.t_page_item,
                           p_value in varchar2);

  procedure genr_item_selct (p_item in apex_plugin.t_page_item,
                             p_value in varchar2);

  procedure genr_item_lectr_seule (p_item in apex_plugin.t_page_item,
                                   p_value in varchar2,
                                   p_is_readonly in boolean,
                                   p_is_printer_friendly in boolean);

  procedure genr_json_rechr_lov (p_item in apex_plugin.t_page_item);

  procedure genr_json_initl_selct_lov (p_item in apex_plugin.t_page_item);
end sie_21_plugn_selct_2_pkg;
/

Prompt Package SIE_21_PROCS_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_procs_pkg
  authid current_user is
  function inser_trace (p_process in apex_plugin.t_process,
                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function authe_redrg (p_process in apex_plugin.t_process,
                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function fermr_dialg_ifram (p_process in apex_plugin.t_process,
                              p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function defnr_item_page (p_process in apex_plugin.t_process,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function defnr_contx_sie_04_fil_arian (p_process in apex_plugin.t_process,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function suprm_sie_21_colct_clob (p_process in apex_plugin.t_process,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function dml_maj_clob (p_process in apex_plugin.t_process,
                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function valdt_sie_21_colct_clob (p_process in apex_plugin.t_process,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function defnr_sie_04_mode_page (p_process in apex_plugin.t_process,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  --OBSOLETE::CARLO
  /*
  function defnr_aplic_safp (p_process in apex_plugin.t_process,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;
  */

  function trait_mesgs_err (p_process in apex_plugin.t_process,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function defnr_sie_21_confr_sauvg (p_process in apex_plugin.t_process,
                                     p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function reint_sie_13_menu (p_process in apex_plugin.t_process,
                              p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;

  function chang_libl_fil_arian (p_process in apex_plugin.t_process,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result;
end sie_21_procs_pkg;
/

Prompt Package SIE_21_UTIL_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_util_pkg
  authid current_user is
  subtype t_plugn is apex_plugin.t_plugin;

  subtype t_actn_dynmq is apex_plugin.t_dynamic_action;

  subtype t_page_item is apex_plugin.t_page_item;

  subtype t_regn is apex_plugin.t_region;

  subtype t_regn_rendr_reslt is apex_plugin.t_region_render_result;

  subtype t_regn_ajax_reslt is apex_plugin.t_region_ajax_result;


  procedure debug_actio_dynmq (p_dynamic_action in t_actn_dynmq,
                               p_plugin in t_plugn);

  procedure debug_page_item (p_page_item in t_page_item,
                             p_plugin in t_plugn,
                             pva_value in varchar2,
                             pbo_is_readonly in boolean,
                             pbo_is_printer_friendly in boolean);

  procedure ajout_libr_javsc (pva_nom in varchar2,
                              pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                              pva_versn in varchar2 default '?v=' || sie_11_prodt_pkg.obten_numr_versn_prodt_afw,
                              pva_saut_extns in boolean default true);

  procedure ajout_code_javsc_charg (pva_code in varchar2,
                                    pva_cle in varchar2 default null);

  procedure ajout_libr_css (pva_nom in varchar2,
                            pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                            pva_versn in varchar2 default '?v=' || sie_11_prodt_pkg.obten_numr_versn_prodt_afw,
                            pva_saut_extns in boolean default true);

  procedure ajout_css (pva_style in varchar2,
                       pbo_inser_en_ligne in boolean default true);

  procedure formt_url_fichr (pva_url in varchar2,
                             pva_reprt in out varchar2,
                             pva_nom_fichr in out varchar2,
                             pva_extns in out varchar2);

  procedure ecrir_item_input (p_item in t_page_item,
                              p_plugin in t_plugn,
                              pva_value in varchar2,
                              pva_type_input in varchar2,
                              pvc_clas_css in apex_application_global.vc_arr2,
                              pva_place_holdr in varchar2 default null,
                              pnu_nombr_reslt in number default null);

  procedure ecrir_item_input_lectr_seule (p_item in t_page_item,
                                          p_plugin in t_plugn,
                                          pva_value in varchar2,
                                          pvc_clas_css in apex_application_global.vc_arr2);

  procedure ecrir_item_input_mode_imprs (p_item in t_page_item,
                                         p_plugin in t_plugn,
                                         pva_value in varchar2);

  procedure ecrir_item_input_popup_arbor (p_item in t_page_item,
                                          p_plugin in t_plugn,
                                          pva_value in varchar2,
                                          pva_type_input in varchar2,
                                          pvc_clas_css_input in apex_application_global.vc_arr2,
                                          pva_logo_ouvr_popup in varchar2,
                                          pvc_clas_css_logo_ouvr_popup in apex_application_global.vc_arr2);

  function obten_reslt_expre_plsql (pva_expre_plsql in varchar2)
    return varchar2;

  function formt_plugn_atrib_boln (pva_atrib_boln in varchar2)
    return boolean;

  function obten_tabl_javsc_liste_items (pva_liste_items in varchar2,
                                         pva_seprt in varchar2 default ',')
    return varchar2;

  function ajout_atrib_tabl_javsc (pva_nom_atrib in varchar2,
                                   pva_tabl_javsc in varchar2,
                                   pbo_pas_afich_si_nul in boolean default true,
                                   pbo_afich_virgl in boolean default true)
    return varchar2;

  procedure ecrir_json_ereur (pva_sourc in varchar2,
                              pva_code in varchar2,
                              pva_mesg in varchar2);
end sie_21_util_pkg;
/

Prompt Package SIE_23_RECHR_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_23_rechr_pkg
  authid current_user is
  procedure purgr_rechr (pnu_utils in number default null,
                         pnu_rechr in number default null);

  function obten_enonc_rechr (pnu_rechr in number)
    return varchar2;

  procedure exect_rechr (pva_valr_rechr in varchar2,
                         pnu_modl in number default 25820);

  procedure exect_rechr_apex (pva_valr_rechr in varchar2);

  function obten_enonc_rechr_formt (pnu_rechr in number)
    return varchar2;

  function obten_prodt_rechr (pnu_rechr in number)
    return number;

  function obten_lien_formt (pva_lien_non_formt in varchar2)
    return varchar2;

  procedure ajout_modl_rechr_domn (pnu_modl_rechr_sourc in vd_sie_23_modl_rechr.seqnc%type,
                                   pnu_domn_cible in vd_sie_12_domn.seqnc%type);
end sie_23_rechr_pkg;
/

Prompt Package SIE_24_NAVBR_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_24_navbr_pkg
  authid current_user as
  type typ_rec_confg_plugn is record
  (
    seqnc                                   number (10),
    ref_dv_type_menu_code                   varchar2 (23),
    ref_dv_orien_menu_code                  varchar2 (23),
    ref_dv_coulr_theme_code                 varchar2 (23),
    ref_dv_coulr_princ_code                 varchar2 (23),
    ref_dv_formt_menu_code                  varchar2 (23),
    ref_menu                                number (10)
  );

  type typ_rec_confg_plugn_item is record
  (
    seqnc                                   number (10),
    clas_css_racn                           varchar2 (60),
    clas_css_elemn                          varchar2 (60),
    etend_nombr_coln                        number (1),
    ref_item_menu                           number (10),
    ref_plugn_menu                          number (10),
    ref_dv_align_valr_organ                 varchar2 (60)
  );

  kva_s_menu_actif               constant varchar2 (60) default 'S_SIE_21_MENU_ACTIF';

  function obten_enreg_confg_plugn (pnu_numr_apex_regn in number)
    return typ_rec_confg_plugn;

  function obten_enreg_confg_plugn_item (pnu_plugn_menu in number,
                                         pnu_item_menu in number)
    return typ_rec_confg_plugn_item;

  function obten_plugn_menu (pva_code_prodt in vd_i_sie_11_prodt.code%type,
                             pva_code_menu in vd_i_sie_21_plugn_menu.code%type)
    return number;

  function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
    return varchar2;

  procedure maj_plugn_item_menu (pnu_plugn_menu in number);

  /*
    MODE : COLN = Menu avec columnwidth (Coin arrondi)
           COMPL = Menu avec fullwidth (Barre complète)
  */
  procedure creer_entet;

  procedure fermr_entet;

  procedure creer_sectn (pva_id in varchar2 default null,
                         pva_clas in varchar2 default null,
                         pva_align in varchar2 default null);

  procedure fermr_sectn;

  procedure creer_liste (pva_clas in varchar2 default null);

  procedure fermr_liste;

  procedure creer_liste_desrd (pva_clas in varchar2 default null);

  procedure fermr_liste_desrd;

  procedure ecrir_lien (pva_libl in varchar2,
                        pva_clas in varchar2 default null,
                        pva_url_cible in varchar2 default null);

  procedure genr_elemn_no_drop (pva_libl in varchar2,
                                pva_url_cible in varchar2 default null);

  procedure creer_elemn_drop (pva_libl in varchar2,
                              pva_url_cible in varchar2 default null,
                              pva_clas_liste in varchar2 default null,
                              pva_align in varchar2 default null);

  procedure fermr_elemn_drop;

  procedure creer_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item);

  procedure fermr_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item);

  procedure genr_tabl (pty_rec_plugn_item in typ_rec_confg_plugn_item);

  function obten_contn (pnu_plugn_item_menu in number)
    return varchar2;

  function obten_align (pnu_plugn_item_menu in number)
    return varchar2;

  function obten_formt_menu (pnu_plugn_menu in number)
    return varchar2;

  function obten_coulr_menu (pnu_plugn_menu in number)
    return varchar2;

  function obten_usagr_formt_sesn
    return varchar2;
end sie_24_navbr_pkg;
/

Prompt Package SIE_25_APPEL_RAPRT_APEX_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_25_APPEL_RAPRT_APEX_PKG" as
  procedure exect_raprt (pva_indic_secrs varchar2,                                            -- 'O' = https, 'N' = http
                         pva_servr varchar2,                                     -- Nom du serveur (ex: www.domaine.com)
                         pnu_port number,                                                            -- Port (null = 80)
                         pva_chemn varchar2,                                                       -- /reports/rwservlet
                         pva_parmt varchar2,                                     -- Tous les paramètres, incluant userid
                         pva_faml_motr in varchar2 default 'reports');

  procedure defnr_url_impre (pnu_page in number,
                             pva_reqst in varchar2);

  procedure obten_raprt_pdf (pva_nom_raprt in varchar2,
                             pva_nom_parmt1 in varchar2,
                             pnu_parmt1 in number);
end sie_25_appel_raprt_apex_pkg;
/

Prompt Package SIE_25_DOMN_TYPE_PUBLC_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_domn_type_publc_pkg is
  procedure ajout_domn_type_publc (pnu_domn in number,
                                   pnu_type in number);

  procedure maj_domn_type_publc;

  procedure creat_domn_type_publc (pnu_domn_type_publc in number,
                                   pnu_domn_cible in number);
end sie_25_domn_type_publc_pkg;
/

Prompt Package SIE_25_FORMT_IR_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_formt_ir_pkg is
  knu_porte_ligne                constant varchar2 (5) default 'LIGNE';
  knu_porte_coln                 constant varchar2 (5) default 'COLN';

  knu_propr_oui                  constant varchar2 (1) default 'O';
  knu_propr_non                  constant varchar2 (1) default 'N';

  type typ_formt is record
  (
    indic_ligne                             boolean,
    indic_gras                              boolean
  );

  function obten_bals_formt (pva_porte in varchar2,
                             pva_gras in varchar2,
                             pva_coulr in varchar2 default null)
    return varchar2;

  function digr_bals_formt (pva_bals in varchar2)
    return typ_formt;
end sie_25_formt_ir_pkg;
/

Prompt Package SIE_25_FUSN_PDF_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_25_FUSN_PDF_PKG" as
  procedure ajout_valr_champ_fusn (pnu_champ in number,
                                   pnu_publc_travl in number,
                                   pda_valr_date in date);

  procedure ajout_valr_champ_fusn (pnu_champ in number,
                                   pnu_publc_travl in number,
                                   pnu_valr_nombr in number);

  procedure ajout_valr_champ_fusn (pnu_champ in number,
                                   pnu_publc_travl in number,
                                   pva_valr_varch in varchar2);
end sie_25_fusn_pdf_pkg;
/

Prompt Package SIE_25_JAVSC_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_25_JAVSC_PKG" as
  procedure ajout_scrip_charg;
end sie_25_javsc_pkg;
/

Prompt Package SIE_25_PUBLC_IMEDT_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_publc_imedt_pkg as
  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pva_valr_parmt in varchar2,
                         pnu_publc_travl in number);

  function ajout_parmt (pva_code_parmt in varchar2,
                        pnu_valr_parmt in number,
                        pnu_publc_travl in number)
    return number;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pnu_valr_parmt in number,
                         pnu_publc_travl in number);

  function ajout_parmt (pva_code_parmt in varchar2,
                        pda_valr_parmt in date,
                        pnu_publc_travl in number)
    return number;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pda_valr_parmt in date,
                         pnu_publc_travl in number);

  procedure lancr_raprt;

  procedure lancr_raprt (pva_nom_raprt in varchar2,
                         pva_type_publc in varchar2,
                         pva_code_parmt in varchar2,
                         pnu_valr_parmt in number,
                         pbo_redrg_web_reslt in boolean default true,
                         pnu_domn in number default null,
                         pnu_utils in number default null);

  function obten_nouv_travl (pva_nom_raprt in varchar2)
    return number;

  function ajout_publc (pnu_travl in number,
                        pva_nom_fichr_sort in varchar2,
                        pva_code_type_publc in varchar2)
    return number;
end sie_25_publc_imedt_pkg;
/

Prompt Package SIE_25_PUBLC_NOYAU_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_publc_noyau_pkg is
  function obten_travl_courn (pbo_imedt in boolean default true,
                              pnu_type_travl in number default null,
                              pbo_mesgr in boolean default false,
                              pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn,
                              pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return number;

  function initl_travl (pva_nom_fichr_sort in varchar2,
                        pva_indic_imedt in varchar2,
                        pnu_type_travl in number default null,
                        pbo_mesgr in boolean default false,
                        pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn,
                        pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return number;

  procedure ajout_publc_travl (pva_nom_fichr_sort in varchar2,
                               pva_code_type_publc in varchar2,
                               pnu_travl in number,
                               pva_code_publc in varchar2 default null,
                               pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn);

  function ajout_publc_travl (pva_nom_fichr_sort in varchar2,
                              pva_code_type_publc in varchar2,
                              pnu_travl in number,
                              pva_code_publc in varchar2 default null,
                              pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn)
    return number;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pva_valr_varch in varchar2,
                         pnu_valr_numbr in number,
                         pda_valr_date date,
                         pnu_publc_travl in number);

  function obten_nombr_ocurn_exect_courn
    return number;

  procedure lancr_travl (pva_formt in varchar2,
                         pnu_travl in number,
                         pbo_redrg_web_reslt in boolean default true);

  function ajout_parmt (pva_code_parmt in varchar2,
                        pva_valr_varch in varchar2,
                        pnu_valr_numbr in number,
                        pda_valr_date date,
                        pnu_publc_travl in number)
    return number;
end sie_25_publc_noyau_pkg;
/

Prompt Package SIE_25_PUBLC_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_publc_pkg is
  function obten_travl_courn (pva_imedt in varchar2)
    return number;

  function obten_travl_courn (pbo_imedt in boolean default true)
    return number;

  function obten_nouv_travl (pva_nom_raprt in varchar2,
                             pnu_type_travl in number default null,
                             pbo_mesgr in boolean default false)
    return number;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pva_valr_parmt in varchar2,
                         pnu_travl_publc in number);

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pnu_valr_parmt in number,
                         pnu_travl_publc in number);

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pda_valr_parmt in date,
                         pnu_travl_publc in number);

  function obten_nombr_publc_travl (pnu_travl in number default null)
    return number;

  procedure ajout_publc_travl (pva_nom in varchar2,
                               pva_type_publc in varchar2,
                               pva_code_parmt in varchar2,
                               pnu_valr_parmt in number,
                               pnu_travl in number default null,
                               pnu_type_travl in number default null,
                               pbo_mesgr in boolean default false);

  function ajout_publc_travl (pva_nom in varchar2,
                              pva_type_publc in varchar2,
                              pva_code_parmt in varchar2,
                              pnu_valr_parmt in number,
                              pnu_travl in number default null,
                              pnu_type_travl in number default null,
                              pbo_mesgr in boolean default false)
    return number;

  function initl_travl (pnu_travl in number,
                        pva_nom_fichr_sort in varchar2,
                        pva_indic_imedt in varchar2,
                        pnu_type_travl in number default null)
    return number;

  procedure copie_publc_travl (pnu_sorc_travl in number,
                               pnu_destn_travl in number,
                               pnu_publc_travl in number default null);

  procedure ajout_travl_courn (pnu_travl in number default null,
                               pnu_publc_travl in number default null);

  procedure defnr_stat_publc_travl (pnu_seqnc in number,
                                    pva_code_stat in varchar2);
end sie_25_publc_pkg;
/

Prompt Package SIE_25_TRAVL_PUBLC_CU_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_travl_publc_cu_pkg
  authid current_user is
  function obten_pdf (pnu_travl in number,
                      pnu_publc_travl in number,
                      pva_iden_procd in varchar2)
    return blob;
end sie_25_travl_publc_cu_pkg;
/

Prompt Package SIE_25_TRAVL_PUBLC_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_travl_publc_pkg as
  procedure lancr_travl (pnu_travl in number,
                         pnu_formt in varchar,
                         pbo_redrg_web_reslt in boolean default true);

  procedure lancr_publc_travl (pnu_publc_travl in number,
                               pnu_formt in varchar,
                               pbo_redrg_web_reslt in boolean default true);

  procedure defnr_contx_exect_raprt (pnu_travl in number,
                                     pnu_travl_publc in number,
                                     pva_type_publc in varchar2,
                                     pva_code_publc in varchar2);

  function obten_domn_contx_exect
    return number;

  function obten_travl_exect
    return number;

  function obten_publc_travl_exect
    return number;

  function obten_utils_contx_exect
    return number;

  procedure vider_cache;

  procedure obten_fichr_sort (pbl_travl_termn   out nocopy blob,
                              pva_mime_type_travl   out varchar2,
                              pnu_tail_fichr   out pls_integer,
                              pva_nom_fichr   out varchar2,
                              pbo_suprm_fichr_cache in boolean default true);

  function obten_stat_publc_travl (pnu_publc_travl in number)
    return number;

  function obten_versn_publc_courn (pnu_publc in number)
    return number;
end sie_25_travl_publc_pkg;
/

Prompt Package SIE_25_TRI_ALTER_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_25_TRI_ALTER_PKG" as
  procedure afich_info_tri_alter;
end sie_25_tri_alter_pkg;
/

Prompt Package SIE_25_TYPE_PUBLC_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_type_publc_pkg is
  procedure alimn_domn_type_publc (pnu_seqnc in number);
end sie_25_type_publc_pkg;
/

Prompt Package SIE_25_TYPE_TRAVL_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_25_type_travl_pkg is
  function obten_seqnc (pnu_domn in number,
                        pva_code in varchar2)
    return vd_sie_25_type_publc.seqnc%type;
end sie_25_type_travl_pkg;
/

Prompt Package SIE_29_ASURN_QUALT_CORCT_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_29_asurn_qualt_corct_pkg as
  procedure corgr_item_hidn (pnu_aplic number);

  procedure corgr_ir_aucun_don_trouv (pnu_aplic number);

  procedure corgr_ir_trop_don_trouv (pnu_aplic number);

  procedure corgr_regn_trop_don_trouv (pnu_aplic number);

  procedure corgr_regn_aucun_don_trouv (pnu_aplic number);
end sie_29_asurn_qualt_corct_pkg;
/

Prompt Package SIE_29_ASURN_QUALT_PKG;
/* Formatted on 04/12/2013 11:34:54 PM (QP5 v5.185.11230.41888) */
create or replace package sie_29_asurn_qualt_pkg as
  procedure exect_reqt (pva_liste_contrl in varchar2,
                        pnu_page in number default null);
end sie_29_asurn_qualt_pkg;
/

Prompt Package SIE_01_GESTN_MESG_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_01_GESTN_MESG_PKG" as
  kva_type_mesg_err              constant varchar2 (1) default 'E';
  kva_type_mesg_err_critq        constant varchar2 (1) default 'C';
  kva_type_mesg_infor            constant varchar2 (1) default 'I';
  kva_type_mesg_aide             constant varchar2 (1) default 'A';
  kva_type_mesg_avert            constant varchar2 (1) default 'W';

  function obten_seqnc_mesg (pva_numr_mesg in varchar2,
                             pva_code_prodt in varchar2 default null)
    return number;

  function obten_seqnc_mesg_lang_sesn (pva_numr_mesg in varchar2,
                                       pva_code_prodt in varchar2 default null)
    return number;

  function obten_mesg (pnu_seqnc_mesg in number,
                       pva_valr_subst1 in varchar2 default null,
                       pva_valr_subst2 in varchar2 default null,
                       pva_valr_subst3 in varchar2 default null,
                       pva_valr_subst4 in varchar2 default null,
                       pva_valr_subst5 in varchar2 default null,
                       pva_valr_subst6 in varchar2 default null,
                       pva_valr_subst7 in varchar2 default null,
                       pva_valr_subst8 in varchar2 default null,
                       pva_valr_subst9 in varchar2 default null,
                       pva_valr_subst10 in varchar2 default null)
    return varchar2;

  function obten_mesg_par_numr (pva_numr_mesg in varchar2,
                                pva_code_prodt in varchar2 default null,
                                pva_valr_subst1 in varchar2 default null,
                                pva_valr_subst2 in varchar2 default null,
                                pva_valr_subst3 in varchar2 default null,
                                pva_valr_subst4 in varchar2 default null,
                                pva_valr_subst5 in varchar2 default null,
                                pva_valr_subst6 in varchar2 default null,
                                pva_valr_subst7 in varchar2 default null,
                                pva_valr_subst8 in varchar2 default null,
                                pva_valr_subst9 in varchar2 default null,
                                pva_valr_subst10 in varchar2 default null)
    return varchar2;

  procedure afich_mesg_par_numr (pva_numr_mesg in varchar2,
                                 pva_code_prodt in varchar2 default null,
                                 pva_valr_subst1 in varchar2 default null,
                                 pva_valr_subst2 in varchar2 default null,
                                 pva_valr_subst3 in varchar2 default null,
                                 pva_valr_subst4 in varchar2 default null,
                                 pva_valr_subst5 in varchar2 default null,
                                 pva_valr_subst6 in varchar2 default null,
                                 pva_valr_subst7 in varchar2 default null,
                                 pva_valr_subst8 in varchar2 default null,
                                 pva_valr_subst9 in varchar2 default null,
                                 pva_valr_subst10 in varchar2 default null);

  function obten_proch_numr (pva_catgr in varchar2)
    return varchar2;

  function obten_list_mesg_formt (pva_liste in varchar2)
    return varchar2;

  procedure creer_mesg_aide_lang (pnu_page in number,
                                  pnu_lang in number,
                                  pnu_prodt in number,
                                  pva_catgr in varchar2);

  function genr_lang_mesg (pnu_mesg in number,
                           pnu_lang in number,
                           pva_mode in varchar2)
    return boolean;

  procedure obten_aide_page_item (pnu_sidf in number,
                                  pnu_item_id_apex in number,
                                  pnu_lang in number default null);

  function obten_nombr_item (pnu_page in number,
                             pnu_lang in number,
                             pva_type_item in varchar2)
    return number;

  function creer_mesg (pva_catgr_numr_mesg in varchar2,
                       pva_texte_mesg in vd_i_sie_01_mesg_lang.mesg%type,
                       pva_type_mesg in vd_i_sie_01_mesg.type_mesg%type,
                       pnu_prodt in vd_i_sie_01_mesg.ref_prodt%type default sie_11_prodt_pkg.obten_prodt_sesn,
                       pnu_lang in vd_i_sie_01_mesg_lang.ref_lang%type default sie_01_lang_pkg.obten_lang_sesn)
    return vd_i_sie_01_mesg.seqnc%type;

  procedure creer_mesg (pva_catgr_numr_mesg in varchar2,
                        pva_texte_mesg in vd_i_sie_01_mesg_lang.mesg%type,
                        pva_type_mesg in vd_i_sie_01_mesg.type_mesg%type,
                        pnu_prodt in vd_i_sie_01_mesg.ref_prodt%type default sie_11_prodt_pkg.obten_prodt_sesn,
                        pnu_lang in vd_i_sie_01_mesg_lang.ref_lang%type default sie_01_lang_pkg.obten_lang_sesn);
end sie_01_gestn_mesg_pkg;
/

Prompt Package SIE_03_ENVOI_COURL_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package sie_03_envoi_courl_pkg as
  function creer (pva_servr in varchar2,
                  pnu_port in number,
                  pva_domn in varchar2,
                  pva_nom_envoy in varchar2,
                  pva_adres_envoy in varchar2,
                  pva_authe_methd in varchar2,
                  pva_authe_usagr in varchar2,
                  pva_authe_mdp in varchar2,
                  pva_sujet in varchar2)
    return sie_17_envoi_courl_pkg.courl;

  procedure creer (pva_servr in varchar2,
                   pnu_port in number,
                   pva_domn in varchar2,
                   pva_nom_envoy in varchar2,
                   pva_adres_envoy in varchar2,
                   pva_authe_methd in varchar2,
                   pva_authe_usagr in varchar2,
                   pva_authe_mdp in varchar2,
                   pva_sujet in varchar2);

  procedure notfr_clas_inter (pnu_prodt in number,
                              pva_code_clas_inter in varchar2,
                              pre_sie_03_journ in vd_i_sie_03_journ%rowtype);
end sie_03_envoi_courl_pkg;
/

Prompt Package SIE_07_SQL_NOYAU_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_SQL_NOYAU_PKG" as
  procedure obten_infor_coln_ir (pnu_ref_ir in number,
                                 pnu_rpts_id in number,
                                 pic_infor in out sie_07_sql_pkg.typ_rec_infor_coln);
end;
/

Prompt Package SIE_07_UTIL_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_UTIL_PKG" as
  --Types pour les fonctions pipelined--
  type typ_apex_lov_rang is record
  (
    d                                       varchar2 (2000),
    r                                       number (10)
  );

  type typ_tab_apex_lov_rang is table of typ_apex_lov_rang;

  --------------------------------------


  type typ_table_va is table of varchar2 (30);

  type typ_table_nu is table of number (10);

  type typ_table_va_ibpls is table of varchar2 (30)
                               index by pls_integer;

  type typ_table_nu_ibpls is table of number (10)
                               index by pls_integer;

  gnu_tablr_form_numbr                    number;
  gva_tablr_form_varch                    varchar2 (100);
  gda_tablr_form_date                     date;

  gva_css_entet_page                      varchar2 (32000);
  gva_javsc_entet_page                    varchar2 (32000);

  function strin_to_table_nu (pva_list in varchar2)
    return typ_table_nu
    pipelined;

  function strin_to_table_va (pva_list in varchar2)
    return typ_table_va
    pipelined;

  function table_to_table (pta_list in apex_application_global.vc_arr2)
    return typ_table_nu
    pipelined;

  function table_to_table_01
    return typ_table_nu
    pipelined;

  function table_to_table_02
    return typ_table_nu
    pipelined;

  function table_to_table_nu (pta_list in typ_table_nu_ibpls)
    return typ_table_nu
    pipelined;

  function table_to_string (pcu_tabl sys_refcursor,
                            pva_seprt in varchar2 default ':')
    return varchar2;

  function table_to_string (pta_tabl apex_application_global.vc_arr2,
                            pva_seprt in varchar2 default ':')
    return varchar2;

  function string_to_table (pva_tabl in varchar2,
                            pva_seprt in varchar2 default ':')
    return apex_application_global.vc_arr2;

  function string_to_table2 (pva_tabl in varchar2,
                             pva_seprt in varchar2 default ':')
    return apex_application_global.vc_map;

  function suprm_elemn_liste (pva_elemn in varchar2,
                              pva_list in varchar2)
    return varchar2;

  procedure genr_valr_audit (pbo_inser in boolean,
                             pbo_updat in boolean,
                             pva_utils_creat in out varchar2,
                             pda_date_creat in out date,
                             pva_utils_modfc in out varchar2,
                             pda_date_modfc in out date);

  function v (pva_nom_item in varchar2,
              pva_indic_forcr_apex in varchar2 default 'N')
    return varchar2;

  function vd (pva_nom_item in varchar2,
               pva_indic_forcr_apex in varchar2 default 'N')
    return varchar2
    deterministic;

  function nv (pva_nom_item in varchar2,
               pva_indic_forcr_apex in varchar2 default 'N')
    return number;

  function nvd (pva_nom_item in varchar2,
                pva_indic_forcr_apex in varchar2 default 'N')
    return number
    deterministic;

  function dv (pva_nom_item in varchar2,
               pva_formt in varchar2 default null,
               pva_indic_forcr_apex in varchar2 default 'N')
    return date;

  function dvd (pva_nom_item in varchar2,
                pva_formt in varchar2 default null,
                pva_indic_forcr_apex in varchar2 default 'N')
    return date
    deterministic;

  function valr_numrq (pva_valr in varchar2)
    return number;

  function obten_date_syst
    return date;

  function vald_domn_date (pda_date_limt_infr in date,
                           pva_date_a_valdr in date,
                           pda_date_limt_supr in date)
    return boolean;

  function vald_domn_date_trunc (pda_date_limt_infr in date,
                                 pva_date_a_valdr in date,
                                 pda_date_limt_supr in date)
    return boolean;

  function obten_lang_sesn
    return number;

  function obten_versn_sesn
    return number;

  function obten_sourc_shutl_selct (pva_selct in varchar2)
    return varchar2;

  function obten_sourc_shutl_selct (pre_selct in sys_refcursor)
    return varchar2;

  /*OBSOLETE - Utiliser DEFNR_ETAT_SESN*/
  procedure defnr_etat_sessn (pva_nom in varchar2,
                              pva_valr in varchar2);

  procedure defnr_etat_sesn (pva_nom in varchar2,
                             pva_valr in varchar2);

  procedure reint_etat_sesn_page (pnu_no_page in number);

  function exist_item (pva_nom_item in varchar2)
    return boolean;

  function echap_text (pva_text in varchar2)
    return varchar2;

  function echap_text_js (pva_text in varchar2)
    return varchar2;

  function echap_text_json (pva_text in varchar2)
    return varchar2;

  function obten_furtr
    return varchar2;

  function obten_dad_url
    return varchar2;

  function obten_fonct_url
    return varchar2;

  function obten_ip
    return varchar2;

  function obten_parmt_url
    return varchar2;

  function obten_base_url
    return varchar2;

  function obten_lang_furtr
    return varchar2;

  function obten_lang_aplic_deft
    return varchar2;

  function verfr_sesn_vald (pnu_sess in number)
    return boolean;

  function hash (pva_sourc in varchar2)
    return raw;

  function hash_hexa (pva_sourc in varchar2)
    return varchar2;

  function verif_nombr_pair (pnu_nombr in number)
    return varchar2;

  function obten_mesg_suprs
    return varchar2;

  function obten_nom_mois (pda_date in date)
    return varchar2;

  function obten_perd (pda_debut in date,
                       pda_fin in date)
    return varchar2;

  function defnr_tablr_form_numbr (pnu_valr in number)
    return number;

  function defnr_tablr_form_varch (pva_valr in varchar2)
    return number;

  function defnr_tablr_form_date (pda_valr in date)
    return number;

  procedure gerer_seprt_decml_g_fxx (pva_liste_g_f varchar2);

  procedure gerer_seprt_decml_page;

  procedure gerer_seprt_decml_list_item (pva_liste_item varchar2);

  procedure gerer_seprt_decml_item (pva_item in varchar2);

  function encry_clob (pcl_clob in clob,
                       pra_cle in raw)
    return blob;

  function decry_clob (pbl_blob in blob,
                       pra_cle in raw)
    return clob;

  function multi_replc (pva_valr in varchar2,
                        pva_valr_rechr_1 in varchar2,
                        pva_valr_rempl_1 in varchar2,
                        pva_valr_rechr_2 in varchar2 default null,
                        pva_valr_rempl_2 in varchar2 default null,
                        pva_valr_rechr_3 in varchar2 default null,
                        pva_valr_rempl_3 in varchar2 default null,
                        pva_valr_rechr_4 in varchar2 default null,
                        pva_valr_rempl_4 in varchar2 default null,
                        pva_valr_rechr_5 in varchar2 default null,
                        pva_valr_rempl_5 in varchar2 default null,
                        pva_valr_rechr_6 in varchar2 default null,
                        pva_valr_rempl_6 in varchar2 default null,
                        pva_valr_rechr_7 in varchar2 default null,
                        pva_valr_rempl_7 in varchar2 default null,
                        pva_valr_rechr_8 in varchar2 default null,
                        pva_valr_rempl_8 in varchar2 default null,
                        pva_valr_rechr_9 in varchar2 default null,
                        pva_valr_rempl_9 in varchar2 default null,
                        pva_valr_rechr_10 in varchar2 default null,
                        pva_valr_rempl_10 in varchar2 default null)
    return varchar2;

  function revrs_chain (pva_chain in varchar2)
    return varchar2;

  function obten_prefr (pva_nom_prefr in varchar2)
    return varchar2;

  function obten_carct_entre (pva_chain in varchar2,
                              pva_carct_rechr_debut in varchar2,
                              pnu_insta_debut in number,
                              pva_carct_rechr_fin in varchar2,
                              pnu_insta_fin in number,
                              pnu_debut_rechr in number default 1)
    return varchar2;

  procedure procd_appel (pva_propr   out varchar2,
                         pva_nom   out varchar2,
                         pnu_numr_ligne   out number,
                         pva_type   out varchar2,
                         pnu_pile_suplm in number default 0);

  function procd_appel (pnu_pile_suplm in number default 0)
    return varchar2;

  function procd_courn
    return varchar2;

  function obten_aplic_tradc_courn (pnu_aplic_base in number)
    return number;

  procedure defnr_lang_sesn (pva_code_deft in varchar2 default null);

  function valid_numr_entr (pva_valr in varchar)
    return varchar2;

  procedure ajout_info_debug (pva_valr in varchar2);

  procedure valdr_date_formt (pva_date in varchar2,
                              pva_formt in varchar2);


  function valid_si_modfc (pva_valr_1 in varchar2,
                           pva_valr_2 in varchar2)
    return boolean;

  function valid_si_modfc (pnu_valr_1 in number,
                           pnu_valr_2 in number)
    return boolean;

  function valid_si_modfc (pda_valr_1 in date,
                           pda_valr_2 in date)
    return boolean;

  procedure ajout_libr_javsc (pva_nom in varchar2,
                              pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                              pva_versn in varchar2 default null,
                              pva_saut_extns in boolean default false);

  procedure ajout_code_javsc_charg (pva_code in varchar2,
                                    pva_cle in varchar2 default null);

  procedure ajout_libr_css (pva_nom in varchar2,
                            pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                            pva_versn in varchar2 default null,
                            pva_saut_extns in boolean default false);

  procedure ajout_css (pva_style in varchar2,
                       pbo_inser_en_ligne in boolean default true);

  function verif_presn_role (pva_role in varchar2)
    return boolean;

  function obten_evalt_code_utils (pva_utils in varchar2)
    return varchar2;

  procedure genr_css_entet_page;

  procedure genr_javsc_entet_page;

  function nv_force (pva_item in varchar2)
    return number;

  procedure aret_trait_page_apex;

  function obten_reslt_expre_plsql (pva_expre_plsql in varchar2)
    return varchar2;

  function obten_reslt_expre_plsql_bool (pva_expre_plsql in varchar2)
    return boolean;

  function obten_schem_apex
    return varchar2;

  function obten_versn_apex
    return apex_release.version_no%type;

  function purgr_html (pva_chain in varchar2)
    return varchar2;

  function encry_valr (pva_valr in varchar2)
    return raw;
end sie_07_util_pkg;
/

Prompt Package SIE_08_URL_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_08_URL_PKG" as
  knu_sesn                       constant number default sie_12_sesn_pkg.obten_sesn;
  knu_app_id                     constant number default sie_11_aplic_pkg.obten_numr_apex_aplic;
  knu_app_page_id                constant number default sie_13_page_pkg.obten_numr_apex_page;
  knu_sidf                       constant number default sie_07_util_pkg.nv ('SIDF');

  function obten_sesn
    return number;

  procedure redrg_page_postn (pva_url in varchar2);

  procedure redrg_page_rendr (pva_url in varchar2);

  procedure redrg_page_acuei_postn;

  procedure redrg_page_acuei_rendr;

  procedure redrg_page_conxn_rendr;

  procedure redrg_navgt_ilegl;

  function genr_do_submt3 (pva_reqst in varchar2,
                           pnu_sidf in number default knu_sidf,
                           pnu_sspc in number default null,
                           pva_sapc in varchar2 default null,
                           pnu_sspi in number default null,
                           pva_sapi in varchar2 default null)
    return varchar2;

  function genr_url (pnu_numr_aplic in number default sie_11_aplic_pkg.obten_numr_apex_aplic,
                     pnu_numr_page in number default sie_13_page_pkg.obten_numr_apex_page,
                     pva_nom_varbl_1 in varchar2 default null,
                     pva_valr_varbl_1 in varchar2 default null,
                     pva_nom_varbl_2 in varchar2 default null,
                     pva_valr_varbl_2 in varchar2 default null,
                     pva_nom_varbl_3 in varchar2 default null,
                     pva_valr_varbl_3 in varchar2 default null,
                     pva_nom_varbl_4 in varchar2 default null,
                     pva_valr_varbl_4 in varchar2 default null,
                     pva_nom_varbl_5 in varchar2 default null,
                     pva_valr_varbl_5 in varchar2 default null,
                     pva_nom_varbl_6 in varchar2 default null,
                     pva_valr_varbl_6 in varchar2 default null,
                     pva_nom_varbl_7 in varchar2 default null,
                     pva_valr_varbl_7 in varchar2 default null,
                     pva_nom_varbl_8 in varchar2 default null,
                     pva_valr_varbl_8 in varchar2 default null,
                     pva_nom_varbl_9 in varchar2 default null,
                     pva_valr_varbl_9 in varchar2 default null,
                     pva_nom_varbl_10 in varchar2 default null,
                     pva_valr_varbl_10 in varchar2 default null,
                     pva_sesn in varchar2 default null,
                     pva_optio_reqst in varchar2 default null,
                     pva_optio_clear_page in varchar2 default null,
                     pva_mode_debg in varchar2 default 'NO',
                     pva_indic_afich_valr_sesn in varchar2 default 'O')
    return varchar2;

  function genr_url_en_contx (pnu_numr_aplic number default sie_11_aplic_pkg.obten_numr_apex_aplic,
                              pnu_numr_page number default sie_13_page_pkg.obten_numr_apex_page,
                              pva_sesn varchar2 default sie_12_sesn_pkg.obten_sesn,
                              pva_optio_reqst in varchar2 default null,
                              pva_mode_debg in varchar2 default 'NO',
                              pva_optio_clear_page in varchar2 default null,
                              pva_sidf varchar2 default null,
                              pnu_sspc number default null,
                              pva_sapc varchar2 default null,
                              pva_scpc varchar2 default null,
                              pnu_sspi number default null,
                              pva_sapi varchar2 default null,
                              pva_scpi varchar2 default null,
                              pnu_snpi number default null)
    return varchar2;

  procedure decnt_et_redrg_page_login;

  procedure obten_pdf_de_url (pva_url in    varchar2,
                              pbo_blob in out nocopy blob);

  function obten_protc_reqt
    return varchar2;

  function obten_port_servr
    return number;

  function obten_host_http
    return varchar2;

  function obten_nom_scrip
    return varchar2;
end sie_08_url_pkg;
/

Prompt Package SIE_12_AUTHE_APEX_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_AUTHE_APEX_PKG" is
  gbo_valdt_procd_authe_exter             boolean default false;

  procedure demnd_activ_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                     pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                     pnu_numr_aplic_apex_cible in number,
                                     pnu_numr_page_apex_cible in number,
                                     pbo_indic_desct boolean default false,
                                     pva_procd_persn in varchar2);

  procedure valdr_utils (pva_code_utils in varchar2,
                         pva_mot_passe in varchar2,
                         pva_domn in varchar2,
                         pbo_forcr_authe in boolean default false);

  procedure valdr_etat_authe (pbo_etat_authe in out boolean,
                              pva_code_utils in varchar2,
                              pva_code_domn in varchar2,
                              pva_code_utils_pour in varchar2,
                              pva_code_domn_pour in varchar2,
                              pbo_ignor_indic_actif in boolean default false);

  function authe_utils (p_username in varchar2,
                        p_password in varchar2,
                        p_domaine in number,
                        pbo_ignor_indic_actif in boolean default false,
                        pbo_forcr_authe in boolean default false)
    return boolean;

  procedure inser_sesn;

  procedure defnr_varbl_utils_domn;

  procedure defnr_varbl_sesn;

  procedure rempl_mot_passe (pva_code_utils in varchar2,
                             pva_ancn_mot_passe in varchar2,
                             pva_nouv_mot_passe_1 in varchar2,
                             pva_nouv_mot_passe_2 in varchar2);

  procedure reint_mot_passe (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                             pva_mot_passe in varchar2,
                             pva_confr_mot_passe in varchar2,
                             pnu_domn in vd_i_sie_12_domn.seqnc%type default null);

  procedure activ_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type);

  function valdr_sesn_sentr
    return boolean;

  procedure redrg_page_conxn;

  procedure redrg_page_acuei;

  procedure defnr_parmt_url_apres_authe (pnu_numr_apex_aplic in number default sie_11_aplic_pkg.obten_numr_apex_aplic,
                                         pnu_numr_apex_page in number default sie_13_page_pkg.obten_numr_apex_page,
                                         pva_scpc in varchar2 default null,
                                         pnu_sspc in number default null,
                                         pva_sapc in varchar2 default null,
                                         pva_scpi in varchar2 default null,
                                         pnu_sspi in number default null,
                                         pva_sapi in varchar2 default null,
                                         pnu_snpi in number default null,
                                         pnu_sidf in number default null);

  function genr_url (pnu_numr_apex_aplic in number,
                     pnu_numr_apex_page in number,
                     pva_scpc in varchar2 default null,
                     pnu_sspc in number default null,
                     pva_sapc in varchar2 default null,
                     pva_scpi in varchar2 default null,
                     pnu_sspi in number default null,
                     pva_sapi in varchar2 default null,
                     pnu_snpi in number default null,
                     pnu_sidf in number default null,
                     pbo_indic_forcr_sspc in boolean default false,
                     pbo_indic_forcr_sidf in boolean default false,
                     pva_optio_reqst in varchar2 default null,
                     pva_optio_clear_page in varchar2 default null,
                     pva_indic_afich_valr_sesn in varchar2 default 'O')
    return varchar2;

  procedure defnr_url_creat_utils (pva_url in varchar2);

  function obten_url_creat_utils
    return varchar2;

  procedure defnr_procd_persn (pva_nom_procd in varchar2);

  procedure exect_procd_persn;

  /* CONAL : Obselete, utiliser redrg_aplic_authe */
  procedure redrg_prodt_authe;

  procedure redrg_aplic_authe;

  procedure defnr_authe_redrc_cible (pnu_numr_aplic_apex in number,
                                     pnu_numr_page_apex in number);

  procedure authe_redrg (pva_code_utils in varchar2,
                         pva_mot_passe in varchar2,
                         pva_domn in varchar2,
                         pnu_numr_apex_aplic in number,
                         pnu_numr_apex_page in number,
                         pva_scpc in varchar2 default null,
                         pnu_sspc in number default null,
                         pva_sapc in varchar2 default null,
                         pva_scpi in varchar2 default null,
                         pnu_sspi in number default null,
                         pva_sapi in varchar2 default null,
                         pnu_snpi in number default null,
                         pnu_sidf in number default null,
                         pbo_indic_forcr_sspc in boolean default false,
                         pbo_indic_forcr_sidf in boolean default false,
                         pva_optio_reqst in varchar2 default null,
                         pva_optio_clear_page in varchar2 default null,
                         pbo_ignor_indic_actif in boolean default false,
                         pbo_forcr_authe in boolean default false);
end sie_12_authe_apex_pkg;
/

Prompt Package SIE_12_DIALG_IFRAM_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package sie_12_dialg_ifram_pkg is
  procedure ouvri_dialg (pnu_numr_apex_actio_dynmq in number,
                         pnu_numr_apex_aplic in number,
                         pnu_numr_apex_page in number);

  procedure defnr_item_cle_etran (pnu_numr_apex_actio_dynmq in number,
                                  pva_item_cle_etran in varchar2);

  function obten_item_cle_etran (pnu_numr_apex_actio_dynmq in number)
    return varchar2;

  function obten_dialg_ouver
    return number;

  function valdr_dialg_ouvert
    return boolean;

  procedure fermr_dialg_ouver;

  procedure suprm_dialg_sesn (pnu_sesn in number default sie_12_sesn_pkg.obten_sesn);
end sie_12_dialg_ifram_pkg;
/

Prompt Package SIE_12_SECRT_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_12_SECRT_PKG" as
  function verfr_presn_utils_group (pva_group in varchar2,
                                    pbo_ignor_super in boolean default false,
                                    pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct ())
    return boolean;

  function verfr_presn_utils_group_numbr (pva_group in varchar2,
                                          pbo_ignor_super in boolean default false,
                                          pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct ())
    return number
    deterministic;

  function verfc_droit_acces (pva_code_struc_aplic in varchar2,
                              pbo_indic_acces in boolean default null,
                              pbo_indic_creat in boolean default null,
                              pbo_indic_modfc in boolean default null,
                              pbo_indic_suprs in boolean default null,
                              pnu_seqnc_membr_struc_lie in number,
                              pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn,
                              pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return boolean;

  function verfc_droit_acces_numrq (pva_code_struc_aplic in varchar2,
                                    pva_indic_acces in varchar2 default null,
                                    pva_indic_creat in varchar2 default null,
                                    pva_indic_modfc in varchar2 default null,
                                    pva_indic_suprs in varchar2 default null,
                                    pnu_seqnc_membr_struc_lie in number default null,
                                    pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn,
                                    pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return number;

  function verfc_droit_acces_schem_apex (pbo_indic_acces in boolean default null,
                                         pbo_indic_creat in boolean default null,
                                         pbo_indic_modfc in boolean default null,
                                         pbo_indic_suprs in boolean default null)
    return boolean;

  function defnr_nom_item (pva_nom_item in varchar2)
    return boolean;

  function obten_nom_item_courn
    return varchar2;

  function verf_presn_opert_item (pnu_utils in number,
                                  pva_item in varchar2)
    return boolean;

  function verfr_presn_opert_utils (pva_code_opert in varchar2)
    return boolean;

  function verif_si_conct
    return boolean;

  function verif_acces_liste_navgt (pnu_sie_13_elemn_liste_navgt in number)
    return boolean;

  function verif_apart_group_non_conct (pva_group in varchar2,
                                        pva_utils in varchar2,
                                        pva_resdr_sous_group in varchar2 default 'N')
    return boolean;

  function verif_admin_prodt
    return number;

  function obten_opert_en_cours_verfc
    return varchar2;

  procedure defnr_opert_en_cours_verfc (pva_opert in varchar2);
end sie_12_secrt_pkg;
/

Prompt Package SIE_13_RAPRT_INTER_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_RAPRT_INTER_PKG" is
  type typ_seqnc_reprt_courn is table of number (10);

  type rec_page_ir_filtr is record
  (
    coln                                    varchar2 (30),
    code_filtr                              varchar2 (23),
    valr                                    varchar2 (100)
  );

  type typ_page_ir_filtr is table of rec_page_ir_filtr;

  function obten_ir_page (pnu_numr_page number default null,
                          pva_code in varchar2 default null,
                          pnu_numr_aplic number default null)
    return number;

  function obten_selct_ir (pnu_ir_id in number)
    return clob;

  function obten_selct_rpts (pnu_rpts_id in number,
                             pbo_inclu_order_by in boolean default true,
                             pva_coln_selct in varchar2 default null)
    return clob;

  function obten_selct_rpts_base_id (pnu_base_report_id in number)
    return clob;

  function obten_repts_courn (pnu_numr_page_apex in number default null,
                              pva_code in varchar2 default null,
                              pnu_numr_aplic_apex number default null)
    return number;

  function obten_works_id (pnu_app_id in number default sie_07_util_pkg.nv ('APP_ID'),
                           pnu_app_page_id in number default sie_07_util_pkg.nv ('APP_PAGE_ID'),
                           pva_code in varchar2 default null)
    return number;

  function obten_seqnc_raprt_courn (pnu_numr_page_apex in number default null,
                                    pva_code in varchar2 default null,
                                    pnu_numr_aplic_apex number default null)
    return typ_seqnc_reprt_courn
    pipelined;

  function genr_url_filtr (pnu_page_ir in vd_sie_13_page_ir.seqnc%type,
                           pty_page_ir_filtr in typ_page_ir_filtr,
                           pnu_page_ir_sauvg in number default null)
    return varchar2;
end sie_13_raprt_inter_pkg;
/

Prompt Package SIE_21_REGN_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package sie_21_regn_pkg
  authid current_user is
  type typ_code_plugn is table of varchar2 (30)
                           index by varchar2 (30);

  gta_code_plugn                          typ_code_plugn;

  function valdr_prise_charg (pva_code_plugn in varchar2)
    return boolean;

  function genr_plugn_regn_arbre (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function ajax_plugn_regn_arbre (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt;

  function genr_plugn_regn_calnd (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function ajax_plugn_regn_calnd (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt;

  function genr_plugn_regn_barre_rechr_ir (p_region in sie_21_util_pkg.t_regn,
                                           p_plugin in sie_21_util_pkg.t_plugn,
                                           p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_plugn_regn_acord (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_plugn_regn_acord_enfan (p_region in sie_21_util_pkg.t_regn,
                                        p_plugin in sie_21_util_pkg.t_plugn,
                                        p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_plugn_regn_dialg (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_plugn_regn_drop (p_region in sie_21_util_pkg.t_regn,
                                 p_plugin in sie_21_util_pkg.t_plugn,
                                 p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  --OBSOLETE::CARLO
  /*function genr_prodt_contx_autor (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                   p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;
  function ajax_prodt_contx_autor (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt;*/

  function genr_domn_contx_autor (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function ajax_domn_contx_autor (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt;

  function genr_sie_04_fil_arian (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_sie_01_err_apex (p_region in sie_21_util_pkg.t_regn,
                                 p_plugin in sie_21_util_pkg.t_plugn,
                                 p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_sie_01_afich_mesg (p_region in sie_21_util_pkg.t_regn,
                                   p_plugin in sie_21_util_pkg.t_plugn,
                                   p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_sie_13_menu (p_region in sie_21_util_pkg.t_regn,
                             p_plugin in sie_21_util_pkg.t_plugn,
                             p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_sie_13_liste_navgt (p_region in sie_21_util_pkg.t_regn,
                                    p_plugin in sie_21_util_pkg.t_plugn,
                                    p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_sie_13_aide_page (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function ajax_sie_13_aide_page (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt;

  function genr_ifram (p_region in sie_21_util_pkg.t_regn,
                       p_plugin in sie_21_util_pkg.t_plugn,
                       p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;

  function genr_telvr_fichr (p_region in sie_21_util_pkg.t_regn,
                             p_plugin in sie_21_util_pkg.t_plugn,
                             p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt;
end sie_21_regn_pkg;
/

Prompt Package SIE_25_PLPDF_EXPOR_IR_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_25_PLPDF_EXPOR_IR_PKG"
  authid current_user as
  knu_marge_cel                  constant number
                                            default plpdf_toolkit.conv (0.2,
                                                                        'mm') ;
  kva_formt_nombr                constant varchar2 (30) default 'FM9G999G999G990D00';

  type typ_rec_coulr_pdf is record
  (
    vva_coulr_polc_entet                    varchar2 (7),
    vva_coulr_backg_entet                   varchar2 (7)
  );

  type typ_rec_parmt_impre is record
  (
    va_indic_trouv                          varchar2 (1) default 'N',
    va_contn_disps                          apex_regn.prn_content_disposition%type default 'ATTACHMENT',
    va_formt_papr                           apex_regn.prn_paper_size%type default 'LETTER',
    va_orien_papr                           apex_regn.prn_orientation%type default 'VERTICAL',
    va_unite_mesr                           apex_regn.prn_units%type default 'INCHES',
    nu_largr_papr                           apex_regn.prn_width%type default 8.5,
    nu_hautr_papr                           apex_regn.prn_height%type default 11,
    nu_bordr_tail                           apex_regn.prn_border_width%type default 0.5,
    va_bordr_coulr                          apex_regn.prn_border_color%type,
    va_entet_polc_faml                      apex_regn.prn_page_header_font_family%type default 'Helvetica',
    va_entet_polc_poids                     apex_regn.prn_page_header_font_weight%type default 'normal',
    nu_entet_polc_tail                      apex_regn.prn_page_header_font_size%type default 12,
    va_entet_polc_coulr                     apex_regn.prn_page_header_font_color%type,
    va_entet_align                          apex_regn.prn_page_header_alignment%type default 'LEFT',
    va_entet_texte                          apex_regn.prn_page_header%type,
    va_coln_polc_faml                       apex_regn.prn_header_font_family%type default 'Helvetica',
    va_coln_polc_poids                      apex_regn.prn_header_font_weight%type default 'bold',
    nu_coln_polc_tail                       apex_regn.prn_header_font_size%type default 8,
    va_coln_polc_coulr                      apex_regn.prn_header_font_color%type,
    va_coln_fond_coulr                      apex_regn.prn_header_bg_color%type default '#e0e0e0',
    va_corps_polc_faml                      apex_regn.prn_body_font_family%type default 'Helvetica',
    va_corps_polc_poids                     apex_regn.prn_body_font_weight%type default 'normal',
    nu_corps_polc_tail                      apex_regn.prn_body_font_size%type default 8,
    va_corps_polc_coulr                     apex_regn.prn_body_font_color%type,
    va_corps_fond_coulr                     apex_regn.prn_body_bg_color%type default '#f5f5f5',
    va_pied_polc_faml                       apex_regn.prn_page_footer_font_family%type default 'Helvetica',
    va_pied_polc_poids                      apex_regn.prn_page_footer_font_weight%type default 'normal',
    nu_pied_polc_tail                       apex_regn.prn_page_footer_font_size%type default 8,
    va_pied_polc_coulr                      apex_regn.prn_page_footer_font_color%type,
    va_pied_align                           apex_regn.prn_page_footer_alignment%type default 'LEFT',
    va_pied_texte                           apex_regn.prn_page_footer%type
  );

  type typ_tab_hautr_minml is table of number
                                index by varchar2 (5);

  type typ_rec_hautr_faml_polc is record (vta_hautr_minml typ_tab_hautr_minml);

  type typ_tab_hautr_faml_polc is table of typ_rec_hautr_faml_polc
                                    index by varchar2 (4000);

  kva_seprt_coln                 constant varchar2 (1) default ',';
  gnu_largr_logo                          number;
  gbl_logo                                blob;
  gre_coulr_pdf                           typ_rec_coulr_pdf;
  gpi_parmt_impr                          typ_rec_parmt_impre;
  gta_hautr_cel                           typ_tab_hautr_faml_polc;

  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'));

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln);

  function detrm_type_surlg (pva_coulr_polc_ligne apex_ir_condt.row_font_color%type,
                             pva_coulr_backg_ligne apex_ir_condt.row_bg_color%type)
    return varchar2;

  function convr_parmt_align (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2;

  function convr_parmt_faml (pva_parmt in varchar2)
    return varchar2;

  function convr_parmt_poids (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2;

  procedure init_hautr_cel (pva_faml_polc in varchar2 default 'Arial');

  function obten_hautr_cel (pva_faml_polc in varchar2 default 'Arial',
                            pnu_tail_polc in number default 8)
    return number;
end;
/

Prompt Package SIE_25_RAPRT_INTER_EXPOR_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_25_RAPRT_INTER_EXPOR_PKG"
  authid current_user as
  kva_seprt_coln                 constant varchar2 (1) default ',';

  gnu_largr_logo                          number;
  gbl_logo                                blob;

  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'));

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln);
end;
/

Prompt Package SIE_25_SPX_EXPOR_IR_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_25_SPX_EXPOR_IR_PKG"
  authid current_user as
  kva_seprt_coln                 constant varchar2 (1) default ',';
  gnu_largr_logo                          number;
  gbl_logo                                blob;

  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'));

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln);
end;
/

Prompt Package SIE_04_CONTX_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package sie_04_contx_pkg as
  procedure synch_varbl (pnu_ofset_fil in number default 0,
                         pnu_fa_courn in number default sie_07_util_pkg.nv ('SIDF'));

  procedure synch;

  procedure maj (pnu_seqnc_contx in sie_04_contx.seqnc_contx%type default null,
                 pva_actio in sie_04_contx.actio%type default null,
                 pva_contx in sie_04_contx.contx%type default null);

  procedure maj_seqnc_contx;

  procedure defnr_contx_etend_numbr (pva_nom in varchar2,
                                     pnu_valr in number,
                                     pva_type_alimn in varchar2 default 'A',
                                     pbo_page_cible in boolean default true);

  procedure defnr_contx_etend_varch (pva_nom in varchar2,
                                     pva_valr in varchar2,
                                     pva_type_alimn in varchar2 default 'A',
                                     pbo_page_cible in boolean default true);

  procedure defnr_contx_etend_item (pva_nom in varchar2,
                                    pva_item in varchar2,
                                    pva_type_alimn in varchar2 default 'A',
                                    pbo_page_cible in boolean default true);

  function obten_contx_etend_numbr (pva_nom in varchar2)
    return number;

  function obten_contx_etend_varch (pva_nom in varchar2)
    return varchar2;

  function verif_contx_etend_item_page (pva_nom in varchar2)
    return boolean;

  /*bp ajout du code d'application ici*/
  function obten_contx (pva_contx in sie_04_contx.contx%type,
                        pva_actio in out sie_04_contx.actio%type,
                        pnu_seqnc_contx   out sie_04_contx.seqnc_contx%type)
    return number;

  /*bp n'est pas utilisé ailleurs*/
  /*function cherc_contx (pva_contx in sie_04_contx.contx%type,
                        pva_actio in sie_04_contx.actio%type default null)
    return number;*/

  /*bp ajout du code d'application ici*/
  function obten_seqnc_contx (pva_contx in sie_04_contx.contx%type,
                              pva_actio in sie_04_contx.actio%type default null)
    return number;

  procedure defnr_seqnc_selon_contx (pva_contx in sie_04_contx.contx%type,
                                     pnu_seqnc_contx in sie_04_contx.seqnc_contx%type);

  function nv (pva_nom in varchar2,
               pva_contx in sie_04_contx.contx%type default null,
               pva_actio in sie_04_contx.actio%type default null)
    return number;

  function v (pva_nom in varchar2,
              pva_contx in sie_04_contx.contx%type default null,
              pva_actio in sie_04_contx.actio%type default null)
    return varchar2;

  function genr_url_en_contx (pnu_page in number default null,
                              pnu_seqnc_contx in number default null,
                              pva_actio in varchar2 default null,
                              pva_contx in varchar2 default null,
                              pnu_seqnc_contx_inter in number default null,
                              pva_actio_inter in varchar2 default null,
                              pva_contx_inter in varchar2 default null,
                              pnu_numr_page_inter in number default null,
                              pva_reint_sidf in varchar2 default 'N',
                              pva_optio_reqst in varchar2 default null,
                              pva_optio_clear_page in varchar2 default null)
    return varchar2;

  /*bp n'est pas utilisé tout court et si l'est dans les apps, doit etre enlevé*/
  procedure retr_modl;

  procedure valdr_contx (pva_contx in varchar2);

  procedure suprm_contx_page (pnu_page_apex in number);
--procedure trace_item_aplic;
end sie_04_contx_pkg;
/

Prompt Package SIE_04_FIL_ARIAN_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package sie_04_fil_arian_pkg as
  gnu_fa_page_inter                       number (10);

  function obten_dernr_page
    return number;

  function trait_page (pnu_page_id in number default null)
    return boolean;

  function obten_seqnc_fa_de_page_dest (pnu_page_dest in number,
                                        pnu_aplic_dest in number default sie_07_util_pkg.nv ('APP_ID'),
                                        pnu_seqnc_deprt in number default null)
    return number;

  procedure synch_varbl (pbo_sur_soums in boolean default false,
                         pnu_fa_courn in number default sie_07_util_pkg.nv ('SIDF'));

  procedure synch;

  procedure persn (pva_titre_persn in varchar2,
                   pnu_index in number default 0);

  function afich
    return varchar2;

  procedure suprm_elemn_apres (pnu_seqnc_a_partr_de number);

  procedure synch_login;

  function est_valid_sidf (pbo_postn in boolean default false,
                           pnu_fa in number default null)
    return boolean;

  function obten_fa_courn
    return number;

  procedure migr_sesn (pnu_ancn_sesn in number,
                       pnu_nouvl_sesn in number);

  --deprecated
  procedure suprm_elemn_apres_courn;
end sie_04_fil_arian_pkg;
/

Prompt Package SIE_07_SESN_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_07_SESN_PKG" as
  gva_aplic_en_cours                      number (10) default sie_07_util_pkg.v ('A_SAFP_APLIC');
  gva_prodt_en_cours                      number (10) default sie_07_util_pkg.v ('A_SAFP_PRODT');

  procedure defnr_valr_sesn (pva_nom in varchar2,
                             pva_valr in varchar2);

  function obten_valr_sesn (pva_nom in varchar2)
    return varchar2;

  procedure suprm_valr_sesn (pva_nom in varchar2);

  procedure defnr_aplic_en_cours (pva_aplic in varchar2);

  function obten_aplic_en_cours
    return varchar2;

  procedure defnr_prodt_en_cours (pva_prodt in varchar2);

  function obten_prodt_en_cours
    return varchar2;
end sie_07_sesn_pkg;
/

Prompt Package SIE_13_CONDT_PILTB_PKG;
/* Formatted on 04/12/2013 11:34:55 PM (QP5 v5.185.11230.41888) */
create or replace package "SIE_13_CONDT_PILTB_PKG" as
  vbo_en_charg                            boolean default false;

  function obten_indic_lectr_seul_cas (pva_code_cas in varchar2)
    return varchar2;

  function obten_lectr_seul_cas (pva_code_cas in varchar2)
    return boolean;

  function verfr_condt_retn (pva_code_condt in varchar2)
    return boolean;

  function verfr_condt_retn_va (pva_code_condt in varchar2)
    return varchar2;

  function obten_indic_lectr_seul
    return varchar2;

  function obten_lectr_seul
    return boolean;

  function obten_lectr_seul (pva_nom_item in varchar2)
    return boolean;

  function obten_afich (pva_nom_item in varchar2)
    return boolean;

  function obten_lectr_seul_va (pva_nom_item in varchar2)
    return varchar2;

  function obten_afich_va (pva_nom_item in varchar2)
    return varchar2;

  procedure cachr_tous_boutn;

  procedure lectr_seule_tout;

  procedure defn_contx_exect_page;

  procedure ajout_lien_cas_lectr (pnu_seqnc_cas in number,
                                  pnu_page in number);

  procedure ajout_lien_cas_lectr_item (pnu_item in number,
                                       pnu_page in number,
                                       pnu_aplic in number default sie_04_contx_pkg.obten_seqnc_contx ('APLIC'));
end sie_13_condt_piltb_pkg;
/
SET DEFINE OFF;
Prompt Package Body SIE_01_DESTN_EVENM_NOTFB_PKG;
/* Formatted on 04/12/2013 11:35:04 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_destn_evenm_notfb_pkg is
  function resdr (pnu_seqnc_destn_confg in number,
                  pnu_seqnc_struc_aplic in number)
    return sie_01_destn_evenm_notfb_pkg.typ_destn is
    cursor cur_destn is
      select   dc.ref_atrib_sa_nom_formt,
               rd.ident_acces,
               tc.code code_type_comnc,
               asa.nom_coln nom_coln_adres,
               en.ref_struc_aplic ref_struc_aplic
        from   vd_sie_01_destn_confg_en dc,
               vd_sie_01_reslt_destn rd,
               vd_sie_01_confg_evenm_notfb cen,
               vd_sie_12_atrib_struc_aplic asa,
               vd_sie_01_type_comnc tc,
               vd_sie_01_evenm_notfb en
       where   dc.seqnc = pnu_seqnc_destn_confg
           and dc.ref_confg_evenm_notfb = cen.seqnc
           and dc.ref_reslt_destn = rd.seqnc
           and asa.seqnc = dc.ref_atrib_sa_adres_destn
           and tc.seqnc = cen.ref_type_comnc
           and en.seqnc = cen.ref_evenm_notfb;

    rec_destn                               cur_destn%rowtype;

    vre_destn                               sie_01_destn_evenm_notfb_pkg.typ_destn;

    vva_nom_coln                            varchar2 (30);
  begin
    open cur_destn;

    fetch cur_destn
    into rec_destn;

    close cur_destn;

    if rec_destn.code_type_comnc = 'COURL' then
      vre_destn.adres_destn :=
        sie_12_struc_aplic_cu_pkg.resdr_elemn (rec_destn.ref_struc_aplic,
                                               pnu_seqnc_struc_aplic,
                                               rec_destn.ident_acces || '.' || rec_destn.nom_coln_adres);

      --Ca prend le nom aussi en Courriel
      select   nom_coln
        into   vva_nom_coln
        from   vd_sie_12_atrib_struc_aplic asa
       where   asa.seqnc = rec_destn.ref_atrib_sa_nom_formt;

      vre_destn.nom_formt :=
        sie_12_struc_aplic_cu_pkg.resdr_elemn (rec_destn.ref_struc_aplic,
                                               pnu_seqnc_struc_aplic,
                                               rec_destn.ident_acces || '.' || vva_nom_coln);
    elsif rec_destn.code_type_comnc = 'SMS' then
      vre_destn.numr_telph_destn :=
        sie_12_struc_aplic_cu_pkg.resdr_elemn (rec_destn.ref_struc_aplic,
                                               pnu_seqnc_struc_aplic,
                                               rec_destn.ident_acces || '.' || rec_destn.nom_coln_adres);
    end if;

    return vre_destn;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ ('resdr');
      raise;
  end resdr;
end sie_01_destn_evenm_notfb_pkg;
/

Prompt Package Body SIE_01_DESTN_PKG;
/* Formatted on 04/12/2013 11:35:04 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_destn_pkg as
  procedure creer_destn (pnu_destn in number,
                         pva_nom_elemn in varchar2,
                         pnu_reslt_1 in number,
                         pnu_reslt_2 in number,
                         pnu_reslt_3 in number,
                         pnu_reslt_4 in number,
                         pnu_reslt_5 in number,
                         pnu_reslt_6 in number) is
    vva_ident_acces                         varchar2 (4000);
    vva_ident_acces_formt                   varchar2 (4000);
  begin
    select   sa.code || '[' || asa.nom_coln || ']',
             sa.nom || '[' || asa.nom_fonct || ']'
      into   vva_ident_acces,
             vva_ident_acces_formt
      from   vd_sie_12_struc_aplic sa,
             vd_sie_12_atrib_struc_aplic asa,
             vd_sie_01_destn d
     where   d.seqnc = pnu_destn and asa.seqnc = d.ref_atrib_struc_aplic and sa.seqnc = asa.ref_struc_aplic;

    if pnu_reslt_2 is not null then
      select   sa.code || '[' || asa.nom_coln || ']' || '.' || vva_ident_acces
        into   vva_ident_acces
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_2 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;

      select   sa.nom || '[' || asa.nom_fonct || ']' || '.' || vva_ident_acces_formt
        into   vva_ident_acces_formt
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_2 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;
    end if;

    if pnu_reslt_3 is not null then
      select   sa.code || '[' || asa.nom_coln || ']' || '.' || vva_ident_acces
        into   vva_ident_acces
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_3 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;

      select   sa.nom || '[' || asa.nom_fonct || ']' || '.' || vva_ident_acces_formt
        into   vva_ident_acces_formt
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_3 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;
    end if;

    if pnu_reslt_4 is not null then
      select   sa.code || '[' || asa.nom_coln || ']' || '.' || vva_ident_acces
        into   vva_ident_acces
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_4 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;

      select   sa.nom || '[' || asa.nom_fonct || ']' || '.' || vva_ident_acces_formt
        into   vva_ident_acces_formt
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_4 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;
    end if;

    if pnu_reslt_5 is not null then
      select   sa.code || '[' || asa.nom_coln || ']' || '.' || vva_ident_acces
        into   vva_ident_acces
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_5 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;

      select   sa.nom || '[' || asa.nom_fonct || ']' || '.' || vva_ident_acces_formt
        into   vva_ident_acces_formt
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_5 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;
    end if;

    if pnu_reslt_6 is not null then
      select   sa.code || '[' || asa.nom_coln || ']' || '.' || vva_ident_acces
        into   vva_ident_acces
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_6 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;

      select   sa.nom || '[' || asa.nom_fonct || ']' || '.' || vva_ident_acces_formt
        into   vva_ident_acces_formt
        from   vd_sie_12_atrib_struc_aplic asa,
               vd_sie_12_struc_aplic sa
       where   asa.seqnc = pnu_reslt_6 and sa.seqnc = asa.ref_atrib_struc_aplic_seqnc_sa;
    end if;

    insert into   vd_sie_01_reslt_destn (ref_destn, nom, ident_acces, ident_acces_formt)
         values   (pnu_destn,
                   pva_nom_elemn,
                   vva_ident_acces,
                   vva_ident_acces_formt);
  end;
end sie_01_destn_pkg;
/

Prompt Package Body SIE_01_ELEMN_CONFG_EN_PKG;
/* Formatted on 04/12/2013 11:35:04 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_elemn_confg_en_pkg is
  procedure inser_elemn_confg_en (pnu_confg_evenm_notfb in vd_i_sie_01_elemn_confg_en.ref_confg_evenm_notfb%type,
                                  pva_code in vd_i_sie_01_elemn_confg_en.code%type,
                                  pva_ident_acces in vd_i_sie_01_elemn_confg_en.ident_acces%type,
                                  pva_ident_acces_formt in vd_i_sie_01_elemn_confg_en.ident_acces_formt%type) is
  begin
    insert into   vd_i_sie_01_elemn_confg_en (ref_confg_evenm_notfb, code, ident_acces, ident_acces_formt)
         values   (pnu_confg_evenm_notfb,
                   pva_code,
                   pva_ident_acces,
                   pva_ident_acces_formt);
  end inser_elemn_confg_en;

  function formt_elemn_subst_mesg (pva_code in vd_i_sie_01_elemn_confg_en.code%type)
    return varchar2 is
  begin
    return kva_prefx_elemn_subst_mesg || pva_code || kva_sufx_elemn_subst_mesg;
  end formt_elemn_subst_mesg;
end sie_01_elemn_confg_en_pkg;
/

Prompt Package Body SIE_01_ERR_APEX_PKG;
/* Formatted on 04/12/2013 11:35:05 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_err_apex_pkg is
  gnu_versn_orcl                          number (3) default 102;

  /*
  Obtenir une erreur, toujours en ordre, selon la présence d'un occurence par :
  1- Page, table/colonne/contrainte et erreur, par application;
  2- Page et erreur, par application
  3- Page, par application
  4- Table/colonne/contrainte et erreur, par application
  5- Erreur, par application
  6- Table/colonne/contrainte et erreur
  7- Erreur
  8- Générique à l'application
  9- Générique
  */
  cursor cur_1 (pnu_err_code in number,
                pva_contr_err in varchar2,
                pnu_page in number,
                pva_table in varchar2 default null,
                pva_coln in varchar2 default null,
                pnu_versn in number default sie_07_util_pkg.obten_versn_sesn,
                pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   sie_01_code_err_oracl ceo,
             vd_sie_01_mesg_err_lie mel
     where   mel.ref_code_err_oracl = ceo.seqnc
         and ceo.err_code = pnu_err_code
         and (mel.nom_contr = pva_contr_err
           or pva_contr_err is null)
         and (mel.nom_table = pva_table
           or pva_table is null)
         and (mel.nom_coln = pva_coln
           or pva_coln is null)
         and mel.page = pnu_page
         and mel.ref_prodt = pnu_prodt
         and mel.type_liais = 1;

  cursor cur_2 (
    pnu_err_code in number,
    pnu_page in number,
    pnu_versn in number default sie_07_util_pkg.obten_versn_sesn,
    pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn
  ) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   sie_01_code_err_oracl ceo,
             vd_sie_01_mesg_err_lie mel
     where   mel.ref_code_err_oracl = ceo.seqnc
         and ceo.err_code = pnu_err_code
         and mel.page = pnu_page
         and mel.ref_prodt = pnu_prodt
         and mel.type_liais = 2;

  cursor cur_3 (pnu_page in number,
                pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   vd_sie_01_mesg_err_lie mel
     where   mel.page = pnu_page and mel.ref_prodt = pnu_prodt and mel.type_liais = 3;

  cursor cur_4 (pnu_err_code in number,
                pva_contr_err in varchar2,
                pva_table in varchar2 default null,
                pva_coln in varchar2 default null,
                pnu_versn in number default sie_07_util_pkg.obten_versn_sesn,
                pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   sie_01_code_err_oracl ceo,
             vd_sie_01_mesg_err_lie mel
     where   mel.ref_code_err_oracl = ceo.seqnc
         and ceo.err_code = pnu_err_code
         and (mel.nom_contr = pva_contr_err
           or pva_contr_err is null)
         and (mel.nom_table = pva_table
           or pva_table is null)
         and (mel.nom_coln = pva_coln
           or pva_coln is null)
         and mel.ref_prodt = pnu_prodt
         and mel.type_liais = 4;

  cursor cur_5 (
    pnu_err_code in number,
    pnu_versn in number default sie_07_util_pkg.obten_versn_sesn,
    pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn
  ) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   sie_01_code_err_oracl ceo,
             vd_sie_01_mesg_err_lie mel
     where   mel.ref_code_err_oracl = ceo.seqnc
         and ceo.err_code = pnu_err_code
         and mel.ref_prodt = pnu_prodt
         and mel.type_liais = 5;

  cursor cur_6 (pnu_err_code in number,
                pva_contr_err in varchar2,
                pva_table in varchar2 default null,
                pva_coln in varchar2 default null,
                pnu_versn in number default sie_07_util_pkg.obten_versn_sesn) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   sie_01_code_err_oracl ceo,
             vd_sie_01_mesg_err_lie mel
     where   mel.ref_code_err_oracl = ceo.seqnc
         and ceo.err_code = pnu_err_code
         and (mel.nom_contr = pva_contr_err
           or pva_contr_err is null)
         and (mel.nom_table = pva_table
           or pva_table is null)
         and (mel.nom_coln = pva_coln
           or pva_coln is null)
         and mel.type_liais = 6;

  cursor cur_7 (
    pnu_err_code in number,
    pnu_versn in number default sie_07_util_pkg.obten_versn_sesn
  ) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   sie_01_code_err_oracl ceo,
             vd_sie_01_mesg_err_lie mel
     where   mel.ref_code_err_oracl = ceo.seqnc
         and ceo.err_code = pnu_err_code
         and mel.nom_contr is null
         and mel.nom_table is null
         and mel.nom_coln is null
         and mel.type_liais = 7;

  cursor cur_8 (
    pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn
  ) is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   vd_sie_01_mesg_err_lie mel
     where   mel.nom_contr is null
         and mel.ref_code_err_oracl is null
         and mel.nom_table is null
         and mel.nom_coln is null
         and mel.ref_prodt = pnu_prodt
         and mel.type_liais = 8;

  cursor cur_9 is
    select   mel.ref_numr_mesg,
             mel.seqnc
      from   vd_sie_01_mesg_err_lie mel
     where   mel.nom_contr is null
         and mel.page is null
         and mel.ref_code_err_oracl is null
         and mel.nom_table is null
         and mel.nom_coln is null
         and mel.type_liais = 9;

  function trait_page (pnu_page_id in number default null)
    return boolean is
    vnu_page_id                             number default nvl (pnu_page_id, sie_07_util_pkg.nv ('APP_PAGE_ID'));
    vva_indic_trait                         varchar2 (1);
  begin
    begin
      select   aap.indic_prise_charg_sie01
        into   vva_indic_trait
        from   vd_sie_13_page aap,
               vd_sie_11_aplic a
       where   aap.ref_aplic = a.seqnc
           and a.seqnc = sie_11_aplic_pkg.obten_aplic_sesn ()
           and aap.numr_apex = vnu_page_id;

      if vva_indic_trait = 'N' then
        return false;
      else
        return true;
      end if;
    exception
      when no_data_found then
        return true;
    end;
  end trait_page;

  function obten_text_mesg (pva_numr_mesg_err in varchar2,
                            pnu_cas_cursr in number,
                            pnu_seqnc_mel in number,
                            pva_nom_contr in varchar2,
                            pva_nom_table in varchar2,
                            pva_nom_coln in varchar2)
    return varchar2 is
    vva_info_mesg_en_err                    varchar2 (100) default null;
    vbo_afich_err_code                      boolean default obten_afich_err_code;
  begin
    if vbo_afich_err_code then
      vva_info_mesg_en_err := pva_numr_mesg_err || '(' || pnu_cas_cursr || ') : ';
    end if;

    return    vva_info_mesg_en_err
           || sie_01_gestn_mesg_pkg.obten_mesg_par_numr (pva_numr_mesg_err,
                                                         null,
                                                         pva_nom_contr,
                                                         pva_nom_table,
                                                         pva_nom_coln);
  end obten_text_mesg;

  procedure tratr_mesg (pva_mesg in out varchar2,
                        pnu_longr   out number) is
    vnu_debut_ora                           pls_integer default 1;
    vva_mesg_final                          varchar2 (32767);
    vnu_debut_temp                          pls_integer;
    vnu_fin_temp                            pls_integer;
    --variables pour les curseurs
    vva_contr_err                           varchar2 (30);
    vnu_err_oracle                          number (5);
    vva_nom_table                           varchar2 (30);
    vva_nom_col                             varchar2 (30);
    vnu_page                                number default nv ('APP_PAGE_ID');
    vnu_cas_err                             pls_integer;
    vva_info_suplm                          varchar2 (500);
    vva_numr_err                            sie_01_mesg.numr_mesg%type;
    vnu_seqnc_mel                           sie_01_mesg_err_lie.seqnc%type;
  begin
    -- Restaurer les guillemets qui peuvent avoir été échappés
    pva_mesg :=
      replace (pva_mesg,
               '&quot;',
               '"');
    --trouver l'erreur en cours
    vnu_debut_ora :=
      instr (pva_mesg,
             'ORA-') +
      4;

    if vnu_debut_ora = 4 then
      --Vérifier si erreur de checksum
      if instr (pva_mesg,
                'index_i') > 0 then
        pva_mesg :=
          sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000102',
                                                     'AFW');
      else
        return;
      end if;
    else
      vnu_err_oracle :=
        to_number (substr (pva_mesg,
                           vnu_debut_ora,
                           5));
    end if;

    if vnu_err_oracle in (20001, 20505) then
      --Erreur Apex, chercher plus loin
      vnu_debut_ora :=
        instr (pva_mesg,
               'ORA-',
               vnu_debut_ora + 1) +
        4;
      vnu_err_oracle :=
        to_number (substr (pva_mesg,
                           vnu_debut_ora,
                           5));
    end if;

    --Gérer l'erreur
    case
      when vnu_err_oracle = 1 then
        --ORA-00001: violation de contrainte unique (PWS_UTIL.PWS_CODE_ERREUR_ORACLE_PK)
        --trouver le nom de la contrainte, entre le . et la )
        vnu_debut_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_ora) +
          1;
        vnu_fin_temp :=
          instr (pva_mesg,
                 ')',
                 vnu_debut_ora);
        vva_contr_err :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp);
      when vnu_err_oracle = 1400 then
        --ORA-01400: impossible d'insérer NULL dans ("PWS_UTIL"."TEST_ERR"."UN")
        --On a besoin du nom de la table et du nom de la colonne
        vnu_debut_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_ora + 1) +
          2;
        vnu_fin_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_temp) -
          2;
        vva_nom_table :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp + 1);
        vnu_debut_temp := vnu_fin_temp + 4;
        vnu_fin_temp :=
          instr (pva_mesg,
                 ')',
                 vnu_debut_temp) -
          2;
        vva_nom_col :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp + 1);
      when vnu_err_oracle = 1407 then
        --ORA-01407: impossible de mettre à jour ("PWS_UTIL"."TEST_ERR"."DEUX") avec NULL
        vnu_debut_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_ora + 1) +
          2;
        vnu_fin_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_temp) -
          2;
        vva_nom_table :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp + 1);
        vnu_debut_temp := vnu_fin_temp + 4;
        vnu_fin_temp :=
          instr (pva_mesg,
                 ')',
                 vnu_debut_temp) -
          2;
        vva_nom_col :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp + 1);
      when vnu_err_oracle = 2291 then
        --ORA-02291: violation de contrainte d'intégrité (PWS_UTIL.TEST_ERR_ENF_FK) - clé parent introuvable
        vnu_debut_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_ora) +
          1;
        vnu_fin_temp :=
          instr (pva_mesg,
                 ')',
                 vnu_debut_ora);
        vva_contr_err :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp);
      when vnu_err_oracle = 2292 then
        --ORA-02292: violation de contrainte (PWS_UTIL.TEST_ERR_ENF_FK) d'intégrité - enregistrement fils existant
        vnu_debut_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_ora) +
          1;
        vnu_fin_temp :=
          instr (pva_mesg,
                 ')',
                 vnu_debut_ora);
        vva_contr_err :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp);
      when vnu_err_oracle = 2290 then
        --ORA-02290: violation de contraintes (PWS_UTIL.TEST_CK) de vérification
        vnu_debut_temp :=
          instr (pva_mesg,
                 '.',
                 vnu_debut_ora) +
          1;
        vnu_fin_temp :=
          instr (pva_mesg,
                 ')',
                 vnu_debut_ora);
        vva_contr_err :=
          substr (pva_mesg,
                  vnu_debut_temp,
                  vnu_fin_temp - vnu_debut_temp);
      when vnu_err_oracle = 20507 then
        vva_nom_col :=
          upper (substr (pva_mesg,
                         instr (pva_mesg,
                                ' ',
                                -1,
                                1) +
                         1));
      when vnu_err_oracle in (1438, 1861, 1841, 12899) then
        --ORA-01438: valeur incohérente avec la précision indiquée pour cette colonne
        --ORA-12899: valeur trop grande pour la colonne "PWS_UTIL"."TEST_ERR"."UN" (réelle : 201, maximum : 200)
        null;
      when vnu_err_oracle = 20503 then
        pva_mesg :=
          sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000102',
                                                     'AFW');
      when vnu_err_oracle in (20998, 20999) then
        --20998 Levé par LEVER_ERR_APEX_CODE et le message contient code :: message.
        vnu_fin_temp :=
          instr (pva_mesg,
                 'ORA-06512',
                 vnu_debut_ora + 1) -
          1;

        if vnu_fin_temp > 0 then
          pva_mesg :=
            substr (pva_mesg,
                    vnu_debut_ora + 7,
                    vnu_fin_temp - vnu_debut_ora - 6);
        else
          pva_mesg :=
            substr (pva_mesg,
                    vnu_debut_ora + 7);
        end if;
      when vnu_err_oracle between 20000 and 20997 then
        --trouver la fin avec ORA-06512
        vnu_fin_temp :=
          instr (pva_mesg,
                 'ORA-06512',
                 vnu_debut_ora + 1) -
          1;
        pva_mesg :=
          substr (pva_mesg,
                  vnu_debut_ora + 7,
                  vnu_fin_temp - vnu_debut_ora - 6);
      when vnu_err_oracle = 6550 then
        null;
      when vnu_err_oracle is not null then
        --trouver la fin avec ORA-06512
        vnu_fin_temp :=
          instr (pva_mesg,
                 'ORA-06512',
                 vnu_debut_ora + 1) -
          1;
        pva_mesg :=
          substr (pva_mesg,
                  vnu_debut_ora + 7,
                  vnu_fin_temp - vnu_debut_ora - 6);
      else
        null;
    end case;

    if vnu_err_oracle is not null then
      if vnu_err_oracle not between 20000 and 20999
      or vnu_err_oracle = 20507 then
        vnu_cas_err := 1;

        open cur_1 (vnu_err_oracle,
                    vva_contr_err,
                    vnu_page,
                    vva_nom_table,
                    vva_nom_col);

        fetch cur_1
        into vva_numr_err, vnu_seqnc_mel;

        close cur_1;

        if vva_numr_err is null then
          vnu_cas_err := 2;

          open cur_2 (vnu_err_oracle,
                      vnu_page);

          fetch cur_2
          into vva_numr_err, vnu_seqnc_mel;

          close cur_2;
        end if;

        if vva_numr_err is null then
          vnu_cas_err := 3;

          open cur_3 (vnu_page);

          fetch cur_3
          into vva_numr_err, vnu_seqnc_mel;

          close cur_3;
        end if;

        if vva_numr_err is null then
          vnu_cas_err := 4;

          open cur_4 (vnu_err_oracle,
                      vva_contr_err,
                      vva_nom_table,
                      vva_nom_col);

          fetch cur_4
          into vva_numr_err, vnu_seqnc_mel;

          close cur_4;
        end if;

        if vva_numr_err is null then
          vnu_cas_err := 5;

          open cur_5 (vnu_err_oracle);

          fetch cur_5
          into vva_numr_err, vnu_seqnc_mel;

          close cur_5;
        end if;

        if vva_numr_err is null then
          vnu_cas_err := 6;

          open cur_6 (vnu_err_oracle,
                      vva_contr_err,
                      vva_nom_table,
                      vva_nom_col);

          fetch cur_6
          into vva_numr_err, vnu_seqnc_mel;

          close cur_6;
        end if;

        if vva_numr_err is null then
          vnu_cas_err := 7;

          open cur_7 (vnu_err_oracle);

          fetch cur_7
          into vva_numr_err, vnu_seqnc_mel;

          close cur_7;
        end if;

        if vva_numr_err is null then
          vnu_cas_err := 8;

          vva_info_suplm :=
               sie_15_htp_pkg.ouvri_bals ('a',
                                          'href',
                                             'http://ora-'
                                          || trim (   to_char (vnu_err_oracle,
                                                               '00000')
                                                   || '')
                                          || '.ora-code.com',
                                          'target',
                                          '_blank')
            || 'ORA-'
            || trim (   to_char (vnu_err_oracle,
                                 '00000')
                     || '')
            || sie_15_htp_pkg.fermr_bals ('a');

          vva_info_suplm :=
            sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000105',
                                                       pva_valr_subst1            => vva_info_suplm,
                                                       pva_code_prodt             => 'AFW');

          if vva_contr_err is not null then
            vva_info_suplm :=
                 vva_info_suplm
              || sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000106',
                                                            pva_valr_subst1            => vva_contr_err,
                                                            pva_code_prodt             => 'AFW');
          end if;

          if vva_nom_table is not null then
            vva_info_suplm :=
                 vva_info_suplm
              || sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000107',
                                                            pva_valr_subst1            => vva_nom_table,
                                                            pva_code_prodt             => 'AFW');
          end if;

          if vva_nom_col is not null then
            vva_info_suplm :=
                 vva_info_suplm
              || sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000108',
                                                            pva_valr_subst1            => vva_nom_col,
                                                            pva_code_prodt             => 'AFW');
          end if;

          open cur_8 ();

          fetch cur_8
          into vva_numr_err, vnu_seqnc_mel;

          close cur_8;
        end if;

        if vva_numr_err is null then
          vnu_cas_err := 9;

          open cur_9 ();

          fetch cur_9
          into vva_numr_err, vnu_seqnc_mel;

          close cur_9;
        end if;

        if vva_numr_err is null then
          if vva_numr_err != 6550 then
            vva_mesg_final :=
              sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000109',
                                                         pva_valr_subst1            => pva_mesg,
                                                         pva_code_prodt             => 'AFW');
          end if;
        else
          --Obtenir le message d'erreur et effectuer les substitutions
          vva_mesg_final :=
            obten_text_mesg (vva_numr_err,
                             vnu_cas_err,
                             vnu_seqnc_mel,
                             vva_contr_err,
                             vva_nom_table,
                             vva_nom_col);
        end if;

        if vnu_cas_err >= 8 and obten_afich_err_code then
          vva_mesg_final := vva_mesg_final || '(' || vva_info_suplm || ')';
        end if;

        pva_mesg := vva_mesg_final;
      end if;
    end if;

    pnu_longr := length (pva_mesg);
  end tratr_mesg;

  function obten_afich_err_code (pnu_prodt in number default null)
    return boolean is
    vva_indic_afich                         varchar2 (1);
  begin
    select   indic_afich_err_code
      into   vva_indic_afich
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, sie_11_prodt_pkg.obten_prodt_sesn);

    return (vva_indic_afich = 'O');
  end obten_afich_err_code;

  procedure gerer_err_apex (thepage in out nocopy htp.htbuf_arr) is
    vcl_page_apex                           clob;
    vcl_page_apex2                          clob;
    vnu_err_debut                           number;
    vnu_err_fin                             number;
    vva_mesg                                varchar2 (32767);
    vnu_long                                number;
    vnu_indic_thepage_err                   pls_integer;
    vnu_indic_x_ignor                       pls_integer;
    vbo_err                                 boolean default false;
    vva_var_3_lign                          varchar2 (768);
    vnu_indic_temp                          number;
    vnu_max_itert_clob                      pls_integer;
    vbo_sie_err                             boolean;
  begin
    if not trait_page () then
      return;
    end if;

    for i in 1 .. least (20, thepage.count ())
    loop
      if thepage.exists (i) then
        vbo_sie_err      :=
          thepage (i) like '%<!-- :$:SIE%'
          or thepage (i) like '%-ERR:$: -->%';

        if vbo_sie_err then
          vnu_indic_thepage_err :=   i;
          exit;
        end if;
      end if;
    end loop;

    if vbo_sie_err then
      if sie_07_util_pkg.exist_item ('A_SIE_04_SUR_SOUMS') then
        sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_SUR_SOUMS',
                                          null);
      end if;

      dbms_lob.createtemporary (vcl_page_apex,
                                true);

      for i in vnu_indic_thepage_err .. thepage.count () loop
        if thepage.exists (i) then
          dbms_lob.writeappend (vcl_page_apex,
                                length (thepage (i)),
                                thepage (i));
        end if;
      end loop;

      --Déterminer le début de la section d'erreurs
      vnu_err_debut :=
        dbms_lob.instr (vcl_page_apex,
                        '<div class="ErrorPageMessage">');

      if vnu_err_debut = 0 then
        vnu_err_debut :=
          dbms_lob.instr (vcl_page_apex,
                          '<div id="sie_mesg_err"');
      end if;

      vnu_err_debut :=
        dbms_lob.instr (vcl_page_apex,
                        '>',
                        vnu_err_debut) +
        1;
      vnu_err_fin :=
        dbms_lob.instr (vcl_page_apex,
                        '</div',
                        vnu_err_debut) -
        1;

      if vnu_err_debut is not null then
        dbms_lob.createtemporary (vcl_page_apex2,
                                  true);


        dbms_lob.copy (vcl_page_apex2,
                       vcl_page_apex,
                       vnu_err_debut - 1);
        --gérer le message
        vva_mesg :=
          dbms_lob.substr (vcl_page_apex,
                           vnu_err_fin - vnu_err_debut + 1,
                           vnu_err_debut);

        -- Si débug, tracer le message complet et la page complete
        if gbo_mode_debug then
          ete (sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000110',
                                                          pva_code_prodt             => 'AFW'),
               vva_mesg,
               vcl_page_apex);
        end if;

        tratr_mesg (vva_mesg,
                    vnu_long);
        dbms_lob.writeappend (vcl_page_apex2,
                              vnu_long,
                              vva_mesg);
        dbms_lob.copy (vcl_page_apex2,
                       vcl_page_apex,
                       dbms_lob.getlength (vcl_page_apex) - vnu_err_fin,
                       dbms_lob.getlength (vcl_page_apex2) + 1,
                       vnu_err_fin + 1);
        --Générer la nouvelle page web
        vnu_max_itert_clob := floor (dbms_lob.getlength (vcl_page_apex2) / 64) + 1;

        for i in 1 .. vnu_max_itert_clob loop
          thepage (i - 1 + vnu_indic_thepage_err) :=
            dbms_lob.substr (vcl_page_apex2,
                             64,
                             (i - 1) * 64 + 1);
        end loop;

        --vider le reste de l'array pour pas avoir des affaires en double
        thepage.delete (vnu_max_itert_clob + vnu_indic_thepage_err,
                        thepage.count ());

        dbms_lob.freetemporary (vcl_page_apex2);
      end if;

      dbms_lob.freetemporary (vcl_page_apex);
    end if;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ ('Erreur dans la gestion des erreurs APEX');
      sie_03_journ_pkg.ecrir_journ (sqlerrm);
      sie_03_journ_pkg.ecrir_journ (dbms_utility.format_error_backtrace ());
  end gerer_err_apex;

  procedure lever_err_apex_mesg (pva_mesg in varchar2) is
  begin
    raise_application_error (-20999,
                             pva_mesg);
  end lever_err_apex_mesg;

  procedure lever_err_apex_code (pva_code in varchar2,
                                 pva_valr_subst1 in varchar2 default null,
                                 pva_valr_subst2 in varchar2 default null,
                                 pva_valr_subst3 in varchar2 default null,
                                 pva_valr_subst4 in varchar2 default null,
                                 pva_valr_subst5 in varchar2 default null,
                                 pva_valr_subst6 in varchar2 default null,
                                 pva_valr_subst7 in varchar2 default null,
                                 pva_valr_subst8 in varchar2 default null,
                                 pva_valr_subst9 in varchar2 default null,
                                 pva_valr_subst10 in varchar2 default null,
                                 pva_code_prodt in varchar2 default null,
                                 pbo_afich_code in boolean default obten_afich_err_code) is
    vva_mesg                                varchar2 (4000);
  begin
    vva_mesg :=
      sie_01_gestn_mesg_pkg.obten_mesg_par_numr (pva_code,
                                                 pva_code_prodt,
                                                 pva_valr_subst1,
                                                 pva_valr_subst2,
                                                 pva_valr_subst3,
                                                 pva_valr_subst4,
                                                 pva_valr_subst5,
                                                 pva_valr_subst6,
                                                 pva_valr_subst7,
                                                 pva_valr_subst8,
                                                 pva_valr_subst9,
                                                 pva_valr_subst10);

    raise_application_error (-20998,
                             case when pbo_afich_code then pva_code || ' :: ' else null end || vva_mesg);
  end lever_err_apex_code;

  procedure lever_err_apex_systm_code (pva_code in varchar2,
                                       pva_valr_subst1 in varchar2 default null,
                                       pva_valr_subst2 in varchar2 default null,
                                       pva_valr_subst3 in varchar2 default null,
                                       pva_valr_subst4 in varchar2 default null,
                                       pva_valr_subst5 in varchar2 default null,
                                       pva_valr_subst6 in varchar2 default null,
                                       pva_valr_subst7 in varchar2 default null,
                                       pva_valr_subst8 in varchar2 default null,
                                       pva_valr_subst9 in varchar2 default null,
                                       pva_valr_subst10 in varchar2 default null,
                                       pva_code_systm in varchar2 default null,
                                       pbo_afich_code in boolean default obten_afich_err_code) is
    vva_mesg                                varchar2 (4000);
  begin
    vva_mesg :=
      sie_01_gestn_mesg_pkg.obten_mesg_par_numr (pva_code,
                                                 pva_code_systm,
                                                 pva_valr_subst1,
                                                 pva_valr_subst2,
                                                 pva_valr_subst3,
                                                 pva_valr_subst4,
                                                 pva_valr_subst5,
                                                 pva_valr_subst6,
                                                 pva_valr_subst7,
                                                 pva_valr_subst8,
                                                 pva_valr_subst9,
                                                 pva_valr_subst10);
    raise_application_error (-20998,
                             case when pbo_afich_code then pva_code || ' :: ' else null end || vva_mesg);
  end lever_err_apex_systm_code;

  procedure lever_err_apex (pnu_seqnc in number default null,
                            pva_valr_subst1 in varchar2 default null,
                            pva_valr_subst2 in varchar2 default null,
                            pva_valr_subst3 in varchar2 default null,
                            pva_valr_subst4 in varchar2 default null,
                            pva_valr_subst5 in varchar2 default null,
                            pva_valr_subst6 in varchar2 default null,
                            pva_valr_subst7 in varchar2 default null,
                            pva_valr_subst8 in varchar2 default null,
                            pva_valr_subst9 in varchar2 default null,
                            pva_valr_subst10 in varchar2 default null,
                            pbo_afich_code in boolean default obten_afich_err_code) is
    vva_numr_mesg                           vd_i_sie_01_mesg.numr_mesg%type;
    vnu_ref_prodt                           vd_i_sie_01_mesg.ref_prodt%type;
  begin
    select   numr_mesg,
             ref_prodt
      into   vva_numr_mesg,
             vnu_ref_prodt
      from   vd_i_sie_01_mesg
     where   seqnc = pnu_seqnc;

    lever_err_apex_code (vva_numr_mesg,
                         pva_valr_subst1,
                         pva_valr_subst2,
                         pva_valr_subst3,
                         pva_valr_subst4,
                         pva_valr_subst5,
                         pva_valr_subst6,
                         pva_valr_subst7,
                         pva_valr_subst8,
                         pva_valr_subst9,
                         pva_valr_subst10,
                         vnu_ref_prodt,
                         pbo_afich_code);
  exception
    when no_data_found then
      raise_application_error (-20998,
                               'Une erreur inconnue est survenue.');
  end lever_err_apex;

  function obten_mesg_infor_sucs
    return varchar2 is
    cursor cur_mesg_info is
      select     mi.text_mesg
          from   vd_sie_01_mesg_lang ml,
                 vd_sie_01_mesg_infor mi
         where   (ml.type_mesg in ('I', 'A')
               or ml.type_mesg is null)
             and ml.seqnc(+) = mi.ref_mesg_lang
      order by   mi.seqnc;

    vva_mesg                                varchar2 (32767);
  begin
    for rec_mesg_info in cur_mesg_info loop
      vva_mesg := vva_mesg || '<br />' || rec_mesg_info.text_mesg;
    end loop;

    vva_mesg :=
      substr (vva_mesg,
              7);

    delete   vd_sie_01_mesg_infor mi
     where   mi.ref_mesg_lang is null
          or exists
               (select   null
                  from   vd_sie_01_mesg_lang ml
                 where   ml.type_mesg in ('I', 'A') and ml.seqnc = mi.ref_mesg_lang);

    return vva_mesg;
  end obten_mesg_infor_sucs;

  function obten_mesg_infor_ereur
    return varchar2 is
    cursor cur_mesg_info is
      select     mi.text_mesg
          from   vd_sie_01_mesg_lang ml,
                 vd_sie_01_mesg_infor mi
         where   ml.type_mesg in ('E', 'C', 'W') and ml.seqnc = mi.ref_mesg_lang
      order by   mi.seqnc;

    vva_mesg                                varchar2 (32767);
  begin
    for rec_mesg_info in cur_mesg_info loop
      vva_mesg := vva_mesg || '<br />' || rec_mesg_info.text_mesg;
    end loop;

    vva_mesg :=
      substr (vva_mesg,
              7);

    delete   vd_sie_01_mesg_infor mi
     where   exists
               (select   null
                  from   vd_sie_01_mesg_lang ml
                 where   ml.type_mesg in ('E', 'C', 'W') and ml.seqnc = mi.ref_mesg_lang);

    return vva_mesg;
  end obten_mesg_infor_ereur;

  procedure afich_mesg_infor_apex is
    vva_mesg_sucs                           varchar2 (32767);
    vva_mesg_ereur                          varchar2 (32767);
  begin
    vva_mesg_sucs := obten_mesg_infor_sucs;

    if vva_mesg_sucs is not null then
      sie_15_htp_pkg.ecrir (sie_07_util_pkg.multi_replc (sie_13_page_pkg.obten_modl_mesg_sucs,
                                                         '#SUCCESS_MESSAGE#',
                                                         vva_mesg_sucs),
                            false);
    end if;

    vva_mesg_ereur := obten_mesg_infor_ereur;

    if vva_mesg_ereur is not null then
      sie_15_htp_pkg.ecrir (sie_07_util_pkg.multi_replc (sie_13_page_pkg.obten_modl_mesg_ereur,
                                                         '#MESSAGE#',
                                                         vva_mesg_ereur),
                            false);
    end if;
  end afich_mesg_infor_apex;

  procedure ajout_mesg_infor_sesn_mesg (pva_mesg in varchar2) is
  begin
    insert into   vd_i_sie_01_mesg_infor mi (text_mesg)
         values   (pva_mesg);
  end ajout_mesg_infor_sesn_mesg;

  procedure ajout_mesg_infor_sesn_code (pva_code_mesg in varchar2,
                                        pva_valr_subst1 in varchar2 default null,
                                        pva_valr_subst2 in varchar2 default null,
                                        pva_valr_subst3 in varchar2 default null,
                                        pva_valr_subst4 in varchar2 default null,
                                        pva_valr_subst5 in varchar2 default null,
                                        pva_valr_subst6 in varchar2 default null,
                                        pva_valr_subst7 in varchar2 default null,
                                        pva_valr_subst8 in varchar2 default null,
                                        pva_valr_subst9 in varchar2 default null,
                                        pva_valr_subst10 in varchar2 default null,
                                        pva_code_prodt in varchar2 default null) is
  begin
    insert into   vd_i_sie_01_mesg_infor mi (text_mesg, ref_mesg_lang)
         values   (sie_01_gestn_mesg_pkg.obten_mesg_par_numr (pva_code_mesg,
                                                              pva_code_prodt,
                                                              pva_valr_subst1,
                                                              pva_valr_subst2,
                                                              pva_valr_subst3,
                                                              pva_valr_subst4,
                                                              pva_valr_subst5,
                                                              pva_valr_subst6,
                                                              pva_valr_subst7,
                                                              pva_valr_subst8,
                                                              pva_valr_subst9,
                                                              pva_valr_subst10),
                   sie_01_gestn_mesg_pkg.obten_seqnc_mesg_lang_sesn (pva_code_mesg,
                                                                     pva_code_prodt));
  end ajout_mesg_infor_sesn_code;

  procedure ajout_mesg_infor_sesn_sys_code (pva_code_mesg in varchar2,
                                            pva_valr_subst1 in varchar2 default null,
                                            pva_valr_subst2 in varchar2 default null,
                                            pva_valr_subst3 in varchar2 default null,
                                            pva_valr_subst4 in varchar2 default null,
                                            pva_valr_subst5 in varchar2 default null,
                                            pva_valr_subst6 in varchar2 default null,
                                            pva_valr_subst7 in varchar2 default null,
                                            pva_valr_subst8 in varchar2 default null,
                                            pva_valr_subst9 in varchar2 default null,
                                            pva_valr_subst10 in varchar2 default null,
                                            pva_code_systm in varchar2 default null) is
  begin
    insert into   vd_i_sie_01_mesg_infor mi (text_mesg, ref_mesg_lang)
         values   (sie_01_gestn_mesg_pkg.obten_mesg_par_numr (pva_code_mesg,
                                                              pva_code_systm,
                                                              pva_valr_subst1,
                                                              pva_valr_subst2,
                                                              pva_valr_subst3,
                                                              pva_valr_subst4,
                                                              pva_valr_subst5,
                                                              pva_valr_subst6,
                                                              pva_valr_subst7,
                                                              pva_valr_subst8,
                                                              pva_valr_subst9,
                                                              pva_valr_subst10),
                   sie_01_gestn_mesg_pkg.obten_seqnc_mesg_lang_sesn (pva_code_mesg,
                                                                     pva_code_systm));
  end ajout_mesg_infor_sesn_sys_code;

  procedure ajout_mesg_infor_utils_mesg (pva_mesg in varchar2,
                                         pnu_utils in number) is
  begin
    insert into   vd_i_sie_01_mesg_infor mi (text_mesg, ref_utils)
         values   (pva_mesg,
                   pnu_utils);
  end ajout_mesg_infor_utils_mesg;

  procedure ajout_mesg_infor_utils_code (pva_code_mesg in varchar2,
                                         pnu_utils in number,
                                         pva_valr_subst1 in varchar2 default null,
                                         pva_valr_subst2 in varchar2 default null,
                                         pva_valr_subst3 in varchar2 default null,
                                         pva_valr_subst4 in varchar2 default null,
                                         pva_valr_subst5 in varchar2 default null,
                                         pva_valr_subst6 in varchar2 default null,
                                         pva_valr_subst7 in varchar2 default null,
                                         pva_valr_subst8 in varchar2 default null,
                                         pva_valr_subst9 in varchar2 default null,
                                         pva_valr_subst10 in varchar2 default null,
                                         pva_code_prodt in varchar2 default null) is
  begin
    insert into   vd_i_sie_01_mesg_infor mi (text_mesg, ref_utils, ref_mesg_lang)
         values   (sie_01_gestn_mesg_pkg.obten_mesg_par_numr (pva_code_mesg,
                                                              pva_code_prodt,
                                                              pva_valr_subst1,
                                                              pva_valr_subst2,
                                                              pva_valr_subst3,
                                                              pva_valr_subst4,
                                                              pva_valr_subst5,
                                                              pva_valr_subst6,
                                                              pva_valr_subst7,
                                                              pva_valr_subst8,
                                                              pva_valr_subst9,
                                                              pva_valr_subst10),
                   pnu_utils,
                   sie_01_gestn_mesg_pkg.obten_seqnc_mesg_lang_sesn (pva_code_mesg,
                                                                     pva_code_prodt));
  end ajout_mesg_infor_utils_code;

  function gestn_mesg_err_apex (p_error in apex_error.t_error)
    return apex_error.t_error_result is
    ver_reslt                               apex_error.t_error_result;
    vva_message                             varchar2 (32767) default p_error.ora_sqlerrm;
    vnu_longr                               number default 32767;
  --vva_sourc_url   varchar2 (4000);
  begin
    --prendre exemple sur l'exemple dans le package apex_error (APEX_040100.WWV_FLOW_ERROR)

    if instr (vva_message,
              'WWV_FLOW_PAGE_SUBMISSIONS_PK') > 0 then
      --(Erreur ORACLE ORA-00001, contrainte : WWV_FLOW_PAGE_SUBMISSIONS_PK)
      vva_message :=
        sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000111',
                                                   pva_code_prodt             => 'AFW');
      vnu_longr := length (vva_message);
    /* elsif instr (
             vva_message,
             'ERR-3331') >
             0 then
       --(Erreur ORACLE ORA-00001, contrainte : WWV_FLOW_PAGE_SUBMISSIONS_PK)
        vva_sourc_url :=   v ('A_SIE_04_SOURC_URL');

       vva_message      :=
         'Vous ne pouvez pas soumettre ce formulaire à plusieurs reprises (attention de ne pas double-cliquer sur les boutons).'
         || case
              when vva_sourc_url is not null then
                   ' <a href="'
                || vva_sourc_url
                || '">Veuillez retourner à la page précédente.</a>'
              else
                null
            end;

       vnu_longr :=   length (vva_message);*/
    else
      tratr_mesg (vva_message,
                  vnu_longr);
    end if;

    ver_reslt := apex_error.init_error_result (p_error => p_error);

    ver_reslt.message := vva_message;

    ver_reslt.additional_info := null;

    ver_reslt.display_location :=
      case
        when ver_reslt.display_location = apex_error.c_on_error_page then apex_error.c_inline_in_notification
        else ver_reslt.display_location
      end;

    ver_reslt.page_item_name := p_error.page_item_name;
    ver_reslt.column_alias := p_error.column_alias;

    return ver_reslt;
  end gestn_mesg_err_apex;
begin
  gbo_mode_debug := true;
end sie_01_err_apex_pkg;
/

Prompt Package Body SIE_01_EVENM_NOTFB_CU_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_evenm_notfb_cu_pkg as
  type typ_valr is record
  (
    vnu_valr                                number,
    vva_valr                                varchar2 (4000),
    vda_date                                date
  );

  type type_rec_aplic is record
  (
    seqnc                                   number (10),
    nom_struc_acces                         varchar2 (30),
    nom_alias                               varchar2 (2),
    nom_coln_forgn_key                      varchar2 (30)
  );

  type typ_chemn is table of type_rec_aplic
                      index by pls_integer;

  type typ_rec_elemn_subst is record
  (
    code_elemn                              varchar2 (100),
    chemn_acces_reslt                       varchar2 (4000)
  );

  type typ_tab_elemn_subst is table of typ_rec_elemn_subst
                                index by pls_integer;

  function valr_null (pre_valr in typ_valr)
    return boolean is
  begin
    if pre_valr.vva_valr is null and pre_valr.vnu_valr is null and pre_valr.vda_date is null then
      return true;
    else
      return false;
    end if;
  end valr_null;

  function resdr_chemn_acces (pnu_seqnc_initl in number,
                              pta_chemn in out typ_chemn)
    return typ_valr is
    vre_valr                                typ_valr;
    vva_nom_struc_acces                     varchar2 (30);
    vva_nom_coln_forgn_key                  varchar2 (30);
    vva_sql                                 varchar2 (32767);
  begin
    for i in pta_chemn.first () .. pta_chemn.last () loop
      if pta_chemn (i).nom_struc_acces is null then
        --Obtenir le nom de la structure d'accès de l'application et des colonnes de résolution
        select   sa.nom_struc_acces_don,
                 asa_fk.nom_coln
          into   pta_chemn (i).nom_struc_acces,
                 pta_chemn (i - 1).nom_coln_forgn_key
          from   vd_sie_12_atrib_struc_aplic asa_fk,
                 vd_sie_12_atrib_struc_aplic asa,
                 vd_sie_12_struc_aplic sa,
                 vd_sie_01_hierc_aplic ha
         where   asa_fk.seqnc = ha.ref_atrib_struc_aplic
             and asa.ref_struc_aplic = sa.seqnc
             and asa.seqnc = asa_fk.ref_atrib_struc_aplic
             and ha.seqnc = pta_chemn (i).seqnc;

        pta_chemn (i).nom_alias := chr (64 + i);
      end if;
    end loop;

    --Résoudre, passer toutes les applications et énoncer un SQL obtenant la valeur
    vva_sql := 'select ' || pta_chemn (pta_chemn.last ()).nom_alias || '.seqnc ' || chr (10) || 'from ';

    for i in pta_chemn.first () .. pta_chemn.last () loop
      vva_sql := vva_sql || pta_chemn (i).nom_struc_acces || ' ' || pta_chemn (i).nom_alias || ', ';
    end loop;

    vva_sql :=
         substr (vva_sql,
                 1,
                 length (vva_sql) - 2)
      || chr (10)
      || 'where a.seqnc = :pnu_seqnc_initl ';

    for i in pta_chemn.first () + 1 .. pta_chemn.last () loop
      vva_sql :=
           vva_sql
        || 'and '
        || pta_chemn (i).nom_alias
        || '.seqnc = '
        || pta_chemn (i - 1).nom_alias
        || '.'
        || pta_chemn (i - 1).nom_coln_forgn_key
        || ' ';
    end loop;

    begin
      execute immediate vva_sql                                     into   vre_valr.vnu_valr using pnu_seqnc_initl;
    exception
      when no_data_found then
        return vre_valr;
    end;

    return vre_valr;
  end resdr_chemn_acces;

  /*
        function resdr_chemn_acces (pnu_seqnc_evenm_notfb   in number,
                                pnu_seqnc_initl         in number,
                                pva_chemn               in varchar2)
      return typ_valr is
    begin
      null;
    end resdr_chemn_acces;*/

  function resdr_ocurn_destn (pnu_seqnc_destn_confg in number,
                              pnu_seqnc_struc_aplic in number)
    return sie_01_destn_evenm_notfb_pkg.typ_destn is
  begin
    return sie_01_destn_evenm_notfb_pkg.resdr (pnu_seqnc_destn_confg,
                                               pnu_seqnc_struc_aplic);
  end resdr_ocurn_destn;

  procedure notfc_sms (pnu_confg_evenm_notfb in number,
                       pta_destn in typ_tab_destn,
                       pva_mesg in varchar2) is
  begin
    sie_01_notfc_pkg.notfc_sms (pnu_confg_evenm_notfb,
                                pta_destn,
                                pva_mesg);
  end notfc_sms;

  procedure notfc_courl (pnu_confg_evenm_notfb in number,
                         pta_destn in typ_tab_destn,
                         pcl_mesg in clob,
                         pva_objet in varchar2,
                         pta_piec_joint in typ_tab_piec_joint) is
  begin
    sie_01_notfc_pkg.notfc_courl (pnu_confg_evenm_notfb,
                                  pta_destn,
                                  pcl_mesg,
                                  pva_objet,
                                  pta_piec_joint);
  end notfc_courl;

  procedure apliq_confg (pnu_confg in number,
                         pnu_seqnc_struc_aplic in number) is
    vta_elemn_subst                         typ_tab_elemn_subst;

    --TODO: Carlo
    --Créer sie_01_confg_evenm_notfb_lang pour gérer la traduction des messages
    --type de communication: courl et sms
    --Il faut aussi typer le message à savoir si c'est du plain text ou du HTML

    cursor cur_mesg is
      select   objet,
               mesg,
               mesg_sms,
               (select   en.ref_struc_aplic
                  from   vd_sie_01_evenm_notfb en
                 where   en.seqnc = ref_evenm_notfb)
                 ref_struc_aplic,
               ref_type_comnc_code_formt,
               ref_evenm_notfb
        from   vd_sie_01_confg_evenm_notfb
       where   seqnc = pnu_confg;

    rec_mesg                                cur_mesg%rowtype;

    cursor cur_destn is
      select   d.seqnc,
               dc.seqnc seqnc_destn_confg_en,
               rd.ident_acces,
               ref_atrib_sa_nom_formt_code,
               ref_atrib_sa_adres_destn_code,
               ref_dv_natr_destn_code
        from   vd_sie_01_reslt_destn rd,
               vd_sie_01_destn d,
               vd_sie_01_destn_confg_en dc,
               vd_sie_01_evenm_notfb en,
               vd_sie_01_confg_evenm_notfb cen
       where   rd.ref_struc_aplic_acces = en.ref_struc_aplic
           and rd.ref_destn = d.seqnc
           and d.seqnc = dc.ref_destn
           and dc.ref_confg_evenm_notfb = cen.seqnc
           and en.seqnc = cen.ref_evenm_notfb
           and cen.seqnc = pnu_confg;

    rec_destn                               cur_destn%rowtype;
    vta_destn                               typ_tab_destn;
    vta_piec_joint                          typ_tab_piec_joint;
    vnu_indic_debut_valr                    pls_integer;
    vnu_indic_fin_valr                      pls_integer;
    vva_elemn                               varchar2 (4000);
    vva_mesg_sms_formt                      varchar2 (160);
    vva_objet_formt                         varchar2 (4000);
    vcl_mesg_formt                          clob;
    vre_destn                               sie_01_destn_evenm_notfb_pkg.typ_destn;

    procedure extra_subst_corps is
    begin
      vnu_indic_debut_valr :=
        dbms_lob.instr (rec_mesg.mesg,
                        '[#');

      --Déterminer tous les éléments à sélectionner dans les références
      while vnu_indic_debut_valr > 0 loop
        --Déterminer la fin de la substitution
        vnu_indic_fin_valr :=
          dbms_lob.instr (rec_mesg.mesg,
                          '#]',
                          vnu_indic_debut_valr);

        if vnu_indic_fin_valr = 0
        or vnu_indic_fin_valr - vnu_indic_debut_valr > 102 then
          --Ce n'est pas une réelle valeur de substitution, il faut chercher plus loin
          --ou la valeur est plus large que 100
          null;
        else
          vta_elemn_subst (vta_elemn_subst.count ()).code_elemn :=
            dbms_lob.substr (rec_mesg.mesg,
                             vnu_indic_fin_valr - vnu_indic_debut_valr + 2,
                             vnu_indic_debut_valr);
        end if;

        vnu_indic_debut_valr :=
          dbms_lob.instr (rec_mesg.mesg,
                          '[#',
                          vnu_indic_debut_valr + 1);
      end loop;
    exception
      when others then
        sie_03_journ_pkg.ecrir_journ ('extra_subst_corps');
        raise;
    end extra_subst_corps;

    procedure resdr_subst_corps is
    begin
      --Résoudre les substitutions
      if vta_elemn_subst.count () != 0 then
        for i in vta_elemn_subst.first .. vta_elemn_subst.last loop
          begin
            select   ident_acces
              into   vva_elemn
              from   vd_sie_01_elemn_confg_en
             where   code = substr (vta_elemn_subst (i).code_elemn,
                                    3,
                                    length (vta_elemn_subst (i).code_elemn) - 4)
                 and ref_confg_evenm_notfb = pnu_confg;

            vva_elemn :=
              sie_12_struc_aplic_cu_pkg.resdr_elemn (rec_mesg.ref_struc_aplic,
                                                     pnu_seqnc_struc_aplic,
                                                     vva_elemn);
            sie_07_clob_pkg.replc (vcl_mesg_formt,
                                   vta_elemn_subst (i).code_elemn,
                                   vva_elemn);
          exception
            when no_data_found then
              -- On en trouve pas comment remplacer un élément de substitution
              null;
          end;
        end loop;
      end if;
    exception
      when others then
        sie_03_journ_pkg.ecrir_journ ('resdr_subst_corps');
        raise;
    end resdr_subst_corps;

    procedure extra_subst_texte (pva_texte in out varchar2) is
    begin
      --Déterminer tous les éléments à sélectionner dans les références

      vnu_indic_debut_valr :=
        instr (pva_texte,
               '[#');

      while vnu_indic_debut_valr > 0 loop
        --Déterminer la fin de la substitution
        vnu_indic_fin_valr :=
          instr (pva_texte,
                 '#]',
                 vnu_indic_debut_valr);

        if vnu_indic_fin_valr = 0 then
          exit;
        else
          vta_elemn_subst (vta_elemn_subst.count ()).code_elemn :=
            substr (pva_texte,
                    vnu_indic_debut_valr,
                    vnu_indic_fin_valr - vnu_indic_debut_valr + 2);
        end if;

        vnu_indic_debut_valr :=
          instr (pva_texte,
                 '[#',
                 vnu_indic_debut_valr + 2);
      end loop;
    exception
      when others then
        sie_03_journ_pkg.ecrir_journ ('extra_subst_texte');
        raise;
    end extra_subst_texte;

    procedure resdr_subst_texte (pva_texte in out varchar2) is
    begin
      --Résoudre les substitutions
      for i in vta_elemn_subst.first .. vta_elemn_subst.last loop
        begin
          select   ident_acces
            into   vva_elemn
            from   vd_sie_01_elemn_confg_en
           where   code = substr (vta_elemn_subst (i).code_elemn,
                                  3,
                                  length (vta_elemn_subst (i).code_elemn) - 4)
               and ref_confg_evenm_notfb = pnu_confg;

          vva_elemn :=
            sie_12_struc_aplic_cu_pkg.resdr_elemn (rec_mesg.ref_struc_aplic,
                                                   pnu_seqnc_struc_aplic,
                                                   vva_elemn);
          pva_texte :=
            replace (pva_texte,
                     vta_elemn_subst (i).code_elemn,
                     vva_elemn);
        exception
          when no_data_found then
            -- On en trouve pas comment remplacer un élément de substitution
            null;
        end;
      end loop;
    exception
      when others then
        sie_03_journ_pkg.ecrir_journ ('resdr_subst_texte');
        raise;
    end resdr_subst_texte;
  begin
    --Obtenir le message et l'objet
    open cur_mesg;

    fetch cur_mesg
    into rec_mesg;

    close cur_mesg;

    op ('La configuration est du type ' || nvl (rec_mesg.ref_type_comnc_code_formt, 'NULL'));

    if rec_mesg.ref_type_comnc_code_formt in ('COURL', 'ECRAN') then
      dbms_lob.createtemporary (vcl_mesg_formt,
                                true);
      dbms_lob.copy (vcl_mesg_formt,
                     rec_mesg.mesg,
                     dbms_lob.getlength (rec_mesg.mesg));

      extra_subst_corps;
      resdr_subst_corps;

      vva_objet_formt := rec_mesg.objet;
      extra_subst_texte (rec_mesg.objet);
      resdr_subst_texte (vva_objet_formt);

      --Obtenir les destinataires
      for rec_destn in cur_destn loop
        vre_destn :=
          sie_01_destn_evenm_notfb_pkg.resdr (rec_destn.seqnc_destn_confg_en,
                                              pnu_seqnc_struc_aplic);

        if vre_destn.adres_destn is not null then
          vta_destn (rec_destn.seqnc_destn_confg_en).type_destn := rec_destn.ref_dv_natr_destn_code;

          vta_destn (rec_destn.seqnc_destn_confg_en).nom_formt := vre_destn.nom_formt;
          vta_destn (rec_destn.seqnc_destn_confg_en).adres_courl := vre_destn.adres_destn;

          op ('rec_destn.seqnc_destn_confg_en',
              rec_destn.seqnc_destn_confg_en);
          op ('rec_destn.ref_dv_natr_destn_code',
              rec_destn.ref_dv_natr_destn_code);
          op ('vre_destn.nom_formt',
              vre_destn.nom_formt);
          op ('vre_destn.adres_destn',
              vre_destn.adres_destn);
        end if;
      end loop;

      op (vta_destn.count () || ' destinataire(s) recevront le message');

      --Envoyer le courriel
      notfc_courl (pnu_confg,
                   vta_destn,
                   vcl_mesg_formt,
                   vva_objet_formt,
                   vta_piec_joint);
    elsif rec_mesg.ref_type_comnc_code_formt = 'SMS' then
      vva_mesg_sms_formt := rec_mesg.mesg_sms;

      extra_subst_texte (rec_mesg.mesg_sms);
      resdr_subst_texte (vva_mesg_sms_formt);

      --Obtenir les destinataires
      for rec_destn in cur_destn loop
        vre_destn :=
          sie_01_destn_evenm_notfb_pkg.resdr (rec_destn.seqnc_destn_confg_en,
                                              pnu_seqnc_struc_aplic);

        vta_destn (rec_destn.seqnc_destn_confg_en).numr_telph := vre_destn.numr_telph_destn;
      end loop;

      --Envoyer le sms
      notfc_sms (pnu_confg,
                 vta_destn,
                 vva_mesg_sms_formt);
    end if;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ ('apliq_confg');
      raise;
  end apliq_confg;

  function obten_confg_a_apliq (pnu_evenm_notfb in varchar2,
                                pnu_seqnc_struc_aplic in number,
                                pva_code_aplic in varchar2 default null,
                                pva_code_domn in varchar2 default null)
    return number is
    vbo_hierc_aplic_trouv                   boolean default false;
    vnu_struc_aplic_contx_anter             number (10);
    vnu_struc_aplic_contx_supr              number (10);
    vnu_struc_aplic_contx_initl             number (10);
    vnu_prior_aplic_courn                   number;
    vta_chemn                               typ_chemn;
    vre_valr                                typ_valr;
    vnu_atrib_struc_aplic                   number (10);
    vnu_hierc_aplic                         number (10);
    vnu_confg                               number (10);
    vnu_domn                                number (10);
  begin
    --Il faut déterminer les applications à lancer, dans l'ordre
    --On veut les applications hiérarchiques, à partir du contexte initialement obtenu, en ordre de priorité.
    --Lors de la résolution, on ne prend que les cas où le champ en question n'est pas null et dont il existe une occurence dans la table des osa

    vnu_prior_aplic_courn := -1;

    vta_chemn.delete ();
    vta_chemn (1).nom_alias := 'A';

    --On déterminer la structure applicative initiale
    select   sa.seqnc,
             sa.nom_struc_acces_don
      into   vnu_struc_aplic_contx_anter,
             vta_chemn (1).nom_struc_acces
      from   vd_sie_01_evenm_notfb en,
             vd_sie_12_struc_aplic sa
     where   en.seqnc = pnu_evenm_notfb and sa.seqnc = en.ref_struc_aplic;

    vnu_struc_aplic_contx_initl := vnu_struc_aplic_contx_anter;

    --Tenter de trouver une résolution (application de la hiérarchie);
    loop
      --Trouver une application utile au traitement
      begin
        select   seqnc,
                 aplic_prior,
                 ref_atrib_struc_aplic,
                 ref_sa_cle_etran
          into   vnu_hierc_aplic,
                 vnu_prior_aplic_courn,
                 vnu_atrib_struc_aplic,
                 vnu_struc_aplic_contx_supr
          from   (select   seqnc,
                           ha.aplic_prior,
                           row_number () over (order by aplic_prior asc) rn,
                           ref_atrib_struc_aplic,
                           ref_sa_cle_etran
                    from   vd_sie_01_hierc_aplic ha
                   where   ha.ref_evenm_notfb = pnu_evenm_notfb
                       and ref_sa = vnu_struc_aplic_contx_anter
                       and ha.aplic_prior >= vnu_prior_aplic_courn)
         where   rn = 1;

        --la colonne obtenue doit être non nulle et présenter une configuration pour
        --l'utiliser, si elle est nulle, chercher une nouvelle application hiérarchique au même niveau.
        --Si elle est non nulle chercher une configuration et l'appliquer. Si aucune
        --configuration trouvée, remonter d'un niveau hiérarchique et chercher
        --une nouvelle configuration

        --Résoudre (obtenir la valeur de l'application)

        vta_chemn (vta_chemn.count () + 1).seqnc := vnu_hierc_aplic;
        vre_valr :=
          resdr_chemn_acces (pnu_seqnc_struc_aplic,
                             vta_chemn);

        --Vérifier si la colonne est nulle
        if not valr_null (vre_valr) then                                                                  --Si not nulle
          --tenter de trouver une configuration
          begin
            select   ref_confg_evenm_notfb
              into   vnu_confg
              from   vd_sie_01_osa_evenm_notfb osa
             where   ref_hierc_aplic = vnu_hierc_aplic and ref_seqnc_struc_aplic = vre_valr.vnu_valr;

            --Trouvé, sortir
            exit;
          exception
            when no_data_found then
              --Aucune configuration, tenter de trouver une application hiérarchiquement supérieure
              begin
                select   ref_sa
                  into   vnu_struc_aplic_contx_anter
                  from   vd_sie_01_hierc_aplic ha
                 where   ha.ref_evenm_notfb = pnu_evenm_notfb and ref_sa = vnu_struc_aplic_contx_supr;

                vnu_prior_aplic_courn := -1;
              exception
                when no_data_found then
                  vnu_prior_aplic_courn := vnu_prior_aplic_courn + 1;
              end;
          end;
        else                                                      --Si nulle, passer à la prochaine priorité d'exécution
          vta_chemn.delete (vta_chemn.last ());              --Supprimer de la liste de résolution et passer au prochain
          vnu_prior_aplic_courn := vnu_prior_aplic_courn + 1;
        end if;
      exception
        when no_data_found then
          --si on ne trouve pas, il n'y a plus rien à chercher
          exit;
      end;
    end loop;

    if vnu_confg is null then
      begin
        if pva_code_domn is not null then
          vnu_domn := sie_12_domn_pkg.obten_seqnc_domn (pva_code_domn);
        else
          vnu_domn := sie_12_domn_pkg.obten_domn_sesn ();
        end if;

        select   seqnc
          into   vnu_confg
          from   vd_sie_01_confg_evenm_notfb cen
         where   cen.ref_evenm_notfb = pnu_evenm_notfb and ref_domn = vnu_domn and cen.indic_deft = 'O' and rownum = 1;
      exception
        when no_data_found then
          null;
      end;
    end if;

    return vnu_confg;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ ('obten_confg_a_apliq');
  end obten_confg_a_apliq;

  procedure propg_evenm_notfb (pva_evenm_notfb in varchar2,
                               pnu_seqnc_struc_aplic in number,
                               pva_code_aplic in varchar2 default null,
                               pva_code_domn in varchar2 default null) is
    vnu_confg                               number (10);
    vnu_prodt                               number (10);
    vnu_evenm_notfb                         number (10);
  begin
    --Obtenir la configuration à appliquer
    if pva_code_aplic is not null then
      vnu_prodt := sie_11_prodt_pkg.obten_prodt (pva_code_aplic);
    else
      vnu_prodt := sie_11_prodt_pkg.obten_prodt_sesn;
    end if;

    select   en.seqnc
      into   vnu_evenm_notfb
      from   vd_sie_01_evenm_notfb en,
             vd_sie_12_struc_aplic sa
     where   en.code = pva_evenm_notfb and en.ref_struc_aplic = sa.seqnc and sa.ref_prodt = vnu_prodt;

    vnu_confg :=
      obten_confg_a_apliq (vnu_evenm_notfb,
                           pnu_seqnc_struc_aplic,
                           pva_code_aplic,
                           pva_code_domn);

    if vnu_confg is null then
      op ('Aucune configuration n''a été trouvée');
    else
      op ('La configuration ' || vnu_confg || ' a été utilisée');
    end if;

    if vnu_confg is not null then
      apliq_confg (vnu_confg,
                   pnu_seqnc_struc_aplic);
    end if;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ ('propg_evenm_notfb');
      raise;
  end propg_evenm_notfb;
end sie_01_evenm_notfb_cu_pkg;
/

Prompt Package Body SIE_01_EVENM_NOTFB_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_evenm_notfb_pkg as
  procedure verfr_presn_doubl_aplic (pnu_evenm_notfb in number) is
    cursor cur_doubl is
      select   sa.nom,
               ha.seqnc
        from   (select     max (seqnc) seqnc,
                           ref_sa,
                           aplic_prior,
                           count (1) cnt
                    from   vd_sie_01_hierc_aplic
                   where   ref_evenm_notfb = pnu_evenm_notfb
                group by   ref_sa,
                           aplic_prior
                  having   count (1) > 1) ha,
               vd_i_sie_12_struc_aplic sa
       where   ha.ref_sa = sa.seqnc;
  begin
    for rec_doubl in cur_doubl loop
      if verfr_presn_doubl (rec_doubl.seqnc) then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('EVN.000001',
                                                        pva_code_prodt             => 'AFW',
                                                        pva_valr_subst1            => rec_doubl.nom);
      end if;
    end loop;
  end;

  function verfr_presn_doubl (pnu_hierc_aplic in number)
    return boolean is
    vbo_presn_doubl                         boolean default false;
    vnu_evenm_notfb                         number (10);
    vnu_struc_aplic                         number (10);
    vnu_aplic_prior                         number (10);
    vva_void                                varchar2 (1);
  begin
    select   ref_evenm_notfb,
             ref_sa,
             aplic_prior
      into   vnu_evenm_notfb,
             vnu_struc_aplic,
             vnu_aplic_prior
      from   vd_sie_01_hierc_aplic
     where   seqnc = pnu_hierc_aplic;

    begin
      select   null
        into   vva_void
        from   vd_sie_01_hierc_aplic
       where   ref_sa = vnu_struc_aplic and ref_evenm_notfb = vnu_evenm_notfb and aplic_prior = vnu_aplic_prior;

      return false;
    exception
      when too_many_rows then
        return true;
    end;
  end verfr_presn_doubl;

  procedure ajout_confg_en_domn (pnu_domn_confg_en in number,
                                 pnu_domn_cible in number) is
    cursor cur_elemn_confg_en is
      select   seqnc
        from   vd_sie_01_elemn_confg_en
       where   ref_confg_evenm_notfb = pnu_domn_confg_en;

    cursor cur_destn_confg_en is
      select   seqnc
        from   vd_sie_01_destn_confg_en
       where   ref_confg_evenm_notfb = pnu_domn_confg_en;

    vnu_seqnc_cen                           vd_sie_01_confg_evenm_notfb.seqnc%type;
  begin
    vnu_seqnc_cen := sie_01_confg_evenm_notfb_seq.nextval;

    insert into   vd_sie_01_confg_evenm_notfb (seqnc,
                                               ref_type_comnc,
                                               objet,
                                               titre_mesg,
                                               mesg_sms,
                                               mesg,
                                               ref_evenm_notfb,
                                               nom,
                                               descr,
                                               ref_domn,
                                               ref_compt_twili,
                                               ref_profl_courl,
                                               indic_deft)
      select   vnu_seqnc_cen,
               ref_type_comnc,
               objet,
               titre_mesg,
               mesg_sms,
               mesg,
               ref_evenm_notfb,
               nom,
               descr,
               pnu_domn_cible,
               ref_compt_twili,
               sie_17_profl_courl_pkg.obten_seqnc (sie_17_profl_courl_pkg.obten_code (ref_profl_courl),
                                                   sie_12_domn_pkg.obten_code_domn (pnu_domn_cible)),
               indic_deft
        from   vd_sie_01_confg_evenm_notfb
       where   seqnc = pnu_domn_confg_en;

    for rec_ecen in cur_elemn_confg_en loop
      insert into   vd_sie_01_elemn_confg_en (ref_confg_evenm_notfb, code, ident_acces, ident_acces_formt, formt)
        select   vnu_seqnc_cen,
                 code,
                 ident_acces,
                 ident_acces_formt,
                 formt
          from   vd_sie_01_elemn_confg_en
         where   seqnc = rec_ecen.seqnc;
    end loop;

    for rec_dcen in cur_destn_confg_en loop
      insert into   vd_sie_01_destn_confg_en (ref_dv_natr_destn,
                                              ref_confg_evenm_notfb,
                                              ref_destn,
                                              ref_reslt_destn,
                                              ref_atrib_sa_nom_formt,
                                              ref_atrib_sa_adres_destn)
        select   ref_dv_natr_destn,
                 vnu_seqnc_cen,
                 ref_destn,
                 ref_reslt_destn,
                 ref_atrib_sa_nom_formt,
                 ref_atrib_sa_adres_destn
          from   vd_sie_01_destn_confg_en
         where   seqnc = rec_dcen.seqnc;
    end loop;
  end ajout_confg_en_domn;
end sie_01_evenm_notfb_pkg;
/

Prompt Package Body SIE_01_GESTN_MESG_AIDE_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_01_GESTN_MESG_AIDE_PKG" is
  function obten_aide_page_item (pnu_numr_apex_page_item in number)
    return varchar2 is
    vva_numr_mesg                           vd_sie_01_mesg.numr_mesg%type;
    vva_libl                                vd_sie_13_page_item.libl%type;
    vva_code_prodt                          vd_sie_11_prodt.code%type;
  begin
    select   m.numr_mesg,
             itm.libl,
             pr.code
      into   vva_numr_mesg,
             vva_libl,
             vva_code_prodt
      from   vd_sie_13_page_item itm,
             vd_sie_01_mesg m,
             vd_sie_13_page p,
             vd_sie_11_prodt pr,
             vd_sie_11_aplic a
     where   itm.id_apex = pnu_numr_apex_page_item
         and m.seqnc = itm.ref_mesg_aide
         and p.seqnc = itm.ref_page
         and a.seqnc = p.ref_aplic
         and a.ref_prodt = p.seqnc;

    return sie_01_gestn_mesg_pkg.obten_mesg_par_numr (vva_numr_mesg,
                                                      vva_code_prodt);
  exception
    when no_data_found then
      return sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000099',
                                                        'AFW');
  end obten_aide_page_item;

  function obten_aide_coln_ir (p_sesn in number,
                               p_ir_id in number,
                               p_ir_col_id in varchar2)
    return varchar2 is
    vva_mesg                                varchar2 (10);
  begin
    if sie_07_util_pkg.verfr_sesn_vald (p_sesn) then
      select   m.numr_mesg
        into   vva_mesg
        from   vd_sie_11_prodt pr,
               vd_sie_13_page p,
               vd_i_sie_13_page_ir ir,
               vd_sie_13_page_ir_coln col,
               vd_i_sie_01_mesg m,
               vd_i_sie_11_aplic a
       where   col.ref_page_ir = ir.seqnc
           and 'APEXIR_' || upper (col.coln_table) = upper (p_ir_col_id)
           and ir.id_apex = p_ir_id
           and m.seqnc = col.ref_mesg_aide
           and p.seqnc = ir.ref_page
           and a.seqnc = p.ref_aplic
           and a.ref_prodt = pr.seqnc;

      return sie_01_gestn_mesg_pkg.obten_mesg_par_numr (vva_mesg,
                                                        'AFW');
    else
      return null;
    end if;
  exception
    when no_data_found then
      return sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SIE.000099',
                                                        'AFW');
  end obten_aide_coln_ir;
end sie_01_gestn_mesg_aide_pkg;
/

Prompt Package Body SIE_01_GESTN_MESG_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_01_GESTN_MESG_PKG" as
  function obten_seqnc_mesg (pva_numr_mesg in varchar2,
                             pva_code_prodt in varchar2 default null)
    return number is
    vnu_seqnc_prodt                         number;
    vnu_seqnc_mesg                          number;
  begin
    if pva_code_prodt is null then
      vnu_seqnc_prodt := sie_11_prodt_pkg.obten_prodt_sesn ();
    else
      vnu_seqnc_prodt := sie_11_prodt_pkg.obten_prodt (pva_code_prodt);
    end if;

    select   m.seqnc
      into   vnu_seqnc_mesg
      from   vd_i_sie_01_mesg m
     where   m.numr_mesg = upper (pva_numr_mesg) and m.ref_prodt = vnu_seqnc_prodt;

    return vnu_seqnc_mesg;
  exception
    when no_data_found then
      return null;
  end;

  function obten_seqnc_mesg_lang_sesn (pva_numr_mesg in varchar2,
                                       pva_code_prodt in varchar2 default null)
    return number is
    vnu_seqnc_mesg_lang                     number (10);
  begin
    select   seqnc
      into   vnu_seqnc_mesg_lang
      from   vd_i_sie_01_mesg_lang
     where   ref_mesg = obten_seqnc_mesg (pva_numr_mesg,
                                          pva_code_prodt)
         and ref_lang = sie_01_lang_pkg.obten_lang_sesn;

    return vnu_seqnc_mesg_lang;
  exception
    when no_data_found then
      return null;
  end obten_seqnc_mesg_lang_sesn;

  procedure afich_mesg_par_numr (pva_numr_mesg in varchar2,
                                 pva_code_prodt in varchar2 default null,
                                 pva_valr_subst1 in varchar2 default null,
                                 pva_valr_subst2 in varchar2 default null,
                                 pva_valr_subst3 in varchar2 default null,
                                 pva_valr_subst4 in varchar2 default null,
                                 pva_valr_subst5 in varchar2 default null,
                                 pva_valr_subst6 in varchar2 default null,
                                 pva_valr_subst7 in varchar2 default null,
                                 pva_valr_subst8 in varchar2 default null,
                                 pva_valr_subst9 in varchar2 default null,
                                 pva_valr_subst10 in varchar2 default null) is
    vva_mesg_info                           varchar2 (32767)
                                              default    sie_15_htp_pkg.ouvri_bals ('div',
                                                                                    'id',
                                                                                    'sie_mesg_infor',
                                                                                    'class',
                                                                                    'ui-widget')
                                                      || sie_15_htp_pkg.ouvri_bals (
                                                           'div',
                                                           'class',
                                                           'ui-state-highlight ui-corner-all',
                                                           'style',
                                                           'margin-bottom: 3px; padding: 0 .7em;'
                                                         )
                                                      || sie_15_htp_pkg.ouvri_bals ('p')
                                                      || sie_15_htp_pkg.ouvri_bals ('span',
                                                                                    'class',
                                                                                    'ui-icon ui-icon-info',
                                                                                    'style',
                                                                                    'float: left; margin-right: .3em;')
                                                      || sie_15_htp_pkg.fermr_bals ('span')
                                                      || '%CONTN%'
                                                      || sie_15_htp_pkg.fermr_bals ('p')
                                                      || sie_15_htp_pkg.fermr_bals ('div')
                                                      || sie_15_htp_pkg.fermr_bals ('div');

    vva_mesg_temp                           varchar2 (32767);
  begin
    vva_mesg_temp :=
      sie_01_gestn_mesg_pkg.obten_mesg_par_numr (pva_numr_mesg,
                                                 nvl (pva_code_prodt, sie_11_prodt_pkg.obten_code_prodt),
                                                 pva_valr_subst1,
                                                 pva_valr_subst2,
                                                 pva_valr_subst3,
                                                 pva_valr_subst4,
                                                 pva_valr_subst5,
                                                 pva_valr_subst6,
                                                 pva_valr_subst7,
                                                 pva_valr_subst8,
                                                 pva_valr_subst9,
                                                 pva_valr_subst10);

    if vva_mesg_temp is not null then
      htp.p (replace (vva_mesg_info,
                      '%CONTN%',
                      vva_mesg_temp));
    end if;
  end afich_mesg_par_numr;

  function obten_mesg_par_numr (pva_numr_mesg in varchar2,
                                pva_code_prodt in varchar2 default null,
                                pva_valr_subst1 in varchar2 default null,
                                pva_valr_subst2 in varchar2 default null,
                                pva_valr_subst3 in varchar2 default null,
                                pva_valr_subst4 in varchar2 default null,
                                pva_valr_subst5 in varchar2 default null,
                                pva_valr_subst6 in varchar2 default null,
                                pva_valr_subst7 in varchar2 default null,
                                pva_valr_subst8 in varchar2 default null,
                                pva_valr_subst9 in varchar2 default null,
                                pva_valr_subst10 in varchar2 default null)
    return varchar2 is
    vva_retr                                varchar2 (32767);
  begin
    select   mesg
      into   vva_retr
      from   vd_i_sie_01_mesg_lang mes
     where   mes.ref_mesg = obten_seqnc_mesg (pva_numr_mesg,
                                              pva_code_prodt)
         and mes.ref_lang = sie_07_util_pkg.obten_lang_sesn ();

    vva_retr :=
      replace (vva_retr,
               '%1%',
               pva_valr_subst1);
    vva_retr :=
      replace (vva_retr,
               '%2%',
               pva_valr_subst2);
    vva_retr :=
      replace (vva_retr,
               '%3%',
               pva_valr_subst3);
    vva_retr :=
      replace (vva_retr,
               '%4%',
               pva_valr_subst4);
    vva_retr :=
      replace (vva_retr,
               '%5%',
               pva_valr_subst5);
    vva_retr :=
      replace (vva_retr,
               '%6%',
               pva_valr_subst6);
    vva_retr :=
      replace (vva_retr,
               '%7%',
               pva_valr_subst7);
    vva_retr :=
      replace (vva_retr,
               '%8%',
               pva_valr_subst7);
    vva_retr :=
      replace (vva_retr,
               '%9%',
               pva_valr_subst7);
    vva_retr :=
      replace (vva_retr,
               '%10%',
               pva_valr_subst7);
    return vva_retr;
  exception
    when no_data_found then
      return 'Le message ' || pva_numr_mesg || ' n''est pas défini dans le système de gestion des messages d''erreur';
  end obten_mesg_par_numr;

  function obten_mesg (pnu_seqnc_mesg in number,
                       pva_valr_subst1 in varchar2 default null,
                       pva_valr_subst2 in varchar2 default null,
                       pva_valr_subst3 in varchar2 default null,
                       pva_valr_subst4 in varchar2 default null,
                       pva_valr_subst5 in varchar2 default null,
                       pva_valr_subst6 in varchar2 default null,
                       pva_valr_subst7 in varchar2 default null,
                       pva_valr_subst8 in varchar2 default null,
                       pva_valr_subst9 in varchar2 default null,
                       pva_valr_subst10 in varchar2 default null)
    return varchar2 is
    vva_numr_mesg                           vd_i_sie_01_mesg.numr_mesg%type;
    vnu_ref_prodt                           vd_i_sie_01_mesg.ref_prodt%type;
  begin
    select   numr_mesg,
             ref_prodt
      into   vva_numr_mesg,
             vnu_ref_prodt
      from   vd_i_sie_01_mesg
     where   seqnc = pnu_seqnc_mesg;

    return obten_mesg_par_numr (vva_numr_mesg,
                                sie_11_prodt_pkg.obten_code_prodt (vnu_ref_prodt),
                                pva_valr_subst1,
                                pva_valr_subst2,
                                pva_valr_subst3,
                                pva_valr_subst4,
                                pva_valr_subst5,
                                pva_valr_subst6,
                                pva_valr_subst7,
                                pva_valr_subst8,
                                pva_valr_subst9,
                                pva_valr_subst10);
  exception
    when no_data_found then
      return 'Le message n''est pas défini dans le système de gestion des messages d''erreur';
  end obten_mesg;

  function obten_proch_numr (pva_catgr in varchar2)
    return varchar2 is
    vva_catrg                               varchar2 (3)
                                              default substr (pva_catgr || '___',
                                                              1,
                                                              3);
    vnu_dernr_numr                          number;
  begin
    begin
      select   to_number (substr (numr_mesg,
                                  5))
        into   vnu_dernr_numr
        from   (select   max (numr_mesg) numr_mesg
                  from   vd_i_sie_01_mesg
                 where   numr_mesg like vva_catrg || '.%')
       where   rownum = 1;
    exception
      when no_data_found then
        vnu_dernr_numr := 0;
    end;

    return    vva_catrg
           || '.'
           || to_char (nvl (vnu_dernr_numr, 0) + 1,
                       'FM000000');
  end obten_proch_numr;

  function obten_list_mesg_formt (pva_liste in varchar2)
    return varchar2 is
    vtb_liste                               apex_application_global.vc_arr2;
    vva_mesg                                varchar2 (32767);
  begin
    vtb_liste := sie_07_util_pkg.string_to_table (pva_liste);

    if vtb_liste.count () != 0 then
      for i in vtb_liste.first () .. vtb_liste.last () loop
        vva_mesg := vva_mesg || obten_mesg_par_numr (vtb_liste (i)) || '<br />';
      end loop;
    end if;

    return substr (vva_mesg,
                   1,
                   length (vva_mesg) - 6);
  end obten_list_mesg_formt;

  procedure creer_mesg_aide_lang (pnu_page in number,
                                  pnu_lang in number,
                                  pnu_prodt in number,
                                  pva_catgr in varchar2) is
    --Curseur des items de pages qui n'ont pas de message d'aide de définis
    cursor cur_item is
      select   pi.seqnc,
               pi.type_item,
               pi.ref_mesg_aide
        from   vd_i_sie_13_page_item pi
       where   pi.ref_page = pnu_page;

    cursor cur_coln_ir is
      select   irc.seqnc,
               'RAPRT',
               irc.ref_mesg_aide
        from   vd_i_sie_13_page_ir ir,
               vd_i_sie_13_page_ir_coln irc
       where   ir.seqnc = irc.ref_page_ir and ir.ref_page = pnu_page;

    vva_proch_numr_mesg                     varchar2 (20);
    vnu_mesg                                number (10);
    vnu_prodt                               number (10) default pnu_prodt;
    vnu_ref_dv_regn_piltb                   number (10);
    vbo_regn_piltb                          boolean default false;
    vbo_page_item                           boolean default false;
    vbo_page_ir_coln                        boolean default false;
    vbo_regn_piltb_lang                     boolean default false;
    vbo_page_item_lang                      boolean default false;
    vbo_page_ir_coln_lang                   boolean default false;
    vbo_retrn                               boolean default false;
  begin
    if pva_catgr is not null then
      --Obtenir le dv d'une region d'aide de page
      vnu_ref_dv_regn_piltb :=
        sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REGN_PILTB',
                                          'AIDE_PAGE');

      --Vérifier l'existance d'une regn_piltb de type 'AIDE_PAGE'
      declare
        vnu_regn_piltb                          number (10);
      begin
        select   seqnc
          into   vnu_regn_piltb
          from   vd_i_sie_13_regn_piltb rp
         where   rp.ref_page = pnu_page and rp.ref_dv_type_regn_piltb = vnu_ref_dv_regn_piltb;

        vbo_regn_piltb_lang :=
          genr_lang_mesg (vnu_regn_piltb,
                          pnu_lang,
                          'PAGE');
      exception
        --S'il n'y a aucune présence d'aide de page
        when no_data_found then
          --Insérer l'aide de page
          vva_proch_numr_mesg := obten_proch_numr (pva_catgr);

          insert into   vd_i_sie_13_regn_piltb (code, nom, ref_page, ref_dv_type_regn_piltb)
               values   ('AIDE_PAGE',
                         vva_proch_numr_mesg,
                         pnu_page,
                         vnu_ref_dv_regn_piltb)
            returning   seqnc
                 into   vnu_mesg;

          vbo_regn_piltb :=
            genr_lang_mesg (vnu_mesg,
                            pnu_lang,
                            'PAGE');
      end;

      for rec_item in cur_item loop
        declare
          vnu_mesg_aide                           number (10);
        begin
          select   seqnc
            into   vnu_mesg_aide
            from   vd_i_sie_01_mesg
           where   seqnc = rec_item.ref_mesg_aide;

          vbo_retrn :=
            genr_lang_mesg (vnu_mesg_aide,
                            pnu_lang,
                            'ITEM');

          if vbo_page_item_lang <> true and vbo_retrn then
            vbo_page_item_lang := true;
          end if;
        exception
          when no_data_found then
            --Obtenir la prochaine valeur du numr_mesg
            vva_proch_numr_mesg := obten_proch_numr (pva_catgr);

            --créer le message
            insert into   vd_i_sie_01_mesg (numr_mesg, ref_prodt, type_mesg)
                 values   (vva_proch_numr_mesg,
                           vnu_prodt,
                           'A')
              returning   seqnc
                   into   vnu_mesg;

            --créer un enregistrement du mesg selon la langue
            --NOTE: Il doit y avoir un mesg (texte) pour inserer dans cette table. Demander à bp
            vbo_retrn :=
              genr_lang_mesg (vnu_mesg,
                              pnu_lang,
                              'ITEM');

            --lier le message à l'item courant
            update   vd_i_sie_13_page_item
               set   ref_mesg_aide = vnu_mesg
             where   seqnc = rec_item.seqnc;

            if vbo_page_item <> true and vbo_retrn then
              vbo_page_item := true;
            end if;
        end;
      end loop;

      for rec_coln_ir in cur_coln_ir loop
        declare
          vnu_mesg_aide                           number (10);
        begin
          select   seqnc
            into   vnu_mesg_aide
            from   vd_i_sie_01_mesg
           where   seqnc = rec_coln_ir.ref_mesg_aide;

          vbo_retrn :=
            genr_lang_mesg (vnu_mesg_aide,
                            pnu_lang,
                            'RAPRT');

          if vbo_page_ir_coln_lang <> true and vbo_retrn then
            vbo_page_ir_coln_lang := true;
          end if;
        exception
          when no_data_found then
            --Obtenir la prochaine valeur du numr_mesg
            vva_proch_numr_mesg := obten_proch_numr (pva_catgr);

            --créer le message
            insert into   vd_i_sie_01_mesg (numr_mesg, ref_prodt, type_mesg)
                 values   (vva_proch_numr_mesg,
                           vnu_prodt,
                           'A')
              returning   seqnc
                   into   vnu_mesg;

            --créer un enregistrement du mesg selon la langue
            vbo_retrn :=
              genr_lang_mesg (vnu_mesg,
                              pnu_lang,
                              'RAPRT');

            --lier le message à l'item courant
            update   vd_i_sie_13_page_ir_coln
               set   ref_mesg_aide = vnu_mesg
             where   seqnc = rec_coln_ir.seqnc;

            if vbo_page_ir_coln <> true and vbo_retrn then
              vbo_page_ir_coln := true;
            end if;
        end;
      end loop;

      --Ajouter les mesg informatifs sur la génération de mesg.
      if vbo_regn_piltb_lang then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('MES.000003',
                                                        pva_code_prodt             => 'AFW');
      end if;

      if vbo_regn_piltb then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('MES.000004',
                                                        pva_code_prodt             => 'AFW');
      end if;

      if vbo_page_item_lang then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('MES.000005',
                                                        pva_code_prodt             => 'AFW');
      end if;

      if vbo_page_item then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('MES.000006',
                                                        pva_code_prodt             => 'AFW');
      end if;

      if vbo_page_ir_coln_lang then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('MES.000007',
                                                        pva_code_prodt             => 'AFW');
      end if;

      if vbo_page_ir_coln then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('MES.000008',
                                                        pva_code_prodt             => 'AFW');
      end if;

      --Lorsque traitement terminé, update du prefix des mesg de la page
      update   vd_i_sie_13_page
         set   prefx_mesg = pva_catgr
       where   seqnc = pnu_page;
    else
      sie_01_err_apex_pkg.lever_err_apex_code ('MES.000009',
                                               pva_code_prodt             => 'AFW');
    end if;
  end creer_mesg_aide_lang;

  function genr_lang_mesg (pnu_mesg in number,
                           pnu_lang in number,
                           pva_mode in varchar2)
    return boolean is
    vnu_lang                                number (10);
  begin
    --Vérifier d'abord si le mesg existe dans la langue demandée
    if pva_mode in ('ITEM', 'RAPRT') then
      select   ref_lang
        into   vnu_lang
        from   vd_i_sie_01_mesg_lang
       where   ref_lang = pnu_lang and ref_mesg = pnu_mesg;
    elsif pva_mode = 'PAGE' then
      select   ref_lang
        into   vnu_lang
        from   vd_i_sie_13_regn_piltb_lang
       where   ref_regn_piltb = pnu_mesg and ref_lang = pnu_lang;
    end if;

    return false;
  exception
    when no_data_found then
      if pva_mode = 'ITEM' then
        insert into   vd_i_sie_01_mesg_lang (ref_lang, ref_mesg)
             values   (pnu_lang,
                       pnu_mesg);
      elsif pva_mode = 'RAPRT' then
        insert into   vd_i_sie_01_mesg_lang (ref_lang, ref_mesg)
             values   (pnu_lang,
                       pnu_mesg);
      elsif pva_mode = 'PAGE' then
        insert into   vd_i_sie_13_regn_piltb_lang (ref_regn_piltb, ref_lang)
             values   (pnu_mesg,
                       pnu_lang);
      end if;

      return true;
  end;

  function obten_mesg_aide_page_item (pnu_sidf in number,
                                      pnu_item_id_apex in number,
                                      pnu_lang in number)
    return varchar2 is
    vva_mesg                                varchar2 (4000);
  begin
    select   ml.mesg
      into   vva_mesg
      from   sie_12_sesn s,
             vd_i_sie_04_fil_arian fa,
             vd_sie_11_prodt pr,
             vd_sie_11_aplic ap,
             vd_i_sie_13_page pa,
             vd_i_sie_13_page_item pi,
             vd_i_sie_01_mesg me,
             vd_i_sie_01_mesg_lang ml
     where   fa.seqnc = pnu_sidf
         and ap.numr_aplic_apex = fa.app_id
         and pa.ref_aplic = ap.seqnc
         and ap.ref_prodt = pr.seqnc
         and pa.numr_apex = fa.page
         and s.id_sesn = fa.session_id
         and ml.ref_lang = s.ref_lang
         and pi.ref_page = pa.seqnc
         and pi.id_apex = pnu_item_id_apex
         and pi.ref_mesg_aide = me.seqnc
         and ml.ref_mesg = me.seqnc;

    --Si le mesg est existant, mais que le champ mesg est vide, lever un mesg d'exception.
    if trim (vva_mesg) is null then
      vva_mesg :=
        sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('MES.000001',
                                                   'AFW');
    end if;

    return vva_mesg;
  exception
    when no_data_found then
      return sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('MES.000001',
                                                        'AFW');
  end obten_mesg_aide_page_item;

  procedure obten_aide_page_item (pnu_sidf in number,
                                  pnu_item_id_apex in number,
                                  pnu_lang in number default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('h1');
    sie_15_htp_pkg.ecrir ('Aide page item',
                          false);
    sie_15_htp_pkg.fermr_bals ('h1');

    sie_15_htp_pkg.ecrir (sie_01_gestn_mesg_pkg.obten_mesg_aide_page_item (pnu_sidf,
                                                                           pnu_item_id_apex,
                                                                           pnu_lang));
  end obten_aide_page_item;

  function obten_nombr_item (pnu_page in number,
                             pnu_lang in number,
                             pva_type_item in varchar2)
    return number is
    vnu_nombr                               number;
  begin
    select   count (1)
      into   vnu_nombr
      from   vd_sie_01_mesg_aide ma
     where   ma.ref_page = pnu_page and ma.ref_lang = pnu_lang and ma.type_item = pva_type_item;

    return vnu_nombr;
  end obten_nombr_item;

  function creer_mesg (pva_catgr_numr_mesg in varchar2,
                       pva_texte_mesg in vd_i_sie_01_mesg_lang.mesg%type,
                       pva_type_mesg in vd_i_sie_01_mesg.type_mesg%type,
                       pnu_prodt in vd_i_sie_01_mesg.ref_prodt%type default sie_11_prodt_pkg.obten_prodt_sesn,
                       pnu_lang in vd_i_sie_01_mesg_lang.ref_lang%type default sie_01_lang_pkg.obten_lang_sesn)
    return vd_i_sie_01_mesg.seqnc%type is
    vnu_mesg                                vd_i_sie_01_mesg.seqnc%type;
    vva_catgr_numr_mesg                     varchar2 (3);
  begin
    vva_catgr_numr_mesg := nvl (pva_catgr_numr_mesg, 'GEN');

    insert into   vd_i_sie_01_mesg (numr_mesg, ref_prodt, type_mesg, dnr_ref_prodt)
         values   (sie_01_gestn_mesg_pkg.obten_proch_numr (vva_catgr_numr_mesg),
                   pnu_prodt,
                   pva_type_mesg,
                   pnu_prodt)
      returning   seqnc
           into   vnu_mesg;

    insert into   vd_i_sie_01_mesg_lang (mesg, ref_lang, ref_mesg, dnr_ref_prodt)
         values   (pva_texte_mesg,
                   pnu_lang,
                   vnu_mesg,
                   pnu_prodt);

    return vnu_mesg;
  end creer_mesg;

  procedure creer_mesg (pva_catgr_numr_mesg in varchar2,
                        pva_texte_mesg in vd_i_sie_01_mesg_lang.mesg%type,
                        pva_type_mesg in vd_i_sie_01_mesg.type_mesg%type,
                        pnu_prodt in vd_i_sie_01_mesg.ref_prodt%type default sie_11_prodt_pkg.obten_prodt_sesn,
                        pnu_lang in vd_i_sie_01_mesg_lang.ref_lang%type default sie_01_lang_pkg.obten_lang_sesn) is
    vnu_mesg                                vd_i_sie_01_mesg.seqnc%type;
  begin
    vnu_mesg :=
      creer_mesg (pva_catgr_numr_mesg,
                  pva_texte_mesg,
                  pva_type_mesg,
                  pnu_prodt,
                  pnu_lang);
  end creer_mesg;
end sie_01_gestn_mesg_pkg;
/

Prompt Package Body SIE_01_HIERC_APLIC_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_hierc_aplic_pkg as
  procedure creer_hierc_aplic (pnu_ref_evenm_notfb in number,
                               pnu_ref_atrib_struc_aplic in number,
                               pnu_aplic_prior in number default 0) as
  begin
    insert into   vd_sie_01_hierc_aplic (ref_evenm_notfb, ref_atrib_struc_aplic, aplic_prior)
         values   (pnu_ref_evenm_notfb,
                   pnu_ref_atrib_struc_aplic,
                   pnu_aplic_prior);
  end creer_hierc_aplic;

  procedure maj_hierc_aplic (pnu_seqnc in number,
                             pnu_aplic_prior in number) as
  begin
    update   vd_sie_01_hierc_aplic
       set   aplic_prior = pnu_aplic_prior
     where   seqnc = pnu_seqnc;
  end maj_hierc_aplic;

  procedure suprm_hierc_aplic (pnu_seqnc in number) as
  begin
    delete from   vd_i_sie_01_hierc_aplic
          where   seqnc = pnu_seqnc;
  end suprm_hierc_aplic;
end sie_01_hierc_aplic_pkg;
/

Prompt Package Body SIE_01_JAVSC_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_01_JAVSC_PKG" as
  procedure ajout_libr is
  begin
    sie_07_util_pkg.ajout_libr_javsc ('sie_01_err');
  end ajout_libr;

  procedure ajout_scrip_charg is
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 01 Messages - JavaScript au chargement');
  --sie_07_util_pkg.ajout_code_javsc_charg('afw.sie_01.mesg.gestn_err_apex();');
  end ajout_scrip_charg;
end sie_01_javsc_pkg;
/

Prompt Package Body SIE_01_LANG_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_01_LANG_PKG" as
  kva_code_lang_deft             constant varchar2 (5) default 'FR-CA';

  function obten_lang (pva_code in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_i_sie_01_lang l
     where   l.code = upper (pva_code);

    return vnu_seqnc;
  exception
    when others then
      return null;
  end obten_lang;

  function obten_lang_sesn
    return number is
  begin
    return obten_lang (nvl (sie_07_util_pkg.v ('FSP_LANGUAGE_PREFERENCE'), kva_code_lang_deft));
  end obten_lang_sesn;

  function obten_code_lang_sesn
    return varchar2 is
    vva_code                                vd_i_sie_01_lang.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_01_lang l
     where   l.seqnc = obten_lang_sesn;

    return vva_code;
  end obten_code_lang_sesn;

  function obten_lang_formt (pnu_lang in number)
    return varchar2 is
  begin
    return null;
  end obten_lang_formt;

  function obten_code_lang (pnu_lang in number)
    return varchar2 is
    vva_code                                vd_i_sie_01_lang.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_01_lang l
     where   l.seqnc = pnu_lang;

    return vva_code;
  end;
end sie_01_lang_pkg;
/

Prompt Package Body SIE_01_MESG_TRADC_APEX_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_01_MESG_TRADC_APEX_PKG" as
  function verif_exist_mesg (pnu_numr_aplic_apex in number,
                             pva_nom_mesg in varchar2,
                             pva_code_lang in varchar2)
    return number is
    vnu_id                                  number;
  begin
    select   id
      into   vnu_id
      from   apex_text_mesg atm
     where   atm.name = pva_nom_mesg and atm.message_language = pva_code_lang and atm.flow_id = pnu_numr_aplic_apex;

    return vnu_id;
  exception
    when others then
      return null;
  end verif_exist_mesg;

  procedure creer_mesg (pnu_numr_aplic_apex in number,
                        pva_nom in varchar2,
                        pva_code_lang in varchar2,
                        pva_mesg in varchar2,
                        pnu_scrt_id in number) is
  begin
    insert into   apex_text_mesg atm (flow_id, name, message_language, message_text, security_group_id)
         values   (pnu_numr_aplic_apex,
                   pva_nom,
                   pva_code_lang,
                   pva_mesg,
                   pnu_scrt_id);
  end creer_mesg;

  procedure suprm_mesg (pnu_numr_aplic_apex in number,
                        pnu_id in number) is
  begin
    delete   apex_text_mesg
     where   id = pnu_id and flow_id = pnu_numr_aplic_apex;
  end suprm_mesg;

  procedure pousr_mesg_dans_aplic_apex (pnu_prodt in number) is
    cursor cur_app_mesg is
      select   ta.nom,
               ta.ref_lang,
               ta.text,
               a.numr_aplic_apex,
               aa.security_group_id
        from   vd_i_sie_01_mesg_tradc_apex ta,
               vd_i_sie_11_aplic a,
               vd_i_sie_11_prodt p,
               apex_aplic aa
       where   p.seqnc = pnu_prodt and ta.ref_prodt = p.seqnc and a.ref_prodt = p.seqnc and a.numr_aplic_apex = aa.id;

    vnu_id_mesg                             number;
    vnu_scrt_id                             number default wwv_flow_api.get_security_group_id ();
    vva_code_lang                           varchar2 (10);
  begin
    for rec_app_mesg in cur_app_mesg loop
      select   lower (code)
        into   vva_code_lang
        from   vd_i_sie_01_lang
       where   seqnc = rec_app_mesg.ref_lang;

      vnu_id_mesg :=
        verif_exist_mesg (rec_app_mesg.numr_aplic_apex,
                          rec_app_mesg.nom,
                          vva_code_lang);

      if vnu_id_mesg is not null then
        suprm_mesg (rec_app_mesg.numr_aplic_apex,
                    vnu_id_mesg);
      end if;

      creer_mesg (rec_app_mesg.numr_aplic_apex,
                  rec_app_mesg.nom,
                  vva_code_lang,
                  rec_app_mesg.text,
                  rec_app_mesg.security_group_id);
    end loop;
  end pousr_mesg_dans_aplic_apex;

  procedure pousr_mesg (pnu_mesg_tradc_apex in number) is
    vnu_scrt_id                             number default wwv_flow_api.get_security_group_id ();
    vva_code_lang                           varchar2 (23);
    vva_nom                                 varchar2 (255);
    vva_text_mesg                           varchar2 (4000);
    vnu_id_mesg                             number;
    vnu_prodt                               number;

    cursor cur_aplic (pnu_prodt in number) is
      select   numr_aplic_apex,
               (select   security_group_id
                  from   apex_aplic aa
                 where   aa.id = ap.numr_aplic_apex)
                 mesg_group_id
        from   vd_sie_11_aplic ap
       where   ref_prodt = pnu_prodt;
  begin
    select   lang,
             nom,
             text,
             ref_prodt
      into   vva_code_lang,
             vva_nom,
             vva_text_mesg,
             vnu_prodt
      from   vd_sie_01_mesg_tradc_apex ta
     where   seqnc = pnu_mesg_tradc_apex;

    for rec_aplic in cur_aplic (vnu_prodt) loop
      vnu_id_mesg :=
        verif_exist_mesg (rec_aplic.numr_aplic_apex,
                          vva_nom,
                          vva_code_lang);

      if vnu_id_mesg is not null then
        suprm_mesg (rec_aplic.numr_aplic_apex,
                    vnu_id_mesg);
      end if;

      wwv_flow_api.set_security_group_id (p_security_group_id => rec_aplic.mesg_group_id);

      wwv_flow_api.create_message (null,
                                   rec_aplic.numr_aplic_apex,
                                   vva_nom,
                                   vva_code_lang,
                                   vva_text_mesg);

      wwv_flow_api.set_security_group_id (p_security_group_id => vnu_scrt_id);
    end loop;
  end pousr_mesg;
end sie_01_mesg_tradc_apex_pkg;
/

Prompt Package Body SIE_01_NOTFC_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_notfc_pkg as
  procedure notfc_sms (pnu_config_evenm_notfb in number,
                       pta_destn in sie_01_evenm_notfb_cu_pkg.typ_tab_destn,
                       pva_mesg in varchar2) is
  begin
    null;
  end notfc_sms;

  procedure notfc_courl (pnu_config_evenm_notfb in number,
                         pta_destn in sie_01_evenm_notfb_cu_pkg.typ_tab_destn,
                         pcl_mesg in clob,
                         pva_objet in varchar2,
                         pta_piec_joint in sie_01_evenm_notfb_cu_pkg.typ_tab_piec_joint) is
    cursor cur_profl_courl is
      select   nom_envoy,
               adres_envoy,
               servr_sortn,
               port_sortn,
               domn,
               indic_ssl_sortn,
               authe_methd_sortn,
               authe_mdp_sortn,
               authe_usagr_sortn,
               null compt_suprt_nom_formt,
               null compt_suprt_courl
        from   vd_sie_17_profl_courl pc,
               vd_sie_01_confg_evenm_notfb cen
       where   cen.seqnc = pnu_config_evenm_notfb and pc.seqnc = cen.ref_profl_courl;

    rec_profl_courl                         cur_profl_courl%rowtype;

    vnu_nombr_itera                         pls_integer;
    vnu_tail_mesg                           pls_integer;

    vnu_index                               number (10);
  begin
    open cur_profl_courl;

    fetch cur_profl_courl
    into rec_profl_courl;

    close cur_profl_courl;

    sie_17_envoi_courl_pkg.creer (pva_nom_envoy              => rec_profl_courl.nom_envoy,
                                  pva_adres_envoy            => rec_profl_courl.adres_envoy,
                                  pva_sujet                  => pva_objet,
                                  pva_servr                  => rec_profl_courl.servr_sortn,
                                  pnu_port                   => rec_profl_courl.port_sortn,
                                  pva_domn                   => rec_profl_courl.domn,
                                  pva_empla_walt             => null,
                                  pva_mot_passe_walt         => null,
                                  pbo_ssl                    => rec_profl_courl.indic_ssl_sortn = 'O');

    if rec_profl_courl.authe_methd_sortn = 'SIMPL' then
      sie_17_envoi_courl_pkg.defnr_authe_simpl (rec_profl_courl.authe_usagr_sortn,
                                                rec_profl_courl.authe_mdp_sortn);
    end if;

    sie_17_envoi_courl_pkg.formt_html ();

    if pta_destn.count () != 0 then
      vnu_index := pta_destn.first ();

      while vnu_index is not null loop
        op ('vnu_index= ' || vnu_index);
        op (pta_destn (vnu_index).nom_formt);
        op (pta_destn (vnu_index).adres_courl);
        op (pta_destn (vnu_index).type_destn);

        sie_17_envoi_courl_pkg.ajout_destn (pta_destn (vnu_index).nom_formt,
                                            pta_destn (vnu_index).adres_courl,
                                            pta_destn (vnu_index).type_destn);
        vnu_index := pta_destn.next (vnu_index);
      end loop;

      if rec_profl_courl.compt_suprt_courl is not null then
        -- TODO::CARLO
        -- Obtenir cette information dans vd_sie_17_profl_courl
        sie_17_envoi_courl_pkg.ajout_destn (rec_profl_courl.compt_suprt_nom_formt,
                                            rec_profl_courl.compt_suprt_courl,
                                            sie_17_envoi_courl_pkg.kva_destn_cci);
      end if;
    end if;

    vnu_nombr_itera := 0;
    vnu_tail_mesg := dbms_lob.getlength (pcl_mesg);

    while vnu_tail_mesg >= (vnu_nombr_itera * 2000) loop
      sie_17_envoi_courl_pkg.ajout_ligne_corps (dbms_lob.substr (pcl_mesg,
                                                                 least (2000,
                                                                        vnu_tail_mesg - (vnu_nombr_itera * 2000)),
                                                                 (vnu_nombr_itera * 2000) + 1),
                                                false);
      vnu_nombr_itera := vnu_nombr_itera + 1;
    end loop;

    sie_17_envoi_courl_pkg.placr_fil_atent ();
  end notfc_courl;
end sie_01_notfc_pkg;
/

Prompt Package Body SIE_01_TYPE_COMNC_PKG;
/* Formatted on 04/12/2013 11:35:06 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_01_type_comnc_pkg is
  type typ_tab_const is table of varchar2 (30)
                          index by varchar2 (30);

  tab_const                               typ_tab_const;


  procedure intls_const is
  begin
    tab_const ('kva_code_courl') := kva_code_courl;
    tab_const ('kva_code_sms') := kva_code_sms;
    tab_const ('kva_code_ecran') := kva_code_ecran;
  end intls_const;

  function obtnr_const (pva_const in varchar2)
    return varchar2 is
  begin
    return tab_const (lower (pva_const));
  end obtnr_const;

  function obten_code (pnu_type_comnc in vd_i_sie_01_type_comnc.seqnc%type)
    return vd_i_sie_01_type_comnc.code%type is
    vva_code                                vd_i_sie_01_type_comnc.code%type;
  begin
    select   tc.code
      into   vva_code
      from   vd_i_sie_01_type_comnc tc
     where   tc.seqnc = pnu_type_comnc;

    return vva_code;
  exception
    when no_data_found then
      return null;
  end obten_code;
begin
  intls_const;
end sie_01_type_comnc_pkg;
/

Prompt Package Body SIE_03_ENVOI_COURL_PKG;
/* Formatted on 04/12/2013 11:35:07 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_03_envoi_courl_pkg as
  function creer (pva_servr in varchar2,
                  pnu_port in number,
                  pva_domn in varchar2,
                  pva_nom_envoy in varchar2,
                  pva_adres_envoy in varchar2,
                  pva_authe_methd in varchar2,
                  pva_authe_usagr in varchar2,
                  pva_authe_mdp in varchar2,
                  pva_sujet in varchar2)
    return sie_17_envoi_courl_pkg.courl is
    vco_courl                               sie_17_envoi_courl_pkg.courl;
  begin
    vco_courl :=
      sie_17_envoi_courl_pkg.creer (pva_nom_envoy,
                                    pva_adres_envoy,
                                    pva_sujet,
                                    pva_servr,
                                    pnu_port,
                                    pva_domn);

    sie_17_envoi_courl_pkg.formt_html;

    if pva_authe_methd = 'SIMPL' then
      sie_17_envoi_courl_pkg.defnr_authe_simpl (pva_authe_usagr,
                                                pva_authe_mdp);
    end if;

    return vco_courl;
  end creer;

  procedure creer (pva_servr in varchar2,
                   pnu_port in number,
                   pva_domn in varchar2,
                   pva_nom_envoy in varchar2,
                   pva_adres_envoy in varchar2,
                   pva_authe_methd in varchar2,
                   pva_authe_usagr in varchar2,
                   pva_authe_mdp in varchar2,
                   pva_sujet in varchar2) is
    vco_courl                               sie_17_envoi_courl_pkg.courl;
  begin
    vco_courl :=
      creer (pva_servr,
             pnu_port,
             pva_domn,
             pva_nom_envoy,
             pva_adres_envoy,
             pva_authe_methd,
             pva_authe_usagr,
             pva_authe_mdp,
             pva_sujet);
  end creer;

  procedure notfr_clas_inter (pnu_prodt in number,
                              pva_code_clas_inter in varchar2,
                              pre_sie_03_journ in vd_i_sie_03_journ%rowtype) is
    --Sélectionner les bons destinataires
    cursor cur_destn is
      select   u.nom_formt nom,
               u.courl adres
        from   vd_sie_03_lien_clas_inter_util lciu,
               vd_sie_03_clas_inter ci,
               vd_sie_12_utils u
       where   lciu.ref_clas_inter = ci.seqnc
           and u.courl is not null
           and ci.ref_prodt = pnu_prodt
           and ci.code = pva_code_clas_inter
           and lciu.ref_utils = u.seqnc
           and lciu.date_debut_efect <= sysdate
           and (lciu.date_fin_efect is null
             or sysdate < lciu.date_fin_efect)
      union
      select   distinct u.nom_formt nom,
                        u.courl adres
        from   vd_sie_12_utils u,
               (select       lgu.ref_group,
                             lgu.ref_utils
                      from   vd_sie_12_lien_group_utils lgu
                     where   lgu.date_debut_efect <= sysdate
                         and (lgu.date_fin_efect is null
                           or sysdate < lgu.date_fin_efect)
                connect by   prior lgu.ref_group_utils_lie = lgu.ref_group
                start with   lgu.ref_group in (select   lciu.ref_group_utils
                                                 from   vd_sie_03_lien_clas_inter_util lciu,
                                                        vd_sie_03_clas_inter ci
                                                where   lciu.date_debut_efect <= sysdate
                                                    and (lciu.date_fin_efect is null
                                                      or sysdate < lciu.date_fin_efect)
                                                    and lciu.ref_clas_inter = ci.seqnc
                                                    and ci.ref_prodt = pnu_prodt
                                                    and ci.code = pva_code_clas_inter
                                                    and lciu.ref_group_utils is not null)) lgu
       where   u.seqnc = lgu.ref_utils and u.courl is not null;

    --Sélectionner les informations de la classe d'intervention
    cursor cur_clas_inter is
      select   ci.ref_prodt_formt,
               ci.nom,
               ci.descr,
               ci.indic_avert_autr_uniq
        from   vd_sie_03_clas_inter ci
       where   ci.ref_prodt = pnu_prodt and ci.code = pva_code_clas_inter;

    --Sélectionner les informations du profil de courriel
    cursor cur_profl_courl is
      select   pc.servr_sortn,
               pc.port_sortn,
               pc.domn,
               pc.nom_envoy,
               pc.adres_envoy,
               pc.authe_methd_sortn,
               pc.authe_usagr_sortn,
               pc.authe_mdp_sortn
        from   vd_sie_03_clas_inter ci,
               vd_sie_17_profl_courl pc
       where   ci.ref_prodt = pnu_prodt and ci.code = pva_code_clas_inter and ci.ref_profl_courl = pc.seqnc;

    rec_clas_inter                          cur_clas_inter%rowtype;

    rec_profl_courl                         cur_profl_courl%rowtype;

    vnu_nombr_destn                         number (3);

    procedure ecrir_fil_arian is
      cursor cur_fil_arian is
        select       fa.page,
                     fa.libl
              from   vd_sie_04_fil_arian fa
        connect by   fa.ref_elemn_sup = prior fa.seqnc
        start with   fa.ref_elemn_sup is null;
    begin
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('****************************************');
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('**Fil d''Ariane**');
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);

      for rec_fil_arian in cur_fil_arian loop
        sie_17_envoi_courl_pkg.ajout_ligne_corps ('Page: ' || rec_fil_arian.page || ' - ' || rec_fil_arian.libl);
      end loop;
    end ecrir_fil_arian;

    procedure ecrir_contx is
      cursor cur_contx is
        select       fa.page,
                     fa.libl,
                     c.contx,
                     c.actio,
                     c.seqnc_contx,
                     c.contx_inter,
                     c.actio_inter,
                     c.seqnc_contx_inter,
                     ce.nom,
                     ce.valr_numbr,
                     ce.valr_varch,
                     ce.type_alimn,
                     ce.type_elemn
              from   vd_sie_04_fil_arian fa,
                     vd_sie_04_contx c,
                     vd_sie_04_contx_etend ce
             where   c.ref_fil_arian = fa.seqnc and c.ref_fil_arian = ce.ref_contx(+)
        connect by   fa.ref_elemn_sup = prior fa.seqnc
        start with   fa.ref_elemn_sup is null;

      vnu_page                                vd_sie_04_fil_arian.page%type;
    begin
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('****************************************');
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('**Contexte**');

      for rec_contx in cur_contx loop
        if vnu_page is null
        or vnu_page <> rec_contx.page then
          sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Page: ' || rec_contx.page || ' - ' || rec_contx.libl);
          sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Contexte: ' || rec_contx.contx);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Action: ' || rec_contx.actio);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Séquence : ' || rec_contx.seqnc_contx);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Contexte intermédiaire: ' || rec_contx.contx_inter);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Action intermédiaire: ' || rec_contx.actio_inter);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Séquence intermédiaire: ' || rec_contx.seqnc_contx_inter);
        end if;

        vnu_page := rec_contx.page;

        sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
        sie_17_envoi_courl_pkg.ajout_ligne_corps ('Contexte étendu: ' || rec_contx.nom);
        sie_17_envoi_courl_pkg.ajout_ligne_corps ('Valeur numérique: ' || rec_contx.valr_numbr);
        sie_17_envoi_courl_pkg.ajout_ligne_corps ('Valeur alpha: ' || rec_contx.valr_varch);
        sie_17_envoi_courl_pkg.ajout_ligne_corps ('Type alimentation: ' || rec_contx.type_alimn);
        sie_17_envoi_courl_pkg.ajout_ligne_corps ('Type élément: ' || rec_contx.type_elemn);
      end loop;
    end ecrir_contx;

    procedure ecrir_page_item is
      cursor cur_page_item is
        select     a.numr_aplic_apex numr_aplic_apex,
                   a.nom_formt nom_aplic,
                   p.numr_apex numr_page_apex,
                   p.nom_formt nom_page,
                   pi.libl libl_item,
                   asvi.item_name nom_item,
                   asvi.item_value_vc2 valr_item
            from   vd_sie_13_page_item pi,
                   vd_sie_11_aplic a,
                   vd_sie_13_page p,
                   (select   asvi.item_id,
                             asvi.item_name,
                             asvi.item_value_vc2,
                             asvi.flow_id
                      from   apex_sesn_valr_item asvi
                     where   asvi.flow_instance = sie_07_util_pkg.nv ('SESSION')) asvi
           where   pi.ref_page = p.seqnc
               and p.ref_aplic = a.seqnc
               and a.numr_aplic_apex = asvi.flow_id
               and pi.id_apex = asvi.item_id
        order by   1,
                   3,
                   5;

      vnu_numr_aplic_apex                     number;
      vnu_numr_page_apex                      number;
    begin
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('****************************************');
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('**Items de page en session**');

      for rec_page_item in cur_page_item loop
        if vnu_numr_aplic_apex is null
        or vnu_numr_aplic_apex <> rec_page_item.numr_aplic_apex then
          sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Application: ' || rec_page_item.nom_aplic);
        end if;

        if vnu_numr_page_apex is null
        or vnu_numr_page_apex <> rec_page_item.numr_page_apex then
          sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Page: ' || rec_page_item.nom_page);
        end if;

        vnu_numr_aplic_apex := rec_page_item.numr_aplic_apex;
        vnu_numr_page_apex := rec_page_item.numr_page_apex;

        sie_17_envoi_courl_pkg.ajout_ligne_corps (
          'Item: ' || rec_page_item.nom_item || ' - ' || rec_page_item.libl_item || ' = ' || rec_page_item.valr_item
        );
      end loop;
    end ecrir_page_item;

    procedure ecrir_aplic_item is
      cursor cur_page_item is
        select     a.numr_aplic_apex numr_aplic_apex,
                   a.nom_formt nom_aplic,
                   asvi.item_name nom_item,
                   asvi.item_value_vc2 valr_item
            from   vd_sie_11_aplic a,
                   (select   asvi.item_id,
                             asvi.item_name,
                             asvi.item_value_vc2,
                             asvi.flow_id
                      from   apex_sesn_valr_item asvi
                     where   asvi.flow_instance = sie_07_util_pkg.nv ('SESSION')) asvi
           where   a.numr_aplic_apex = asvi.flow_id
               and not exists
                     (select   null
                        from   vd_sie_13_page_item pi,
                               vd_sie_13_page p
                       where   pi.ref_page = p.seqnc and pi.id_apex = asvi.item_id and p.ref_aplic = a.seqnc)
        order by   1,
                   3;

      vnu_numr_aplic_apex                     number;
    begin
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('****************************************');
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('**Items d''application en session**');

      for rec_page_item in cur_page_item loop
        if vnu_numr_aplic_apex is null
        or vnu_numr_aplic_apex <> rec_page_item.numr_aplic_apex then
          sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
          sie_17_envoi_courl_pkg.ajout_ligne_corps ('Application: ' || rec_page_item.nom_aplic);
        end if;

        vnu_numr_aplic_apex := rec_page_item.numr_aplic_apex;

        sie_17_envoi_courl_pkg.ajout_ligne_corps (
          'Item: ' || rec_page_item.nom_item || ' = ' || rec_page_item.valr_item
        );
      end loop;
    end ecrir_aplic_item;

    procedure ecrir_info_genrl is
    begin
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('****************************************');
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('**Informations générales**');
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);

      sie_17_envoi_courl_pkg.ajout_ligne_corps (
           'Utilisateur connecté: '
        || sie_12_utils_pkg.obten_nom_formt_de_code_utils (sie_07_util_pkg.v ('APP_USER'))
        || ' ('
        || sie_07_util_pkg.v ('APP_USER')
        || ')'
      );
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('Application: ' || sie_11_aplic_pkg.obten_numr_apex_aplic ());
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('Page: ' || sie_13_page_pkg.obten_numr_apex_page ());
    end ecrir_info_genrl;

    procedure ecrir_mesg_ereur is
    begin
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('****************************************');
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('**Erreur**');
      sie_17_envoi_courl_pkg.ajout_ligne_corps (null);
      sie_17_envoi_courl_pkg.ajout_ligne_corps (   'Date: '
                                                || to_char (pre_sie_03_journ.date_heure,
                                                            'YYYY-MM-DD HH24:MI:SS'));
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('Travail: ' || pre_sie_03_journ.travl);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('Explication: ' || pre_sie_03_journ.expli);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('Erreur: ' || pre_sie_03_journ.ereur);
      sie_17_envoi_courl_pkg.ajout_ligne_corps ('Trace: ' || pre_sie_03_journ.pile_trace);
    end ecrir_mesg_ereur;
  begin
    --Sélectionner les informations de la classe d'intervention
    open cur_clas_inter;

    fetch cur_clas_inter
    into rec_clas_inter;

    close cur_clas_inter;

    --Sélectionner les informations du profil de courriel
    open cur_profl_courl;

    fetch cur_profl_courl
    into rec_profl_courl;

    close cur_profl_courl;

    creer (rec_profl_courl.servr_sortn,
           rec_profl_courl.port_sortn,
           rec_profl_courl.domn,
           rec_profl_courl.nom_envoy,
           rec_profl_courl.adres_envoy,
           rec_profl_courl.authe_methd_sortn,
           rec_profl_courl.authe_usagr_sortn,
           rec_profl_courl.authe_mdp_sortn,
           rec_clas_inter.ref_prodt_formt || ': ' || rec_clas_inter.nom);

    if rec_clas_inter.indic_avert_autr_uniq = 'N' then
      -- Ajouter les destinataires
      for rec_destn in cur_destn loop
        sie_17_envoi_courl_pkg.ajout_destn (rec_destn.nom,
                                            rec_destn.adres,
                                            sie_17_envoi_courl_pkg.kva_destn_uniq);
      end loop;
    else
      --Valider que l'utilisateur qui a déclenché le message est un des destinataires
      select   count (1)
        into   vnu_nombr_destn
        from   (select   1
                  from   vd_sie_03_lien_clas_inter_util lciu,
                         vd_sie_03_clas_inter ci,
                         vd_sie_12_utils u
                 where   lciu.ref_clas_inter = ci.seqnc
                     and ci.ref_prodt = pnu_prodt
                     and ci.code = pva_code_clas_inter
                     and lciu.ref_utils = u.seqnc
                     and lciu.date_debut_efect <= sysdate
                     and (lciu.date_fin_efect is null
                       or sysdate < lciu.date_fin_efect)
                     and u.seqnc = sie_12_utils_pkg.obten_usagr_conct
                union all
                select   1
                  from   vd_sie_12_utils u,
                         (select       lgu.ref_group,
                                       lgu.ref_utils
                                from   vd_sie_12_lien_group_utils lgu
                               where   lgu.date_debut_efect <= sysdate
                                   and (lgu.date_fin_efect is null
                                     or sysdate < lgu.date_fin_efect)
                          connect by   prior lgu.ref_group_utils_lie = lgu.ref_group
                          start with   lgu.ref_group in (select   lciu.ref_group_utils
                                                           from   vd_sie_03_lien_clas_inter_util lciu,
                                                                  vd_sie_03_clas_inter ci
                                                          where   lciu.date_debut_efect <= sysdate
                                                              and (lciu.date_fin_efect is null
                                                                or sysdate < lciu.date_fin_efect)
                                                              and lciu.ref_clas_inter = ci.seqnc
                                                              and ci.ref_prodt = pnu_prodt
                                                              and ci.code = pva_code_clas_inter
                                                              and lciu.ref_group_utils is not null)) lgu
                 where   u.seqnc = lgu.ref_utils and u.seqnc = sie_12_utils_pkg.obten_usagr_conct and rownum = 1);

      if vnu_nombr_destn > 0 then
        --Ajouter uniquement l'utilisateur qui a déclenché le message
        sie_17_envoi_courl_pkg.ajout_destn (
          sie_12_utils_pkg.obten_nom_formt_de_utils (sie_12_utils_pkg.obten_usagr_conct),
          sie_12_utils_pkg.obten_courl_utils (sie_12_utils_pkg.obten_usagr_conct),
          sie_17_envoi_courl_pkg.kva_destn_uniq
        );
      else
        -- Ajouter les destinataires
        for rec_destn in cur_destn loop
          sie_17_envoi_courl_pkg.ajout_destn (rec_destn.nom,
                                              rec_destn.adres,
                                              sie_17_envoi_courl_pkg.kva_destn_uniq);
        end loop;
      end if;
    end if;

    -- Définir le corps
    sie_17_envoi_courl_pkg.ajout_ligne_corps ('Classe d''intervention: ' || rec_clas_inter.descr);
    ecrir_mesg_ereur ();
    ecrir_info_genrl ();
    ecrir_fil_arian ();
    ecrir_contx ();
    ecrir_page_item ();
    ecrir_aplic_item ();

    --sie_17_envoi_courl_pkg.envoy ();
    sie_17_envoi_courl_pkg.placr_fil_atent ();
  end notfr_clas_inter;
end sie_03_envoi_courl_pkg;
/

Prompt Package Body SIE_03_JOURN_PKG;
/* Formatted on 04/12/2013 11:35:07 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_03_JOURN_PKG" is
  gva_travl                               varchar2 (200);


  procedure ecrir_journ (pva_expli in varchar2 default null,
                         pva_travl in varchar2 default null,
                         pva_code_clas_inter in varchar2 default null,
                         pbo_notfr_mesg_infor in boolean default false) is
    pragma autonomous_transaction;
    vva_ereur                               varchar2 (500)
                                              default substr (sqlerrm,
                                                              1,
                                                              500);
    rec_sie_03_journ                        sie_03_journ%rowtype;
  begin
    insert into   sie_03_journ (expli, ereur, pile_trace, travl)
         values   (substr (nvl (pva_expli, sie_07_util_pkg.procd_appel (1)),
                           1,
                           4000),
                   vva_ereur,
                   dbms_utility.format_error_backtrace (),
                   nvl (pva_travl, gva_travl))
      returning   date_heure,
                  expli,
                  ereur,
                  pile_trace,
                  travl,
                  date_heure
           into   rec_sie_03_journ.date_heure,
                  rec_sie_03_journ.expli,
                  rec_sie_03_journ.ereur,
                  rec_sie_03_journ.pile_trace,
                  rec_sie_03_journ.travl,
                  rec_sie_03_journ.date_heure;

    commit;

    if pva_code_clas_inter is not null then
      sie_03_envoi_courl_pkg.notfr_clas_inter (sie_11_prodt_pkg.obten_prodt_sesn,
                                               pva_code_clas_inter,
                                               rec_sie_03_journ);
    end if;

    if pbo_notfr_mesg_infor then
      if sie_08_url_pkg.knu_sesn is not null then
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SAF.000030',
                                                        rec_sie_03_journ.date_heure,
                                                        pva_code_prodt             => 'AFW');
      end if;
    end if;

    commit;
  end ecrir_journ;

  procedure defnr_travl (pva_travl in varchar2) is
  begin
    gva_travl := pva_travl;
  end defnr_travl;

  procedure purgr is
  begin
    execute immediate 'truncate table sie_03_journ';
  end purgr;
end sie_03_journ_pkg;
/

Prompt Package Body SIE_03_JOURN_UNITR_PKG;
/* Formatted on 04/12/2013 11:35:07 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_03_journ_unitr_pkg as
  type rec_ocurn_hisrc_struc_aplic is record
  (
    seqnc_ocurn_struc_aplic                 number (10),
    code_struc_aplic                        varchar2 (30)
  );

  type tab_hierc_struc_aplic is table of rec_ocurn_hisrc_struc_aplic
                                  index by pls_integer;

  gta_hierc_struc_aplic                   tab_hierc_struc_aplic;

  type rec_journ_unitr is record
  (
    date_time                               date,
    actio_journ                             varchar2 (200),
    don_nomnl                               varchar2 (200),
    reslt                                   varchar2 (500),
    numr_err                                varchar2 (10)
  );

  type tab_journ_unitr is table of rec_journ_unitr
                            index by pls_integer;

  type rec_ocurn_seqnc_struc_aplic is record
  (
    domn                                    number (10),
    code_struc_aplic                        varchar2 (30),
    seqnc_struc_aplic                       number (10),
    journ                                   tab_journ_unitr
  );

  type tab_journ is table of rec_ocurn_seqnc_struc_aplic
                      index by varchar2 (30);

  gta_journ                               tab_journ;
  gnu_i                                   pls_integer;

  procedure ajout_journ (actio_journ varchar2,
                         don_nomnl varchar2 default null,
                         reslt varchar2 default null,
                         numr_err varchar2 default null) is
    vnu_j                                   pls_integer;
  begin
    vnu_j := gta_journ (gnu_i).journ.count () + 1;
    gta_journ (gnu_i).code_struc_aplic := gta_hierc_struc_aplic (gnu_i).code_struc_aplic;
    gta_journ (gnu_i).seqnc_struc_aplic := gta_hierc_struc_aplic (gnu_i).seqnc_ocurn_struc_aplic;
    gta_journ (gnu_i).journ (vnu_j).date_time := sysdate;
    gta_journ (gnu_i).journ (vnu_j).actio_journ := actio_journ;
    gta_journ (gnu_i).journ (vnu_j).don_nomnl := don_nomnl;
    gta_journ (gnu_i).journ (vnu_j).reslt := reslt;
    gta_journ (gnu_i).journ (vnu_j).numr_err := numr_err;
  end ajout_journ;

  procedure ecrir_journ is
    pragma autonomous_transaction;
    vnu_struc_aplic                         number (10);
  begin
    if gta_journ.count () != 0 then
      for i in gta_journ.first () .. gta_journ.last () loop
        if gta_journ (i).journ.count () != 0 then
          vnu_struc_aplic := sie_12_struc_aplic_pkg.obten_seqnc (gta_journ (i).code_struc_aplic);

          if vnu_struc_aplic is null then
            select   seqnc
              into   vnu_struc_aplic
              from   vd_sie_12_struc_aplic
             where   code = gta_journ (i).code_struc_aplic and ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn;
          end if;

          for j in gta_journ (i).journ.first () .. gta_journ (i).journ.last () loop
            insert
              into   vd_i_sie_03_journ_struc_aplic (ref_domn,
                                                    struc_aplic,
                                                    seqnc_struc_aplic,
                                                    date_time,
                                                    numr_err,
                                                    actio_journ,
                                                    don_nomnl,
                                                    reslt)
            values   (gta_journ (i).domn,
                      vnu_struc_aplic,
                      gta_journ (i).seqnc_struc_aplic,
                      gta_journ (i).journ (j).date_time,
                      gta_journ (i).journ (j).numr_err,
                      gta_journ (i).journ (j).actio_journ,
                      gta_journ (i).journ (j).don_nomnl,
                      gta_journ (i).journ (j).reslt);
          end loop;
        end if;
      end loop;
    end if;

    commit;
  end ecrir_journ;

  procedure defnr_struc_aplic_hierc (pva_code_struc_aplic in varchar2,
                                     pnu_seqnc_struc_aplic in number) is
  begin
    if gnu_i is null then
      gnu_i := 0;
    end if;

    if gnu_i != 0
   and gta_hierc_struc_aplic (gnu_i).seqnc_ocurn_struc_aplic = pnu_seqnc_struc_aplic
   and gta_hierc_struc_aplic (gnu_i).code_struc_aplic = pva_code_struc_aplic then
      null;
    else
      gnu_i := nvl (gnu_i, 0) + 1;
      gta_hierc_struc_aplic (gnu_i).seqnc_ocurn_struc_aplic := pnu_seqnc_struc_aplic;
      gta_hierc_struc_aplic (gnu_i).code_struc_aplic := pva_code_struc_aplic;
      --POUR TESTER
      gta_journ (gnu_i).domn := nvl (sie_12_domn_pkg.obten_domn_sesn (), sie_12_domn_pkg.obten_seqnc_domn ('SIE'));
    end if;
  end defnr_struc_aplic_hierc;

  procedure suprm_struc_aplic_hierc (pva_code_struc_aplic in varchar2,
                                     pnu_seqnc_struc_aplic in number) is
  begin
    if gnu_i is not null then
      for i in reverse 0 .. gnu_i loop
        if gta_hierc_struc_aplic (i).seqnc_ocurn_struc_aplic = pnu_seqnc_struc_aplic
       and gta_hierc_struc_aplic (i).code_struc_aplic = pva_code_struc_aplic then
          gta_hierc_struc_aplic.delete (1,
                                        gta_hierc_struc_aplic.last ());

          case
            when i = 1 then
              gnu_i := null;
            else
              gnu_i := i - 1;
          end case;
        end if;
      end loop;
    end if;
  end suprm_struc_aplic_hierc;

  procedure reint is
  begin
    gta_hierc_struc_aplic.delete ();
    gta_journ.delete ();
    gnu_i := null;
  end reint;
end sie_03_journ_unitr_pkg;
/

Prompt Package Body SIE_04_CONTX_PKG;
/* Formatted on 04/12/2013 11:35:08 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_04_contx_pkg as
  contx_intrv                             exception;
  fil_arian_intrv                         exception;
  gbo_mode_debug                 constant boolean default false;

  procedure synch_varbl (pnu_ofset_fil in number default 0,
                         pnu_fa_courn in number default sie_07_util_pkg.nv ('SIDF')) is
    vnu_seqnc_fil_arian                     number;
    vnu_seqnc_fil_arian_sourc               number;
    vva_contx                               vd_sie_04_contx.contx%type;
    vva_contx_formt                         vd_sie_04_contx.contx_formt%type;
    vva_actio                               vd_sie_04_contx.actio%type;
    vnu_seqnc_contx                         vd_sie_04_contx.seqnc_contx%type;
    vva_contx_inter                         vd_sie_04_contx.contx_inter%type;
    vva_actio_inter                         vd_sie_04_contx.actio_inter%type;
    vnu_seqnc_contx_inter                   vd_sie_04_contx.seqnc_contx_inter%type;

    cursor cur_contx is
      select     ctx.ref_fil_arian,
                 ctx.contx,
                 ctx.contx_formt,
                 ctx.actio,
                 ctx.seqnc_contx,
                 ctx.contx_inter,
                 ctx.actio_inter,
                 ctx.seqnc_contx_inter
          from   vd_sie_04_contx ctx,
                 vd_sie_04_fil_arian fil
         where   ctx.ref_fil_arian = fil.seqnc
             and (ctx.indic_ignor = 'N'
               or ctx.indic_ignor is null)
      order by   fil.timst desc;

    cursor cur_sourc_contx is
      select     ctx.ref_fil_arian,
                 ctx.contx,
                 ctx.contx_formt,
                 ctx.actio,
                 ctx.seqnc_contx,
                 ctx.contx_inter,
                 ctx.actio_inter,
                 ctx.seqnc_contx_inter
          from   vd_sie_04_contx ctx,
                 vd_sie_04_fil_arian fil
         where   ctx.ref_fil_arian = fil.seqnc
             and fil.seqnc <> vnu_seqnc_fil_arian
             and (ctx.indic_ignor = 'N'
               or ctx.indic_ignor is null)
             and ( ('X' || ctx.contx <> 'X' || vva_contx)
               or (ctx.contx_inter is not null
                or ctx.actio_inter is not null
                or ctx.seqnc_contx_inter is not null))
      order by   fil.timst desc;
  begin
    vnu_seqnc_fil_arian := pnu_fa_courn;

    if not sie_04_fil_arian_pkg.trait_page () then
      return;
    end if;

    open cur_contx;

    --Skipper les offsets (et faire la vrai lecture)
    for i in 0 .. pnu_ofset_fil loop
      fetch cur_contx
      into vnu_seqnc_fil_arian,
           vva_contx,
           vva_contx_formt,
           vva_actio,
           vnu_seqnc_contx,
           vva_contx_inter,
           vva_actio_inter,
           vnu_seqnc_contx_inter;
    end loop;

    if cur_contx%notfound then
      vnu_seqnc_fil_arian := null;
    end if;

    close cur_contx;

    /*begin
              select ref_fil_arian,
             contx,
             actio,
             seqnc_contx,
             contx_inter,
             actio_inter,
             seqnc_contx_inter
        into vnu_seqnc_fil_arian,
             vva_contx,
             vva_actio,
             vnu_seqnc_contx,
             vva_contx_inter,
             vva_actio_inter,
             vnu_seqnc_contx_inter
        from (select ctx.ref_fil_arian,
                     ctx.contx,
                     ctx.actio,
                     ctx.seqnc_contx,
                     ctx.contx_inter,
                     ctx.actio_inter,
                     ctx.seqnc_contx_inter
                from vd_sie_04_contx ctx,
                     vd_sie_04_fil_arian fil
               where ctx.ref_fil_arian = fil.seqnc
                 and (ctx.indic_ignor = 'N' or ctx.indic_ignor is null)
               order by fil.timst desc
             )
       where rownum = 1;
    exception
      when no_data_found then
        --raise fil_arian_intrv;
        vnu_seqnc_fil_arian   := null;
    end;*/

    sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_CONTX',
                                      vva_contx);
    sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_CONTX_FORMT',
                                      vva_contx_formt);
    sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_ACTIO',
                                      vva_actio);
    sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_SEQNC_CONTX',
                                      vnu_seqnc_contx);

    if vva_contx_inter is null and vva_actio_inter is null and vnu_seqnc_contx_inter is null then
      -- Trouver: vnu_seqnc_fil_arian_sourc
      /*begin
                    select ref_fil_arian,
              contx,
              actio,
              seqnc_contx,
              contx_inter,
              actio_inter,
              seqnc_contx_inter
        into vnu_seqnc_fil_arian_sourc,
             vva_contx,
             vva_actio,
             vnu_seqnc_contx,
             vva_contx_inter,
             vva_actio_inter,
             vnu_seqnc_contx_inter
        from (select ctx.ref_fil_arian,
                    ctx.contx,
                    ctx.actio,
                    ctx.seqnc_contx,
                    ctx.contx_inter,
                    ctx.actio_inter,
                    ctx.seqnc_contx_inter
              from vd_sie_04_contx ctx,
                   vd_sie_04_fil_arian fil
              where     ctx.ref_fil_arian = fil.seqnc
                    and fil.seqnc <> vnu_seqnc_fil_arian
                    and (ctx.indic_ignor = 'N' or ctx.indic_ignor is null)
                    and ( ('X' || ctx.contx <> 'X' || vva_contx)
                         or (   ctx.contx_inter is not null
                             or ctx.actio_inter is not null
                             or ctx.seqnc_contx_inter is not null))
              order by fil.timst desc)
        where rownum = 1;
      exception
        when no_data_found then
          --raise fil_arian_intrv;
          vnu_seqnc_fil_arian_sourc   := null;
      end;*/

      open cur_sourc_contx;

      --Skipper les offsets (et faire la vrai lecture)
      for i in 0 .. pnu_ofset_fil loop
        fetch cur_sourc_contx
        into vnu_seqnc_fil_arian_sourc,
             vva_contx,
             vva_contx_formt,
             vva_actio,
             vnu_seqnc_contx,
             vva_contx_inter,
             vva_actio_inter,
             vnu_seqnc_contx_inter;
      end loop;

      if cur_sourc_contx%notfound then
        vnu_seqnc_fil_arian_sourc := null;
      end if;

      close cur_sourc_contx;

      if vnu_seqnc_fil_arian_sourc is null then
        vva_contx_inter := null;
        vva_actio_inter := null;
        vnu_seqnc_contx_inter := null;
      elsif vva_contx_inter is null and vva_actio_inter is null and vnu_seqnc_contx_inter is null then
        vva_contx_inter := vva_contx;
        vva_actio_inter := vva_actio;
        vnu_seqnc_contx_inter := vnu_seqnc_contx;
      end if;
    end if;

    sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_SOURC_CONTX',
                                      nvl (vva_contx_inter, vva_contx));
    sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_SOURC_ACTIO',
                                      nvl (vva_actio_inter, vva_actio));
    sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_SOURC_SEQNC_CONTX',
                                      nvl (vnu_seqnc_contx_inter, vnu_seqnc_contx));
  end synch_varbl;

  procedure synch is
    --pragma autonomous_transaction;
    sidf_inval                              exception;
    sspc_inval                              exception;
    scpc_inval                              exception;
    sapc_inval                              exception;
    sspi_inval                              exception;
    scpi_inval                              exception;
    sapi_inval                              exception;
    snpi_inval                              exception;
    vnu_page                                number default sie_07_util_pkg.nv ('APP_PAGE_ID');
    vnu_page_inter                          number;
    vnu_seqnc_fil_arian                     number;
    vnu_seqnc_fil_arian_sourc               number;
    vva_contx                               vd_sie_04_contx.contx%type;
    vva_contx_formt                         vd_sie_04_contx.contx_formt%type;
    vva_actio                               vd_sie_04_contx.actio%type;
    vnu_seqnc_contx                         vd_sie_04_contx.seqnc_contx%type;
    vva_contx_inter                         vd_sie_04_contx.contx_inter%type;
    vva_actio_inter                         vd_sie_04_contx.actio_inter%type;
    vnu_seqnc_contx_inter                   vd_sie_04_contx.seqnc_contx_inter%type;
    vnu_seqnc_actue                         vd_sie_04_contx.seqnc_contx%type;
    vva_nom_item_seqnc                      varchar2 (30) default 'P' || to_char (vnu_page) || '_SEQNC';
    vbo_nouv_contx                          boolean default false;
    vva_contx_tmp                           vd_sie_04_contx.contx%type;
    vva_contx_formt_tmp                     vd_sie_04_contx.contx_formt%type;
    vva_actio_tmp                           vd_sie_04_contx.actio%type;
    vnu_seqnc_contx_tmp                     vd_sie_04_contx.seqnc_contx%type;
    vva_contx_inter_tmp                     vd_sie_04_contx.contx_inter%type;
    vva_actio_inter_tmp                     vd_sie_04_contx.actio_inter%type;
    vnu_seqnc_contx_inter_tmp               vd_sie_04_contx.seqnc_contx_inter%type;
    vva_parmt_url                           varchar2 (2000) default sie_07_util_pkg.obten_parmt_url ();
    vva_indic_ignor                         varchar2 (1);

    cursor cur_item (pnu_seqnc_fil_arian in number) is
      select   ce.type_elemn,
               ce.valr_varch,
               ce.valr_numbr,
               ce.nom
        from   vd_sie_04_contx_etend ce
       where   ce.ref_contx = pnu_seqnc_fil_arian
           and (ce.type_alimn = 'A'
             or ce.type_alimn = 'RMA')
           and ce.page_cible is null;

    procedure nulfr_varbl_contx is
    begin
      -- Nullifier les S*PC et S*PI
      sie_07_util_pkg.defnr_etat_sessn ('SCPC',
                                        null);
      sie_07_util_pkg.defnr_etat_sessn ('SAPC',
                                        null);
      sie_07_util_pkg.defnr_etat_sessn ('SSPC',
                                        null);
      sie_07_util_pkg.defnr_etat_sessn ('SCPI',
                                        null);
      sie_07_util_pkg.defnr_etat_sessn ('SAPI',
                                        null);
      sie_07_util_pkg.defnr_etat_sessn ('SSPI',
                                        null);
      sie_07_util_pkg.defnr_etat_sessn ('SNPI',
                                        null);
    end nulfr_varbl_contx;

    function est_dans_url (pva_varbl in varchar2)
      return boolean is
      vnu_pos_1                               number;
      vnu_pos_2                               number;
      vva_varbl_asign_url                     varchar2 (2000);
    begin
      -- Recuperer les parametres assignes dans l'URL
      vnu_pos_1 :=
        instr (vva_parmt_url,
               ':',
               1,
               6);

      if vnu_pos_1 > 0 then
        vnu_pos_2 :=
          instr (vva_parmt_url,
                 ':',
                 1,
                 7);

        if vnu_pos_2 = 0 then
          vnu_pos_2 := length (vva_parmt_url);
        end if;

        vva_varbl_asign_url :=
             ','
          || upper (substr (vva_parmt_url,
                            vnu_pos_1 + 1,
                            vnu_pos_2 - vnu_pos_1 - 1))
          || ',';
      else
        vva_varbl_asign_url := null;
      end if;

      -- Utiliser le contexte du URL s'il a ete precise
      return instr (upper (vva_varbl_asign_url),
                    ',' || upper (pva_varbl) || ',') > 0;
    end est_dans_url;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 04 Contx - Synchroniser le contexte');

    if not sie_04_fil_arian_pkg.trait_page () then
      return;
    end if;

    begin
      begin
        vnu_seqnc_fil_arian := sie_07_util_pkg.nv ('SIDF');
      exception
        when others then
          raise sidf_inval;
      end;

      begin
        vnu_seqnc_contx := sie_07_util_pkg.nv ('SSPC');
      exception
        when others then
          raise sspc_inval;
      end;

      begin
        vva_contx := sie_07_util_pkg.v ('SCPC');
      exception
        when others then
          raise scpc_inval;
      end;

      begin
        vva_actio := sie_07_util_pkg.v ('SAPC');
      exception
        when others then
          raise sapc_inval;
      end;

      begin
        vnu_seqnc_contx_inter := sie_07_util_pkg.nv ('SSPI');
      exception
        when others then
          raise sspi_inval;
      end;

      begin
        vva_contx_inter := sie_07_util_pkg.v ('SCPI');
      exception
        when others then
          raise scpi_inval;
      end;

      begin
        vva_actio_inter := sie_07_util_pkg.v ('SAPI');
      exception
        when others then
          raise sapi_inval;
      end;

      begin
        vnu_page_inter := sie_07_util_pkg.nv ('SNPI');
      exception
        when others then
          raise snpi_inval;
      end;

      begin
        select   contx,
                 contx_formt,
                 actio,
                 seqnc_contx,
                 contx_inter,
                 actio_inter,
                 seqnc_contx_inter
          into   vva_contx_tmp,
                 vva_contx_formt_tmp,
                 vva_actio_tmp,
                 vnu_seqnc_contx_tmp,
                 vva_contx_inter_tmp,
                 vva_actio_inter_tmp,
                 vnu_seqnc_contx_inter_tmp
          from   vd_sie_04_contx
         where   ref_fil_arian = vnu_seqnc_fil_arian and rownum = 1;

        -- Utiliser le contexte du URL s'il a ete precise
        if est_dans_url ('SCPC') then
          update   vd_sie_04_contx
             set   contx = vva_contx, contx_formt = vva_contx_formt
           where   ref_fil_arian = vnu_seqnc_fil_arian;
        else
          vva_contx := vva_contx_tmp;
          vva_contx_formt := vva_contx_formt_tmp;
        end if;

        -- Utiliser l'action du URL si elle a ete precisee
        if est_dans_url ('SAPC')
       and (vva_actio not like 'X%'
         or vva_actio is null) then
          update   vd_sie_04_contx
             set   actio = vva_actio
           where   ref_fil_arian = vnu_seqnc_fil_arian;
        else
          vva_actio := vva_actio_tmp;
        end if;

        -- Utiliser la sequence de contexte du URL si elle a ete precisee
        if est_dans_url ('SSPC') then
          update   vd_sie_04_contx
             set   seqnc_contx = vnu_seqnc_contx
           where   ref_fil_arian = vnu_seqnc_fil_arian;
        else
          vnu_seqnc_contx := vnu_seqnc_contx_tmp;
        end if;

        -- Utiliser le contexte intermediaire du URL s'il a ete precise
        if est_dans_url ('SCPI') then
          update   vd_sie_04_contx
             set   contx_inter = vva_contx_inter
           where   ref_fil_arian = vnu_seqnc_fil_arian;
        else
          vva_contx_inter := vva_contx_inter_tmp;
        end if;

        -- Utiliser l'action intermediaire du URL si elle a ete precisee
        if est_dans_url ('SAPI')
       and (vva_actio_inter not like 'X%'
         or vva_actio_inter is null) then
          update   vd_sie_04_contx
             set   actio_inter = vva_actio_inter
           where   ref_fil_arian = vnu_seqnc_fil_arian;
        else
          vva_actio_inter := vva_actio_inter_tmp;
        end if;

        -- Utiliser la sequence de contexte intermediaire du URL si elle a ete precisee
        if est_dans_url ('SSPI') then
          update   vd_sie_04_contx
             set   seqnc_contx_inter = vnu_seqnc_contx_inter
           where   ref_fil_arian = vnu_seqnc_fil_arian;
        else
          vnu_seqnc_contx_inter := vnu_seqnc_contx_inter_tmp;
        end if;
      exception
        -- Créer le contexte s'il n'existe pas
        when no_data_found then
          -- S'il est null, recuperer le contexte par defaut associé à la page
          if vva_contx is null then
            begin
              select   sa.code
                into   vva_contx
                from   vd_sie_12_struc_aplic sa,
                       vd_sie_13_page pg
               where   sa.seqnc = pg.ref_struc_aplic
                   and pg.numr_apex = vnu_page
                   and pg.ref_aplic = sie_11_aplic_pkg.obten_aplic_sesn ();
            exception
              when no_data_found then
                vva_contx := null;
              when others then
                raise;
            end;
          end if;

          -- Vider l'action si c'est un META
          if vva_actio like 'X%' then
            vva_actio := null;
          end if;

          /*-- Déterminer si on doit ignorer le contexte courant
                              vva_indic_ignor := 'N';
          if    vva_actio is null
            and vnu_seqnc_contx is null
            and vva_contx_inter is null
            and vva_actio_inter is null
            and vnu_seqnc_contx_inter is null
            and not est_dans_url ('SCPC')
            and not est_dans_url ('SAPC')
            and not est_dans_url ('SSPC')
            and not est_dans_url ('SCPI')
            and not est_dans_url ('SAPI')
            and not est_dans_url ('SSPI')
          then
            -- Traiter le context à part
            -- S'il est null ou identique au dernier non-ignoré, on ignore
            if vva_contx is null then
              vva_indic_ignor := 'O';
            else
              declare
                vva_dernr_contx     vd_i_sie_04_contx.contx%type;
              begin
                select contx
                  into vva_dernr_contx
                from (select ctx.contx
                      from vd_sie_04_contx ctx,
                           vd_sie_04_fil_arian fil
                      where     ctx.ref_fil_arian = fil.seqnc
                            and (ctx.indic_ignor = 'N' or ctx.indic_ignor is null)
                      order by fil.timst desc)
                where rownum = 1;
                if upper(vva_contx) = (vva_dernr_contx) then
                  vva_indic_ignor := 'O';
                end if;
              exception
              when no_data_found then
                vva_dernr_contx := null;
              end;
            end if;
          end if;*/

          -- Déterminer si on doit récupérer le contexte précédent
          if vnu_seqnc_contx is null
         and vva_contx_inter is null
         and vva_actio_inter is null
         and vnu_seqnc_contx_inter is null
         and not est_dans_url ('SCPC')
         and not est_dans_url ('SSPC')
         and not est_dans_url ('SCPI')
         and not est_dans_url ('SAPI')
         and not est_dans_url ('SSPI') then
            -- Traiter le context à part
            -- S'il est null ou identique au dernier non-ignoré, on ignore
            if vva_contx is null then
              vva_indic_ignor := 'O';
            else
              declare
                vva_dernr_contx                         vd_i_sie_04_contx.contx%type;
              begin
                select   contx
                  into   vva_dernr_contx
                  from   (select     ctx.contx
                              from   vd_sie_04_contx ctx,
                                     vd_sie_04_fil_arian fil
                             where   ctx.ref_fil_arian = fil.seqnc
                                 and (ctx.indic_ignor = 'N'
                                   or ctx.indic_ignor is null)
                          order by   fil.timst desc)
                 where   rownum = 1;

                if upper (vva_contx) = (vva_dernr_contx) then
                  vva_indic_ignor := 'O';
                end if;
              exception
                when no_data_found then
                  vva_dernr_contx := null;
              end;
            end if;
          end if;

          -- Si elle est null, recuperer la sequence depuis la variable PXX_SEQNC
          /*if vnu_seqnc_contx is null then
                                                              vnu_seqnc_contx := sie_07_util_pkg.nv (vva_nom_item_seqnc);
          end if;*/

          if vnu_page_inter is not null then
            vnu_seqnc_fil_arian_sourc := sie_04_fil_arian_pkg.obten_seqnc_fa_de_page_dest (vnu_page_inter);

            if vnu_seqnc_fil_arian_sourc is not null then
              declare
                vnu_nombr_updat                         number;
              begin
                -- Tenter l'update
                update   vd_sie_04_contx
                   set   contx = vva_contx_inter, actio = vva_actio_inter, seqnc_contx = vnu_seqnc_contx_inter
                 where   ref_fil_arian = vnu_seqnc_fil_arian_sourc;

                vnu_nombr_updat := sql%rowcount;

                if vnu_nombr_updat = 0 then
                  insert into   vd_sie_04_contx (ref_fil_arian, contx, actio, seqnc_contx)
                       values   (vnu_seqnc_fil_arian_sourc,
                                 vva_contx_inter,
                                 vva_actio_inter,
                                 vnu_seqnc_contx_inter);
                end if;
              end;

              vva_contx_inter := null;
              vva_actio_inter := null;
              vnu_seqnc_contx_inter := null;
            end if;
          end if;

          --TODO::TRESE
          --Pour l'instant, ne jamais ignorer
          vva_indic_ignor := 'N';

          insert
            into   vd_sie_04_contx (ref_fil_arian,
                                    contx,
                                    contx_formt,
                                    actio,
                                    seqnc_contx,
                                    contx_inter,
                                    actio_inter,
                                    seqnc_contx_inter,
                                    indic_ignor)
          values   (vnu_seqnc_fil_arian,
                    vva_contx,
                    vva_contx_formt,
                    vva_actio,
                    vnu_seqnc_contx,
                    vva_contx_inter,
                    vva_actio_inter,
                    vnu_seqnc_contx_inter,
                    vva_indic_ignor);

          vbo_nouv_contx := true;
        when others then
          raise;
      end;

      -- Synchroniser les variables
      synch_varbl;

      -- Nullifier les S*PC et S*PI
      nulfr_varbl_contx ();

      if vbo_nouv_contx then
        sie_07_util_pkg.reint_etat_sesn_page (vnu_page);
      end if;

      -- Verifier s'il existe un item nomme 'Py_SEQNC' ou y est le numero de page
      if sie_07_util_pkg.exist_item (vva_nom_item_seqnc) then
        vnu_seqnc_actue := sie_07_util_pkg.nv (vva_nom_item_seqnc);

        -- Si la sequence de l'item est differente de la sequence du contexte
        -- vider la cache de la page
        --if (   vnu_seqnc_actue is not null
        --    or vnu_seqnc_contx is not null) and (vnu_seqnc_actue <> vnu_seqnc_contx) then
        if (vnu_seqnc_actue is null and vnu_seqnc_contx is null)
        or (vnu_seqnc_actue = vnu_seqnc_contx) then
          null;
        else
          if not vbo_nouv_contx then
            sie_07_util_pkg.reint_etat_sesn_page (vnu_page);
          end if;
        end if;

        -- Definir l'item de sequence avec la valeur du contexte
        sie_07_util_pkg.defnr_etat_sessn (vva_nom_item_seqnc,
                                          vnu_seqnc_contx);
      end if;

      --Obtenir tous les elements de contexte etendu dont la page cible est 'O' pour les lier au contexte courant
      --trouver l'element de fil d'ariane superieur pour verifier s'il existe des

      select   ref_elemn_sup
        into   vnu_seqnc_fil_arian_sourc
        from   vd_sie_04_fil_arian
       where   seqnc = vnu_seqnc_fil_arian;

      delete   vd_sie_04_contx_etend
       where   ref_contx = vnu_seqnc_fil_arian;

      update   vd_sie_04_contx_etend ce
         set   ce.ref_contx = vnu_seqnc_fil_arian, ce.page_cible = null
       where   ce.page_cible = 'O' and ce.ref_contx = vnu_seqnc_fil_arian_sourc;

      --Assigner les items a leur items de page lorsqu'ils sont de type d'alimentation A et RMA
      --(automatique et automatique suite au retour d'un apel modal) et de type d'element 'II (item)
      for rec_item in cur_item (vnu_seqnc_fil_arian) loop
        if sie_07_util_pkg.exist_item (rec_item.nom) then
          if rec_item.type_elemn = 'I' then
            if sie_07_util_pkg.exist_item (rec_item.valr_varch) then
              sie_07_util_pkg.defnr_etat_sessn (rec_item.nom,
                                                sie_07_util_pkg.v (rec_item.valr_varch));
            else
              sie_07_util_pkg.defnr_etat_sessn (rec_item.nom,
                                                null);
            end if;
          else
            sie_07_util_pkg.defnr_etat_sessn (rec_item.nom,
                                              nvl (rec_item.valr_varch, rec_item.valr_numbr));
          end if;
        end if;
      end loop;

      -- Mettre a jour la sequence du contexte, au cas ou une affectation
      -- de contexte etendue l'aurait modifiee
      maj_seqnc_contx ();

      delete from   vd_sie_04_contx_etend
            where   ref_contx = vnu_seqnc_fil_arian and type_alimn like 'RM%';
    --commit;
    exception
      when sidf_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000003',
                                                 sie_07_util_pkg.v ('SIDF'),
                                                 pva_code_prodt             => 'AFW');
      when sspc_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000004',
                                                 'SSPC',
                                                 sie_07_util_pkg.v ('SSPC'),
                                                 pva_code_prodt             => 'AFW');
      when scpc_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000005',
                                                 'SCPC',
                                                 sie_07_util_pkg.v ('SCPC'),
                                                 pva_code_prodt             => 'AFW');
      when sapc_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000006',
                                                 'SAPC',
                                                 sie_07_util_pkg.v ('SAPC'),
                                                 pva_code_prodt             => 'AFW');
      when sspi_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000004',
                                                 'SSPI',
                                                 sie_07_util_pkg.v ('SSPI'),
                                                 pva_code_prodt             => 'AFW');
      when scpi_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000005',
                                                 'SCPI',
                                                 sie_07_util_pkg.v ('SCPI'),
                                                 pva_code_prodt             => 'AFW');
      when sapi_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000006',
                                                 'SAPI',
                                                 sie_07_util_pkg.v ('SAPI'),
                                                 pva_code_prodt             => 'AFW');
      when snpi_inval then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000004',
                                                 'SNPI',
                                                 sie_07_util_pkg.v ('SNPI'),
                                                 pva_code_prodt             => 'AFW');
    end;
  exception
    when others then
      nulfr_varbl_contx ();
      raise;
  --commit;
  end synch;

  procedure maj (pnu_seqnc_contx in sie_04_contx.seqnc_contx%type default null,
                 pva_actio in sie_04_contx.actio%type default null,
                 pva_contx in sie_04_contx.contx%type default null) is
    vnu_seqnc_fil_arian                     number default sie_07_util_pkg.nv ('SIDF');
  begin
    update   vd_sie_04_contx
       set   contx = nvl (pva_contx, contx),
             contx_formt = nvl (pva_contx, contx_formt),
             actio = nvl (pva_actio, actio),
             seqnc_contx = nvl (pnu_seqnc_contx, seqnc_contx)
     where   ref_fil_arian = vnu_seqnc_fil_arian;

    if sql%rowcount = 0 then
      raise contx_intrv;
    end if;
  end maj;

  procedure maj_seqnc_contx is
    vnu_seqnc_fil_arian                     number default sie_07_util_pkg.nv ('SIDF');
    vnu_page                                number default sie_07_util_pkg.nv ('APP_PAGE_ID');
    vva_nom_item_seqnc                      varchar2 (30) default 'P' || to_char (vnu_page) || '_SEQNC';
    vnu_seqnc_contx                         vd_sie_04_contx.seqnc_contx%type;
  begin
    if not sie_04_fil_arian_pkg.trait_page () then
      return;
    end if;

    if sie_07_util_pkg.exist_item (vva_nom_item_seqnc) then
      vnu_seqnc_contx := sie_07_util_pkg.nv (vva_nom_item_seqnc);

      --maj (vnu_seqnc_contx);
      update   vd_sie_04_contx
         set   seqnc_contx = vnu_seqnc_contx
       where   ref_fil_arian = vnu_seqnc_fil_arian;
    end if;
  end maj_seqnc_contx;

  procedure defnr_contx_etend (pva_nom in varchar2,
                               pnu_valr in number,
                               pva_valr in varchar2,
                               pva_type_alimn in varchar2,
                               pva_type_elemn in varchar2,
                               pbo_page_cible in boolean) is
    vnu_seqnc_fil_arian                     number default sie_07_util_pkg.nv ('SIDF');          -- A_SIE_04_SEQNC_PROVN
    vva_page_cible                          varchar2 (1);
    vnu_row_count                           number;
  begin
    if pbo_page_cible then
      vva_page_cible := 'O';
    end if;

    update   vd_sie_04_contx_etend
       set   valr_numbr = pnu_valr, valr_varch = pva_valr, type_alimn = pva_type_alimn, type_elemn = pva_type_elemn
     where   ref_contx = vnu_seqnc_fil_arian                                                           --vnu_contx_seqnc
         and upper (nom) = upper (pva_nom)
         and ( (vva_page_cible = 'O' and page_cible = 'O')
           or (vva_page_cible is null and page_cible is null));

    vnu_row_count := sql%rowcount;

    if vnu_row_count = 0 then
      insert into   vd_sie_04_contx_etend (ref_contx, nom, valr_numbr, valr_varch, page_cible, type_alimn, type_elemn)
           values   (vnu_seqnc_fil_arian,                                                             --vnu_contx_seqnc,
                     pva_nom,
                     pnu_valr,
                     pva_valr,
                     vva_page_cible,
                     pva_type_alimn,
                     pva_type_elemn);
    end if;
  end defnr_contx_etend;

  procedure defnr_contx_etend_numbr (pva_nom in varchar2,
                                     pnu_valr in number,
                                     pva_type_alimn in varchar2 default 'A',
                                     pbo_page_cible in boolean default true) is
  begin
    defnr_contx_etend (pva_nom,
                       pnu_valr,
                       null,
                       pva_type_alimn,
                       'V',                                                                                    -- Valeur
                       pbo_page_cible);
  end defnr_contx_etend_numbr;

  procedure defnr_contx_etend_varch (pva_nom in varchar2,
                                     pva_valr in varchar2,
                                     pva_type_alimn in varchar2 default 'A',
                                     pbo_page_cible in boolean default true) is
  begin
    defnr_contx_etend (pva_nom,
                       null,
                       pva_valr,
                       pva_type_alimn,
                       'V',                                                                                    -- Valeur
                       pbo_page_cible);
  end defnr_contx_etend_varch;

  procedure defnr_contx_etend_item (pva_nom in varchar2,
                                    pva_item in varchar2,
                                    pva_type_alimn in varchar2 default 'A',
                                    pbo_page_cible in boolean default true) is
  begin
    defnr_contx_etend (pva_nom,
                       null,
                       pva_item,
                       pva_type_alimn,
                       'I',                                                                                      -- Item
                       pbo_page_cible);
  end defnr_contx_etend_item;

  procedure obten_contx_etend (pva_nom in varchar2,
                               pva_valr   out varchar2,
                               pnu_valr   out number) is
  begin
    select   valr_numbr,
             valr_varch
      into   pnu_valr,
             pva_valr
      from   vd_i_sie_04_contx_etend ce
     where   ce.ref_contx = sie_08_url_pkg.knu_sidf and ce.nom = pva_nom;
  exception
    when no_data_found then
      null;
    when too_many_rows then
      null;
  end obten_contx_etend;

  function obten_contx_etend_numbr (pva_nom in varchar2)
    return number is
    vva_valr                                varchar2 (200);
    vnu_valr                                number;
  begin
    obten_contx_etend (pva_nom,
                       vva_valr,
                       vnu_valr);
    return vnu_valr;
  end obten_contx_etend_numbr;

  function obten_contx_etend_varch (pva_nom in varchar2)
    return varchar2 is
    vva_valr                                varchar2 (200);
    vnu_valr                                number;
  begin
    obten_contx_etend (pva_nom,
                       vva_valr,
                       vnu_valr);
    return vva_valr;
  end obten_contx_etend_varch;

  function verif_contx_etend_item_page (pva_nom in varchar2)
    return boolean is
    vnu_exist                               number (1);
    vnu_sidf                                vd_sie_04_fil_arian.seqnc%type := sie_04_fil_arian_pkg.obten_fa_courn ();
  begin
    select   1
      into   vnu_exist
      from   vd_sie_04_contx_etend ce
     where   ce.ref_contx = vnu_sidf and ce.nom = pva_nom;

    return true;
  exception
    when no_data_found then
      return false;
  end verif_contx_etend_item_page;

  function obten_contx (pva_contx in sie_04_contx.contx%type,
                        pva_actio in out sie_04_contx.actio%type,
                        pnu_seqnc_contx   out sie_04_contx.seqnc_contx%type)
    return number is
    vnu_seqnc_fil_arian                     vd_sie_04_contx.ref_fil_arian%type;

    -- Prendre le plus recent
    cursor cur_contx (pva_contx in sie_04_contx.contx%type,
                      pva_actio in out sie_04_contx.actio%type) is
      select   ref_fil_arian,
               actio,
               seqnc_contx
        from   (select     ctx.ref_fil_arian,
                           ctx.actio,
                           ctx.seqnc_contx
                    from   vd_sie_04_contx ctx,
                           vd_sie_04_fil_arian fil
                   where   ctx.contx = pva_contx
                       and (pva_actio is null
                         or ctx.actio = pva_actio)
                       and fil.seqnc = ctx.ref_fil_arian
                order by   fil.timst desc)
       where   rownum = 1
      union all
      select   ref_fil_arian,
               actio_inter,
               seqnc_contx_inter
        from   (select     ctx.ref_fil_arian,
                           ctx.actio_inter,
                           ctx.seqnc_contx_inter
                    from   vd_sie_04_contx ctx,
                           vd_sie_04_fil_arian fil
                   where   ctx.contx_inter = pva_contx
                       and (pva_actio is null
                         or ctx.actio_inter = pva_actio)
                       and fil.seqnc = ctx.ref_fil_arian
                order by   fil.timst desc)
       where   rownum = 1
      order by   ref_fil_arian desc;
  begin
    open cur_contx (pva_contx,
                    pva_actio);

    fetch cur_contx
    into vnu_seqnc_fil_arian, pva_actio, pnu_seqnc_contx;

    close cur_contx;

    return vnu_seqnc_fil_arian;
  exception
    when no_data_found then
      return null;
  end obten_contx;

  function cherc_contx (pva_contx in sie_04_contx.contx%type,
                        pva_actio in sie_04_contx.actio%type default null)
    return number is
    vva_actio                               vd_sie_04_contx.actio%type default pva_actio;
    vnu_seqnc_contx                         vd_sie_04_contx.seqnc_contx%type;
  begin
    return obten_contx (pva_contx,
                        vva_actio,
                        vnu_seqnc_contx);
  end cherc_contx;

  function obten_seqnc_contx (pva_contx in sie_04_contx.contx%type,
                              pva_actio in sie_04_contx.actio%type default null)
    return number is
    vnu_seqnc_fil_arian                     vd_sie_04_contx.ref_fil_arian%type;
    vva_actio                               vd_sie_04_contx.actio%type default pva_actio;
    vnu_seqnc_contx                         vd_sie_04_contx.seqnc_contx%type;
  begin
    vnu_seqnc_fil_arian :=
      obten_contx (pva_contx,
                   vva_actio,
                   vnu_seqnc_contx);
    return vnu_seqnc_contx;
  end obten_seqnc_contx;

  procedure defnr_seqnc_selon_contx (pva_contx in sie_04_contx.contx%type,
                                     pnu_seqnc_contx in sie_04_contx.seqnc_contx%type) is
    vnu_seqnc_fa                            sie_04_contx.ref_fil_arian%type;
    vva_actio                               sie_04_contx.actio%type default null;
    vnu_seqnc_contx_tmp                     sie_04_contx.seqnc_contx%type;
  begin
    vnu_seqnc_fa :=
      obten_contx (pva_contx,
                   vva_actio,
                   vnu_seqnc_contx_tmp);

    if vnu_seqnc_fa is not null then
      update   vd_sie_04_contx
         set   seqnc_contx = pnu_seqnc_contx
       where   ref_fil_arian = vnu_seqnc_fa;
    end if;
  end defnr_seqnc_selon_contx;

  procedure obten_contx_etend (pva_nom in varchar2,
                               pnu_seqnc in number,
                               pnu_valr   out number,
                               pva_valr   out varchar2) is
    vnu_seqnc_fil_arian                     number default sie_07_util_pkg.nv ('SIDF');          -- A_SIE_04_SEQNC_PROVN
    vva_type_elemn                          vd_sie_04_contx_etend.type_elemn%type;
    vnu_valr                                vd_sie_04_contx_etend.valr_numbr%type;
    vva_valr                                vd_sie_04_contx_etend.valr_varch%type;
    vva_item                                vd_sie_04_contx_etend.valr_varch%type;
  begin
    -- Si une sequence de context a ete precise, utiliser celui-ci
    if pnu_seqnc is not null then
      vnu_seqnc_fil_arian := pnu_seqnc;
    end if;

    -- Chercher le contexte etendu pour le nom precise
    begin
      select   type_elemn,
               valr_numbr,
               valr_varch
        into   vva_type_elemn,
               vnu_valr,
               vva_valr
        from   vd_sie_04_contx_etend
       where   ref_contx = vnu_seqnc_fil_arian and nom = upper (pva_nom) and page_cible is null;
    exception
      when no_data_found then
        -- Si le contexte etendu n'existe pas, simuler un type "Valeur"
        -- avec des valeurs null (par defaut)
        vva_type_elemn := 'V';
    end;

    -- Si c'est un item
    if vva_type_elemn = 'I' then
      -- Utiliser la valeur "varchar" pour le nom
      vva_item := vva_valr;

      -- Lire la valeur de l'item s'il existe, sinon NULL
      if sie_07_util_pkg.exist_item (vva_item) then
        vva_valr := sie_07_util_pkg.v (vva_item);
      else
        vva_valr := null;
      end if;

      -- Convertir en numerique
      begin
        vnu_valr := to_number (vva_valr);
      exception
        when invalid_number then
          vnu_valr := null;
      end;
    end if;

    pnu_valr := vnu_valr;
    pva_valr := vva_valr;
  end obten_contx_etend;

  function nv (pva_nom in varchar2,
               pva_contx in sie_04_contx.contx%type default null,
               pva_actio in sie_04_contx.actio%type default null)
    return number is
    vnu_valr                                number (10);
    vva_valr                                varchar2 (200);
    vnu_seqnc_contx                         number (10);
  begin
    if pva_contx is not null then
      vnu_seqnc_contx :=
        cherc_contx (pva_contx,
                     pva_actio);
    else
      vnu_seqnc_contx := null;
    end if;

    obten_contx_etend (pva_nom,
                       vnu_seqnc_contx,
                       vnu_valr,
                       vva_valr);
    return vnu_valr;
  end nv;

  function v (pva_nom in varchar2,
              pva_contx in sie_04_contx.contx%type default null,
              pva_actio in sie_04_contx.actio%type default null)
    return varchar2 is
    vnu_valr                                number (10);
    vva_valr                                varchar2 (200);
    vnu_seqnc_contx                         number (10);
  begin
    if pva_contx is not null then
      vnu_seqnc_contx :=
        cherc_contx (pva_contx,
                     pva_actio);
    else
      vnu_seqnc_contx := null;
    end if;

    obten_contx_etend (pva_nom,
                       vnu_seqnc_contx,
                       vnu_valr,
                       vva_valr);
    return vva_valr;
  end v;

  function genr_url_en_contx (pnu_page in number default null,
                              pnu_seqnc_contx in number default null,
                              pva_actio in varchar2 default null,
                              pva_contx in varchar2 default null,
                              pnu_seqnc_contx_inter in number default null,
                              pva_actio_inter in varchar2 default null,
                              pva_contx_inter in varchar2 default null,
                              pnu_numr_page_inter in number default null,
                              pva_reint_sidf in varchar2 default 'N',
                              pva_optio_reqst in varchar2 default null,
                              pva_optio_clear_page in varchar2 default null)
    return varchar2 is
    vva_seqnc_fil_arian                     varchar2 (10) default sie_07_util_pkg.v ('SIDF');
    vva_nom_contx                           varchar2 (4) default 'SCPC';
    vva_nom_actio                           varchar2 (4) default 'SAPC';
    vva_nom_seqnc_contx                     varchar2 (4) default 'SSPC';
    vva_nom_contx_inter                     varchar2 (4) default 'SCPI';
    vva_nom_actio_inter                     varchar2 (4) default 'SAPI';
    vva_nom_seqnc_contx_inter               varchar2 (4) default 'SSPI';
    vva_nom_numr_page_inter                 varchar2 (4) default 'SNPI';
  begin
    if pva_reint_sidf = 'O' then
      vva_seqnc_fil_arian := null;
    end if;

    -- Ne pas passer les variables si les valeurs sont NULL
    if pva_contx is null then
      vva_nom_contx := null;
    end if;

    if pva_actio is null then
      vva_nom_actio := null;
    end if;

    if pnu_seqnc_contx is null then
      vva_nom_seqnc_contx := null;
    end if;

    if pva_contx_inter is null then
      vva_nom_contx_inter := null;
    end if;

    if pva_actio_inter is null then
      vva_nom_actio_inter := null;
    end if;

    if pnu_seqnc_contx_inter is null then
      vva_nom_seqnc_contx_inter := null;
    end if;

    if pnu_numr_page_inter is null then
      vva_nom_numr_page_inter := null;
    end if;

    return sie_08_url_pkg.genr_url (pnu_numr_page              => nvl (pnu_page, sie_08_url_pkg.knu_app_page_id),
                                    pva_nom_varbl_1            => 'SIDF',
                                    pva_valr_varbl_1           => vva_seqnc_fil_arian,
                                    pva_nom_varbl_2            => vva_nom_contx,
                                    pva_valr_varbl_2           => pva_contx,
                                    pva_nom_varbl_3            => vva_nom_actio,
                                    pva_valr_varbl_3           => pva_actio,
                                    pva_nom_varbl_4            => vva_nom_seqnc_contx,
                                    pva_valr_varbl_4           => to_char (pnu_seqnc_contx),
                                    pva_nom_varbl_5            => vva_nom_contx_inter,
                                    pva_valr_varbl_5           => pva_contx_inter,
                                    pva_nom_varbl_6            => vva_nom_actio_inter,
                                    pva_valr_varbl_6           => pva_actio_inter,
                                    pva_nom_varbl_7            => vva_nom_seqnc_contx_inter,
                                    pva_valr_varbl_7           => to_char (pnu_seqnc_contx_inter),
                                    pva_nom_varbl_8            => vva_nom_numr_page_inter,
                                    pva_valr_varbl_8           => pnu_numr_page_inter,
                                    pva_optio_reqst            => pva_optio_reqst,
                                    pva_optio_clear_page       => pva_optio_clear_page);
  end genr_url_en_contx;

  procedure retr_modl is
    vva_seqnc_fil_arian                     varchar2 (10) default sie_07_util_pkg.v ('SIDF');

    cursor cur_contx_etend_rm is
      select   etend.seqnc,
               etend.nom,
               etend.valr_varch,
               etend.valr_numbr,
               etend.type_alimn,
               etend.type_elemn
        from   vd_sie_04_contx_etend etend,
               vd_sie_04_fil_arian fil
       where   etend.type_alimn = 'RM'
           and etend.type_elemn = 'I'
           and etend.ref_contx = fil.ref_elemn_sup
           and fil.seqnc = vva_seqnc_fil_arian;
  begin
    -- Boucler chacun des contextes etendu 'RM' de type item
    for vcu_rm in cur_contx_etend_rm loop
      if sie_07_util_pkg.exist_item (vcu_rm.valr_varch) then
        -- Affecter la valeur automatique
        update   vd_sie_04_contx_etend
           set   valr_varch = sie_07_util_pkg.v (vcu_rm.valr_varch), type_alimn = 'RMA', type_elemn = 'V'
         where   seqnc = vcu_rm.seqnc;
      end if;
    end loop;
  end retr_modl;

  procedure valdr_contx (pva_contx in varchar2) is
    vnu_count                               pls_integer;
  begin
    --TODO::CARLO
    select   count (1)
      into   vnu_count
      from   vd_sie_12_struc_aplic c
     where   c.code = pva_contx                               /*and c.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn ()*/
                               ;

    if vnu_count != 1 then
      sie_01_err_apex_pkg.lever_err_apex_code (pva_code                   => 'SAF.000019',
                                               pva_code_prodt             => 'AFW');
    end if;
  end valdr_contx;

  procedure suprm_contx_page (pnu_page_apex in number) is
    vnu_seqnc                               number (10);
  begin
    select       fa.seqnc
          into   vnu_seqnc
          from   vd_sie_04_fil_arian fa
         where   page = pnu_page_apex
    connect by   ref_elemn_sup = prior seqnc
    start with   ref_elemn_sup is null;

    update   vd_i_sie_04_contx
       set   contx = null,
             actio = null,
             seqnc_contx = null,
             contx_inter = null,
             actio_inter = null,
             seqnc_contx_inter = null
     where   ref_fil_arian = vnu_seqnc;

    delete   vd_i_sie_04_contx_etend
     where   ref_contx = vnu_seqnc;
  exception
    when no_data_found then
      ete ();
  end suprm_contx_page;
end sie_04_contx_pkg;
/

Prompt Package Body SIE_04_FIL_ARIAN_PKG;
/* Formatted on 04/12/2013 11:35:08 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_04_fil_arian_pkg as
  gbo_mode_debug                 constant boolean default false;
  gnu_mod_encry                  constant pls_integer
    default dbms_crypto.encrypt_aes256 + dbms_crypto.chain_cbc + dbms_crypto.pad_pkcs5 ;
  gnu_longr_cle_encry            constant pls_integer default 256 / 8;
  gra_cle_encry                           raw (2000)
                                            default 'B9E13AF9390AF7C509F12EB4DF031D433524A0E25A4E0052B0E36711253A6116';
  gva_charc_set                  constant varchar2 (12) default 'WE8MSWIN1252';


  function encry (pva_valr in varchar2)
    return raw is
  begin
    return dbms_crypto.encrypt (utl_i18n.string_to_raw (pva_valr,
                                                        gva_charc_set),
                                gnu_mod_encry,
                                gra_cle_encry);
  end encry;

  function obten_dernr_page
    return number is
    vnu_page                                number;
  begin
    begin
      select   page
        into   vnu_page
        from   (select     page
                    from   vd_sie_04_fil_arian
                order by   timst desc)
       where   rownum = 1;

      return vnu_page;
    exception
      when no_data_found then
        return null;
    end;
  end obten_dernr_page;

  function trait_page (pnu_page_id in number default null)
    return boolean is
    vva_indic_trait                         varchar2 (1);
  begin
    select   aap.indic_prise_charg_sie04
      into   vva_indic_trait
      from   vd_i_sie_13_page aap,
             vd_i_sie_11_aplic pro
     where   aap.ref_aplic = pro.seqnc
         and pro.seqnc = sie_11_aplic_pkg.obten_aplic_sesn ()
         and aap.numr_apex = nvl (pnu_page_id, sie_13_page_pkg.obten_numr_apex_page)
         and aap.indic_prise_charg_sie04 = 'O';

    return true;
  exception
    when others then
      return false;
  end trait_page;

  function obten_seqnc_fa_de_page_dest (pnu_page_dest in number,
                                        pnu_aplic_dest in number default sie_07_util_pkg.nv ('APP_ID'),
                                        pnu_seqnc_deprt in number default null)
    return number is
    vnu_seqnc_destn                         number;
  begin
    select   seqnc
      into   vnu_seqnc_destn
      from   (select     seqnc
                  from   vd_sie_04_fil_arian fa
                 where   fa.page = pnu_page_dest
                     and ( (fa.app_id = pnu_aplic_dest)
                       or pnu_aplic_dest is null)
                     and (timst <= (select   fa3.timst
                                      from   vd_sie_04_fil_arian fa3
                                     where   fa3.seqnc = pnu_seqnc_deprt)
                       or pnu_seqnc_deprt is null)
              order by   timst);

    /* where   rownum = 1*/

    return vnu_seqnc_destn;
  exception
    when no_data_found then
      return null;
    when too_many_rows then
      ete;
      raise;
  end obten_seqnc_fa_de_page_dest;

  procedure suprm_elemn_apres (pnu_seqnc_a_partr_de number) is
  begin
    delete   vd_sie_04_fil_arian
     where   timst > (select   fa2.timst
                        from   vd_sie_04_fil_arian fa2
                       where   fa2.seqnc = pnu_seqnc_a_partr_de);
  end suprm_elemn_apres;

  /*
   On peut exécuter cette fonction lorsqu'on est authentifié.
   Autrement, il faut exécuter la fonction synch qui s'occupera d'initialiser les variables et la table de session.
 */
  procedure synch_login is
    pragma autonomous_transaction;
    vnu_numr_apex_page_acuei                number (10) default sie_11_prodt_pkg.obten_numr_apex_page_acuei;
    vnu_seqnc                               number (10);
    vnu_app_id                              number default sie_11_aplic_pkg.obten_numr_apex_aplic;
  begin
    vnu_seqnc := obten_seqnc_fa_de_page_dest (vnu_numr_apex_page_acuei);

    if vnu_seqnc is null then
      --supprimer les informations liées à la session
      delete from   vd_sie_04_fil_arian;

      insert into   vd_sie_04_fil_arian (page, session_id, ref_elemn_sup, hash_dernr_url, timst, indic_afich)
           values   (vnu_numr_apex_page_acuei,
                     sie_12_sesn_pkg.obten_sesn,
                     null,
                     sie_07_util_pkg.hash ('/'),
                     systimestamp - interval '0.001' second,
                     'O')
        returning   seqnc
             into   vnu_seqnc;
    else
      suprm_elemn_apres (vnu_seqnc);
    end if;

    sie_07_util_pkg.defnr_etat_sesn ('SIDF',
                                     vnu_seqnc);
    commit;
  end synch_login;

  procedure synch_varbl (pbo_sur_soums in boolean default false,
                         pnu_fa_courn in number default sie_07_util_pkg.nv ('SIDF')) is
    vnu_fa_courn                            number;
    vnu_app_parnt                           number;
    vnu_page_parnt                          number;
    vva_url_parnt                           varchar2 (200);
  begin
    vnu_fa_courn := pnu_fa_courn;

    if not trait_page () then
      return;
    end if;

    begin
      select   parnt.app_id,
               parnt.page
        into   vnu_app_parnt,
               vnu_page_parnt
        from   vd_sie_04_fil_arian parnt,
               vd_sie_04_fil_arian actue
       where   parnt.seqnc = actue.ref_elemn_sup and actue.seqnc = vnu_fa_courn;
    exception
      when no_data_found then
        null;
    end;

    if vnu_app_parnt is not null and vnu_page_parnt is not null then
      vva_url_parnt :=
        sie_08_url_pkg.genr_url (pnu_numr_aplic             => vnu_app_parnt,
                                 pnu_numr_page              => vnu_page_parnt,
                                 pva_nom_varbl_1            => 'SIDF',
                                 pva_valr_varbl_1           => vnu_fa_courn);
    end if;

    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_SOURC_NUMR_PAGE',
                                     vnu_page_parnt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_SOURC_NUMR_APLIC',
                                     vnu_app_parnt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_SOURC_URL',
                                     vva_url_parnt);

    if pbo_sur_soums then
      sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_SUR_SOUMS',
                                       'O');
    else
      sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_SUR_SOUMS',
                                       null);
    end if;
  end synch_varbl;

  procedure synch is
    pragma autonomous_transaction;
    sidf_inval                              exception;
    snpi_inval                              exception;
    contx_intrv                             exception;
    parnt_intrv                             exception;
    vnu_numr_apex_page_courn                number default sie_13_page_pkg.obten_numr_apex_page;
    vnu_numr_apex_aplic_courn               number default sie_11_aplic_pkg.obten_numr_apex_aplic;
    vnu_numr_apex_page_acuei                number default sie_11_prodt_pkg.obten_numr_apex_page_acuei;
    vnu_numr_apex_aplic_acuei               number default sie_11_prodt_pkg.obten_numr_apex_aplic_acuei;
    vnu_page_courn                          vd_i_sie_13_page.seqnc%type default sie_13_page_pkg.obten_page_sesn;
    vnu_page_acuei                          vd_i_sie_13_page.seqnc%type default sie_11_prodt_pkg.obten_page_acuei;
    vnu_page_conxn                          vd_i_sie_13_page.seqnc%type default sie_11_aplic_pkg.obten_page_conxn;
    vbo_autor_duplq_page                    boolean
                                              default nvl (sie_07_util_pkg.v ('A_SIE_04_AUTOR_DUPLQ_PAGE'), 'N') = 'O';
    vbo_suprm_fil_courn                     boolean
                                              default nvl (sie_07_util_pkg.v ('A_SIE_04_SUPRM_FIL_COURN'), 'N') = 'O';
    vbo_sur_soums                           boolean default nvl (sie_07_util_pkg.v ('A_SIE_04_SUR_SOUMS'), 'N') = 'O';
    vva_actio                               sie_04_contx.actio%type default sie_07_util_pkg.v ('SAPC');
    vra_hash_dernr_url                      vd_sie_04_fil_arian.hash_dernr_url%type
                                              default sie_07_util_pkg.hash (sie_07_util_pkg.obten_parmt_url ());
    vbo_afich_page_inter                    boolean;
    vnu_page_inter                          number;
    vnu_page_parnt                          number;
    vnu_fa_pp                               number;
    vnu_fa_dest                             number;
    vnu_fa_provn                            number;
    vnu_fa_courn                            number;
    vnu_fa_parnt_courn                      number;
    vnu_dummy                               number;

    vnu_app_id_parnt                        number;

    procedure ajout_elemn (pnu_provn in number,
                           vva_indic_afich in varchar2 default 'O',
                           vva_indic_moins_1 in varchar2 default 'N') is
    begin
      insert into   vd_sie_04_fil_arian (page, session_id, ref_elemn_sup, hash_dernr_url, indic_afich, timst)
           values   (
                      vnu_numr_apex_page_courn,
                      sie_07_util_pkg.nv ('SESSION'),
                      pnu_provn,
                      vra_hash_dernr_url,
                      vva_indic_afich,
                      case
                        when vva_indic_moins_1 = 'O' then systimestamp - interval '0.001' second
                        else systimestamp
                      end
                    )
        returning   seqnc
             into   vnu_fa_courn;
    end ajout_elemn;

    procedure reint_item_aplic is
    begin
      sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_AUTOR_DUPLQ_PAGE',
                                       'N');
      sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_SUPRM_FIL_COURN',
                                       'N');
      sie_07_util_pkg.defnr_etat_sesn ('SIDF',
                                       null);
      sie_07_util_pkg.defnr_etat_sesn ('SNPI',
                                       null);
      sie_07_util_pkg.defnr_etat_sesn ('SAPC',
                                       null);
    end;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 04 Fil Arian - Synchroniser le fil d''ariane');

    if not trait_page () then
      commit;
      return;
    end if;

    --TODO::CARLO
    --valider la session SIE
    if sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_SESN') is null then
      sie_12_authe_apex_pkg.inser_sesn;
      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_SESN',
                                       encry (sie_12_sesn_pkg.obten_sesn));
    end if;

    if not (encry (sie_12_sesn_pkg.obten_sesn) = sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_SESN')) then
      sie_08_url_pkg.decnt_et_redrg_page_login ();
    end if;


    /*
    --TODO::PRIBR
     if vva_actio like 'XNH%' then
       sie_04_histr_navgt_pkg.creer_fil_arian_de_histr(to_number(substr(vva_actio, 4)));
     end if;*/

    -- Mettre à jour la page dans le référentiel de AFW (habituellement activé en DEV)
    if vnu_numr_apex_page_courn is null
   and sie_11_prodt_pkg.obten_page_inexs_maj_refrn (sie_11_prodt_pkg.obten_prodt_sesn) then
      sie_13_page_pkg.maj_pages_refrt_apex (sie_11_aplic_pkg.obten_aplic_sesn);
      sie_13_page_pkg.maj_page_refrt_apex (sie_13_page_pkg.obten_page_sesn);
      vnu_numr_apex_page_courn := sie_13_page_pkg.obten_numr_apex_page;
    end if;

    begin
      vbo_afich_page_inter := false;

      if sie_07_util_pkg.v ('SNPI') like '@%' then
        vbo_afich_page_inter := true;
        sie_07_util_pkg.defnr_etat_sesn ('SNPI',
                                         substr (sie_07_util_pkg.v ('SNPI'),
                                                 2));
      end if;

      vnu_page_inter := sie_07_util_pkg.nv ('SNPI');
    exception
      when others then
        raise snpi_inval;
    end;

    begin
      if vnu_page_courn <> vnu_page_conxn then
        vnu_fa_provn := sie_07_util_pkg.nv ('SIDF');
      else
        vnu_fa_provn := null;
      end if;
    exception
      when others then
        raise sidf_inval;
    end;

    -- Si on demande la page d'accueil d'un produit, supprimer tout le fil et faire un synch_login
    -- Si le SIDF est NULL, simuler un acces depuis la page d'accueil en cours actuellement
    --Sinon, supprimer à partir de la page d'accueil déjà en force
    if vnu_page_courn = vnu_page_acuei then
      /*
       --TODO::PRIBR
       --Ajout pour la gestion de l'historique -
       --à compléter
       if vnu_fa_provn is null and vnu_page_courn != vnu_page_acuei then
         sie_04_histr_navgt_pkg.creer_histr_de_page_acuei();
       end if;
       --Fin BP */

      vnu_fa_provn := obten_seqnc_fa_de_page_dest (vnu_numr_apex_page_acuei);

      --if vnu_fa_provn is null then
      synch_login ();
      vnu_fa_provn := sie_07_util_pkg.nv ('SIDF');
    --end if;
    elsif vnu_fa_provn is null then /*donc si le sidf est null, supprimer tout après la page d'accueil en cours et considérer ceci comme le départ*/
      begin
        select   seqnc
          into   vnu_fa_provn
          from   vd_sie_04_fil_arian
         where   ref_elemn_sup is null;

        suprm_elemn_apres (vnu_fa_provn);
      exception
        when no_data_found then
          synch_login ();

          select   seqnc
            into   vnu_fa_provn
            from   vd_sie_04_fil_arian
           where   ref_elemn_sup is null;
      end;
    end if;

    if not vbo_autor_duplq_page and not vbo_sur_soums then
      begin
        -- Verifier si l'URL demande existe deja
        select   seqnc
          into   vnu_fa_courn
          from   vd_sie_04_fil_arian
         where   hash_dernr_url = vra_hash_dernr_url;

        -- Si oui, simuler un clic sur l'element de fil d'ariane depuis
        -- l'element lui-meme (boucle)
        if vnu_fa_courn is not null then
          vva_actio := 'XFA' || vnu_fa_courn;
          vnu_fa_provn := vnu_fa_courn;
        end if;
      exception
        when no_data_found then
          null;
      end;
    end if;

    -- Valider que le fil d'ariane de provenance est valide
    -- Sauf dans le cas de la page d'accueil, on laisse tjrs passer
    if vnu_page_courn <> vnu_page_acuei
   and not est_valid_sidf (false,
                           vnu_fa_provn) then
      raise contx_intrv;
    end if;

    -- Se positionner sur l'avant-derniere entree si demande
    if vbo_suprm_fil_courn then
      sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_SUPRM_FIL_COURN',
                                       'N');

      begin
        select   seqnc
          into   vnu_fa_provn
          from   (select     fa1.seqnc
                      from   vd_sie_04_fil_arian fa1
                     where   fa1.timst < (select   fa2.timst
                                            from   vd_sie_04_fil_arian fa2
                                           where   fa2.seqnc = vnu_fa_provn)
                         and fa1.ref_elemn_sup is not null                                  -- Filtrer la page d'accueil
                  order by   timst desc)
         where   rownum = 1;
      exception
        when no_data_found then
          null;                                                         -- Ne rien faire, demeurer sur l'entree actuelle
      end;
    end if;

    -- Se remettre en contexte, au cas ou l'usager a utilise "Back"
    suprm_elemn_apres (vnu_fa_provn);

    if vnu_page_inter is not null then
      -- Chercher si la page intermediaire existe
      vnu_fa_parnt_courn := obten_seqnc_fa_de_page_dest (vnu_page_inter);

      if vnu_fa_parnt_courn is null then
        vnu_page_parnt := vnu_numr_apex_page_courn;
        vnu_numr_apex_page_courn := vnu_page_inter;
        ajout_elemn (vnu_fa_provn,
                     case when vbo_afich_page_inter then 'O' else 'N' end,
                     'O');
        gnu_fa_page_inter := vnu_fa_courn;
        vnu_fa_provn := vnu_fa_courn;
        vnu_numr_apex_page_courn := vnu_page_parnt;
      else
        gnu_fa_page_inter := vnu_fa_parnt_courn;
        suprm_elemn_apres (vnu_fa_parnt_courn);
        vnu_fa_provn := vnu_fa_parnt_courn;
      end if;
    end if;

    --Verifier le META pour traiter les particularites
    if vva_actio like 'XPP%' then
      -- Lire le numero de page parent et l'application dans le META
      --Si pas de page parent (pas la portion de xxx|yyy, trouver l'application la plus proche)
      if vva_actio like 'XPP%|%' then
        vnu_app_id_parnt :=
          to_number (substr (vva_actio,
                             4,
                             instr (vva_actio,
                                    '|') -
                             4));
        vnu_page_parnt :=
          to_number (substr (vva_actio,
                             instr (vva_actio,
                                    '|') +
                             1));
      else
        vnu_page_parnt :=
          to_number (substr (vva_actio,
                             4));

        declare
          cursor cur_fa_parnt is
            select     app_id
                from   vd_sie_04_fil_arian fa
               where   fa.page = vnu_page_parnt
            order by   timst desc;
        begin
          --Trouver l'application en remontant
          for rec_fa in cur_fa_parnt loop
            vnu_app_id_parnt := rec_fa.app_id;
            exit;
          end loop;
        end;
      end if;

      -- Le META est lu, on peut le discarter
      --sie_07_util_pkg.defnr_etat_sesn ('SAPC', null);
      -- Chercher la page parent et la page courante dans le fil actuel
      vnu_fa_pp :=
        obten_seqnc_fa_de_page_dest (vnu_page_parnt,
                                     vnu_app_id_parnt);
      vnu_fa_courn := obten_seqnc_fa_de_page_dest (vnu_numr_apex_page_courn);

      -- Verifier si les pages sont deja directement liees
      begin
        select   1
          into   vnu_dummy
          from   vd_sie_04_fil_arian
         where   seqnc = vnu_fa_courn and ref_elemn_sup = vnu_fa_pp;

        suprm_elemn_apres (vnu_fa_courn);

        update   vd_sie_04_fil_arian
           set   hash_dernr_url = vra_hash_dernr_url
         where   seqnc = vnu_fa_courn and ref_elemn_sup is not null;
      exception
        when no_data_found then
          -- Si les pages ne sont pas liees
          if vnu_fa_pp is null then
            -- Pas normal, il devrait exister
            raise parnt_intrv;
          else
            suprm_elemn_apres (vnu_fa_pp);
            ajout_elemn (vnu_fa_pp);
          end if;
      end;
    elsif vva_actio like 'XFA%' then
      -- Lire le numero de fil d'ariane dans le META
      vnu_fa_courn :=
        to_number (substr (vva_actio,
                           4));

      -- Le META est lu, on peut le discarter
      --sie_07_util_pkg.defnr_etat_sesn ('SAPC', null);

      -- Valider que le fil d'ariane lu est valide
      if not est_valid_sidf (false,
                             vnu_fa_courn) then
        raise contx_intrv;
      end if;

      suprm_elemn_apres (vnu_fa_courn);

      update   vd_sie_04_fil_arian
         set   hash_dernr_url = vra_hash_dernr_url
       where   seqnc = vnu_fa_courn and ref_elemn_sup is not null;
    else
      vnu_fa_courn := obten_seqnc_fa_de_page_dest (vnu_numr_apex_page_courn);

      if (vnu_fa_courn is null
       or vbo_autor_duplq_page) then
        ajout_elemn (vnu_fa_provn);
      else
        suprm_elemn_apres (vnu_fa_courn);

        update   vd_sie_04_fil_arian
           set   hash_dernr_url = vra_hash_dernr_url
         where   seqnc = vnu_fa_courn and ref_elemn_sup is not null;
      end if;
    end if;

    -- S'assurer que l'item soit affiche
    update   vd_sie_04_fil_arian
       set   indic_afich = 'O'
     where   seqnc = vnu_fa_courn;

    -- Synchroniser les variables
    sie_07_util_pkg.defnr_etat_sesn ('SIDF',
                                     vnu_fa_courn);
    synch_varbl;

    commit;
  exception
    when sidf_inval then
      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SIE.000003',
                                                      sie_07_util_pkg.v ('SIDF'),
                                                      pva_code_prodt             => 'AFW');

      if gbo_mode_debug then
        sie_07_util_pkg.aret_trait_page_apex;
      else
        sie_08_url_pkg.redrg_navgt_ilegl;
      end if;

      reint_item_aplic ();
      commit;
      return;
    when snpi_inval then
      sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000004',
                                               'SNPI',
                                               sie_07_util_pkg.v ('SNPI'),
                                               pva_code_prodt             => 'AFW');

      if gbo_mode_debug then
        sie_07_util_pkg.aret_trait_page_apex;
      else
        sie_08_url_pkg.redrg_page_acuei_postn;
      end if;

      reint_item_aplic ();
      commit;
      return;
    when contx_intrv then
      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SIE.000002',
                                                      pva_code_prodt             => 'AFW');

      if gbo_mode_debug then
        sie_07_util_pkg.aret_trait_page_apex;
      else
        sie_08_url_pkg.redrg_navgt_ilegl;
      end if;

      reint_item_aplic ();
      commit;
      return;
    when parnt_intrv then
      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SIE.000002',
                                                      pva_code_prodt             => 'AFW');

      if gbo_mode_debug then
        sie_07_util_pkg.aret_trait_page_apex;
      else
        sie_08_url_pkg.redrg_navgt_ilegl;
      end if;

      reint_item_aplic ();
      commit;
      return;
    when others then
      ete ();
      raise;
  end synch;

  procedure persn (pva_titre_persn in varchar2,
                   pnu_index in number default 0) is
    pragma autonomous_transaction;
    vnu_seqnc_provn                         number (10) default sie_07_util_pkg.nv ('SIDF');
    vnu_index                               number (10) default pnu_index;
  begin
    while vnu_index < 0 loop
      select   ref_elemn_sup
        into   vnu_seqnc_provn
        from   vd_sie_04_fil_arian
       where   seqnc = vnu_seqnc_provn;

      vnu_index := vnu_index + 1;
    end loop;

    update   vd_sie_04_fil_arian
       set   libl = pva_titre_persn
     where   seqnc = vnu_seqnc_provn;

    commit;
  exception
    when others then
      rollback;
  end persn;

  function afich
    return varchar2 is
    cursor cur_fil is
      select       count (1) over (partition by session_id) nb,
                   rank () over (order by timst) rg,
                   libl,
                   page,
                   seqnc,
                   app_id
            from   vd_sie_04_fil_arian fa
           where   fa.indic_afich = 'O'
      connect by   fa.ref_elemn_sup = prior fa.seqnc
      start with   fa.ref_elemn_sup is null                            /*and fa.app_id = sie_07_util_pkg.nv ('APP_ID')*/
                                           ;

    vva_lien                                varchar2 (150)
      default    '<a href="f?p=%app_id%'
              || ':%page%:'
              || v ('SESSION')                                     --|| '::NO::a_sie_04_seqnc_clic:%seqnc%">%libl%</a>';
              || '::NO::SIDF,SAPC:'
              || sie_07_util_pkg.nv ('SIDF')
              || ',XFA%seqnc%">%libl%</a>';
    vva_fil                                 varchar2 (1999);
    vnu_debut_subst                         pls_integer;
    vnu_fin_subst                           pls_integer;
    vva_varbl_subst                         varchar2 (3000);
  begin
    if not trait_page () then
      return null;
    end if;

    for rec_fil in cur_fil loop
      if rec_fil.rg = rec_fil.nb then
        vva_fil := vva_fil || '&nbsp;&gt;&nbsp;' || rec_fil.libl;
      else
        vva_fil :=
             vva_fil
          || '&nbsp;&gt;&nbsp;'
          || replace (replace (replace (replace (vva_lien,
                                                 '%page%',
                                                 rec_fil.page),
                                        '%libl%',
                                        rec_fil.libl),
                               '%seqnc%',
                               rec_fil.seqnc),
                      '%app_id%',
                      rec_fil.app_id);
      end if;
    end loop;

    vva_fil := apex_application.do_substitutions (vva_fil);
    return '<b>' || vva_fil || '</b>';
  end afich;

  function est_valid_sidf (pbo_postn in boolean default false,
                           pnu_fa in number default null)
    return boolean is
    vva_exist_sidf                          pls_integer;
    vnu_sidf                                number (10) default nvl (pnu_fa, sie_07_util_pkg.nv ('SIDF'));
    vnu_page                                number;
  begin
    if vnu_sidf is null then
      return true;
    end if;

    if pbo_postn then
      vnu_page := sie_07_util_pkg.nv ('APP_PAGE_ID');
    end if;

    select   1
      into   vva_exist_sidf
      from   vd_sie_04_fil_arian fa
     where   fa.seqnc = vnu_sidf
         and (fa.page = vnu_page
           or vnu_page is null);

    return vva_exist_sidf = 1;
  exception
    when others then
      return false;
  end;

  function obten_fa_courn
    return number is
  begin
    return sie_07_util_pkg.nv ('SIDF');
  end;

  procedure migr_sesn (pnu_ancn_sesn in number,
                       pnu_nouvl_sesn in number) is
  begin
    update   vd_i_sie_04_fil_arian
       set   session_id = pnu_nouvl_sesn
     where   session_id = pnu_ancn_sesn;
  end migr_sesn;

  --deprecated
  procedure suprm_elemn_apres_courn is
    vnu_fa_courn                            number;
  begin
    vnu_fa_courn := obten_seqnc_fa_de_page_dest (sie_13_page_pkg.obten_numr_apex_page);

    -- Supprimer les éléments du fil d'ariane qui suivent la
    suprm_elemn_apres (vnu_fa_courn);

    -- Synchroniser les variables
    sie_07_util_pkg.defnr_etat_sesn ('SIDF',
                                     vnu_fa_courn);
    synch_varbl;
    sie_04_contx_pkg.synch_varbl;
  end suprm_elemn_apres_courn;
end sie_04_fil_arian_pkg;
/

Prompt Package Body SIE_04_HISTR_NAVGT_PKG;
/* Formatted on 04/12/2013 11:35:08 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_04_histr_navgt_pkg as
  procedure genr_histr is
    cursor cur_nagvt_histr (pnu_utils in number) is
      select   dnr_libl libl,
               dnr_url url,
               seqnc
        from   vd_i_sie_04_navgt_histr nh
       where   ref_utils = pnu_utils;

    vnu_sidf                                number (10);
    vbo_premr_rec_histr_navgt               boolean default true;
  begin
    select   seqnc
      into   vnu_sidf
      from   vd_sie_04_fil_arian
     where   page = 1;

    for rec_histr_navgt in cur_nagvt_histr (sie_12_utils_pkg.obten_usagr_conct ()) loop
      if vbo_premr_rec_histr_navgt then
        sie_15_htp_pkg.ouvri_bals ('ul',
                                   'class',
                                   'ui-afw sie_04_histr_navgt');
        vbo_premr_rec_histr_navgt := false;
      end if;

      sie_15_htp_pkg.ouvri_bals ('li');
      sie_15_htp_pkg.ouvri_bals ('a',
                                 'href',
                                 sie_07_util_pkg.multi_replc (rec_histr_navgt.url,
                                                              '&APP_ID.',
                                                              sie_08_url_pkg.knu_app_id,
                                                              '&APP_PAGE_ID.',
                                                              sie_08_url_pkg.knu_app_page_id,
                                                              '&SESSION.',
                                                              sie_08_url_pkg.knu_sesn,
                                                              '&NAVGT_HISTR.SEQNC.',
                                                              rec_histr_navgt.seqnc,
                                                              '&SIDF.',
                                                              vnu_sidf),
                                 'alt',
                                 rec_histr_navgt.libl,
                                 'title',
                                 rec_histr_navgt.libl);

      sie_15_htp_pkg.ecrir (rec_histr_navgt.libl);

      sie_15_htp_pkg.fermr_bals ('a');

      sie_15_htp_pkg.fermr_bals ('li');
    end loop;

    if not vbo_premr_rec_histr_navgt then
      sie_15_htp_pkg.fermr_bals ('ul');
    end if;
  end genr_histr;

  function creer_navgt (pva_libl in varchar2,
                        pva_url in varchar2,
                        pva_icon in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    insert into   vd_i_sie_04_navgt_histr (ref_utils, dnr_libl, dnr_url, dnr_icon)
         values   (sie_12_utils_pkg.obten_usagr_conct (),
                   pva_libl,
                   pva_url,
                   pva_icon)
      returning   seqnc
           into   vnu_seqnc;

    return vnu_seqnc;
  end creer_navgt;

  procedure creer_histr_de_page_acuei is
    vnu_seqnc_histr                         number (10);
    vnu_sesn_id                             number;
    vva_titre                               varchar2 (60);
    vva_url                                 varchar2 (200);                                                        --XNH
    vnu_page                                number;
  begin
    vnu_sesn_id := sie_08_url_pkg.knu_sesn;

    select   libl,
             page
      into   vva_titre,
             vnu_page
      from   (select       libl,
                           page,
                           rank () over (order by level desc) rng
                    from   vd_sie_04_fil_arian fa
              --where session_id = 2893626644949881
              start with   page = 1
              connect by   ref_elemn_sup = prior seqnc)
     where   rng = 1;

    --Crééer l'occurence de navigation
    vnu_seqnc_histr :=
      creer_navgt (vva_titre,
                   'f?p=&APP_ID.:' || vnu_page || ':&SESSION.::::SIDF,SAPC:&SIDF.,XNH&NAVGT_HISTR.SEQNC.',
                   'icon');

    update   vd_i_sie_04_fil_arian
       set   session_id = null, ref_navgt_histr = vnu_seqnc_histr
     where   session_id = vnu_sesn_id and page != 1;
  end creer_histr_de_page_acuei;

  procedure creer_fil_arian_de_histr (pnu_histr_navgt in number) is
    vnu_sesn_id                             number;
    vva_titre                               varchar2 (60);
    vva_url                                 varchar2 (200);                                                        --XNH
    vnu_page                                number;
  begin
    vnu_sesn_id := sie_08_url_pkg.knu_sesn;

    --supprimer tout ce qui est après la page d'accueil
    delete   vd_sie_04_fil_arian
     where   page != 1;

    update   vd_i_sie_04_fil_arian_histr
       set   session_id = vnu_sesn_id, ref_navgt_histr = null
     where   ref_navgt_histr = pnu_histr_navgt;
  end creer_fil_arian_de_histr;
end sie_04_histr_navgt_pkg;
/

Prompt Package Body SIE_05_FORML_NOYAU_PKG;
/* Formatted on 04/12/2013 11:35:08 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_05_FORML_NOYAU_PKG" as
  gva_code_exect                          varchar2 (32767);

  procedure trim_code is
  begin
    gva_code_exect :=
      replace (gva_code_exect,
               chr (13),
               chr (32));
    gva_code_exect :=
      replace (gva_code_exect,
               chr (10),
               chr (32));
  end trim_code;

  function resdr_condt_simple_booln (pva_forml in varchar2)
    return boolean is
  begin
    gva_code_exect :=
      replace ('begin 
                               if %pva_forml% then 
                                 sie_05_forml_noyau_pkg.gva_varbl_varch := ''O'';
                               else
                                   sie_05_forml_noyau_pkg.gva_varbl_varch := ''N'';
                               end if;
                               end;',
               '%pva_forml%',
               pva_forml);

    trim_code;

    gva_code_exect := aa.do_substitutions (gva_code_exect);

    execute immediate gva_code_exect;

    if gva_varbl_varch = 'O' then
      return true;
    else
      return false;
    end if;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ ('Erreur dans l''exécution de la formule: ' || gva_code_exect);
      sie_07_util_pkg.ajout_info_debug ('Formule invalide :' || pva_forml);
      raise;
  end resdr_condt_simple_booln;
end sie_05_forml_noyau_pkg;
/

Prompt Package Body SIE_06_RATIO_PKG;
/* Formatted on 04/12/2013 11:35:08 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_06_RATIO_PKG" is
  function resdr_ratio (pnu_valr in number,
                        pva_ratio in varchar2)
    return number is
  begin
    execute immediate ' 
      begin
        sie_05_forml_noyau_pkg.gnu_varbl_numbr := (' || pva_ratio || ') * :2;
      end;
      ' using pnu_valr;

    return sie_05_forml_noyau_pkg.gnu_varbl_numbr;
  end resdr_ratio;
end sie_06_ratio_pkg;
/

Prompt Package Body SIE_07_APEX_COLCT_PKG;
/* Formatted on 04/12/2013 11:35:08 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_07_apex_colct_pkg is
  procedure suprm_colct (pva_colct_name in varchar2) is
  begin
    if apex_collection.collection_exists (pva_colct_name) then
      apex_collection.delete_collection (pva_colct_name);
    end if;
  end suprm_colct;

  procedure creer_colct (pva_colct_name in varchar2) is
  begin
    --apex_collection.create_or_truncate_collection (pva_colct_name);
    if not apex_collection.collection_exists (pva_colct_name) then
      apex_collection.create_collection (pva_colct_name);
    end if;
  end creer_colct;

  function obten_nombr_coln (pva_colct_name in varchar2)
    return number is
    vnu_colmn_count                         number;
  begin
    select   count (1)
      into   vnu_colmn_count
      from   wwv_flow_collections
     where   collection_name = pva_colct_name;

    return vnu_colmn_count;
  exception
    when others then
      raise;
  end obten_nombr_coln;

  procedure maj_colct_membr_atrib (pva_colct_name in varchar2,
                                   pnu_seqnc in number,
                                   pnu_atrib_numbr in number,
                                   pnu_valr in number) is
  begin
    apex_collection.update_member_attribute (p_collection_name          => pva_colct_name,
                                             p_seq                      => pnu_seqnc,
                                             p_attr_number              => pnu_atrib_numbr,
                                             p_number_value             => pnu_valr);
  end maj_colct_membr_atrib;

  procedure maj_colct_membr_atrib (pva_colct_name in varchar2,
                                   pnu_seqnc in number,
                                   pnu_atrib_numbr in number,
                                   pva_valr in varchar2) is
  begin
    apex_collection.update_member_attribute (p_collection_name          => pva_colct_name,
                                             p_seq                      => pnu_seqnc,
                                             p_attr_number              => pnu_atrib_numbr,
                                             p_number_value             => pva_valr);
  end maj_colct_membr_atrib;

  procedure ajout_membr (pva_colct_name in varchar2,
                         pva_c001 in varchar2 default null,
                         pva_c002 in varchar2 default null,
                         pva_c003 in varchar2 default null,
                         pva_c004 in varchar2 default null,
                         pva_c005 in varchar2 default null,
                         pva_c006 in varchar2 default null,
                         pva_c007 in varchar2 default null,
                         pva_c008 in varchar2 default null,
                         pva_c009 in varchar2 default null,
                         pva_c010 in varchar2 default null,
                         pva_c011 in varchar2 default null,
                         pva_c012 in varchar2 default null,
                         pva_c013 in varchar2 default null,
                         pva_c014 in varchar2 default null,
                         pva_c015 in varchar2 default null,
                         pva_c016 in varchar2 default null,
                         pva_c017 in varchar2 default null,
                         pva_c018 in varchar2 default null,
                         pva_c019 in varchar2 default null,
                         pva_c020 in varchar2 default null,
                         pva_c021 in varchar2 default null,
                         pva_c022 in varchar2 default null,
                         pva_c023 in varchar2 default null,
                         pva_c024 in varchar2 default null,
                         pva_c025 in varchar2 default null,
                         pva_c026 in varchar2 default null,
                         pva_c027 in varchar2 default null,
                         pva_c028 in varchar2 default null,
                         pva_c029 in varchar2 default null,
                         pva_c030 in varchar2 default null,
                         pva_c031 in varchar2 default null,
                         pva_c032 in varchar2 default null,
                         pva_c033 in varchar2 default null,
                         pva_c034 in varchar2 default null,
                         pva_c035 in varchar2 default null,
                         pva_c036 in varchar2 default null,
                         pva_c037 in varchar2 default null,
                         pva_c038 in varchar2 default null,
                         pva_c039 in varchar2 default null,
                         pva_c040 in varchar2 default null,
                         pva_c041 in varchar2 default null,
                         pva_c042 in varchar2 default null,
                         pva_c043 in varchar2 default null,
                         pva_c044 in varchar2 default null,
                         pva_c045 in varchar2 default null,
                         pva_c046 in varchar2 default null,
                         pva_c047 in varchar2 default null,
                         pva_c048 in varchar2 default null,
                         pva_c049 in varchar2 default null,
                         pva_c050 in varchar2 default null,
                         pnu_n001 in number default null,
                         pnu_n002 in number default null,
                         pnu_n003 in number default null,
                         pnu_n004 in number default null,
                         pnu_n005 in number default null,
                         pda_d001 in date default null,
                         pda_d002 in date default null,
                         pda_d003 in date default null,
                         pda_d004 in date default null,
                         pda_d005 in date default null,
                         pcl_cl001 in clob default empty_clob (),
                         pbl_bl001 in blob default empty_blob (),
                         pxm_x001 in xmltype default null,
                         pva_genrt_md5 in varchar2 default 'NO') is
  begin
    apex_collection.add_member (p_collection_name          => pva_colct_name,
                                p_c001                     => pva_c001,
                                p_c002                     => pva_c002,
                                p_c003                     => pva_c003,
                                p_c004                     => pva_c004,
                                p_c005                     => pva_c005,
                                p_c006                     => pva_c006,
                                p_c007                     => pva_c007,
                                p_c008                     => pva_c008,
                                p_c009                     => pva_c009,
                                p_c010                     => pva_c010,
                                p_c011                     => pva_c011,
                                p_c012                     => pva_c012,
                                p_c013                     => pva_c013,
                                p_c014                     => pva_c014,
                                p_c015                     => pva_c015,
                                p_c016                     => pva_c016,
                                p_c017                     => pva_c017,
                                p_c018                     => pva_c018,
                                p_c019                     => pva_c019,
                                p_c020                     => pva_c020,
                                p_c021                     => pva_c021,
                                p_c022                     => pva_c022,
                                p_c023                     => pva_c023,
                                p_c024                     => pva_c024,
                                p_c025                     => pva_c025,
                                p_c026                     => pva_c026,
                                p_c027                     => pva_c027,
                                p_c028                     => pva_c028,
                                p_c029                     => pva_c029,
                                p_c030                     => pva_c030,
                                p_c031                     => pva_c031,
                                p_c032                     => pva_c032,
                                p_c033                     => pva_c033,
                                p_c034                     => pva_c034,
                                p_c035                     => pva_c035,
                                p_c036                     => pva_c036,
                                p_c037                     => pva_c037,
                                p_c038                     => pva_c038,
                                p_c039                     => pva_c039,
                                p_c040                     => pva_c040,
                                p_c041                     => pva_c041,
                                p_c042                     => pva_c042,
                                p_c043                     => pva_c043,
                                p_c044                     => pva_c044,
                                p_c045                     => pva_c045,
                                p_c046                     => pva_c046,
                                p_c047                     => pva_c047,
                                p_c048                     => pva_c048,
                                p_c049                     => pva_c049,
                                p_c050                     => pva_c050,
                                p_n001                     => pnu_n001,
                                p_n002                     => pnu_n002,
                                p_n003                     => pnu_n003,
                                p_n004                     => pnu_n004,
                                p_n005                     => pnu_n005,
                                p_d001                     => pda_d001,
                                p_d002                     => pda_d002,
                                p_d003                     => pda_d003,
                                p_d004                     => pda_d004,
                                p_d005                     => pda_d005,
                                p_clob001                  => pcl_cl001,
                                p_blob001                  => pbl_bl001,
                                p_xmltype001               => pxm_x001,
                                p_generate_md5             => pva_genrt_md5);
  end ajout_membr;

  procedure suprm_membr (pva_colct_name in varchar2,
                         pnu_seqnc in number) is
  begin
    apex_collection.delete_member (p_collection_name          => pva_colct_name,
                                   p_seq                      => pnu_seqnc);
  end suprm_membr;

  function exist (pva_colct_name in varchar2)
    return boolean is
  begin
    return apex_collection.collection_exists (pva_colct_name);
  end exist;

  procedure re_seqnc_colct (pva_colct_name in varchar2) is
  begin
    apex_collection.resequence_collection (p_collection_name => pva_colct_name);
  end re_seqnc_colct;
end sie_07_apex_colct_pkg;
/

Prompt Package Body SIE_07_CLOB_PKG;
/* Formatted on 04/12/2013 11:35:09 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_CLOB_PKG" as
  type typ_clob is record
  (
    cl_contn                                clob,
    va_tampn                                varchar2 (32500 char) default null,
    va_seprt_ligne                          varchar2 (10) default chr (10)
  );

  type typ_arr_clob is table of typ_clob
                         index by typ_index;

  gar_clob                                typ_arr_clob;
  gnu_index_courn                         typ_index default null;
  gva_seprt_ligne                         varchar2 (10) default chr (10);

  procedure ecrir_tampn (pnu_index in typ_index) is
  begin
    if gar_clob (pnu_index).va_tampn is not null then
      dbms_lob.append (gar_clob (pnu_index).cl_contn,
                       gar_clob (pnu_index).va_tampn);
      gar_clob (pnu_index).va_tampn := null;
    end if;
  end;

  procedure ajout_tampn (pnu_index in typ_index,
                         pva_contn in varchar2) is
    vnu_tail_tampn                          number default nvl (length (gar_clob (pnu_index).va_tampn), 0);
    vva_contn                               varchar2 (32767) default pva_contn;
  begin
    while nvl (length (vva_contn), 0) + vnu_tail_tampn > 20000 loop
      gar_clob (pnu_index).va_tampn :=
           gar_clob (pnu_index).va_tampn
        || substr (vva_contn,
                   1,
                   20000 - vnu_tail_tampn);
      ecrir_tampn (pnu_index);
      vva_contn :=
        substr (vva_contn,
                (20000 - vnu_tail_tampn) + 1);
      vnu_tail_tampn := 0;
    end loop;

    gar_clob (pnu_index).va_tampn := gar_clob (pnu_index).va_tampn || vva_contn;
  exception
    when others then
      raise;
  end;

  procedure creer_nouv is
    vre_clob                                typ_clob;
  begin
    gnu_index_courn := nvl (gar_clob.last (), 0) + 1;
    gar_clob (gnu_index_courn) := vre_clob;
    dbms_lob.createtemporary (gar_clob (gnu_index_courn).cl_contn,
                              true);
  end;

  function creer_nouv
    return typ_index is
  begin
    creer_nouv ();
    return gnu_index_courn;
  end;

  procedure defnr_courn (pnu_index in typ_index) is
  begin
    if gar_clob.exists (pnu_index) then
      gnu_index_courn := pnu_index;
    else
      gnu_index_courn := null;
    end if;
  end;

  function tail (pnu_index in typ_index default null)
    return number is
    vnu_index                               typ_index default nvl (pnu_index, gnu_index_courn);
  begin
    if vnu_index is not null and gar_clob.exists (vnu_index) then
      return nvl (dbms_lob.getlength (gar_clob (vnu_index).cl_contn), 0) +
             nvl (length (gar_clob (vnu_index).va_tampn), 0);
    else
      return null;
    end if;
  end;

  procedure ajout (pva_contn in varchar2,
                   pnu_index in typ_index default null) is
    vnu_index                               typ_index default nvl (pnu_index, gnu_index_courn);
  begin
    if vnu_index is not null and gar_clob.exists (vnu_index) then
      if pva_contn is not null then
        ajout_tampn (vnu_index,
                     pva_contn);
      end if;
    end if;
  end;

  procedure ajout_ligne (pva_ligne in varchar2 default null,
                         pnu_index in typ_index default null) is
  begin
    ajout (pva_ligne || gva_seprt_ligne,
           pnu_index);
  end;

  function obten (pnu_index in typ_index default null)
    return clob is
    vnu_index                               typ_index default nvl (pnu_index, gnu_index_courn);
  begin
    if vnu_index is not null and gar_clob.exists (vnu_index) then
      ecrir_tampn (vnu_index);
      return gar_clob (vnu_index).cl_contn;
    else
      return null;
    end if;
  end;

  procedure ajout_segmn (pse_segmn in typ_segmn) is
  begin
    gar_segmn_courn (nvl (gar_segmn_courn.count, 0) + 1) := pse_segmn;
  end;

  procedure table_segmn_vers_clob (pcl_clob in out nocopy clob,
                                   par_segmn in  typ_arr_segmn) is
  begin
    dbms_lob.trim (pcl_clob,
                   0);

    if par_segmn.first () is not null then
      for i in par_segmn.first () .. par_segmn.last () loop
        if par_segmn (i) is not null then
          dbms_lob.writeappend (pcl_clob,
                                length (par_segmn (i)),
                                par_segmn (i));
        end if;
      end loop;
    end if;
  end;

  function table_segmn_vers_clob (par_segmn in typ_arr_segmn)
    return clob is
    vcl_clob                                clob;
  begin
    dbms_lob.createtemporary (vcl_clob,
                              false);
    table_segmn_vers_clob (vcl_clob,
                           par_segmn);
    return vcl_clob;
  end;

  function table_segmn_vers_clob
    return clob is
  begin
    return table_segmn_vers_clob (gar_segmn_courn);
  end;

  function clob_vers_table_segmn (pcl_clob in clob,
                                  pnu_longr_segmn in number default 16000)
    return typ_arr_segmn is
    var_segmn                               typ_arr_segmn;
    vnu_ofset                               number default 0;
    vnu_tail                                number;
    vnu_index_segmn                         typ_index default 0;
    vnu_longr_segmn                         number
      default case when nvl (pnu_longr_segmn, 0) <= 0 then 16000 else pnu_longr_segmn end;
  begin
    vnu_tail := dbms_lob.getlength (pcl_clob);

    while vnu_ofset < vnu_tail loop
      vnu_index_segmn := vnu_index_segmn + 1;
      var_segmn (vnu_index_segmn) :=
        dbms_lob.substr (pcl_clob,
                         vnu_longr_segmn,
                         vnu_ofset + 1);

      vnu_ofset := vnu_ofset + vnu_longr_segmn;
    end loop;

    return var_segmn;
  end;

  procedure table_segmn_vers_blob (pbl_blob in out nocopy blob,
                                   par_segmn in  typ_arr_segmn) is
  begin
    dbms_lob.trim (pbl_blob,
                   0);

    if par_segmn.first () is not null then
      for i in par_segmn.first () .. par_segmn.last () loop
        if par_segmn (i) is not null then
          dbms_lob.writeappend (pbl_blob,
                                length (par_segmn (i)),
                                par_segmn (i));
        end if;
      end loop;
    end if;
  end;

  function table_segmn_vers_blob (par_segmn in typ_arr_segmn)
    return blob is
    vbl_blob                                blob;
  begin
    dbms_lob.createtemporary (vbl_blob,
                              false);
    table_segmn_vers_blob (vbl_blob,
                           par_segmn);
    return vbl_blob;
  end;

  function table_segmn_vers_blob
    return blob is
  begin
    return table_segmn_vers_blob (gar_segmn_courn);
  end;

  function blob_vers_table_segmn (pbl_blob in blob,
                                  pnu_longr_segmn in number default 160)
    return typ_arr_segmn is
    var_segmn                               typ_arr_segmn;
    vnu_ofset                               number default 0;
    vnu_tail                                number;
    vnu_index_segmn                         typ_index default 0;
    vnu_longr_segmn                         number
      default case when nvl (pnu_longr_segmn, 0) <= 0 then 160 else pnu_longr_segmn end;
  begin
    vnu_tail := dbms_lob.getlength (pbl_blob);

    while vnu_ofset < vnu_tail loop
      vnu_index_segmn := vnu_index_segmn + 1;
      var_segmn (vnu_index_segmn) :=
        dbms_lob.substr (pbl_blob,
                         vnu_longr_segmn,
                         vnu_ofset + 1);
      vnu_ofset := vnu_ofset + vnu_longr_segmn;
    end loop;

    return var_segmn;
  end;

  function obten_table_segmn (pnu_index in typ_index default null,
                              pnu_longr_segmn in number default 16000)
    return typ_arr_segmn is
    vnu_index                               typ_index default nvl (pnu_index, gnu_index_courn);
    var_segmn                               typ_arr_segmn;
  begin
    if vnu_index is not null and gar_clob.exists (vnu_index) then
      ecrir_tampn (vnu_index);
      return clob_vers_table_segmn (gar_clob (vnu_index).cl_contn,
                                    pnu_longr_segmn);
    end if;

    return var_segmn;
  end;

  procedure termn (pnu_index in typ_index default null) is
    vnu_index                               typ_index default nvl (pnu_index, gnu_index_courn);
  begin
    if vnu_index is not null and gar_clob.exists (vnu_index) then
      dbms_lob.freetemporary (gar_clob (vnu_index).cl_contn);
      gar_clob.delete (vnu_index);

      -- Si on termine le clob courant, le nouveau courant sera le dernier de la pile
      if vnu_index = gnu_index_courn then
        gnu_index_courn := gar_clob.last ();
      end if;
    end if;
  end;

  procedure replc (pcl_clob in out nocopy clob,
                   pva_chain_rechr in varchar2,
                   pva_chain_rempl in varchar2) is
  begin
    pcl_clob :=
      replc (pcl_clob,
             pva_chain_rechr,
             pva_chain_rempl);
  end replc;

  function replc (pcl_clob in clob,
                  pva_chain_rechr in varchar2,
                  pva_chain_rempl in varchar2)
    return clob is
    vbo_ocurn_trouv                         boolean;
    vnu_indic_courn                         pls_integer;
    vnu_ocurn_ancn                          pls_integer;
    vcl_clob_tempr                          clob;
    vnu_long_clob                           pls_integer;
    vva_nr                                  varchar2 (6);
  begin
    if pva_chain_rechr is null then
      return null;
    end if;

    vnu_long_clob := dbms_lob.getlength (pcl_clob);
    vnu_indic_courn :=
      dbms_lob.instr (pcl_clob,
                      pva_chain_rechr,
                      1,
                      1);
    vbo_ocurn_trouv := false;
    vnu_ocurn_ancn := 1;

    while vnu_indic_courn > 0 loop
      if not vbo_ocurn_trouv then
        dbms_lob.createtemporary (vcl_clob_tempr,
                                  true);
        vbo_ocurn_trouv := true;
      end if;

      --Copier seulement s'il y a des caractères entre l'ancienne occurence
      --et la nouvelle
      if vnu_indic_courn - vnu_ocurn_ancn != 0 then
        dbms_lob.copy (vcl_clob_tempr,
                       pcl_clob,
                       vnu_indic_courn - vnu_ocurn_ancn,
                       dbms_lob.getlength (vcl_clob_tempr) + 1,
                       vnu_ocurn_ancn);
      end if;

      --substituer la valeur si **nr** (noreplace) n'est pas là avant le champ de remplacement
      if vnu_indic_courn > 7 then
        vva_nr :=
          dbms_lob.substr (pcl_clob,
                           6,
                           vnu_indic_courn - 6);
      end if;

      if vva_nr = '**nr**' then
        dbms_lob.writeappend (vcl_clob_tempr,
                              length (pva_chain_rechr),
                              pva_chain_rechr);
      else
        if pva_chain_rempl is not null then
          dbms_lob.writeappend (vcl_clob_tempr,
                                length (pva_chain_rempl),
                                pva_chain_rempl);
        end if;
      end if;

      vnu_ocurn_ancn := vnu_indic_courn + length (pva_chain_rechr);
      --Déterminer la présence d'une autre occurence
      vnu_indic_courn :=
        dbms_lob.instr (pcl_clob,
                        pva_chain_rechr,
                        vnu_ocurn_ancn,
                        1);
    end loop;

    --Écrire la fin
    if vbo_ocurn_trouv then
      --Copier seulement s'il y a des caractères apres la derniere occurence
      if (vnu_long_clob + 1) - vnu_ocurn_ancn != 0 then
        dbms_lob.copy (vcl_clob_tempr,
                       pcl_clob,
                       vnu_long_clob                                                   /*dbms_lob.getlength (pcl_clob)*/
                                    - vnu_ocurn_ancn + 1,
                       dbms_lob.getlength (vcl_clob_tempr) + 1,
                       vnu_ocurn_ancn);
      end if;
    end if;

    if vbo_ocurn_trouv then
      return vcl_clob_tempr;
    else
      return pcl_clob;
    end if;
  exception
    when others then
      return null;
  end replc;

  procedure obten_clob_lower (pcl_clob_sourc in clob,
                              pcl_clob_destn in out nocopy clob) is
    vnu_idx                                 pls_integer;
    vnu_max_idx                             pls_integer;
    vva_lower                               varchar2 (2048);
  begin
    vnu_max_idx := dbms_lob.getlength (pcl_clob_sourc);
    vnu_idx := 1;

    while vnu_idx < vnu_max_idx loop
      vva_lower :=
        lower (dbms_lob.substr (pcl_clob_sourc,
                                least (1024,
                                       vnu_max_idx - vnu_idx),
                                vnu_idx));
      dbms_lob.writeappend (pcl_clob_destn,
                            length (vva_lower),
                            vva_lower);
      vnu_idx :=
        least (vnu_idx + 1024,
               vnu_max_idx);
    end loop;
  end obten_clob_lower;

  function instr_lower (pcl_clob in clob,
                        pva_chain in varchar)
    return varchar2 is
    vnu_idx                                 pls_integer;
    vcl_clob_lower                          clob;
  begin
    dbms_lob.createtemporary (vcl_clob_lower,
                              true);
    obten_clob_lower (pcl_clob,
                      vcl_clob_lower);
    vnu_idx :=
      dbms_lob.instr (vcl_clob_lower,
                      pva_chain,
                      1);
    dbms_lob.freetemporary (vcl_clob_lower);
    return vnu_idx;
  end instr_lower;

  function count_instr_lower (pcl_clob in out nocopy clob,
                              pva_chain in  varchar)
    return number is
    vcl_clob_lower                          clob;
    vnu_idx                                 pls_integer;
    vnu_count                               pls_integer default 0;
  begin
    dbms_lob.createtemporary (vcl_clob_lower,
                              true);
    obten_clob_lower (pcl_clob,
                      vcl_clob_lower);
    vnu_idx :=
      dbms_lob.instr (vcl_clob_lower,
                      lower (pva_chain),
                      1);

    while vnu_idx > 0 loop
      vnu_count := vnu_count + 1;
      dbms_output.put_line ('ajout');
      vnu_idx :=
        dbms_lob.instr (vcl_clob_lower,
                        lower (pva_chain),
                        vnu_idx + 1);
    end loop;

    dbms_lob.freetemporary (vcl_clob_lower);
    return vnu_count;
  end count_instr_lower;

  procedure instr_debut_fin (pcl_clob in out nocopy clob,
                             pva_debut in  varchar2,
                             pva_fin in    varchar2,
                             pnu_ofset_debut in pls_integer default 1,
                             pnu_ocurn in  pls_integer default 1,
                             pva_carct_non_autor in varchar2 default null,
                             pnu_debut   out pls_integer,
                             pnu_fin   out pls_integer,
                             pva_chain_compl   out varchar) is
    vnu_debut                               pls_integer;
    vnu_fin                                 pls_integer;
    vva_mot                                 typ_mot_instr_debut_fin;
  begin
    if pnu_ocurn is null then
      raise exc_ocurn_null;
    end if;

    vnu_debut :=
      dbms_lob.instr (pcl_clob,
                      pva_debut,
                      pnu_ofset_debut,
                      pnu_ocurn);

    if vnu_debut = 0 then
      pnu_debut := 0;
      pnu_fin := 0;
      return;
    else
      vnu_fin :=
        dbms_lob.instr (pcl_clob,
                        pva_fin,
                        vnu_debut + 1,
                        1);

      if vnu_fin = 0 then
        pnu_debut := 0;
        pnu_fin := 0;
        return;
      else
        if vnu_fin - vnu_debut > 32767 then
          raise exc_mot_trop_long;
        else
          vva_mot :=
            dbms_lob.substr (pcl_clob,
                             vnu_fin - vnu_debut + length (pva_fin),
                             vnu_debut);
        end if;

        if pva_carct_non_autor is not null then
          null;
        end if;

        pnu_debut := vnu_debut;
        pnu_fin := vnu_fin;
        pva_chain_compl := vva_mot;
      end if;
    end if;
  end instr_debut_fin;

  procedure fusnr_clob (pnu_cible in typ_index,
                        pnu_sourc in typ_index) is
  begin
    ecrir_tampn (pnu_cible);
    ecrir_tampn (pnu_sourc);
    dbms_lob.append (gar_clob (pnu_cible).cl_contn,
                     gar_clob (pnu_sourc).cl_contn);
  end fusnr_clob;

  function convr_clob_vers_blob (pcl_clob in clob)
    return blob is
    vbl_blob                                blob;
    vnu_amount                              integer;
    vnu_dest_offset                         integer default 1;
    vnu_src_offset                          integer default 1;
    vnu_lang_context                        integer := dbms_lob.default_lang_ctx;
    vnu_warning                             integer;
  begin
    vnu_amount := dbms_lob.getlength (pcl_clob);

    dbms_lob.createtemporary (vbl_blob,
                              true);

    dbms_lob.converttoblob (dest_lob                   => vbl_blob,
                            src_clob                   => pcl_clob,
                            amount                     => vnu_amount,
                            dest_offset                => vnu_dest_offset,
                            src_offset                 => vnu_src_offset,
                            blob_csid                  => 0,
                            lang_context               => vnu_lang_context,
                            warning                    => vnu_warning);

    return vbl_blob;
  exception
    when others then
      ete ();
      dbms_lob.freetemporary (vbl_blob);
      raise;
  end convr_clob_vers_blob;
end;
/

Prompt Package Body SIE_07_JAVSC_PKG;
/* Formatted on 04/12/2013 11:35:09 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_JAVSC_PKG" as
  procedure ajout_scrip_charg is
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 07 Utilitaires - JavaScript au chargement');
  --      sie_07_util_pkg.ajout_code_javsc_charg (
  --         'afw.sie_13.page.item.genr_poubl();');
  --      sie_07_util_pkg.ajout_code_javsc_charg (
  --         'afw.sie_13.page.boutn.cachr_boots_dropdown();');
  --sie_07_util_pkg.ajout_code_javsc_charg ('afw.sie_13.page.raprt_inter.postn_icone_charg();');

  --sie_07_util_pkg.ajout_code_javsc_charg ('afw.jQuery(".pagination img[src=''/i/jtfunexe.gif'']").attr("src","/res/afw/images/raprt_inter/enreg_suivn.png");');
  --sie_07_util_pkg.ajout_code_javsc_charg ('afw.jQuery(".pagination img[src=''/i/jtfupree.gif'']").attr("src","/res/afw/images/raprt_inter/enreg_precd.png");');
  end ajout_scrip_charg;

  function obten_date_debut_calnd_javsc
    return date
    result_cache is
  begin
    return to_date ('19700101',
                    'YYYYMMDD');
  end;

  function obten_date_oracl_calnd_javsc (pnu_milsc in number)
    return date is
  begin
    return obten_date_debut_calnd_javsc + pnu_milsc / 86400000;
  end;
end sie_07_javsc_pkg;
/

Prompt Package Body SIE_07_SEMPH_PKG;
/* Formatted on 04/12/2013 11:35:09 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_SEMPH_PKG" is
  function verfr_semph (pva_code in varchar2,
                        pva_varbl1 in varchar2,
                        pva_varbl2 in varchar2,
                        pva_varbl3 in varchar2,
                        pva_indic_exclu in varchar2 default 'N')
    return boolean is
    vnu_exist                               number;
  begin
    select   1
      into   vnu_exist
      from   sie_07_semph s,
             sie_07_insta_semph ins
     where   ins.id_sesn = sie_07_util_pkg.nv ('APP_SESSION')
         and s.seqnc = ins.ref_semph
         and s.code = pva_code
         and (s.varbl1 = pva_varbl1
           or (pva_varbl1 is null and s.varbl1 is null))
         and (s.varbl2 = pva_varbl2
           or (pva_varbl2 is null and s.varbl2 is null))
         and (s.varbl3 = pva_varbl3
           or (pva_varbl3 is null and s.varbl3 is null))
         and (pva_indic_exclu != 'O'
           or s.indic_exclu = 'O')
         and rownum = 1;

    return true;
  exception
    when no_data_found then
      return false;
  end;

  function obten_propr_semph_exclu (pva_code in varchar2,
                                    pva_varbl1 in varchar2,
                                    pva_varbl2 in varchar2,
                                    pva_varbl3 in varchar2)
    return varchar2 is
    vva_propr                               sie_12_sesn.app_user%type;
  begin
    select   sn.app_user
      into   vva_propr
      from   sie_07_semph s,
             sie_07_insta_semph ins,
             sie_12_sesn sn
     where   s.seqnc = ins.ref_semph
         and sn.id_sesn = ins.id_sesn
         and s.code = pva_code
         and (s.varbl1 = pva_varbl1
           or (pva_varbl1 is null and s.varbl1 is null))
         and (s.varbl2 = pva_varbl2
           or (pva_varbl2 is null and s.varbl2 is null))
         and (s.varbl3 = pva_varbl3
           or (pva_varbl3 is null and s.varbl3 is null))
         and s.indic_exclu = 'O'
         and rownum = 1;

    return vva_propr;
  exception
    when no_data_found then
      return null;
  end;

  function creer_ou_obten_semph (pva_code in varchar2,
                                 pva_varbl1 in varchar2,
                                 pva_varbl2 in varchar2,
                                 pva_varbl3 in varchar2,
                                 pva_indic_exclu in varchar2,
                                 pnu_temps_atent in number,
                                 pva_indic_seqnc in varchar2,
                                 pva_page_perst in varchar2)
    return number is
    pragma autonomous_transaction;
    wait_expir                              exception;
    pragma exception_init (wait_expir, -51);
    vda_date_max                            date
                                              default sysdate +
                                                      greatest (pnu_temps_atent,
                                                                1) /
                                                      86400;
    vnu_intrv                               number default 10;
    --vnu_tempt_atent                         integer;
    vbo_trouv                               boolean default false;
    vnu_seqnc                               number (10);
    vva_code                                sie_07_semph.code%type default upper (pva_code);
    vva_varbl1                              sie_07_semph.varbl1%type default upper (pva_varbl1);
    vva_varbl2                              sie_07_semph.varbl2%type default upper (pva_varbl2);
    vva_varbl3                              sie_07_semph.varbl3%type default upper (pva_varbl3);
    vnu_seqnc_semph                         number;
    vva_indic_exclu                         varchar2 (1);
  begin
    while sysdate < vda_date_max and not vbo_trouv loop
      begin
        select       seqnc,
                     indic_exclu
              into   vnu_seqnc_semph,
                     vva_indic_exclu
              from   sie_07_semph
             where   code = pva_code
                 and (varbl1 = pva_varbl1
                   or (pva_varbl1 is null and varbl1 is null))
                 and (varbl2 = pva_varbl2
                   or (pva_varbl2 is null and varbl2 is null))
                 and (varbl3 = pva_varbl3
                   or (pva_varbl3 is null and varbl3 is null))
        for update   wait 1;

        if pva_indic_exclu = 'N' and vva_indic_exclu = 'N' then
          vbo_trouv := true;
        else
          -- Attendre un peu avant de réessayer
          dbms_lock.sleep (vnu_intrv / 100);
        end if;
      exception
        when wait_expir then
          null;                                                          -- Ne rien faire de plus, on continue la boucle
        when no_data_found then
          begin
            insert into   sie_07_semph (code, varbl1, varbl2, varbl3, indic_exclu)
                 values   (vva_code,
                           vva_varbl1,
                           vva_varbl2,
                           vva_varbl3,
                           pva_indic_exclu)
              returning   seqnc
                   into   vnu_seqnc_semph;

            vbo_trouv := true;
          exception
            when dup_val_on_index then
              -- Attendre un peu avant de réessayer
              dbms_lock.sleep (vnu_intrv / 100);
          end;
      end;
    end loop;

    if vbo_trouv then
      insert into   sie_07_insta_semph (ref_semph, indic_seqnc, page_perst)
           values   (vnu_seqnc_semph,
                     pva_indic_seqnc,
                     pva_page_perst)
        returning   seqnc
             into   vnu_seqnc;

      commit;
    else
      commit;
      raise semph_non_dispn;
    end if;

    return vnu_seqnc;
  end creer_ou_obten_semph;

  procedure obten_semph (pva_code in varchar2,
                         pva_varbl1 in varchar2,
                         pva_varbl2 in varchar2,
                         pva_varbl3 in varchar2,
                         pva_indic_exclu in varchar2 default 'N',
                         pnu_temps_atent in number default 5,
                         pva_page_perst in varchar2 default null) is
    vnu_seqnc                               number (10);
  begin
    vnu_seqnc :=
      creer_ou_obten_semph (pva_code,
                            pva_varbl1,
                            pva_varbl2,
                            pva_varbl3,
                            pva_indic_exclu,
                            pnu_temps_atent,
                            'N',
                            pva_page_perst);
  end obten_semph;

  function obten_semph (pva_code in varchar2,
                        pva_varbl1 in varchar2,
                        pva_varbl2 in varchar2,
                        pva_varbl3 in varchar2,
                        pva_indic_exclu in varchar2 default 'N',
                        pnu_temps_atent in number default 5,
                        pva_page_perst in varchar2 default null)
    return number is
  begin
    return creer_ou_obten_semph (pva_code,
                                 pva_varbl1,
                                 pva_varbl2,
                                 pva_varbl3,
                                 pva_indic_exclu,
                                 pnu_temps_atent,
                                 'O',
                                 pva_page_perst);
  end obten_semph;

  procedure suprm_semph (pva_code in varchar2,
                         pva_varbl1 in varchar2,
                         pva_varbl2 in varchar2,
                         pva_varbl3 in varchar2) is
    pragma autonomous_transaction;
    vnu_seqnc                               number;
  begin
    begin
      select   seqnc
        into   vnu_seqnc
        from   sie_07_semph
       where   code = pva_code
           and (varbl1 = pva_varbl1
             or (pva_varbl1 is null and varbl1 is null))
           and (varbl2 = pva_varbl2
             or (pva_varbl2 is null and varbl2 is null))
           and (varbl3 = pva_varbl3
             or (pva_varbl3 is null and varbl3 is null));

      delete   sie_07_insta_semph
       where   ref_semph = vnu_seqnc
           and (id_sesn = sie_07_util_pkg.nvd ('APP_SESSION')
             or (id_sesn is null and sie_07_util_pkg.nvd ('APP_SESSION') is null))
           and indic_seqnc = 'N'
           and rownum = 1;
    exception
      when no_data_found then
        null;
    end;

    commit;
  end suprm_semph;

  procedure suprm_semph (pnu_seqnc in number) is
    pragma autonomous_transaction;
  begin
    delete   sie_07_insta_semph
     where   seqnc = pnu_seqnc
         and (id_sesn = sie_07_util_pkg.nvd ('APP_SESSION')
           or (id_sesn is null and sie_07_util_pkg.nvd ('APP_SESSION') is null))
         and indic_seqnc = 'O';

    commit;
  end suprm_semph;

  procedure libr_semph_perst_page is
    vnu_page                                number default sie_07_util_pkg.nv ('APP_PAGE_ID');
  begin
    delete   sie_07_insta_semph
     where   id_sesn = sie_07_util_pkg.nvd ('APP_SESSION')
         and page_perst is not null
         and instr (':' || page_perst || ':',
                    ':' || vnu_page || ':') = 0;
  end libr_semph_perst_page;
end sie_07_semph_pkg;
/

Prompt Package Body SIE_07_SESN_PKG;
/* Formatted on 04/12/2013 11:35:09 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_SESN_PKG" as
  gbo_mode_debug                          boolean default false;

  procedure defnr_valr_sesn (pva_nom in varchar2,
                             pva_valr in varchar2) is
    pragma autonomous_transaction;
  begin
    update   sie_07_etat_sesn ss
       set   ss.valr = pva_valr
     where   ss.nom = pva_nom and session_id = sie_12_sesn_pkg.obten_sesn;

    if sql%rowcount = 0 then
      insert into   sie_07_etat_sesn (nom, valr)
           values   (pva_nom,
                     pva_valr);
    end if;

    commit;
  exception
    when others then
      ete ();
  end defnr_valr_sesn;

  function obten_valr_sesn (pva_nom in varchar2)
    return varchar2 is
    vva_valr                                sie_07_etat_sesn.valr%type;
  begin
    select   ss.valr
      into   vva_valr
      from   sie_07_etat_sesn ss
     where   ss.nom = pva_nom and session_id = sie_12_sesn_pkg.obten_sesn;

    return vva_valr;
  exception
    when no_data_found then
      return null;
  end obten_valr_sesn;

  procedure suprm_valr_sesn (pva_nom in varchar2) is
    pragma autonomous_transaction;
  begin
    delete   sie_07_etat_sesn ss
     where   ss.nom = pva_nom and session_id = sie_12_sesn_pkg.obten_sesn;

    commit;
  end suprm_valr_sesn;

  procedure defnr_aplic_en_cours (pva_aplic in varchar2) is
  begin
    gva_aplic_en_cours := pva_aplic;
  end defnr_aplic_en_cours;

  function obten_aplic_en_cours
    return varchar2 is
  begin
    return gva_aplic_en_cours;
  end obten_aplic_en_cours;

  procedure defnr_prodt_en_cours (pva_prodt in varchar2) is
  begin
    gva_prodt_en_cours := pva_prodt;
  end defnr_prodt_en_cours;

  function obten_prodt_en_cours
    return varchar2 is
  begin
    return gva_prodt_en_cours;
  end obten_prodt_en_cours;
end sie_07_sesn_pkg;
/

Prompt Package Body SIE_07_SQL_NOYAU_PKG;
/* Formatted on 04/12/2013 11:35:09 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_SQL_NOYAU_PKG" as
  procedure obten_infor_coln_ir (pnu_ref_ir in number,
                                 pnu_rpts_id in number,
                                 pic_infor in out sie_07_sql_pkg.typ_rec_infor_coln) is
  begin
    select   pirc.libl,
             pirc.largr,
             pirc.type_largr,
             pirc.indic_exprt,
             airc.format_mask,
             airc.heading_alignment,
             airc.column_alignment
      into   pic_infor.va_libl,
             pic_infor.nu_largr,
             pic_infor.va_type_largr,
             pic_infor.va_indic_expor,
             pic_infor.va_formt,
             pic_infor.va_align_entet,
             pic_infor.va_align_coln
      from   vd_sie_13_page_ir_coln pirc,
             apex_ir_coln airc
     where   pirc.ref_page_ir = pnu_ref_ir and pirc.coln_table = upper (pic_infor.va_nom) and airc.id = pirc.id_apex;
  exception
    when no_data_found then
      -- Chercher la colonne dans les colonnes calculées
      begin
        select   comp.column_label,
                 comp.format_mask
          into   pic_infor.va_libl,
                 pic_infor.va_formt
          from   apex_ir_compt comp
         where   comp.report_id = pnu_rpts_id and comp.db_column_name = upper (pic_infor.va_nom);
      exception
        when no_data_found then
          pic_infor.va_libl := initcap (pic_infor.va_nom);
          pic_infor.va_formt := null;
      end;

      pic_infor.nu_largr := null;
      pic_infor.va_type_largr := null;
      pic_infor.va_indic_expor := 'O';
      pic_infor.va_align_entet := null;
      pic_infor.va_align_coln := null;
  end;
end;
/

Prompt Package Body SIE_07_SQL_PKG;
/* Formatted on 04/12/2013 11:35:09 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_SQL_PKG" as
  knu_type_vc2                   constant number := 1;
  knu_type_numbr                 constant number := 2;
  knu_type_long                  constant number := 8;
  knu_type_vc                    constant number := 9;
  knu_type_date                  constant number := 12;
  knu_type_raw                   constant number := 23;
  knu_type_long_raw              constant number := 24;
  knu_type_rowid                 constant number := 69;
  knu_type_char                  constant number := 96;
  knu_type_binr_float            constant number := 100;
  knu_type_binr_doubl            constant number := 101;
  knu_type_clob                  constant number := 112;
  knu_type_blob                  constant number := 113;
  knu_type_bfile                 constant number := 114;
  knu_type_cfile                 constant number := 115;
  knu_type_time                  constant number := 178;
  knu_type_timst                 constant number := 180;
  knu_type_timst_with_tz         constant number := 181;
  knu_type_inter_y2m             constant number := 182;
  knu_type_inter_d2s             constant number := 183;
  knu_type_u_rowid               constant number := 208;

  gnu_nombr_fetch                         number;

  function rempl_br (pva_chaine in varchar2,
                     pva_rempl_br in varchar2)
    return varchar2 is
  begin
    return sie_07_util_pkg.multi_replc (pva_chaine,
                                        '<br>',
                                        pva_rempl_br,
                                        '<br/>',
                                        pva_rempl_br,
                                        '<BR>',
                                        pva_rempl_br,
                                        '<BR/>',
                                        pva_rempl_br,
                                        '<br >',
                                        pva_rempl_br,
                                        '<br />',
                                        pva_rempl_br,
                                        '<BR >',
                                        pva_rempl_br,
                                        '<BR />',
                                        pva_rempl_br);
  end;

  function obten_type_valr (pnu_type_don in number)
    return varchar2 is
  begin
    return case pnu_type_don
             when knu_type_vc2 then 'VARCH'
             when knu_type_vc then 'VARCH'
             when knu_type_char then 'VARCH'
             when knu_type_clob then 'VARCH'
             when knu_type_numbr then 'NUMBR'
             when knu_type_binr_float then 'NUMBR'
             when knu_type_binr_doubl then 'NUMBR'
             when knu_type_date then 'DATE'
             when knu_type_time then 'DATE'
             when knu_type_timst then 'TIMST'
             when knu_type_timst_with_tz then 'TIMST'
             else 'INVAL'
           end;
  end;

  function obten_infor_coln (pnu_ref_ir in number,
                             pnu_rpts_id in number,
                             prd_coln in dbms_sql.desc_rec2,
                             pva_rempl_br in varchar2)
    return typ_rec_infor_coln is
    vic_infor                               typ_rec_infor_coln;
  begin
    vic_infor.va_nom := prd_coln.col_name;
    vic_infor.nu_type_don := prd_coln.col_type;

    -- Obtenir les infos de la colonne depuis le rapport interactif
    sie_07_sql_noyau_pkg.obten_infor_coln_ir (pnu_ref_ir,
                                              pnu_rpts_id,
                                              vic_infor);

    vic_infor.va_libl := apex_application.do_substitutions (vic_infor.va_libl);
    vic_infor.va_libl :=
      rempl_br (vic_infor.va_libl,
                pva_rempl_br);
    vic_infor.va_formt := aa.do_substitutions (vic_infor.va_formt);

    if vic_infor.nu_largr is null
    or vic_infor.va_type_largr is null then
      vic_infor.nu_largr := 0;
      vic_infor.va_type_largr := 'INDET';
    end if;

    vic_infor.va_type_valr := obten_type_valr (vic_infor.nu_type_don);

    if vic_infor.va_align_entet is null then
      if vic_infor.va_align_coln is not null then
        vic_infor.va_align_entet := vic_infor.va_align_coln;
      else
        -- Alignement par défaut
        vic_infor.va_align_entet :=
          case vic_infor.nu_type_don
            when knu_type_numbr then 'RIGHT'
            when knu_type_binr_float then 'RIGHT'
            when knu_type_binr_doubl then 'RIGHT'
            when knu_type_date then 'CENTER'
            when knu_type_time then 'CENTER'
            when knu_type_timst then 'CENTER'
            else 'LEFT'
          end;
      end if;
    end if;

    if vic_infor.va_align_coln is null then
      vic_infor.va_align_coln := vic_infor.va_align_entet;
    end if;

    return vic_infor;
  end;

  function anals_sql (pva_sql in varchar2)
    return number is
    vnu_cursr                               number;
    vnu_pos                                 number;
    vnu_longr_sql                           number default length (pva_sql);
    vva_nom_varbl                           varchar2 (50);
    var_varbl_liees                         typ_arr_ndx_vc30;
    vva_carct                               varchar2 (2);
  begin
    -- Ouvrir un curseur
    vnu_cursr := dbms_sql.open_cursor ();
    gnu_nombr_fetch := 0;

    -- Analyser le SQL
    dbms_sql.parse (vnu_cursr,
                    pva_sql,
                    dbms_sql.native);

    -- Trouver et lier les variables (liées)
    vnu_pos := 1;

    -- Parcourir le select caractere par caractere
    while vnu_pos <= vnu_longr_sql loop
      vva_carct :=
        substr (pva_sql,
                vnu_pos,
                1);

      -- Début d'une chaine
      if substr (pva_sql,
                 vnu_pos,
                 1) = '''' then
        -- Passer la chaine, on ne veut pas se préoccuper des ":" dans les chaines
        vnu_pos := vnu_pos + 1;

        while vnu_pos <= vnu_longr_sql loop
          if substr (pva_sql,
                     vnu_pos,
                     1) = '''' then
            if substr (pva_sql,
                       vnu_pos,
                       2) = '''''' then
              vnu_pos := vnu_pos + 1;
            else
              exit;
            end if;
          end if;

          vnu_pos := vnu_pos + 1;
        end loop;
      -- Début d'un commentaire de fin de ligne
      elsif substr (pva_sql,
                    vnu_pos,
                    2) = '--' then
        -- Passer le commentaire, on ne veut pas se préoccuper des ":" dans les commentaires
        vnu_pos := vnu_pos + 1;

        while vnu_pos <= vnu_longr_sql loop
          if substr (pva_sql,
                     vnu_pos,
                     1) = chr (10) then
            exit;
          end if;

          vnu_pos := vnu_pos + 1;
        end loop;
      -- Début d'un bloc de commentaire
      elsif substr (pva_sql,
                    vnu_pos,
                    2) = '/*' then
        -- Passer le commentaire, on ne veut pas se préoccuper des ":" dans les commentaires
        vnu_pos := vnu_pos + 1;

        while vnu_pos <= vnu_longr_sql loop
          if substr (pva_sql,
                     vnu_pos,
                     2) = '*/' then
            vnu_pos := vnu_pos + 1;
            exit;
          end if;

          vnu_pos := vnu_pos + 1;
        end loop;
      -- Début d'une variable liée
      elsif substr (pva_sql,
                    vnu_pos,
                    1) = ':' then
        -- Trouver le nom
        vva_nom_varbl := null;
        vnu_pos := vnu_pos + 1;

        while vnu_pos <= vnu_longr_sql and nvl (length (vva_nom_varbl), 0) < 30 loop
          vva_carct :=
            substr (pva_sql,
                    vnu_pos,
                    1);

          if instr ('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_',
                    upper (substr (pva_sql,
                                   vnu_pos,
                                   1)),
                    1,
                    1) = 0 then
            exit;
          end if;

          vva_nom_varbl :=
               vva_nom_varbl
            || upper (substr (pva_sql,
                              vnu_pos,
                              1));

          vnu_pos := vnu_pos + 1;
        end loop;

        if not var_varbl_liees.exists (vva_nom_varbl) then
          -- Créer l'index
          var_varbl_liees (vva_nom_varbl) := null;
          --ete('sql.vva_nom_varbl',vva_nom_varbl);
          --ete('sql.vva_nom_varbl.value',sie_07_util_pkg.v(vva_nom_varbl));
          -- Lier la variable au curseur
          dbms_sql.bind_variable (vnu_cursr,
                                  vva_nom_varbl,
                                  sie_07_util_pkg.v (vva_nom_varbl));
        end if;

        -- Se repositionner sur le dernier caractère du nom avant que la
        -- boucle principale ne repasser au prochain
        vnu_pos := vnu_pos - 1;
      end if;

      vnu_pos := vnu_pos + 1;
    end loop;

    return vnu_cursr;
  exception
    when others then
      ete ();
      ete ('pva_sql',
           null,
           pva_sql);
      raise;
  end anals_sql;

  function ouvri_selct (pnu_ref_ir in number,
                        pnu_rpts_id in number,
                        pva_sql in    varchar2,
                        par_infor_coln in out nocopy typ_arr_infor_coln,
                        pva_rempl_br in varchar2)
    return number is
    vnu_cursr                               number;
    vnu_nombr_colns                         number;
    vdt_descr_table                         dbms_sql.desc_tab2;
  begin
    -- Analyser le Select
    vnu_cursr := anals_sql (pva_sql);

    -- Récupérer le describe du select
    dbms_sql.describe_columns2 (vnu_cursr,
                                vnu_nombr_colns,
                                vdt_descr_table);

    -- Alimenter la structure de retour
    par_infor_coln.delete ();

    if vdt_descr_table.first () is not null then
      for i in vdt_descr_table.first () .. vdt_descr_table.last () loop
        par_infor_coln (i) :=
          obten_infor_coln (pnu_ref_ir,
                            pnu_rpts_id,
                            vdt_descr_table (i),
                            pva_rempl_br);

        -- Selon le type, faire correspondre au bon element du record
        case par_infor_coln (i).va_type_valr
          when 'VARCH' then
            dbms_sql.define_column (vnu_cursr,
                                    i,
                                    par_infor_coln (i).va_valr_varch,
                                    4000);
          when 'NUMBR' then
            dbms_sql.define_column (vnu_cursr,
                                    i,
                                    par_infor_coln (i).nu_valr_numbr);
          when 'DATE' then
            dbms_sql.define_column (vnu_cursr,
                                    i,
                                    par_infor_coln (i).da_valr_date);
          when 'TIMST' then
            dbms_sql.define_column (vnu_cursr,
                                    i,
                                    par_infor_coln (i).ts_valr_timst);
          else
            null;
        end case;
      end loop;
    end if;

    -- Exécuter le sélect, et fetcher la premiere ligne
    gnu_nombr_fetch :=
      dbms_sql.execute_and_fetch (vnu_cursr,
                                  false);

    return vnu_cursr;
  end;

  function lire_ligne_selct (pnu_cursr in out number,
                             par_infor_coln in out nocopy typ_arr_infor_coln)
    return boolean is
  begin
    if gnu_nombr_fetch > 0 then
      for i in par_infor_coln.first () .. par_infor_coln.last () loop
        -- Charger les colonnes dans les bonnes valeurs, selon le type
        case par_infor_coln (i).va_type_valr
          when 'VARCH' then
            dbms_sql.column_value (pnu_cursr,
                                   i,
                                   par_infor_coln (i).va_valr_varch);
          when 'NUMBR' then
            dbms_sql.column_value (pnu_cursr,
                                   i,
                                   par_infor_coln (i).nu_valr_numbr);
          when 'DATE' then
            dbms_sql.column_value (pnu_cursr,
                                   i,
                                   par_infor_coln (i).da_valr_date);
          when 'TIMST' then
            dbms_sql.column_value (pnu_cursr,
                                   i,
                                   par_infor_coln (i).ts_valr_timst);
          else
            par_infor_coln (i).va_valr_varch := '#####';
        end case;
      end loop;

      -- Refetcher une ligne
      gnu_nombr_fetch := dbms_sql.fetch_rows (pnu_cursr);

      -- Indiquer qu'on vient de lire une ligne
      return true;
    else
      -- Plus de lignes dispo
      return false;
    end if;
  end;

  procedure fermr_selct (pnu_cursr in out number) is
  begin
    if dbms_sql.is_open (pnu_cursr) then
      dbms_sql.close_cursor (pnu_cursr);
    end if;
  end;
end;
/

Prompt Package Body SIE_07_SQL_UTIL_PKG;
/* Formatted on 04/12/2013 11:35:10 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_SQL_UTIL_PKG" as
  --TODO: Faire un overload de la fonction "insert" a laquelle on va passer un sys_refcursor
  --      et qui va looper les insert pour chaque record
  --TODO: Trouver une façon simple de faire un update si PK/UK existe déjà à l'insert

  gin_clob_courn                          sie_07_clob_pkg.typ_index;

  gbo_dernr_ligne_vide                    boolean default false;
  gnu_tail_inden                          number default 2;
  gnu_inden                               number default 0;
  gnu_nb_ligne                            number default 0;
  gbo_init_gestn_ereur                    boolean default false;

  gbo_bloc_gestn_ereur                    boolean default false;
  gva_nom_gestn_ereur                     varchar2 (200);
  gnu_ligne_debut_bloc                    number;
  gnu_parti_gestn_ereur                   number;

  -- Fonctions pour formater les différents types de données, prêts à insérer dans du SQL
  function v (pva_valr in varchar2)
    return varchar2 is
  begin
    if pva_valr is null then
      return 'null';
    else
      return    ''''
             || replace (pva_valr,
                         '''',
                         '''''')
             || '''';
    end if;
  end;

  function nv (pnu_valr in number)
    return varchar2 is
    vva_valr                                varchar2 (100) default pnu_valr;
  begin
    if pnu_valr is null then
      return 'null';
    else
      vva_valr :=
        replace (vva_valr,
                 ',',
                 '.');

      if vva_valr like '.%' then
        vva_valr := '0' || vva_valr;
      end if;

      return vva_valr;
    end if;
  end;

  function dv (pda_valr in date)
    return varchar2 is
  begin
    if pda_valr is null then
      return 'null';
    else
      return    'to_date('''
             || to_char (pda_valr,
                         'YYYY-MM-DD HH24:MI:SS')
             || ''', ''YYYY-MM-DD HH24:MI:SS'')';
    end if;
  end;


  -- Fonctions utilitaires
  function liste_valrs (pva_valr_01 in varchar2 default null,
                        pva_valr_02 in varchar2 default null,
                        pva_valr_03 in varchar2 default null,
                        pva_valr_04 in varchar2 default null,
                        pva_valr_05 in varchar2 default null,
                        pva_valr_06 in varchar2 default null,
                        pva_valr_07 in varchar2 default null,
                        pva_valr_08 in varchar2 default null,
                        pva_valr_09 in varchar2 default null,
                        pva_valr_10 in varchar2 default null,
                        pva_valr_11 in varchar2 default null,
                        pva_valr_12 in varchar2 default null,
                        pva_valr_13 in varchar2 default null,
                        pva_valr_14 in varchar2 default null,
                        pva_valr_15 in varchar2 default null,
                        pva_valr_16 in varchar2 default null,
                        pva_valr_17 in varchar2 default null,
                        pva_valr_18 in varchar2 default null,
                        pva_valr_19 in varchar2 default null,
                        pva_valr_20 in varchar2 default null,
                        pva_valr_21 in varchar2 default null,
                        pva_valr_22 in varchar2 default null,
                        pva_valr_23 in varchar2 default null,
                        pva_valr_24 in varchar2 default null,
                        pva_valr_25 in varchar2 default null,
                        pva_valr_26 in varchar2 default null,
                        pva_valr_27 in varchar2 default null,
                        pva_valr_28 in varchar2 default null,
                        pva_valr_29 in varchar2 default null,
                        pva_valr_30 in varchar2 default null,
                        pva_valr_31 in varchar2 default null,
                        pva_valr_32 in varchar2 default null,
                        pva_valr_33 in varchar2 default null,
                        pva_valr_34 in varchar2 default null,
                        pva_valr_35 in varchar2 default null,
                        pva_valr_36 in varchar2 default null,
                        pva_valr_37 in varchar2 default null,
                        pva_valr_38 in varchar2 default null,
                        pva_valr_39 in varchar2 default null,
                        pva_valr_40 in varchar2 default null,
                        pva_valr_41 in varchar2 default null,
                        pva_valr_42 in varchar2 default null,
                        pva_valr_43 in varchar2 default null,
                        pva_valr_44 in varchar2 default null,
                        pva_valr_45 in varchar2 default null,
                        pva_valr_46 in varchar2 default null,
                        pva_valr_47 in varchar2 default null,
                        pva_valr_48 in varchar2 default null,
                        pva_valr_49 in varchar2 default null,
                        pva_valr_50 in varchar2 default null)
    return typ_liste_valrs is
    vin_index                               typ_index default 0;
    vty_liste_valr                          typ_liste_valrs;

    procedure ajout_valr (pva_valr varchar2) is
    begin
      if pva_valr is not null then
        vin_index := vin_index + 1;

        vty_liste_valr (vin_index).va_expre := pva_valr;
      end if;
    end;
  begin
    ajout_valr (pva_valr_01);
    ajout_valr (pva_valr_02);
    ajout_valr (pva_valr_03);
    ajout_valr (pva_valr_04);
    ajout_valr (pva_valr_05);
    ajout_valr (pva_valr_06);
    ajout_valr (pva_valr_07);
    ajout_valr (pva_valr_08);
    ajout_valr (pva_valr_09);
    ajout_valr (pva_valr_10);
    ajout_valr (pva_valr_11);
    ajout_valr (pva_valr_12);
    ajout_valr (pva_valr_13);
    ajout_valr (pva_valr_14);
    ajout_valr (pva_valr_15);
    ajout_valr (pva_valr_16);
    ajout_valr (pva_valr_17);
    ajout_valr (pva_valr_18);
    ajout_valr (pva_valr_19);
    ajout_valr (pva_valr_20);
    ajout_valr (pva_valr_21);
    ajout_valr (pva_valr_22);
    ajout_valr (pva_valr_23);
    ajout_valr (pva_valr_24);
    ajout_valr (pva_valr_25);
    ajout_valr (pva_valr_26);
    ajout_valr (pva_valr_27);
    ajout_valr (pva_valr_28);
    ajout_valr (pva_valr_29);
    ajout_valr (pva_valr_30);
    ajout_valr (pva_valr_31);
    ajout_valr (pva_valr_32);
    ajout_valr (pva_valr_33);
    ajout_valr (pva_valr_34);
    ajout_valr (pva_valr_35);
    ajout_valr (pva_valr_36);
    ajout_valr (pva_valr_37);
    ajout_valr (pva_valr_38);
    ajout_valr (pva_valr_39);
    ajout_valr (pva_valr_40);
    ajout_valr (pva_valr_41);
    ajout_valr (pva_valr_42);
    ajout_valr (pva_valr_43);
    ajout_valr (pva_valr_44);
    ajout_valr (pva_valr_45);
    ajout_valr (pva_valr_46);
    ajout_valr (pva_valr_47);
    ajout_valr (pva_valr_48);
    ajout_valr (pva_valr_49);
    ajout_valr (pva_valr_50);

    return vty_liste_valr;
  end;

  function obten_liste_valrs (pty_liste_valrs in typ_liste_valrs)
    return varchar2 is
    vin_index                               typ_index default 0;
    vva_liste                               varchar2 (32000) default null;
  begin
    vin_index := pty_liste_valrs.first ();

    if vin_index is not null then
      vva_liste := pty_liste_valrs (vin_index).va_expre;

      for vin_index in pty_liste_valrs.first () + 1 .. pty_liste_valrs.last () loop
        vva_liste := vva_liste || ',' || pty_liste_valrs (vin_index).va_expre;
      end loop;
    end if;

    return vva_liste;
  end;

  function fusn_liste_valrs (pty_liste_01 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_02 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_03 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_04 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_05 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_06 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_07 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_08 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_09 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_10 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_11 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_12 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_13 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_14 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_15 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_16 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_17 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_18 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_19 in typ_liste_valrs default gty_liste_valrs_vide,
                             pty_liste_20 in typ_liste_valrs default gty_liste_valrs_vide)
    return typ_liste_valrs is
    vin_index                               typ_index default 0;
    vty_liste_fusn                          typ_liste_valrs;

    procedure ajout_liste_valrs (pva_liste in typ_liste_valrs) is
    begin
      if pva_liste.first () is not null then
        for i in pva_liste.first () .. pva_liste.last () loop
          vin_index := vin_index + 1;
          vty_liste_fusn (vin_index) := pva_liste (i);
        end loop;
      end if;
    end;
  begin
    ajout_liste_valrs (pty_liste_01);
    ajout_liste_valrs (pty_liste_02);
    ajout_liste_valrs (pty_liste_03);
    ajout_liste_valrs (pty_liste_04);
    ajout_liste_valrs (pty_liste_05);
    ajout_liste_valrs (pty_liste_06);
    ajout_liste_valrs (pty_liste_07);
    ajout_liste_valrs (pty_liste_08);
    ajout_liste_valrs (pty_liste_09);
    ajout_liste_valrs (pty_liste_10);
    ajout_liste_valrs (pty_liste_11);
    ajout_liste_valrs (pty_liste_12);
    ajout_liste_valrs (pty_liste_13);
    ajout_liste_valrs (pty_liste_14);
    ajout_liste_valrs (pty_liste_15);
    ajout_liste_valrs (pty_liste_16);
    ajout_liste_valrs (pty_liste_17);
    ajout_liste_valrs (pty_liste_18);
    ajout_liste_valrs (pty_liste_19);
    ajout_liste_valrs (pty_liste_20);

    return vty_liste_fusn;
  end;

  function compt_liste_valrs (pty_liste_valrs in typ_liste_valrs)
    return number is
  begin
    return pty_liste_valrs.count;
  end;

  function sous_selct (pva_liste_valrs in varchar2,
                       pva_nom_table in varchar2,
                       pva_condt in varchar2 default null,
                       pva_autre_claus in varchar2 default null)
    return varchar2 is
  begin
    return    '(select '
           || nvl (pva_liste_valrs, 'null')
           || ' from '
           || pva_nom_table
           || case when pva_condt is not null then ' where ' || pva_condt else null end
           || case when pva_autre_claus is not null then ' ' || pva_autre_claus else null end
           || ')';
  end;

  function sous_selct (pty_liste_valrs in typ_liste_valrs,
                       pva_nom_table in varchar2,
                       pva_condt in varchar2 default null,
                       pva_autre_claus in varchar2 default null)
    return varchar2 is
  begin
    -- TODO: Tester l'existence des tables/vues
    -- TODO: Aliaser si pas deja
    -- TODO: Prefixer les noms de champs
    -- TODO: Mieux controler les conditions

    return sous_selct (obten_liste_valrs (pty_liste_valrs),
                       pva_nom_table,
                       pva_condt,
                       pva_autre_claus);
  end;


  -- Fonctions d'insertion au script
  procedure inden is
  begin
    gnu_inden := gnu_inden + 1;
  end;

  procedure de_inden is
  begin
    gnu_inden := gnu_inden - 1;

    if gnu_inden < 0 then
      --TODO: raiser une erreur "trop de dé-indentation"
      null;
    end if;
  end;

  procedure ajout_ligne (pva_ligne in varchar2 default null) is
    vva_debut_ligne                         varchar2 (100) default null;
  begin
    if pva_ligne is null then
      if gbo_dernr_ligne_vide then
        return;
      end if;

      gbo_dernr_ligne_vide := true;
    else
      gbo_dernr_ligne_vide := false;
    end if;

    vva_debut_ligne :=
      rpad (' ',
            least (gnu_inden * gnu_tail_inden,
                   100),
            ' ');

    sie_07_clob_pkg.ajout_ligne (vva_debut_ligne || pva_ligne,
                                 gin_clob_courn);
    dbms_output.put_line (vva_debut_ligne || pva_ligne);

    gnu_nb_ligne := gnu_nb_ligne + 1;
  end;

  procedure ajout_comnt (pva_ligne in varchar2) is
    vva_comnt                               varchar2 (10) := '-- ';
    vva_fin_ligne                           varchar2 (10) := chr (10);
  begin
    ajout_ligne (vva_comnt || pva_ligne);
  end;


  -- Fonctions de construction de script
  procedure debtr (pva_titre_1 in varchar2 default null,
                   pva_titre_2 in varchar2 default null,
                   pbo_gestn_ereur in boolean default true) is
  begin
    gin_clob_courn := sie_07_clob_pkg.creer_nouv ();
    gbo_dernr_ligne_vide := false;
    gnu_inden := 0;
    gbo_init_gestn_ereur := false;

    ajout_ligne ('set define off');
    ajout_ligne ('set serveroutput on');
    ajout_ligne ('set feedback off');
    ajout_ligne ();
    ajout_comnt (rpad ('#',
                       length (pva_titre_1),
                       '#'));
    ajout_comnt (pva_titre_1);
    ajout_comnt (rpad ('#',
                       length (pva_titre_1),
                       '#'));
    ajout_comnt (pva_titre_2);
    ajout_comnt (   'Date de creation: '
                 || to_char (sysdate,
                             'yyyy-mm-dd hh24:mi:ss'));
    ajout_ligne ();

    if pbo_gestn_ereur then
      init_gestn_ereur ();
    end if;
  end;

  procedure debtr_bloc is
  begin
    ajout_ligne ('begin');
    inden ();
  end;

  procedure ignor_duplc_valr is
  begin
    de_inden ();
    ajout_ligne ('exception');
    ajout_ligne ('when dup_val_on_index then');
    inden ();
    ajout_ligne ('null;');
  end;

  procedure termn_bloc is
  begin
    de_inden ();
    ajout_ligne ('end;');

    if gnu_inden = 0 then
      ajout_ligne ('/');
    end if;

    ajout_ligne ();
  end;


  procedure inser (pva_nom_table in varchar2,
                   pty_colns in typ_liste_valrs,
                   pty_liste_valrs in typ_liste_valrs,
                   pva_retr in varchar2 default null,
                   pva_into in varchar2 default null) is
  begin
    -- TODO: Tester que la vue existe
    -- TODO: Tester que toutes les colonnes existent et sont updatable
    -- TODO: Tester qu'au moins 1 colonne est passée

    if compt_liste_valrs (pty_colns) <> compt_liste_valrs (pty_liste_valrs) then
      --TODO: Raiser une erreur "nombre de valeurs ne correspondent pas"
      sie_01_err_apex_pkg.lever_err_apex_mesg ('Le nombre de valeurs ne correspondent pas');
    end if;

    ajout_ligne ('insert into ' || pva_nom_table);
    ajout_ligne ('          ( ' || obten_liste_valrs (pty_colns) || ')');

    if pva_retr is null then
      ajout_ligne ('   values ( ' || obten_liste_valrs (pty_liste_valrs) || ');');
    else
      ajout_ligne ('   values ( ' || obten_liste_valrs (pty_liste_valrs) || ')');
      ajout_ligne ('  returning ' || pva_retr);
      ajout_ligne ('       into ' || pva_into || ';');
    end if;

    ajout_ligne ();
  end;

  procedure updat (pva_nom_table in varchar2,
                   pty_colns in typ_liste_valrs,
                   pty_liste_valrs in typ_liste_valrs,
                   pva_condt in varchar2 default null) is
    vnu_index                               typ_index;
  begin
    -- TODO: Tester que la vue existe
    -- TODO: Tester que toutes les colonnes existent et sont updatable
    -- TODO: Tester qu'au moins 1 colonne est passée

    if compt_liste_valrs (pty_colns) <> compt_liste_valrs (pty_liste_valrs) then
      --TODO: Raiser une erreur "nombre de valeurs ne correspondent pas"
      sie_01_err_apex_pkg.lever_err_apex_mesg ('Le nombre de valeurs ne correspondent pas');
    end if;

    vnu_index := pty_colns.first ();

    ajout_ligne ('update ' || pva_nom_table);
    ajout_ligne ('   set ' || pty_colns (vnu_index).va_expre || ' = ' || pty_liste_valrs (vnu_index).va_expre);

    vnu_index := pty_colns.next (vnu_index);

    while vnu_index is not null loop
      ajout_ligne ('       ' || pty_colns (vnu_index).va_expre || ' = ' || pty_liste_valrs (vnu_index).va_expre);

      vnu_index := pty_colns.next (vnu_index);
    end loop;

    if pva_condt is not null then
      ajout_ligne (' where ' || pva_condt || ';');
    else
      ajout_ligne (';');
    end if;

    ajout_ligne ();
  end;

  function obten
    return clob is
  begin
    if gbo_init_gestn_ereur then
      -- Terminer la gestion des erreurs si encore ouverte
      concl_gestn_ereur ();
    end if;

    return sie_07_clob_pkg.obten ();
  end;


  -- Fonctions de gestion d'erreurs
  procedure init_gestn_ereur is
  begin
    ajout_ligne ('create or replace package z$sie_gestn_err_pkg as');
    inden ();
    ajout_ligne ('vnu_sql_code      number default 0;');
    ajout_ligne ('vva_sql_errm      varchar2(4000);');
    ajout_ligne ('vva_back_trace    varchar2(32500);');
    ajout_ligne ('vva_nom_bloc_err  varchar2(100);');
    ajout_ligne ();
    ajout_ligne ('procedure defnr_ereur (pva_nom in varchar2);');
    termn_bloc ();

    ajout_ligne ('create or replace package body z$sie_gestn_err_pkg as');
    inden ();
    ajout_ligne ('procedure defnr_ereur (pva_nom in varchar2) is');
    debtr_bloc ();
    ajout_ligne ('vnu_sql_code := sqlcode;');
    ajout_ligne ('vva_sql_errm := sqlerrm;');
    ajout_ligne ('vva_back_trace := substr(dbms_utility.format_call_stack (), 1, 32500);');
    ajout_ligne ('vva_nom_bloc_err := pva_nom;');
    termn_bloc ();
    termn_bloc ();

    gbo_init_gestn_ereur := true;
    gbo_bloc_gestn_ereur := false;
  end;

  procedure debtr_bloc_gestn_ereur (pva_nom_bloc in varchar2) is
  begin
    if not gbo_init_gestn_ereur then
      --TODO: S'assurer que la gestion d'erreur a été initiée
      null;
    end if;

    if gbo_bloc_gestn_ereur then
      --Raiser une erreur "bloc de gestion d'erreur précédent non terminé"
      sie_01_err_apex_pkg.lever_err_apex_mesg ('Le bloc de gestion d''erreur précédent n''est pas terminé');
    end if;

    gva_nom_gestn_ereur := pva_nom_bloc;
    gnu_ligne_debut_bloc := gnu_nb_ligne;
    gnu_parti_gestn_ereur := 1;

    debtr_bloc ();
    ajout_ligne ('if z$sie_gestn_err_pkg.vnu_sql_code = 0 then');
    inden ();
  end;

  procedure termn_bloc_gestn_ereur is
  begin
    --TODO: S'assurer que la gestion d'erreur a été initiée

    if gbo_bloc_gestn_ereur then
      --Raiser une erreur "bloc de gestion d'erreur non débuté"
      sie_01_err_apex_pkg.lever_err_apex_mesg ('Aucun bloc de gestion d''erreur  n''est débuté');
    end if;

    -- S'assurer d'avoir au moins 1 instruction dans le bloc
    ajout_ligne ('null;');
    de_inden ();
    ajout_ligne ('end if;');
    de_inden ();
    ajout_ligne ('exception');
    ajout_ligne ('when others then');
    inden ();
    ajout_ligne (
         'z$sie_gestn_err_pkg.defnr_ereur ('
      || v (
              gva_nom_gestn_ereur
           || case when gnu_parti_gestn_ereur > 1 then '(partie ' || gnu_parti_gestn_ereur || ')' else null end
         )
      || ');'
    );
    termn_bloc ();
  end;

  procedure rompr_bloc_gestn_ereur (pnu_nb_ligne in number default 500) is
    vnu_parti                               number;
  begin
    if gnu_nb_ligne >= gnu_ligne_debut_bloc + pnu_nb_ligne then
      vnu_parti := gnu_parti_gestn_ereur;
      termn_bloc_gestn_ereur ();
      debtr_bloc_gestn_ereur (gva_nom_gestn_ereur);
      gnu_parti_gestn_ereur := vnu_parti + 1;
    end if;
  end;

  procedure concl_gestn_ereur is
  begin
    debtr_bloc ();
    ajout_ligne ('if z$sie_gestn_err_pkg.vnu_sql_code = 0 then');
    ajout_ligne ('  commit;');
    ajout_ligne ('  dbms_output.put_line (' || v ('La migration s''est completee correctement.') || ');');
    ajout_ligne ('else');
    ajout_ligne ('  rollback;');
    ajout_ligne ('  sie_13_condt_piltb_pkg.vbo_en_charg := false;');
    ajout_ligne ('  dbms_output.put_line (');
    ajout_ligne ('    ' || v ('Une erreur est survenue lors de l''execution du script de migration.'));
    ajout_ligne ('  );');
    ajout_ligne ('  dbms_output.put_line (''Bloc   : '' || z$sie_gestn_err_pkg.vva_nom_bloc_err);');
    ajout_ligne ('  dbms_output.put_line (''Code   : '' || z$sie_gestn_err_pkg.vnu_sql_code);');
    ajout_ligne ('  dbms_output.put_line (''Message: '' || z$sie_gestn_err_pkg.vva_sql_errm);');
    ajout_ligne ('  dbms_output.put_line (''Pile   :'');');
    ajout_ligne ('  dbms_output.put_line (z$sie_gestn_err_pkg.vva_back_trace);');
    ajout_ligne ('  sie_03_journ_pkg.ecrir_journ (z$sie_gestn_err_pkg.vva_sql_errm);');
    ajout_ligne ('  sie_03_journ_pkg.ecrir_journ (z$sie_gestn_err_pkg.vva_back_trace);');
    ajout_ligne ('end if;');
    termn_bloc ();

    debtr_bloc ();
    ajout_ligne ('if z$sie_gestn_err_pkg.vnu_sql_code <> 0 then');
    ajout_ligne ('  raise_application_error (-20100, z$sie_gestn_err_pkg.vva_sql_errm);');
    ajout_ligne ('end if;');
    termn_bloc ();

    ajout_ligne ('drop package z$sie_gestn_err_pkg;');
  end;
end;
/

Prompt Package Body SIE_07_UTIL_CHAIN_PKG;
/* Formatted on 04/12/2013 11:35:10 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_07_util_chain_pkg is
  /* Package variables used repeatedly throughout the body. */
  len_string                              number;
  start_loc                               number;
  next_loc                                number;
  /*
  || Since the PUT_LINE procedure regards a string of one or more
  || spaces as NULL, it will not display a space, which is in
  || PS_Parse a valid atomic. So I save a_blank in the PL/SQL
  || table instead of the space itself.
  */
  a_blank                        constant varchar2 (3) := '" "';

  /*--------------------- Private Modules ---------------------------
  || The following functions are available only to other modules in
  || package. No user of PS_Parse can see or use these functions.
  ------------------------------------------------------------------*/
  function a_delimiter (character_in in varchar2,
                        delimiters_in in varchar2 := std_delimiters)
    return boolean /*
                   || Returns TRUE if the character passsed into the function is found
                   || in the list of delimiters.
                   */
  is
  begin
    return instr (delimiters_in,
                  character_in) > 0;
  end;

  function string_length (string_in in varchar2)
    return integer is
  begin
    return length (ltrim (rtrim (string_in)));
  end;

  function next_atom_loc (string_in in varchar2,
                          start_loc_in in number,
                          scan_increment_in in number := +1)
    /*
    || The next_atom_loc function returns the location
    || in the string of the starting point of the next atomic (from the
    || start location). The function scans forward if scan_increment_in is
    || +1, otherwise it scans backwards through the string. Here is the
    || logic to determine when the next atomic starts:
    ||
    ||      1. If current atomic is a delimiter (if, that is, the character
    ||         at the start_loc_in of the string is a delimiter), then the
    ||         the next character starts the next atomic since all
    ||         delimiters are a single character in length.
    ||
    ||      2. If current atomic is a word (if, that is, the character
    ||         at the start_loc_in of the string is a delimiter), then the
    ||         next atomic starts at the next delimiter. Any letters or
    ||         numbers in between are part of the current atomic.
    ||
    || So I loop through the string a character at a time and apply these
    || tests. I also have to check for end of string. If I scan forward
    || the end of string comes when the SUBSTR which pulls out the next
    || character returns NULL. If I scan backward, then the end of the
    || string comes when the location is less than 0.
    */
    return number is
    /* Boolean variable which uses private function to determine
    || if the current character is a delimiter or not.
    */
    was_a_delimiter                         boolean
                                              := a_delimiter (substr (string_in,
                                                                      start_loc_in,
                                                                      1));
    /* If not a delimiter, then it was a word. */
    was_a_word                              boolean := not was_a_delimiter;
    /* The next character scanned in the string */
    next_char                               varchar2 (1);
    /*
    || The value returned by the function. This location is the start
    || of the next atomic found. Initialize it to next character,
    || forward or backward depending on increment.
    */
    return_value                            number := start_loc_in + scan_increment_in;
  begin
    loop
      -- Extract the next character.
      next_char :=
        substr (string_in,
                return_value,
                1);
      -- Exit the loop if:
      exit when /* On a delimiter, since that is always an atomic */
                a_delimiter (next_char)
             or /* Was a delimiter, but am now in a word. */
                (was_a_delimiter and not a_delimiter (next_char))
             or /* Reached end of string scanning forward. */
                next_char is null
             or /* Reached beginning of string scanning backward. */
                return_value < 0;
      /* Shift return_value to move the next character. */
      return_value := return_value + scan_increment_in;
    end loop;

    -- If the return_value is negative, return 0, else the return_value
    return greatest (return_value,
                     0);
  end;

  procedure increment_counter (counter_inout in out number,
                               count_type_in in varchar2,
                               atomic_in in char) /*
                                                  || The increment_counter procedure is used by nth_atomic and
                                                  || number_of_atomics to add to the count of of atomics. Since you
                                                  || can request a count by ALL atomics, just the WORD atomics or
                                                  || just the DELIMITER atomics. I use the a_delimiter function to
                                                  || decide whether I should add to the counter. This is not a terribly
                                                  || complex procedure. I bury this logic into a separate module,
                                              however,
                                                  || to make it easier to read and debug the main body of the programs.
                                                  */
  is
  begin
    if count_type_in = 'ALL'
    or (count_type_in = 'WORD' and not a_delimiter (atomic_in))
    or (count_type_in = 'DELIMITER' and a_delimiter (atomic_in)) then
      counter_inout := counter_inout + 1;
    end if;
  end increment_counter;

  /* ------------------------- Public Modules -----------------------*/
  procedure display_atomics (table_in in atoms_tabtype,
                             num_rows_in in number) /*
                                                    || Program to dump out contents of table. Notice I must also pass in
                                                    || the number of rows in the table so that I know when to stop the
                                                    || loop. Otherwise I will raise a NO_DATA_FOUND exception. For a more
                                                    || elaborate display_table module, see Chapter 7 on PL/SQL tables.
                                                    */
  is
  begin
    for table_row in 1 .. num_rows_in loop
      dbms_output.put_line (nvl (table_in (table_row), 'NULL'));
    end loop;
  end;

  procedure parse_string (string_in in varchar2,
                          atomics_list_out   out atoms_tabtype,
                          num_atomics_out in out number,
                          delimiters_in in varchar2 := std_delimiters) /*
                                                                       || Version of parse_string which stores the list of atomics
                                                                       || in a PL/SQL table.
                                                                       ||
                                                                       || Parameters:
                                                                       ||      string_in - the string to be parsed.
                                                                       ||      atomics_list_out - the table of atomics.
                                                                       ||      num_atomics_out - the number of atomics found.
                                                                       ||      delimiters_in - the set of delimiters used in parse.
                                                                       */
  is
  begin
    /* Initialize variables. */
    num_atomics_out := 0;
    len_string := string_length (string_in);

    if len_string is not null then
      /*
      || Only scan the string if made of something more than blanks.
      || Start at first non-blank character. Remember: INSTR returns 0
      || if a space is not found. Stop scanning if at end of string.
      */
      start_loc :=
        least (1,
               instr (string_in,
                      ' ') +
               1);

      while start_loc <= len_string loop
        /*
        || Find the starting point of the NEXT atomic. Go ahead and
        || increment counter for the number of atomics. Then have to
        || actually pull out the atomic. Two cases to consider:
        ||      1. Last atomic goes to end of string.
        ||      2. The atomic is a single blank. Use special constant.
        ||      3. Anything else.
        */
        next_loc :=
          next_atom_loc (string_in,
                         start_loc);
        num_atomics_out := num_atomics_out + 1;

        if next_loc > len_string then
          -- Atomic is all characters right to the end of the string.
          atomics_list_out (num_atomics_out) :=
            substr (string_in,
                    start_loc);
        else
          /*
          || Internal atomic. If RTRIMs to NULL, have a blank
          || Use special-case string to stuff a " " in the table.
          */
          atomics_list_out (num_atomics_out) :=
            nvl (rtrim (substr (string_in,
                                start_loc,
                                next_loc - start_loc)),
                 a_blank);
        end if;

        -- Move starting point of scan for next atomic.
        start_loc := next_loc;
      end loop;
    end if;
  end parse_string;

  procedure parse_string (string_in in varchar2,
                          atomics_list_out in out varchar2,
                          num_atomics_out in out number,
                          delimiters_in in varchar2 := std_delimiters) /*
                                                                       || The version of parse_string which writes the atomics out to a packed
                                                                       || list in the format "|A|,|C|". I do not repeat any of the comments
                                                                       || from the first iteration of parse_string.
                                                                       */
  is
  begin
    /* Initialize variables */
    num_atomics_out := 0;
    atomics_list_out := null;
    len_string := string_length (string_in);

    if len_string is not null then
      start_loc :=
        least (1,
               instr (string_in,
                      ' ') +
               1);

      while start_loc <= len_string loop
        next_loc :=
          next_atom_loc (string_in,
                         start_loc);
        num_atomics_out := num_atomics_out + 1;

        if next_loc > len_string then
          atomics_list_out :=
               atomics_list_out
            || '|'
            || substr (string_in,
                       start_loc);
        else
          atomics_list_out :=
               atomics_list_out
            || '|'
            || nvl (rtrim (substr (string_in,
                                   start_loc,
                                   next_loc - start_loc)),
                    a_blank);
        end if;

        start_loc := next_loc;
      end loop;

      /* Apply terminating delimiter to the string. */
      atomics_list_out := atomics_list_out || '|';
    end if;
  end parse_string;

  function number_of_atomics (string_in in varchar2,
                              count_type_in in varchar2 := 'ALL',
                              delimiters_in in varchar2 := std_delimiters)
    return integer /*
                   || Counts the number of atomics in the string_in. You can specify the
                   || type of count you want: ALL for all atomics, WORD to count only the
                   || words and DELIMITER to count only the delimiters. You can optionally
                   || pass your own set of delimiters into the function.
                   */
  is
    return_value                            integer := 0;
  begin
    /* Initialize variables. */
    len_string := string_length (string_in);

    if len_string is not null then
      /*
      || This loop is much simpler than parse_string. Call the
      || next_atom_loc to move to the next atomic and increment the
      || counter if appropriate. Everything complicated is shifted into
      || sub-programs so that you can read the program "top-down",
      || understand it layer by layer.
      */
      start_loc :=
        least (1,
               instr (string_in,
                      ' ') +
               1);

      while start_loc <= len_string loop
        increment_counter (return_value,
                           upper (count_type_in),
                           substr (string_in,
                                   start_loc,
                                   1));
        start_loc :=
          next_atom_loc (string_in,
                         start_loc);
      end loop;
    end if;

    return return_value;
  end number_of_atomics;

  function nth_atomic (string_in in varchar2,
                       nth_in in number,
                       count_type_in in varchar2 := 'ALL',
                       delimiters_in in varchar2 := std_delimiters)
    return varchar2 /*
                    || Find and return the nth atomic in a string. If nth_in is greater
                    || the number of atomics, then return NULL. If nth_in is negative the
                    || function counts from the back of the string. You can again request
                    || a retrieval by ALL atomics, just the WORDs or just the DELIMITER.
                    || So you can ask for the third atomic, or the second word from the end
                    || of the string. You can pass your own list of delimiters as well.
                    */
  is
    /* Local copy of string. Supports up to 1000 characters. */
    local_string                            varchar2 (1000)
                                              := ltrim (rtrim (substr (string_in,
                                                                       1,
                                                                       1000)));
    /* Running count of atomics so far counted. */
    atomic_count                            number := 1;
    /* Boolean variable which controls the looping logic. */
    still_scanning                          boolean := local_string is not null and nth_in != 0;
    /* The amount by which I increment the counter. */
    scan_increment                          integer;
    /* Return value of function, maximum length of 100 characters. */
    return_value                            varchar2 (100) := null;
  begin
    if nth_in = 0 then
      /* Not much to do here. Find 0th atomic? */
      return null;
    else
      /* Initialize the loop variables. */
      len_string := string_length (local_string);

      if nth_in > 0 then
        /* Start at first non-blank character and scan forward. */
        next_loc := 1;
        scan_increment := 1;
      else
        /* Start at last non-blank character and scan backward. */
        next_loc := len_string;
        scan_increment := -1;
      end if;

      /* Loop through the string until the Boolean is FALSE. */
      while still_scanning loop
        /* Move start of scan in string to loc of last atomic. */
        start_loc := next_loc;
        /* Find the starting point of the next atomic. */
        next_loc :=
          next_atom_loc (local_string,
                         start_loc,
                         scan_increment);
        /* Increment the count of atomics. */
        increment_counter (atomic_count,
                           upper (count_type_in),
                           substr (local_string,
                                   start_loc,
                                   1));
        /*
        || Keep scanning if my count hasn't exceeded the request
        || and I am neither at the beginning nor end of the string.
        */
        still_scanning := atomic_count <= abs (nth_in) and next_loc <= len_string and next_loc >= 1;
      end loop;

      /*
      || Done with the loop. If my count has not exceeded the requested
      || amount, then there weren't enough atomics in the string to
      || satisfy the request.
      */
      if atomic_count <= abs (nth_in) then
        return null;
      else
        /*
        || I need to extract the atomic from the string. If scanning
        || forward, then I start at start_loc and SUBSTR forward.
        || If I am scanning backwards, I start at next_loc+1 (next_loc
        || is the starting point of the NEXT atomic and I want the
        || current one) and SUBSTR forward (when scanning in
        || reverse, next_loc comes before start_loc in the string.
        */
        if scan_increment = +1 then
          return substr (local_string,
                         start_loc,
                         next_loc - start_loc);
        else
          return substr (local_string,
                         next_loc + 1,
                         start_loc - next_loc);
        end if;
      end if;
    end if;
  end nth_atomic;
end sie_07_util_chain_pkg;
/

Prompt Package Body SIE_07_UTIL_COMPR_ZIP_PKG;
/* Formatted on 04/12/2013 11:35:10 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_07_util_compr_zip_pkg is
  function raw2num (pra_value in raw)
    return number is
  begin                                                                                          -- note: FFFFFFFF => -1
    return utl_raw.cast_to_binary_integer (pra_value,
                                           utl_raw.little_endian);
  end raw2num;


  function raw2varchar2 (pra_raw in raw,
                         pva_encod in varchar2)
    return varchar2 is
  begin
    return nvl (utl_i18n.raw_to_char (pra_raw,
                                      pva_encod),
                utl_i18n.raw_to_char (pra_raw,
                                      utl_i18n.map_charset (pva_encod,
                                                            utl_i18n.generic_context,
                                                            utl_i18n.iana_to_oracle)));
  end raw2varchar2;


  function little_endian (pnu_big in number,
                          pnu_bytes in pls_integer := 4)
    return raw is
  begin
    return utl_raw.substr (utl_raw.cast_from_binary_integer (pnu_big,
                                                             utl_raw.little_endian),
                           1,
                           pnu_bytes);
  end little_endian;

  procedure ajout_fichr (pbl_fichr_compr in out blob,
                         pva_nom_fichr in varchar2,
                         pbl_fichr in blob) is
    vda_date_actue                          date;
    vbl_fichr_compr                         blob;
    vnu_long                                integer;
  begin
    vda_date_actue := sysdate;
    vbl_fichr_compr := utl_compress.lz_compress (pbl_fichr);
    vnu_long := dbms_lob.getlength (vbl_fichr_compr);

    if pbl_fichr_compr is null then
      dbms_lob.createtemporary (pbl_fichr_compr,
                                true);
    end if;

    dbms_lob.append (pbl_fichr_compr,
                     utl_raw.concat (hextoraw ('504B0304')                                -- Local file header signature
                                                          ,
                                     hextoraw ('1400')                                                    -- version 2.0
                                                      ,
                                     hextoraw ('0000')                                        -- no General purpose bits
                                                      ,
                                     hextoraw ('0800')                                                        -- deflate
                                                      ,
                                     little_endian (to_number (to_char (vda_date_actue,
                                                                        'ss')) /
                                                    2 +
                                                    to_number (to_char (vda_date_actue,
                                                                        'mi')) *
                                                    32 +
                                                    to_number (to_char (vda_date_actue,
                                                                        'hh24')) *
                                                    2048,
                                                    2)                                    -- File last modification time
                                                      ,
                                     little_endian (to_number (to_char (vda_date_actue,
                                                                        'dd')) +
                                                    to_number (to_char (vda_date_actue,
                                                                        'mm')) *
                                                    32 +
                                                    (to_number (to_char (vda_date_actue,
                                                                         'yyyy')) -
                                                     1980) *
                                                    512,
                                                    2)                                    -- File last modification date
                                                      ,
                                     dbms_lob.substr (vbl_fichr_compr,
                                                      4,
                                                      vnu_long - 7)                                            -- CRC-32
                                                                   ,
                                     little_endian (vnu_long - 18)                                    -- compressed size
                                                                  ,
                                     little_endian (dbms_lob.getlength (pbl_fichr))                 -- uncompressed size
                                                                                   ,
                                     little_endian (length (pva_nom_fichr),
                                                    2)                                               -- File name length
                                                      ,
                                     hextoraw ('0000')                                             -- Extra field length
                                                      ,
                                     utl_raw.cast_to_raw (pva_nom_fichr)                                    -- File name
                                                                        ));
    dbms_lob.copy (pbl_fichr_compr,
                   vbl_fichr_compr,
                   vnu_long - 18,
                   dbms_lob.getlength (pbl_fichr_compr) + 1,
                   11);                                                                            -- compressed content
    dbms_lob.freetemporary (vbl_fichr_compr);
  end ajout_fichr;

  procedure clotr_fichr (pbl_fichr_compr in out blob,
                         pva_comnt in varchar2 default null) is
    vnu_decmp                               pls_integer := 0;
    vnu_offs                                integer;
    vnu_offs_dir_header                     integer;
    vnu_offs_end_header                     integer;
    vra_comnt                               raw (32767) := utl_raw.cast_to_raw (pva_comnt);
  begin
    vnu_offs_dir_header := dbms_lob.getlength (pbl_fichr_compr);
    vnu_offs :=
      dbms_lob.instr (pbl_fichr_compr,
                      hextoraw ('504B0304'),
                      1);

    while vnu_offs > 0 loop
      vnu_decmp := vnu_decmp + 1;
      dbms_lob.append (pbl_fichr_compr,
                       utl_raw.concat (hextoraw ('504B0102')                  -- Central directory file header signature
                                                            ,
                                       hextoraw ('1400')                                                  -- version 2.0
                                                        ,
                                       dbms_lob.substr (pbl_fichr_compr,
                                                        26,
                                                        vnu_offs + 4),
                                       hextoraw ('0000')                                          -- File comment length
                                                        ,
                                       hextoraw ('0000')                                -- Disk number where file starts
                                                        ,
                                       hextoraw ('0100')                                     -- Internal file attributes
                                                        ,
                                       hextoraw ('2000B681')                                 -- External file attributes
                                                            ,
                                       little_endian (vnu_offs - 1)              -- Relative offset of local file header
                                                                   ,
                                       dbms_lob.substr (pbl_fichr_compr,
                                                        utl_raw.cast_to_binary_integer (dbms_lob.substr (
                                                                                          pbl_fichr_compr,
                                                                                          2,
                                                                                          vnu_offs + 26
                                                                                        ),
                                                                                        utl_raw.little_endian),
                                                        vnu_offs + 30)                                      -- File name
                                                                      ));
      vnu_offs :=
        dbms_lob.instr (pbl_fichr_compr,
                        hextoraw ('504B0304'),
                        vnu_offs + 32);
    end loop;

    vnu_offs_end_header := dbms_lob.getlength (pbl_fichr_compr);
    dbms_lob.append (pbl_fichr_compr,
                     utl_raw.concat (hextoraw ('504B0506')                         -- End of central directory signature
                                                          ,
                                     hextoraw ('0000')                                            -- Number of this disk
                                                      ,
                                     hextoraw ('0000')                            -- Disk where central directory starts
                                                      ,
                                     little_endian (vnu_decmp,
                                                    2)               -- Number of central directory records on this disk
                                                      ,
                                     little_endian (vnu_decmp,
                                                    2)                      -- Total number of central directory records
                                                      ,
                                     little_endian (vnu_offs_end_header - vnu_offs_dir_header) -- Size of central directory
                                                                                              ,
                                     little_endian (vnu_offs_dir_header)         -- Relative offset of local file header
                                                                        ,
                                     little_endian (nvl (utl_raw.length (vra_comnt), 0),
                                                    2)                                        -- ZIP file comment length
                                                      ,
                                     vra_comnt));
  end clotr_fichr;

  function obten_liste_nom_fichr (pbl_fichr_compr in blob,
                                  pva_encod in varchar2 := null)
    return typ_list_nom_fichr is
    vnu_ind                                 integer;
    vnu_hd_ind                              integer;
    vta_rv                                  typ_list_nom_fichr;
  begin
    vnu_ind := dbms_lob.getlength (pbl_fichr_compr) - 21;

    loop
      exit when dbms_lob.substr (pbl_fichr_compr,
                                 4,
                                 vnu_ind) = hextoraw ('504B0506')
             or vnu_ind < 1;
      vnu_ind := vnu_ind - 1;
    end loop;

    --
    if vnu_ind <= 0 then
      return null;
    end if;

    --
    vnu_hd_ind :=
      raw2num (dbms_lob.substr (pbl_fichr_compr,
                                4,
                                vnu_ind + 16)) +
      1;
    vta_rv := typ_list_nom_fichr ();
    vta_rv.extend (raw2num (dbms_lob.substr (pbl_fichr_compr,
                                             2,
                                             vnu_ind + 10)));
    for i in 1 .. raw2num( dbms_lob.substr( pbl_fichr_compr
                                          , 2
                                          , vnu_ind + 8
                                          ) )
    loop
      vta_rv( i ) :=
        raw2varchar2
             ( dbms_lob.substr( pbl_fichr_compr
                              , raw2num( dbms_lob.substr( pbl_fichr_compr
                                                        , 2
                                                        , vnu_hd_ind + 28
                                                        ) )
                              , vnu_hd_ind + 46
                              )
             , pva_encod
             );
      vnu_hd_ind :=
          vnu_hd_ind
        + 46
        + raw2num( dbms_lob.substr( pbl_fichr_compr
                                  , 2
                                  , vnu_hd_ind + 28
                                  ) )
        + raw2num( dbms_lob.substr( pbl_fichr_compr
                                  , 2
                                  , vnu_hd_ind + 30
                                  ) )
        + raw2num( dbms_lob.substr( pbl_fichr_compr
                                  , 2
                                  , vnu_hd_ind + 32
                                  ) );
    end loop;

    return vta_rv;
  end obten_liste_nom_fichr;

  function obten_fichr (pbl_fichr_compr in blob,
                        pva_nom_fichr in varchar2,
                        pva_encod in varchar2 := null)
    return blob is
    vbl_tmp                                 blob;
    vnu_ind                                 integer;
    vnu_hd_ind                              integer;
    vnu_fl_ind                              integer;
  begin
    vnu_ind := dbms_lob.getlength (pbl_fichr_compr) - 21;

    loop
      exit when dbms_lob.substr (pbl_fichr_compr,
                                 4,
                                 vnu_ind) = hextoraw ('504B0506')
             or vnu_ind < 1;
      vnu_ind := vnu_ind - 1;
    end loop;

    --
    if vnu_ind <= 0 then
      return null;
    end if;

    --
    vnu_hd_ind :=
      raw2num (dbms_lob.substr (pbl_fichr_compr,
                                4,
                                vnu_ind + 16)) +
      1;
    for i in 1 .. raw2num( dbms_lob.substr( pbl_fichr_compr
                                          , 2
                                          , vnu_ind + 8
                                          ) )
    loop
      if pva_nom_fichr =
           raw2varchar2
             ( dbms_lob.substr( pbl_fichr_compr
                              , raw2num( dbms_lob.substr( pbl_fichr_compr
                                                        , 2
                                                        , vnu_hd_ind + 28
                                                        ) )
                              , vnu_hd_ind + 46
                              )
             , pva_encod
             )
      then
        if dbms_lob.substr( pbl_fichr_compr
                          , 2
                          , vnu_hd_ind + 10
                          ) = hextoraw( '0800' )                -- deflate
        then
          vnu_fl_ind :=
                raw2num( dbms_lob.substr( pbl_fichr_compr
                                        , 4
                                        , vnu_hd_ind + 42
                                        ) );
          vbl_tmp := hextoraw( '1F8B0800000000000003' );          -- gzip header
          dbms_lob.copy( vbl_tmp
                       , pbl_fichr_compr
                       , raw2num( dbms_lob.substr( pbl_fichr_compr
                                                 , 4
                                                 , vnu_fl_ind + 19
                                                 ) )
                       , 11
                       ,   vnu_fl_ind
                         + 31
                         + raw2num( dbms_lob.substr( pbl_fichr_compr
                                                   , 2
                                                   , vnu_fl_ind + 27
                                                   ) )
                         + raw2num( dbms_lob.substr( pbl_fichr_compr
                                                   , 2
                                                   , vnu_fl_ind + 29
                                                   ) )
                       );
          dbms_lob.append( vbl_tmp
                         , dbms_lob.substr( pbl_fichr_compr
                                          , 4
                                          , vnu_fl_ind + 15
                                          )
                         );
          dbms_lob.append( vbl_tmp
                         , dbms_lob.substr( pbl_fichr_compr, 4, vnu_fl_ind + 23 )
                         );
          return utl_compress.lz_uncompress( vbl_tmp );
        end if;

        if dbms_lob.substr( pbl_fichr_compr
                          , 2
                          , vnu_hd_ind + 10
                          ) =
                      hextoraw( '0000' )
                                        -- The file is stored (no compression)
        then
          vnu_fl_ind :=
                raw2num( dbms_lob.substr( pbl_fichr_compr
                                        , 4
                                        , vnu_hd_ind + 42
                                        ) );

          dbms_lob.createtemporary(vbl_tmp, cache => true);

          dbms_lob.copy(dest_lob => vbl_tmp,
                        src_lob => pbl_fichr_compr,
                        amount => raw2num( dbms_lob.substr( pbl_fichr_compr, 4, vnu_fl_ind + 19)),
                        dest_offset => 1,
                        src_offset => vnu_fl_ind + 31 + raw2num(dbms_lob.substr(pbl_fichr_compr, 2, vnu_fl_ind + 27)) + raw2num(dbms_lob.substr( pbl_fichr_compr, 2, vnu_fl_ind + 29))
                       );

          return vbl_tmp;

        end if;

      end if;
      vnu_hd_ind :=
          vnu_hd_ind
        + 46
        + raw2num( dbms_lob.substr( pbl_fichr_compr
                                  , 2
                                  , vnu_hd_ind + 28
                                  ) )
        + raw2num( dbms_lob.substr( pbl_fichr_compr
                                  , 2
                                  , vnu_hd_ind + 30
                                  ) )
        + raw2num( dbms_lob.substr( pbl_fichr_compr
                                  , 2
                                  , vnu_hd_ind + 32
                                  ) );
    end loop;

    return null;
  end obten_fichr;

  function extra_fichr (pbl_fichr_compr_zip in blob,
                        pva_encod in varchar2 default null,
                        pbo_extra_contn in boolean default true)
    return typ_tab_fichr is
    vta_list_fichr                          typ_tab_fichr;
    vta_list_nom_fichr                      typ_list_nom_fichr;
  begin
    vta_list_nom_fichr :=
      obten_liste_nom_fichr (pbl_fichr_compr_zip,
                             pva_encod);

    for i in vta_list_nom_fichr.first () .. vta_list_nom_fichr.last loop
      vta_list_fichr (i).nom := vta_list_nom_fichr (i);

      if vta_list_fichr (i).nom like '/%' then
        vta_list_fichr (i).nom :=
          substr (vta_list_fichr (i).nom,
                  2);
      end if;

      if instr (vta_list_fichr (i).nom,
                '/') > 0 then
        vta_list_fichr (i).reprt :=
          substr (vta_list_fichr (i).nom,
                  1,
                  instr (vta_list_fichr (i).nom,
                         '/',
                         -1) -
                  1);
        vta_list_fichr (i).nom :=
          substr (vta_list_fichr (i).nom,
                  instr (vta_list_fichr (i).nom,
                         '/',
                         -1) +
                  1);
      end if;

      if pbo_extra_contn then
        vta_list_fichr (i).contn :=
          obten_fichr (pbl_fichr_compr_zip,
                       vta_list_nom_fichr (i),
                       pva_encod);
      end if;
    end loop;

    return vta_list_fichr;
  end extra_fichr;
end sie_07_util_compr_zip_pkg;
/

Prompt Package Body SIE_07_UTIL_CU_PKG;
/* Formatted on 04/12/2013 11:35:10 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_UTIL_CU_PKG" as
  function obten_sourc_shutl_selct (pva_selct in varchar2)
    return varchar2 is
    cur_ref_r                               sys_refcursor;
    vva_ref_r                               varchar2 (200);
    vva_retrn                               varchar2 (32767);
  begin
    open cur_ref_r for pva_selct;

    fetch cur_ref_r
    into vva_ref_r;

    while cur_ref_r%found loop
      vva_retrn := vva_retrn || vva_ref_r || ':';

      fetch cur_ref_r
      into vva_ref_r;
    end loop;

    close cur_ref_r;

    if vva_retrn is not null then
      vva_retrn :=
        substr (vva_retrn,
                1,
                length (vva_retrn) - 1);
    end if;

    return vva_retrn;
  end obten_sourc_shutl_selct;

  function obten_sourc_shutl_selct (pre_selct in sys_refcursor)
    return varchar2 is
    vva_ref_r                               varchar2 (200);
    vva_retrn                               varchar2 (32767);
  begin
    fetch pre_selct
    into vva_ref_r;

    while pre_selct%found loop
      vva_retrn := vva_retrn || vva_ref_r || ':';

      fetch pre_selct
      into vva_ref_r;
    end loop;

    close pre_selct;

    if vva_retrn is not null then
      vva_retrn :=
        substr (vva_retrn,
                1,
                length (vva_retrn) - 1);
    end if;

    return vva_retrn;
  end obten_sourc_shutl_selct;
end sie_07_util_cu_pkg;
/

Prompt Package Body SIE_07_UTIL_NOYAU_PKG;
/* Formatted on 04/12/2013 11:35:10 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_07_util_noyau_pkg is
  --Result cache par session
  gva_schem                               varchar2 (30);

  function obten_schem_apex
    return all_synonyms.table_owner%type is
  begin
    if gva_schem is null then
      select   table_owner
        into   gva_schem
        from   all_synonyms
       where   table_name = 'APEX_APPLICATIONS' and owner = 'PUBLIC';
    end if;

    return gva_schem;
  end obten_schem_apex;
end sie_07_util_noyau_pkg;
/

Prompt Package Body SIE_07_UTIL_PKG;
/* Formatted on 04/12/2013 11:35:11 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_07_UTIL_PKG" as
  gti_timsp_initl                         timestamp;

  type typ_table_va_index_va is table of varchar2 (4000)
                                  index by varchar2 (30);

  gta_etat_sessn                          typ_table_va_index_va;

  gnu_mod_encry                  constant pls_integer
    default dbms_crypto.encrypt_aes256 + dbms_crypto.chain_cbc + dbms_crypto.pad_pkcs5 ;
  gnu_longr_cle_encry            constant pls_integer default 256 / 8;
  gra_cle_encry_base                      raw (2000)
                                            default 'D0F0F51AC7FCF834F47B6797951A8244B65809DD33ECA420D0F6446DAF9F47E8';
  gva_charc_set                  constant varchar2 (12) default 'WE8MSWIN1252';

  function table_to_string (pta_tabl apex_application_global.vc_arr2,
                            pva_seprt in varchar2 default ':')
    return varchar2 is
    vva_strin                               varchar2 (32767);
    vnu_indx                                pls_integer;
  begin
    if pta_tabl.count () != 0 then
      vnu_indx := pta_tabl.first ();

      while vnu_indx is not null loop
        if vva_strin is not null then
          vva_strin := vva_strin || pva_seprt;
        end if;

        vva_strin := vva_strin || pta_tabl (vnu_indx);
        vnu_indx := pta_tabl.next (vnu_indx);
      end loop;
    end if;

    return vva_strin;
  end table_to_string;

  function table_to_string (pcu_tabl sys_refcursor,
                            pva_seprt in varchar2 default ':')
    return varchar2 is
    vva_strin                               varchar2 (32767);
    vva_elemn                               varchar2 (100);
  begin
    fetch pcu_tabl
    into vva_elemn;

    while pcu_tabl%found loop
      if vva_strin is not null then
        vva_strin := vva_strin || pva_seprt;
      end if;

      vva_strin := vva_strin || vva_elemn;

      fetch pcu_tabl
      into vva_elemn;
    end loop;

    close pcu_tabl;

    return vva_strin;
  end table_to_string;

  function string_to_table (pva_tabl in varchar2,
                            pva_seprt in varchar2 default ':')
    return apex_application_global.vc_arr2 is
  begin
    return apex_util.string_to_table (pva_tabl,
                                      pva_seprt);
  end string_to_table;

  function string_to_table2 (pva_tabl in varchar2,
                             pva_seprt in varchar2 default ':')
    return apex_application_global.vc_map is
    vvc_table                               apex_application_global.vc_arr2;
    vvm_table                               apex_application_global.vc_map;
  begin
    vvc_table :=
      apex_util.string_to_table (pva_tabl,
                                 pva_seprt);

    for i in vvc_table.first .. vvc_table.last loop
      vvm_table (vvc_table (i)) := vvc_table (i);
    end loop;

    return vvm_table;
  end string_to_table2;

  function strin_to_table_nu (pva_list in varchar2)
    return typ_table_nu
    pipelined is
    vta_arr2                                apex_application_global.vc_arr2;
  begin
    vta_arr2 := apex_util.string_to_table (pva_list);

    if vta_arr2.count () != 0 then
      for i in vta_arr2.first () .. vta_arr2.last () loop
        pipe row (vta_arr2 (i));
      end loop;
    end if;

    return;
  end strin_to_table_nu;

  function table_to_table (pta_list in apex_application_global.vc_arr2)
    return typ_table_nu
    pipelined is
    vnu_indx_courn                          pls_integer;
  begin
    if pta_list.count () != 0 then
      vnu_indx_courn := pta_list.first ();

      while vnu_indx_courn is not null loop
        pipe row (pta_list (vnu_indx_courn));
        vnu_indx_courn := pta_list.next (vnu_indx_courn);
      end loop;
    end if;
  end table_to_table;

  function table_to_table_01
    return typ_table_nu
    pipelined is
    vnu_indx_courn                          pls_integer;
  begin
    if apex_application.g_f01.count () != 0 then
      vnu_indx_courn := apex_application.g_f01.first ();

      while vnu_indx_courn is not null loop
        pipe row (apex_application.g_f01 (vnu_indx_courn));
        vnu_indx_courn := apex_application.g_f01.next (vnu_indx_courn);
      end loop;
    end if;
  end table_to_table_01;

  function table_to_table_02
    return typ_table_nu
    pipelined is
    vnu_indx_courn                          pls_integer;
  begin
    if apex_application.g_f02.count () != 0 then
      vnu_indx_courn := apex_application.g_f02.first ();

      while vnu_indx_courn is not null loop
        pipe row (apex_application.g_f02 (vnu_indx_courn));
        vnu_indx_courn := apex_application.g_f02.next (vnu_indx_courn);
      end loop;
    end if;
  end table_to_table_02;

  function table_to_table_nu (pta_list in typ_table_nu_ibpls)
    return typ_table_nu
    pipelined is
    vnu_indx_courn                          pls_integer;
  begin
    if pta_list.count () != 0 then
      vnu_indx_courn := pta_list.first ();

      while vnu_indx_courn is not null loop
        pipe row (pta_list (vnu_indx_courn));
        vnu_indx_courn := pta_list.next (vnu_indx_courn);
      end loop;
    end if;
  end table_to_table_nu;

  function strin_to_table_va (pva_list in varchar2)
    return typ_table_va
    pipelined is
    vta_arr2                                apex_application_global.vc_arr2;
  begin
    vta_arr2 := apex_util.string_to_table (pva_list);

    if vta_arr2.count () != 0 then
      for i in vta_arr2.first () .. vta_arr2.last () loop
        pipe row (vta_arr2 (i));
      end loop;
    end if;

    return;
  end strin_to_table_va;

  function suprm_elemn_liste (pva_elemn in varchar2,
                              pva_list in varchar2)
    return varchar2 is
    vta_arr2_sourc                          apex_application_global.vc_arr2;
    vta_arr2_cible                          apex_application_global.vc_arr2;
    vnu_compt                               pls_integer default 1;
  begin
    vta_arr2_sourc := apex_util.string_to_table (pva_list);

    if vta_arr2_sourc.count > 0 then
      for i in vta_arr2_sourc.first () .. vta_arr2_sourc.last () loop
        if vta_arr2_sourc (i) <> pva_elemn then
          vta_arr2_cible (vnu_compt) := vta_arr2_sourc (i);
          vnu_compt := vnu_compt + 1;
        end if;
      end loop;
    end if;

    return table_to_string (vta_arr2_cible);
  end suprm_elemn_liste;

  procedure genr_valr_audit (pbo_inser in boolean,
                             pbo_updat in boolean,
                             pva_utils_creat in out varchar2,
                             pda_date_creat in out date,
                             pva_utils_modfc in out varchar2,
                             pda_date_modfc in out date) is
  begin
    if pbo_inser then
      pva_utils_creat := nvl (sie_12_utils_pkg.obten_audit_usagr_conct, user);
      pda_date_creat := obten_date_syst;
    elsif pbo_updat then
      pva_utils_modfc := nvl (sie_12_utils_pkg.obten_audit_usagr_conct, user);
      pda_date_modfc := obten_date_syst;
    end if;
  end genr_valr_audit;

  function obten_date_syst
    return date is
  begin
    return sysdate;
  end obten_date_syst;

  function vald_domn_date (pda_date_limt_infr in date,
                           pva_date_a_valdr in date,
                           pda_date_limt_supr in date)
    return boolean is
    vbo_date_valid                          boolean;
  begin
    vbo_date_valid :=
      (pva_date_a_valdr >= pda_date_limt_infr
    or pda_date_limt_infr is null);
    vbo_date_valid :=
      vbo_date_valid
  and (pva_date_a_valdr <= pda_date_limt_supr
    or pda_date_limt_supr is null);
    return vbo_date_valid;
  end;

  function vald_domn_date_trunc (pda_date_limt_infr in date,
                                 pva_date_a_valdr in date,
                                 pda_date_limt_supr in date)
    return boolean is
    vbo_date_valid                          boolean;
  begin
    vbo_date_valid :=
      (trunc (pva_date_a_valdr) >= trunc (pda_date_limt_infr)
    or pda_date_limt_infr is null);
    vbo_date_valid :=
      vbo_date_valid
  and (trunc (pva_date_a_valdr) <= trunc (pda_date_limt_supr)
    or pda_date_limt_supr is null);
    return vbo_date_valid;
  end;

  function obten_lang_sesn
    return number is
  begin
    return sie_01_lang_pkg.obten_lang_sesn ();
  end obten_lang_sesn;

  function obten_versn_sesn
    return number is
  begin
    return 102;
  end obten_versn_sesn;

  function obten_sourc_shutl_selct (pva_selct in varchar2)
    return varchar2 is
    /*cur_ref_r                               sys_refcursor;
    vva_ref_r                               varchar2 (200);*/
    vva_retrn                               varchar2 (32767);
  begin
    /*open cur_ref_r for pva_selct;
                        fetch cur_ref_r into                                    vva_ref_r;
    while cur_ref_r%found loop
      vva_retrn := vva_retrn || vva_ref_r || ':';
      fetch cur_ref_r into                                    vva_ref_r;
    end loop;
    close cur_ref_r;
    if vva_retrn is not null then
      vva_retrn :=
        substr (vva_retrn,
                1,
                length (vva_retrn) - 1);
    end if;*/

    vva_retrn := sie_07_util_cu_pkg.obten_sourc_shutl_selct (pva_selct);

    return vva_retrn;
  end obten_sourc_shutl_selct;

  function obten_sourc_shutl_selct (pre_selct in sys_refcursor)
    return varchar2 is
    --    vva_ref_r                               varchar2 (200);
    vva_retrn                               varchar2 (32767);
  begin
    /*fetch pre_selct into                                    vva_ref_r;
                        while pre_selct%found loop
      vva_retrn := vva_retrn || vva_ref_r || ':';
      fetch pre_selct into                                    vva_ref_r;
    end loop;
    close pre_selct;
    if vva_retrn is not null then
      vva_retrn :=
        substr (vva_retrn,
                1,
                length (vva_retrn) - 1);
    end if;*/

    vva_retrn := sie_07_util_cu_pkg.obten_sourc_shutl_selct (pre_selct);

    return vva_retrn;
  end obten_sourc_shutl_selct;

  function v (pva_nom_item in varchar2,
              pva_indic_forcr_apex in varchar2 default 'N')
    return varchar2 is
    err_exist_item                          exception;
  begin
    if wwv_flow.g_instance is null and pva_indic_forcr_apex = 'N' then
      if gta_etat_sessn.exists (pva_nom_item) then
        return gta_etat_sessn (pva_nom_item);
      else
        return null;
      end if;
    else
      -- if exist_item (pva_nom_item) then
      return replace (apex_040200.v (pva_nom_item),
                      '%null%',
                      null);
    /* else
                                     raise err_exist_item;
     end if;*/
    end if;
  exception
    when err_exist_item then
      sie_01_err_apex_pkg.lever_err_apex_mesg ('Cet item n''existe pas: ' || pva_nom_item);
  end v;

  function vd (pva_nom_item in varchar2,
               pva_indic_forcr_apex in varchar2 default 'N')
    return varchar2
    deterministic is
  begin
    return v (pva_nom_item,
              pva_indic_forcr_apex);
  end vd;

  function nv (pva_nom_item in varchar2,
               pva_indic_forcr_apex in varchar2 default 'N')
    return number is
    err_exist_item                          exception;
  begin
    if wwv_flow.g_instance is null and pva_indic_forcr_apex = 'N' then
      if gta_etat_sessn.exists (pva_nom_item) then
        return to_number (gta_etat_sessn (pva_nom_item));
      else
        return null;
      end if;
    else
      --  if exist_item (pva_nom_item) then
      return to_number (replace (replace (replace (apex_040200.v (pva_nom_item),
                                                   '%null%',
                                                   null),
                                          ' ',
                                          null),
                                 '$',
                                 null));
    /* else
                                     raise err_exist_item;
     end if;*/
    end if;
  exception
    when err_exist_item then
      sie_01_err_apex_pkg.lever_err_apex_mesg ('Cet item n''existe pas: ' || pva_nom_item);
  end nv;

  function nvd (pva_nom_item in varchar2,
                pva_indic_forcr_apex in varchar2 default 'N')
    return number
    deterministic is
  begin
    return nv (pva_nom_item,
               pva_indic_forcr_apex);
  end nvd;

  function dv (pva_nom_item in varchar2,
               pva_formt in varchar2 default null,
               pva_indic_forcr_apex in varchar2 default 'N')
    return date is
    err_exist_item                          exception;
  begin
    if wwv_flow.g_instance is null and pva_indic_forcr_apex = 'N' then
      if gta_etat_sessn.exists (pva_nom_item) then
        return to_date (gta_etat_sessn (pva_nom_item));
      else
        return null;
      end if;
    else
      -- if exist_item (pva_nom_item) then
      return to_date (replace (apex_040200.v (pva_nom_item),
                               '%null%',
                               null),
                      pva_formt);
    /* else
                                     raise err_exist_item;
     end if;*/
    end if;
  exception
    when err_exist_item then
      sie_01_err_apex_pkg.lever_err_apex_mesg ('Cet item n''existe pas: ' || pva_nom_item);
  end dv;

  function dvd (pva_nom_item in varchar2,
                pva_formt in varchar2 default null,
                pva_indic_forcr_apex in varchar2 default 'N')
    return date
    deterministic is
  begin
    return dv (pva_nom_item,
               pva_formt,
               pva_indic_forcr_apex);
  end dvd;

  function valr_numrq (pva_valr in varchar2)
    return number is
    vva_valr                                varchar2 (4000);
  begin
    vva_valr :=
      replace (pva_valr,
               ' ',
               null);
    vva_valr :=
      replace (vva_valr,
               '$',
               null);
    vva_valr :=
      replace (vva_valr,
               '.',
               ',');
    return vva_valr;
  end;

  procedure defnr_etat_sessn (pva_nom in varchar2,
                              pva_valr in varchar2) is
  begin
    defnr_etat_sesn (pva_nom,
                     pva_valr);
  end defnr_etat_sessn;

  procedure defnr_etat_sesn (pva_nom in varchar2,
                             pva_valr in varchar2) is
  begin
    if wwv_flow.g_instance is null then
      gta_etat_sessn (pva_nom) := pva_valr;
    else
      apex_util.set_session_state (pva_nom,
                                   pva_valr);
    end if;
  end defnr_etat_sesn;

  procedure reint_etat_sesn_page (pnu_no_page in number) is
  begin
    apex_util.clear_page_cache (pnu_no_page);
  end reint_etat_sesn_page;

  function exist_item (pva_nom_item in varchar2)
    return boolean is
    vnu_aplic                               vd_i_sie_11_aplic.numr_aplic_apex%type default apex_040200.v ('APP_ID');
    vnu_exist                               pls_integer;
  begin
    begin
      select   1
        into   vnu_exist
        from   apex_item_page aip
       where   aip.flow_id = vnu_aplic and aip.name = pva_nom_item and rownum = 1;

      return true;
    exception
      when no_data_found then
        begin
          select   1
            into   vnu_exist
            from   apex_item_aplic aia
           where   aia.flow_id = vnu_aplic and aia.name = pva_nom_item and rownum = 1;

          return true;
        exception
          when no_data_found then
            /* begin
                                   select   1
                 into   vnu_exist
                 from   apex_aplic aa
                where   aa.display_id = vnu_aplic
                        and (   substitution_string_01 = pva_nom_item
                             or substitution_string_02 = pva_nom_item
                             or substitution_string_03 = pva_nom_item
                             or substitution_string_04 = pva_nom_item
                             or substitution_string_05 = pva_nom_item
                             or substitution_string_06 = pva_nom_item
                             or substitution_string_07 = pva_nom_item
                             or substitution_string_08 = pva_nom_item
                             or substitution_string_09 = pva_nom_item
                             or substitution_string_10 = pva_nom_item
                             or substitution_string_11 = pva_nom_item
                             or substitution_string_12 = pva_nom_item
                             or substitution_string_13 = pva_nom_item
                             or substitution_string_14 = pva_nom_item
                             or substitution_string_15 = pva_nom_item
                             or substitution_string_16 = pva_nom_item
                             or substitution_string_17 = pva_nom_item
                             or substitution_string_18 = pva_nom_item
                             or substitution_string_19 = pva_nom_item
                             or substitution_string_20 = pva_nom_item);
               return true;
             exception
               when no_data_found then
                 return false;
             end;*/

            return false;
        end;
    end;
  end exist_item;

  function echap_text (pva_text in varchar2)
    return varchar2 is
  begin
    return htf.escape_sc (pva_text);
  end echap_text;

  function echap_text_js (pva_text in varchar2)
    return varchar2 is
  begin
    return replace (pva_text,
                    '''',
                    '\''');
  end echap_text_js;

  function echap_text_json (pva_text in varchar2)
    return varchar2 is
  begin
    return multi_replc (pva_text,
                        '\',
                        '\\',
                        '/',
                        '\/',
                        '"',
                        '\"',
                        chr (13) || chr (10),
                        '<br \\>');
  end echap_text_json;

  function obten_parmt_url
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('QUERY_STRING');
  end obten_parmt_url;

  function obten_base_url
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('SERVER_NAME') || obten_dad_url;
  end obten_base_url;

  function obten_furtr
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('HTTP_USER_AGENT');
  end obten_furtr;

  function obten_dad_url
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('SCRIPT_NAME') || '/';
  end obten_dad_url;

  function obten_fonct_url
    return varchar2 is
  begin
    return substr (owa_util.get_cgi_env ('PATH_INFO'),
                   2);
  end obten_fonct_url;

  function obten_ip
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('REMOTE_ADDR');
  exception
    when others then
      return null;
  end obten_ip;

  function obten_lang_furtr
    return varchar2 is
    vva_lang                                varchar2 (100);
  begin
    vva_lang := owa_util.get_cgi_env ('HTTP_ACCEPT_LANGUAGE');

    if instr (vva_lang,
              ',') > 0 then
      vva_lang :=
        substr (vva_lang,
                1,
                instr (vva_lang,
                       ',') -
                1);
    end if;

    if instr (vva_lang,
              ';') > 0 then
      vva_lang :=
        substr (vva_lang,
                1,
                instr (vva_lang,
                       ';') -
                1);
    end if;

    return vva_lang;
  --return upper(aa.g_browser_language);
  end obten_lang_furtr;

  function obten_lang_aplic_deft
    return varchar2 is
    vva_lang                                varchar2 (10);
  begin
    select   flow_language
      into   vva_lang
      from   apex_aplic
     where   id = sie_07_util_pkg.nv ('APP_ID');

    return upper (vva_lang);
  end obten_lang_aplic_deft;

  function verfr_sesn_vald (pnu_sess in number)
    return boolean is
    vnu_sesn_vald                           pls_integer;
  begin
    select   1
      into   vnu_sesn_vald
      from   apex_sesn sesn
     where   sesn.id = pnu_sess and rownum = 1;

    return true;
  exception
    when no_data_found then
      return false;
  end verfr_sesn_vald;

  function hash (pva_sourc in varchar2)
    return raw is
  begin
    return dbms_crypto.hash (utl_raw.cast_to_raw (pva_sourc),
                             dbms_crypto.hash_md5);
  end;

  function hash_hexa (pva_sourc in varchar2)
    return varchar2 is
  begin
    return rawtohex (hash (pva_sourc));
  end;

  function verif_nombr_pair (pnu_nombr in number)
    return varchar2 is
  begin
    if mod (pnu_nombr,
            2) = 0 then
      return 'O';
    else
      return 'N';
    end if;
  end verif_nombr_pair;

  function obten_mesg_suprs
    return varchar2 is
    vnu_numr_page                           number (10);
    vnu_struc_aplic                         number (10);
    vva_code_mesg_suprs                     varchar2 (10);
    vva_nom_struc_aplic                     vd_sie_12_struc_aplic.nom%type;
    vva_adjec_demns                         vd_sie_12_struc_aplic_lang.adjec_demns%type;
    vva_code_prodt                          vd_i_sie_11_prodt.code%type default null;
  begin
    begin
      select   p.ref_struc_aplic,
               p.ref_code_mesg_suprs_specf
        into   vnu_struc_aplic,
               vva_code_mesg_suprs
        from   vd_sie_13_page p
       where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
    exception
      when no_data_found then
        vnu_struc_aplic := null;
        vva_code_mesg_suprs := null;
    end;

    if vva_code_mesg_suprs is null then
      if vnu_struc_aplic is not null then
        begin
          select   sal.nom,
                   sal.adjec_demns,
                   sa.ref_code_mesg_err_suprs
            into   vva_nom_struc_aplic,
                   vva_adjec_demns,
                   vva_code_mesg_suprs
            from   vd_sie_12_struc_aplic_lang sal,
                   vd_sie_12_struc_aplic sa
           where   sal.ref_struc_aplic = sa.seqnc
               and sal.ref_lang = sie_07_util_pkg.obten_lang_sesn ()
               and sa.seqnc = vnu_struc_aplic;

          if vva_code_mesg_suprs is null then
            vva_code_mesg_suprs := 'SIE.000104';
            vva_code_prodt := 'AFW';
          end if;
        exception
          when no_data_found then
            --struc aplic sans traduction
            vva_code_mesg_suprs := 'SIE.000103';
            vva_code_prodt := 'AFW';
        end;
      else
        --pas de struc aplic
        vva_code_mesg_suprs := 'SIE.000103';
        vva_code_prodt := 'AFW';
      end if;
    end if;

    if vva_adjec_demns is not null then
      vva_nom_struc_aplic := vva_adjec_demns || ' ' || vva_nom_struc_aplic;
    end if;

    --Escaper la chaine, c'est du javascript quand meme!
    return echap_text_js (sie_01_gestn_mesg_pkg.obten_mesg_par_numr (vva_code_mesg_suprs,
                                                                     vva_code_prodt,
                                                                     lower (vva_nom_struc_aplic)));
  end obten_mesg_suprs;

  function obten_nom_mois (pda_date in date)
    return varchar2 is
  begin
    return to_char (pda_date,
                    'fmmonth');
  end;

  function obten_perd (pda_debut in date,
                       pda_fin in date)
    return varchar2 is
    vva_perd                                varchar2 (50);

    function obten_date_le (pda_date in date)
      return varchar2 is
    begin
      return    'Le '
             || to_char (pda_date,
                         'FMDD ')
             || obten_nom_mois (pda_date)
             || to_char (pda_date,
                         'FM YYYY');
    end;
  begin
    if pda_debut is not null and pda_fin is not null then
      if to_char (pda_debut,
                  'YYYY-MM-DD') <> to_char (pda_fin,
                                            'YYYY-MM-DD') then
        vva_perd :=
             'Du '
          || to_char (pda_debut,
                      'FMDD');

        if extract (day from pda_debut) = 1 then
          vva_perd := vva_perd || 'er';
        end if;

        -- N'ajouter le mois que si le debut et la fin ne se trouve PAS dans le meme mois-an
        if to_char (pda_debut,
                    'YYYY-MM') <> to_char (pda_fin,
                                           'YYYY-MM') then
          vva_perd := vva_perd || ' ' || obten_nom_mois (pda_debut);
        end if;

        -- N'ajouter l'annee que si l'annee est differente
        if to_char (pda_debut,
                    'YYYY') <> to_char (pda_fin,
                                        'YYYY') then
          vva_perd :=
               vva_perd
            || ' '
            || to_char (pda_debut,
                        'YYYY');
        end if;

        vva_perd :=
             vva_perd
          || ' au '
          || to_char (pda_fin,
                      'FMDD');

        if extract (day from pda_fin) = 1 then
          vva_perd := vva_perd || 'er';
        end if;

        vva_perd :=
             vva_perd
          || ' '
          || obten_nom_mois (pda_fin)
          || to_char (pda_fin,
                      'FM YYYY');
      else
        vva_perd := obten_date_le (pda_debut);
      end if;
    elsif pda_debut is not null then
      vva_perd := obten_date_le (pda_debut);
    elsif pda_fin is not null then
      vva_perd := obten_date_le (pda_fin);
    else
      vva_perd := null;
    end if;

    return vva_perd;
  end obten_perd;

  function defnr_tablr_form_numbr (pnu_valr in number)
    return number is
  begin
    gnu_tablr_form_numbr := pnu_valr;
    return null;
  end;

  function defnr_tablr_form_varch (pva_valr in varchar2)
    return number is
  begin
    gva_tablr_form_varch := pva_valr;
    return null;
  end;

  function defnr_tablr_form_date (pda_valr in date)
    return number is
  begin
    gda_tablr_form_date := pda_valr;
    return null;
  end;

  procedure gerer_seprt_decml_item (pva_item in varchar2) is
    vva_valr_item                           varchar (32000) default v (pva_item);
  begin
    if instr (vva_valr_item,
              '.') > 0
    or instr (vva_valr_item,
              ' ') > 0
    or instr (vva_valr_item,
              '$') > 0 then
      sie_07_util_pkg.defnr_etat_sessn (pva_item,
                                        replace (replace (replace (vva_valr_item,
                                                                   '.',
                                                                   ','),
                                                          ' ',
                                                          null),
                                                 '$',
                                                 null));
    end if;
  end gerer_seprt_decml_item;

  procedure gerer_seprt_decml_page is
    vva_nom_table                           varchar2 (30);
  begin
    select   substr (process_sql_clob,
                     instr (process_sql_clob,
                            ':',
                            1) +
                     1,
                     instr (process_sql_clob,
                            ':',
                            1,
                            2) -
                     instr (process_sql_clob,
                            ':',
                            1) -
                     1)
               nom_table
      into   vva_nom_table
      from   apex_page_procs
     where   flow_id = sie_07_util_pkg.nv ('APP_ID')
         and flow_step_id = sie_07_util_pkg.nv ('APP_PAGE_ID')
         and process_type = 'DML_FETCH_ROW';

    for rec_item
      in (select   name,
                   format_mask
            from   apex_item_page aip,
                   all_tab_columns atc
           where   flow_id = sie_07_util_pkg.nv ('APP_ID')
               and flow_step_id = sie_07_util_pkg.nv ('APP_PAGE_ID')
               and source is not null
               and source_type = 'DB_COLUMN'
               and display_as = 'TEXT'
               and table_name = vva_nom_table
               and atc.data_type = 'NUMBER'
               and atc.column_name = aip.source
               and owner = sie_11_aplic_pkg.obten_schem ()) loop
      gerer_seprt_decml_item (rec_item.name);
    end loop;
  exception
    when no_data_found then
      null;
    when too_many_rows then
      null;
  end gerer_seprt_decml_page;

  procedure gerer_seprt_decml_list_item (pva_liste_item varchar2) is
    vre_liste_item                          apex_application_global.vc_arr2 default string_to_table (pva_liste_item);
  begin
    if vre_liste_item.count () != 0 then
      for i in vre_liste_item.first () .. vre_liste_item.last () loop
        gerer_seprt_decml_item (vre_liste_item (i));
      end loop;
    end if;
  end gerer_seprt_decml_list_item;

  procedure gerer_seprt_decml_g_fxx (pre_tabl_g_fxx in out nocopy apex_application_global.vc_arr2) is
  begin
    if pre_tabl_g_fxx.count () != 0 then
      for i in pre_tabl_g_fxx.first () .. pre_tabl_g_fxx.last () loop
        begin
          if instr (pre_tabl_g_fxx (i),
                    '.') > 0
          or instr (pre_tabl_g_fxx (i),
                    ' ') > 0
          or instr (pre_tabl_g_fxx (i),
                    '$') > 0 then
            pre_tabl_g_fxx (i) :=
              to_number (replace (replace (replace (pre_tabl_g_fxx (i),
                                                    '.',
                                                    ','),
                                           ' ',
                                           ''),
                                  '$',
                                  ''));
          end if;
        exception
          when others then
            raise;
        end;
      end loop;
    end if;
  end gerer_seprt_decml_g_fxx;

  procedure gerer_seprt_decml_g_fxx (pva_liste_g_f varchar2) is
    vre_liste_item                          apex_application_global.vc_arr2 default string_to_table (pva_liste_g_f);
  begin
    if vre_liste_item.count () != 0 then
      for i in vre_liste_item.first () .. vre_liste_item.last () loop
        case vre_liste_item (i)
          when 1 then
            gerer_seprt_decml_g_fxx (aa.g_f01);
          when 2 then
            gerer_seprt_decml_g_fxx (aa.g_f02);
          when 3 then
            gerer_seprt_decml_g_fxx (aa.g_f03);
          when 4 then
            gerer_seprt_decml_g_fxx (aa.g_f04);
          when 5 then
            gerer_seprt_decml_g_fxx (aa.g_f05);
          when 6 then
            gerer_seprt_decml_g_fxx (aa.g_f06);
          when 7 then
            gerer_seprt_decml_g_fxx (aa.g_f07);
          when 8 then
            gerer_seprt_decml_g_fxx (aa.g_f08);
          when 9 then
            gerer_seprt_decml_g_fxx (aa.g_f09);
          when 10 then
            gerer_seprt_decml_g_fxx (aa.g_f10);
          when 11 then
            gerer_seprt_decml_g_fxx (aa.g_f11);
          when 12 then
            gerer_seprt_decml_g_fxx (aa.g_f12);
          when 13 then
            gerer_seprt_decml_g_fxx (aa.g_f13);
          when 14 then
            gerer_seprt_decml_g_fxx (aa.g_f14);
          when 15 then
            gerer_seprt_decml_g_fxx (aa.g_f15);
          when 16 then
            gerer_seprt_decml_g_fxx (aa.g_f16);
          when 17 then
            gerer_seprt_decml_g_fxx (aa.g_f17);
          when 18 then
            gerer_seprt_decml_g_fxx (aa.g_f18);
          when 19 then
            gerer_seprt_decml_g_fxx (aa.g_f19);
          when 20 then
            gerer_seprt_decml_g_fxx (aa.g_f20);
          when 21 then
            gerer_seprt_decml_g_fxx (aa.g_f21);
          when 22 then
            gerer_seprt_decml_g_fxx (aa.g_f22);
          when 23 then
            gerer_seprt_decml_g_fxx (aa.g_f23);
          when 24 then
            gerer_seprt_decml_g_fxx (aa.g_f24);
          when 25 then
            gerer_seprt_decml_g_fxx (aa.g_f25);
          when 26 then
            gerer_seprt_decml_g_fxx (aa.g_f26);
          when 27 then
            gerer_seprt_decml_g_fxx (aa.g_f27);
          when 28 then
            gerer_seprt_decml_g_fxx (aa.g_f28);
          when 29 then
            gerer_seprt_decml_g_fxx (aa.g_f29);
          when 30 then
            gerer_seprt_decml_g_fxx (aa.g_f30);
          when 31 then
            gerer_seprt_decml_g_fxx (aa.g_f31);
          when 32 then
            gerer_seprt_decml_g_fxx (aa.g_f32);
          when 33 then
            gerer_seprt_decml_g_fxx (aa.g_f33);
          when 34 then
            gerer_seprt_decml_g_fxx (aa.g_f34);
          when 35 then
            gerer_seprt_decml_g_fxx (aa.g_f35);
          when 36 then
            gerer_seprt_decml_g_fxx (aa.g_f36);
          when 37 then
            gerer_seprt_decml_g_fxx (aa.g_f37);
          when 38 then
            gerer_seprt_decml_g_fxx (aa.g_f38);
          when 39 then
            gerer_seprt_decml_g_fxx (aa.g_f39);
          when 40 then
            gerer_seprt_decml_g_fxx (aa.g_f40);
          when 41 then
            gerer_seprt_decml_g_fxx (aa.g_f41);
          when 42 then
            gerer_seprt_decml_g_fxx (aa.g_f42);
          when 43 then
            gerer_seprt_decml_g_fxx (aa.g_f43);
          when 44 then
            gerer_seprt_decml_g_fxx (aa.g_f44);
          when 45 then
            gerer_seprt_decml_g_fxx (aa.g_f45);
          when 46 then
            gerer_seprt_decml_g_fxx (aa.g_f46);
          when 47 then
            gerer_seprt_decml_g_fxx (aa.g_f47);
          when 48 then
            gerer_seprt_decml_g_fxx (aa.g_f48);
          when 49 then
            gerer_seprt_decml_g_fxx (aa.g_f49);
          when 50 then
            gerer_seprt_decml_g_fxx (aa.g_f50);
        end case;
      end loop;
    end if;
  end gerer_seprt_decml_g_fxx;

  function encry_clob (pcl_clob in clob,
                       pra_cle in raw)
    return blob is
    vbl_blob                                blob;
  begin
    dbms_lob.createtemporary (vbl_blob,
                              true);
    dbms_crypto.encrypt (vbl_blob,
                         pcl_clob,
                         dbms_crypto.aes_cbc_pkcs5,
                         pra_cle);
    return vbl_blob;
  end encry_clob;

  function decry_clob (pbl_blob in blob,
                       pra_cle in raw)
    return clob is
    vlc_clob                                clob;
  begin
    dbms_lob.createtemporary (vlc_clob,
                              true);
    dbms_crypto.decrypt (vlc_clob,
                         pbl_blob,
                         dbms_crypto.aes_cbc_pkcs5,
                         pra_cle);
    return vlc_clob;
  end decry_clob;

  function multi_replc (pva_valr in varchar2,
                        pva_valr_rechr_1 in varchar2,
                        pva_valr_rempl_1 in varchar2,
                        pva_valr_rechr_2 in varchar2 default null,
                        pva_valr_rempl_2 in varchar2 default null,
                        pva_valr_rechr_3 in varchar2 default null,
                        pva_valr_rempl_3 in varchar2 default null,
                        pva_valr_rechr_4 in varchar2 default null,
                        pva_valr_rempl_4 in varchar2 default null,
                        pva_valr_rechr_5 in varchar2 default null,
                        pva_valr_rempl_5 in varchar2 default null,
                        pva_valr_rechr_6 in varchar2 default null,
                        pva_valr_rempl_6 in varchar2 default null,
                        pva_valr_rechr_7 in varchar2 default null,
                        pva_valr_rempl_7 in varchar2 default null,
                        pva_valr_rechr_8 in varchar2 default null,
                        pva_valr_rempl_8 in varchar2 default null,
                        pva_valr_rechr_9 in varchar2 default null,
                        pva_valr_rempl_9 in varchar2 default null,
                        pva_valr_rechr_10 in varchar2 default null,
                        pva_valr_rempl_10 in varchar2 default null)
    return varchar2 is
  begin
    return replace (replace (replace (replace (replace (replace (replace (replace (replace (replace (pva_valr,
                                                                                                     pva_valr_rechr_1,
                                                                                                     pva_valr_rempl_1),
                                                                                            pva_valr_rechr_2,
                                                                                            pva_valr_rempl_2),
                                                                                   pva_valr_rechr_3,
                                                                                   pva_valr_rempl_3),
                                                                          pva_valr_rechr_4,
                                                                          pva_valr_rempl_4),
                                                                 pva_valr_rechr_5,
                                                                 pva_valr_rempl_5),
                                                        pva_valr_rechr_6,
                                                        pva_valr_rempl_6),
                                               pva_valr_rechr_7,
                                               pva_valr_rempl_7),
                                      pva_valr_rechr_8,
                                      pva_valr_rempl_8),
                             pva_valr_rechr_9,
                             pva_valr_rempl_9),
                    pva_valr_rechr_10,
                    pva_valr_rempl_10);
  end multi_replc;

  function revrs_chain (pva_chain in varchar2)
    return varchar2 is
    vva_retrn                               varchar2 (100);
  begin
    if pva_chain is not null then
      for i in reverse 1 .. length (pva_chain) loop
        vva_retrn :=
             vva_retrn
          || substr (pva_chain,
                     i,
                     1);
      end loop;
    end if;

    return vva_retrn;
  end revrs_chain;

  function obten_prefr (pva_nom_prefr in varchar2)
    return varchar2 is
  begin
    return wwv_flow_preferences.get_preference (pva_nom_prefr);
  end;

  function obten_carct_entre (pva_chain in varchar2,
                              pva_carct_rechr_debut in varchar2,
                              pnu_insta_debut in number,
                              pva_carct_rechr_fin in varchar2,
                              pnu_insta_fin in number,
                              pnu_debut_rechr in number default 1)
    return varchar2 is
    vnu_debut                               pls_integer;
    vnu_fin                                 pls_integer;
  begin
    --trouver le debut
    vnu_debut :=
      instr (pva_chain,
             pva_carct_rechr_debut,
             pnu_debut_rechr,
             pnu_insta_debut);
    vnu_fin :=
      instr (pva_chain,
             pva_carct_rechr_fin,
             vnu_debut + 1,
             pnu_insta_fin);
    return substr (pva_chain,
                   vnu_debut + 1,
                   vnu_fin - vnu_debut - 1);
  end obten_carct_entre;

  -- D'apres OWA_UTIL.WHO_CALLED_ME

  procedure procd_appel (pva_propr   out varchar2,
                         pva_nom   out varchar2,
                         pnu_numr_ligne   out number,
                         pva_type   out varchar2,
                         pnu_pile_suplm in number default 0) is
    vnu_entre_rechr                         pls_integer default 3 + pnu_pile_suplm;
    vva_pile                                varchar2 (4096) default dbms_utility.format_call_stack;
    vnu_pos                                 pls_integer;
    vbo_pile_trouve                         boolean default false;
    vva_ligne                               varchar2 (255);
    vva_temp                                varchar2 (255);
    vnu_compt_pile                          pls_integer := 0;
  begin
    loop
      vnu_pos :=
        instr (vva_pile,
               chr (10));
      exit when (vnu_compt_pile = vnu_entre_rechr
              or vnu_pos is null
              or vnu_pos = 0);
      vva_ligne :=
        substr (vva_pile,
                1,
                vnu_pos - 1);
      vva_pile :=
        substr (vva_pile,
                vnu_pos + 1);

      if not vbo_pile_trouve then
        if vva_ligne like '%handle%number%name%' then
          vbo_pile_trouve := true;
        end if;
      else
        vnu_compt_pile := vnu_compt_pile + 1;

        -- vnu_compt_pile =
        -- 1 : Cette procedure
        -- 2 : Procedure appelante de CETTE procedure
        -- 3 a vnu_entre_rechr - 1: Procedures appelantes de procs intermediaires
        -- vnu_entre_rechr : Procedure appelante de celle interessee

        if vnu_compt_pile = vnu_entre_rechr then
          vnu_pos :=
            instr (vva_ligne,
                   ' ');

          if vnu_pos > 0 then
            vva_temp :=
              ltrim (substr (vva_ligne,
                             vnu_pos));
            vnu_pos :=
              instr (vva_temp,
                     ' ');
          end if;

          if vnu_pos > 0 then
            pnu_numr_ligne :=
              to_number (substr (vva_temp,
                                 1,
                                 vnu_pos - 1));
            vva_ligne :=
              ltrim (substr (vva_temp,
                             vnu_pos));
          else
            pnu_numr_ligne := 0;
          end if;

          vnu_pos :=
            case
              when vva_ligne like 'pr%' then length ('procedure ')
              when vva_ligne like 'fun%' then length ('function ')
              when vva_ligne like 'package body%' then length ('package body ')
              when vva_ligne like 'pack%' then length ('package ')
              when vva_ligne like 'anonymous%' then length ('anonymous block ')
              else null
            end;

          if vnu_pos is not null then
            pva_type :=
              ltrim (rtrim (upper (substr (vva_ligne,
                                           1,
                                           vnu_pos - 1))));
          else
            pva_type := 'TRIGGER';
          end if;

          vva_ligne :=
            substr (vva_ligne,
                    nvl (vnu_pos, 1));
          vnu_pos :=
            instr (vva_ligne,
                   '.');
          pva_propr :=
            ltrim (rtrim (substr (vva_ligne,
                                  1,
                                  vnu_pos - 1)));
          pva_nom :=
            ltrim (rtrim (substr (vva_ligne,
                                  vnu_pos + 1)));
        end if;
      end if;
    end loop;
  end;

  function procd_appel (pnu_pile_suplm in number default 0)
    return varchar2 is
    vva_propr                               varchar2 (30);
    vva_nom                                 varchar2 (100);
    vnu_numr_ligne                          number;
    vva_type                                varchar2 (30);
  begin
    procd_appel (vva_propr,
                 vva_nom,
                 vnu_numr_ligne,
                 vva_type,
                 pnu_pile_suplm + 1                                     -- Il faut ajouter 1 pour compter cette fonction
                                   );
    return vva_propr || '.' || vva_nom || '(' || vnu_numr_ligne || ')';
  end;

  function procd_courn
    return varchar2 is
  begin
    return procd_appel ();
  end;

  function obten_aplic_tradc_courn (pnu_aplic_base in number)
    return number is
    vnu_translation_flow_id                 number;
  begin
    select   translation_flow_id
      into   vnu_translation_flow_id
      from   apex_tradc
     where   primary_language_flow_id = pnu_aplic_base
         and translation_flow_language_code = sie_01_lang_pkg.obten_code_lang_sesn ();

    return vnu_translation_flow_id;
  exception
    when others then
      return pnu_aplic_base;
  end obten_aplic_tradc_courn;

  procedure defnr_lang_sesn (pva_code_deft in varchar2 default null) is
  begin
    /* defnr_etat_sessn ('FSP_LANGUAGE_PREFERENCE',
                       sie_11_prodt_pkg.obten_code_lang_sesn (pva_code_deft));*/
    defnr_etat_sessn ('FSP_LANGUAGE_PREFERENCE',
                      'fr-ca');
  end defnr_lang_sesn;

  function valid_numr_entr (pva_valr in varchar)
    return varchar2 is
  begin
    if to_number (replace (pva_valr,
                           ' ',
                           null)) = trunc (to_number (replace (pva_valr,
                                                               ' ',
                                                               null))) then
      return 'O';
    else
      return 'N';
    end if;
  exception
    when others then
      return 'N';
  end valid_numr_entr;

  procedure ajout_info_debug (pva_valr in varchar2) is
    vva_ts                                  varchar2 (30);
  begin
    if aa.g_debug then
      vva_ts := to_char (systimestamp - gti_timsp_initl);
      vva_ts :=
        substr (vva_ts,
                instr (vva_ts,
                       ':',
                       -1) +
                1,
                5);

      aa.debug ('APEXFramework - ' || pva_valr);
    end if;
  end ajout_info_debug;

  procedure valdr_date_formt (pva_date in varchar2,
                              pva_formt in varchar2) is
    vda_date                                date;
  begin
    vda_date :=
      to_date (pva_date,
               pva_formt);
  exception
    when others then
      if sqlcode in (-1861, -1839) then
        sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000101',
                                                 pva_date,
                                                 pva_code_prodt             => 'AFW');
      else
        raise;
      end if;
  end valdr_date_formt;

  function valid_si_modfc (pva_valr_1 in varchar2,
                           pva_valr_2 in varchar2)
    return boolean is
  begin
    if (pva_valr_1 = pva_valr_2)
    or (pva_valr_1 is null and pva_valr_2 is null) then
      return false;
    elsif (pva_valr_1 is null and pva_valr_2 is not null)
       or (pva_valr_1 is not null and pva_valr_2 is null)
       or (pva_valr_1 <> pva_valr_2) then
      return true;
    end if;
  end valid_si_modfc;

  function valid_si_modfc (pnu_valr_1 in number,
                           pnu_valr_2 in number)
    return boolean is
  begin
    if (pnu_valr_1 = pnu_valr_2)
    or (pnu_valr_1 is null and pnu_valr_2 is null) then
      return false;
    elsif (pnu_valr_1 is null and pnu_valr_2 is not null)
       or (pnu_valr_1 is not null and pnu_valr_2 is null)
       or (pnu_valr_1 <> pnu_valr_2) then
      return true;
    end if;
  end valid_si_modfc;

  function valid_si_modfc (pda_valr_1 in date,
                           pda_valr_2 in date)
    return boolean is
  begin
    if (pda_valr_1 = pda_valr_2)
    or (pda_valr_1 is null and pda_valr_2 is null) then
      return false;
    elsif (pda_valr_1 is null and pda_valr_2 is not null)
       or (pda_valr_1 is not null and pda_valr_2 is null)
       or (pda_valr_1 <> pda_valr_2) then
      return true;
    end if;
  end valid_si_modfc;

  procedure ajout_libr_javsc (pva_nom in varchar2,
                              pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                              pva_versn in varchar2 default null,
                              pva_saut_extns in boolean default false) is
  begin
    apex_javascript.add_library (pva_nom,
                                 pva_reprt,
                                 pva_versn,
                                 p_skip_extension           => pva_saut_extns);
  end ajout_libr_javsc;

  procedure ajout_code_javsc_charg (pva_code in varchar2,
                                    pva_cle in varchar2 default null) is
  begin
    apex_javascript.add_onload_code (pva_code,
                                     pva_cle);
  end ajout_code_javsc_charg;

  procedure ajout_libr_css (pva_nom in varchar2,
                            pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                            pva_versn in varchar2 default null,
                            pva_saut_extns in boolean default false) is
  begin
    apex_css.add_file (pva_nom,
                       pva_reprt,
                       pva_versn,
                       p_skip_extension           => pva_saut_extns);
  end ajout_libr_css;

  procedure ajout_css (pva_style in varchar2,
                       pbo_inser_en_ligne in boolean default true) is
  begin
    if pbo_inser_en_ligne then
      sie_15_htp_pkg.ouvri_bals ('style',
                                 'type',
                                 'text/css');
      sie_15_htp_pkg.ecrir (pva_style);
      sie_15_htp_pkg.fermr_bals ('style');
    else
      apex_css.add (pva_style);
    end if;
  end;

  function verif_presn_role (pva_role in varchar2)
    return boolean is
    vnu_role_exist                          pls_integer default 0;
  begin
    select   count (1)
      into   vnu_role_exist
      from   user_role_privs
     where   granted_role = pva_role and rownum = 1;

    return vnu_role_exist = 1;
  end verif_presn_role;

  function obten_evalt_code_utils (pva_utils in varchar2)
    return varchar2 is
    vva_utils                               varchar2 (30);
    vva_utils_compl                         varchar2 (61);
  begin
    if instr (pva_utils,
              ':') > 0 then
      vva_utils_compl :=
        substr (pva_utils,
                1,
                instr (pva_utils,
                       ':') -
                1);
    else
      vva_utils_compl := pva_utils;
    end if;

    if instr (vva_utils_compl,
              '@') > 0 then
      vva_utils :=
        substr (vva_utils_compl,
                instr (vva_utils_compl,
                       '@') +
                1);
    else
      vva_utils := vva_utils_compl;
    end if;

    return upper (vva_utils);
  end obten_evalt_code_utils;

  procedure genr_css_entet_page is
  begin
    if gva_css_entet_page is not null then
      sie_15_htp_pkg.ouvri_bals ('style',
                                 'type',
                                 'text/css');
      sie_15_htp_pkg.ecrir (gva_css_entet_page);
      sie_15_htp_pkg.fermr_bals ('style');
    end if;
  end genr_css_entet_page;

  procedure genr_javsc_entet_page is
  begin
    if gva_javsc_entet_page is not null then
      sie_15_htp_pkg.ouvri_bals ('script',
                                 'type',
                                 'text/javascript');
      sie_15_htp_pkg.ecrir (gva_javsc_entet_page);
      sie_15_htp_pkg.fermr_bals ('script');
    end if;
  end genr_javsc_entet_page;

  function nv_force (pva_item in varchar2)
    return number is
    vnu_numbr                               number;
    vnu_app                                 number default v ('APP_ID');
    vnu_insta                               number default apex_application.g_instance;
  begin
    select   to_number (item_value_vc2)
      into   vnu_numbr
      from   apex_sesn_valr_item
     where   flow_id = vnu_app and item_name = pva_item and flow_instance = vnu_insta;

    return vnu_numbr;
  exception
    when others then
      return null;
  end nv_force;

  procedure aret_trait_page_apex is
  begin
    --aa.g_unrecoverable_error := true;
    apex_application.stop_apex_engine;
  exception
    when apex_application.e_stop_apex_engine then
      null;
  -- Ne pas propager le RAISE de l'exception autrement, on doit modifier tous les appels de ARET_TRAIT_PAGE_APEX
  --raise;
  end aret_trait_page_apex;

  function obten_reslt_expre_plsql (pva_expre_plsql in varchar2)
    return varchar2 is
  begin
    return apex_plugn_util.get_plsql_expression_result (pva_expre_plsql);
  end obten_reslt_expre_plsql;

  function obten_reslt_expre_plsql_bool (pva_expre_plsql in varchar2)
    return boolean is
  begin
    return apex_plugn_util.get_plsql_expr_result_boolean (pva_expre_plsql);
  end obten_reslt_expre_plsql_bool;

  function obten_schem_apex
    return varchar2 is
  begin
    return sie_07_util_noyau_pkg.obten_schem_apex;
  end obten_schem_apex;

  function obten_versn_apex
    return apex_release.version_no%type is
    vva_versn                               apex_release.version_no%type;
  begin
    select   version_no
      into   vva_versn
      from   apex_release;

    return vva_versn;
  end obten_versn_apex;

  function purgr_html (pva_chain in varchar2)
    return varchar2 is
  begin
    return apex_aplic_util.striphtml (pva_chain);
  end purgr_html;

  function encry_valr (pva_valr in varchar2)
    return raw is
  begin
    return dbms_crypto.encrypt (utl_i18n.string_to_raw (pva_valr,
                                                        gva_charc_set),
                                gnu_mod_encry,
                                gra_cle_encry_base);
  end encry_valr;
begin
  gti_timsp_initl := systimestamp;
end sie_07_util_pkg;
/

Prompt Package Body SIE_08_URL_PKG;
/* Formatted on 04/12/2013 11:35:12 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_08_URL_PKG" as
  function obten_sesn
    return number is
  begin
    return sie_12_sesn_pkg.obten_sesn;
  end obten_sesn;

  procedure redrg_page_postn (pva_url in varchar2) is
  begin
    owa_util.redirect_url (pva_url);
    sie_07_util_pkg.aret_trait_page_apex;
  end;

  procedure redrg_page_rendr (pva_url in varchar2) is
  begin
    htp.p (' <script type="text/javascript"> 
          <!-- Rediriger
          self.location.href="' || pva_url || '";
          //--></script>');
    sie_07_util_pkg.aret_trait_page_apex;
  end redrg_page_rendr;

  procedure redrg_page_acuei_postn is
  begin
    --Todo - Vérifier que la page d'accueil n'est pas la 0, si c'est le cas, remonter à la page d'accueil spécifiée au système, sinon, page de login de l'application en cours.
    redrg_page_postn (
         'f?p='
      || sie_11_prodt_pkg.obten_numr_apex_aplic_acuei
      || ':'
      || sie_11_prodt_pkg.obten_numr_apex_page_acuei
      || ':'
      || sie_12_sesn_pkg.obten_sesn
    );
  end redrg_page_acuei_postn;

  procedure redrg_page_acuei_rendr is
  begin
    redrg_page_rendr (
         'f?p='
      || sie_11_prodt_pkg.obten_numr_apex_aplic_acuei
      || ':'
      || sie_11_prodt_pkg.obten_numr_apex_page_acuei
      || ':'
      || sie_12_sesn_pkg.obten_sesn
    );
  end redrg_page_acuei_rendr;

  procedure redrg_page_conxn_rendr is
  begin
    redrg_page_rendr (sie_11_prodt_pkg.obten_url_authe_cible_sesn);
  end redrg_page_conxn_rendr;

  procedure redrg_navgt_ilegl is
  begin
    if sie_12_dialg_ifram_pkg.valdr_dialg_ouvert then
      sie_12_dialg_ifram_pkg.suprm_dialg_sesn;
      sie_21_plugn_dialg_ifram_pkg.redrg_page_acuei_js;
    else
      if sie_12_utils_pkg.obten_usagr_conct is not null then
        redrg_page_acuei_rendr;
      else
        redrg_page_conxn_rendr;
      end if;
    end if;
  end redrg_navgt_ilegl;

  function genr_url (pnu_numr_aplic in number default sie_11_aplic_pkg.obten_numr_apex_aplic,
                     pnu_numr_page in number default sie_13_page_pkg.obten_numr_apex_page,
                     pva_nom_varbl_1 in varchar2 default null,
                     pva_valr_varbl_1 in varchar2 default null,
                     pva_nom_varbl_2 in varchar2 default null,
                     pva_valr_varbl_2 in varchar2 default null,
                     pva_nom_varbl_3 in varchar2 default null,
                     pva_valr_varbl_3 in varchar2 default null,
                     pva_nom_varbl_4 in varchar2 default null,
                     pva_valr_varbl_4 in varchar2 default null,
                     pva_nom_varbl_5 in varchar2 default null,
                     pva_valr_varbl_5 in varchar2 default null,
                     pva_nom_varbl_6 in varchar2 default null,
                     pva_valr_varbl_6 in varchar2 default null,
                     pva_nom_varbl_7 in varchar2 default null,
                     pva_valr_varbl_7 in varchar2 default null,
                     pva_nom_varbl_8 in varchar2 default null,
                     pva_valr_varbl_8 in varchar2 default null,
                     pva_nom_varbl_9 in varchar2 default null,
                     pva_valr_varbl_9 in varchar2 default null,
                     pva_nom_varbl_10 in varchar2 default null,
                     pva_valr_varbl_10 in varchar2 default null,
                     pva_sesn in varchar2 default null,
                     pva_optio_reqst in varchar2 default null,
                     pva_optio_clear_page in varchar2 default null,
                     pva_mode_debg in varchar2 default 'NO',
                     pva_indic_afich_valr_sesn in varchar2 default 'O')
    return varchar2 is
    vva_url_const                           varchar2 (5000) default 'f?p=';
    vva_list_parmt                          varchar2 (2000);
    vva_list_valr                           varchar2 (2000);
  begin
    -- Ajouter les numeros d'application de page
    vva_url_const := vva_url_const || pnu_numr_aplic || ':' || pnu_numr_page;

    -- Ajouter le numero de session et des parametres constants
    vva_url_const :=
         vva_url_const
      || ':'
      || case pva_indic_afich_valr_sesn when 'O' then nvl (pva_sesn, sie_12_sesn_pkg.obten_sesn) else null end
      || ':%OPT_REQ%:'
      || pva_mode_debg
      || ':%OPT_CLR%:';
    vva_url_const :=
      replace (vva_url_const,
               '%OPT_REQ%',
               pva_optio_reqst);
    vva_url_const :=
      replace (vva_url_const,
               '%OPT_CLR%',
               pva_optio_clear_page);

    -- Construire la liste des variables
    if pva_nom_varbl_1 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_1);

      if pva_valr_varbl_1 != '#SIDF#' then
        vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_1);
      else
        vva_list_valr := vva_list_valr || ',' || pva_valr_varbl_1;
      end if;
    end if;

    if pva_nom_varbl_2 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_2);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_2);
    end if;

    if pva_nom_varbl_3 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_3);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_3);
    end if;

    if pva_nom_varbl_4 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_4);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_4);
    end if;

    if pva_nom_varbl_5 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_5);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_5);
    end if;

    if pva_nom_varbl_6 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_6);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_6);
    end if;

    if pva_nom_varbl_7 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_7);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_7);
    end if;

    if pva_nom_varbl_8 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_8);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_8);
    end if;

    if pva_nom_varbl_9 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_9);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_9);
    end if;

    if pva_nom_varbl_10 is not null then
      vva_list_parmt := vva_list_parmt || ',' || apex_util.url_encode (pva_nom_varbl_10);
      vva_list_valr := vva_list_valr || ',' || apex_util.url_encode (pva_valr_varbl_10);
    end if;

    -- Retirer le premier caractere superflu
    if vva_list_parmt is not null then
      vva_list_parmt :=
        substr (vva_list_parmt,
                2);
    end if;

    if vva_list_valr is not null then
      vva_list_valr :=
        substr (vva_list_valr,
                2);
    end if;

    -- Ajouter la liste des variables a l'URL
    vva_url_const := vva_url_const || vva_list_parmt || ':' || vva_list_valr;
    return vva_url_const;
  end genr_url;

  function genr_url_en_contx (pnu_numr_aplic number default sie_11_aplic_pkg.obten_numr_apex_aplic,
                              pnu_numr_page number default sie_13_page_pkg.obten_numr_apex_page,
                              pva_sesn varchar2 default sie_12_sesn_pkg.obten_sesn,
                              pva_optio_reqst in varchar2 default null,
                              pva_mode_debg in varchar2 default 'NO',
                              pva_optio_clear_page in varchar2 default null,
                              pva_sidf varchar2 default null,
                              pnu_sspc number default null,
                              pva_sapc varchar2 default null,
                              pva_scpc varchar2 default null,
                              pnu_sspi number default null,
                              pva_sapi varchar2 default null,
                              pva_scpi varchar2 default null,
                              pnu_snpi number default null)
    return varchar2 is
  begin
    return genr_url (pnu_numr_aplic             => pnu_numr_aplic,
                     pnu_numr_page              => pnu_numr_page,
                     pva_nom_varbl_1            => 'SIDF',
                     pva_valr_varbl_1           => pva_sidf,
                     pva_nom_varbl_2            => 'SSPC',
                     pva_valr_varbl_2           => pnu_sspc,
                     pva_nom_varbl_3            => 'SCPC',
                     pva_valr_varbl_3           => pva_scpc,
                     pva_nom_varbl_4            => 'SAPC',
                     pva_valr_varbl_4           => pva_sapc,
                     pva_nom_varbl_5            => 'SSPI',
                     pva_valr_varbl_5           => pnu_sspi,
                     pva_nom_varbl_6            => 'SCPI',
                     pva_valr_varbl_6           => pva_scpi,
                     pva_nom_varbl_7            => 'SAPI',
                     pva_valr_varbl_7           => pva_sapi,
                     pva_nom_varbl_8            => 'SNPI',
                     pva_valr_varbl_8           => pnu_snpi,
                     pva_sesn                   => pva_sesn,
                     pva_optio_reqst            => pva_optio_reqst,
                     pva_mode_debg              => pva_mode_debg,
                     pva_optio_clear_page       => pva_optio_clear_page);
  end;

  procedure decnt_et_redrg_page_login is
  begin
    apex_custom_auth.logout (sie_11_aplic_pkg.obten_numr_apex_aplic,
                             sie_11_aplic_pkg.obten_numr_apex_aplic || ':' || sie_11_aplic_pkg.obten_page_conxn);
    sie_07_util_pkg.aret_trait_page_apex;
  end decnt_et_redrg_page_login;

  function genr_do_submt3 (pva_reqst in varchar2,
                           pnu_sidf in number default knu_sidf,
                           pnu_sspc in number default null,
                           pva_sapc in varchar2 default null,
                           pnu_sspi in number default null,
                           pva_sapi in varchar2 default null)
    return varchar2 is
  begin
    return    'javascript:doSubmit3('
           || case when pva_reqst is not null then '''' || pva_reqst || '''' else 'null' end
           || ',null,'
           || nvl (to_char (pnu_sspc), 'null')
           || ','
           || nvl (pva_sapc, 'null')
           || ','
           || nvl (to_char (pnu_sspi), 'null')
           || ','
           || nvl (pva_sapi, 'null')
           || ');';
  end genr_do_submt3;

  procedure obten_pdf_de_url (pva_url in    varchar2,
                              pbo_blob in out nocopy blob) is
    vre_http_reqt                           utl_http.req;
    vre_http_repns                          utl_http.resp;
    vra_piec                                raw (32767);
  begin
    dbms_lob.createtemporary (pbo_blob,
                              false);

    vre_http_reqt := utl_http.begin_request (pva_url);
    vre_http_repns := utl_http.get_response (vre_http_reqt);

    begin
      loop
        utl_http.read_raw (vre_http_repns,
                           vra_piec,
                           32767);
        dbms_lob.writeappend (pbo_blob,
                              utl_raw.length (vra_piec),
                              vra_piec);
      end loop;
    exception
      when utl_http.end_of_body then
        utl_http.end_response (vre_http_repns);
    end;
  end obten_pdf_de_url;

  function obten_protc_reqt
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('REQUEST_PROTOCOL');
  end obten_protc_reqt;

  function obten_port_servr
    return number is
  begin
    return owa_util.get_cgi_env ('SERVER_PORT');
  end obten_port_servr;

  function obten_host_http
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('HTTP_HOST');
  end obten_host_http;

  function obten_nom_scrip
    return varchar2 is
  begin
    return owa_util.get_cgi_env ('SCRIPT_NAME');
  end obten_nom_scrip;
end sie_08_url_pkg;
/

Prompt Package Body SIE_09_PILE_PKG;
/* Formatted on 04/12/2013 11:35:12 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_09_PILE_PKG" as
  type typ_elemn_pile is record
  (
    niv_recrs                               pls_integer,
    mode_pile                               varchar2 (3),
    valr_rowid                              rowid,
    valr_number                             number,
    valr_varch                              varchar2 (4000)
  );

  type typ_pile is table of typ_elemn_pile
                     index by pls_integer;

  type typ_defnt_pile is record
  (
    nom                                     varchar2 (30),
    niv_recrs_courn                         pls_integer,
    mode_pile_courn                         varchar2 (3),
    elemn                                   typ_pile
  );

  type typ_defnt_piles is table of typ_defnt_pile
                            index by pls_integer;

  gnu_nombr_recrv_max                     pls_integer default 10;
  gtb_piles                               typ_defnt_piles;

  procedure init_pile (pva_nom_pile in varchar2) is
    vbo_pile_trouv                          boolean default false;
  begin
    --Ajouter la pile dans la session

    --Trouver l'endroit où ajouter la pile
    if gtb_piles.count () != 0 then
      for i in gtb_piles.first () .. gtb_piles.last () loop
        if gtb_piles.exists (i) then
          if gtb_piles (i).nom = pva_nom_pile then
            vbo_pile_trouv := true;

            if gtb_piles (i).niv_recrs_courn >= gnu_nombr_recrv_max then
              raise_application_error (
                -20999,
                   'Nombre maximum de requêtes récursives atteint ('
                || gnu_nombr_recrv_max
                || ') pour la pile "'
                || gtb_piles (i).nom
                || '".'
              );
            end if;

            gtb_piles (i).niv_recrs_courn := gtb_piles (i).niv_recrs_courn + 1;
            gtb_piles (i).mode_pile_courn := 'EMP';
            exit;
          end if;
        end if;
      end loop;

      if not vbo_pile_trouv then
        gtb_piles (gtb_piles.last () + 1).nom := pva_nom_pile;
        gtb_piles (gtb_piles.last ()).niv_recrs_courn := 1;
        gtb_piles (gtb_piles.last ()).mode_pile_courn := 'EMP';
      end if;
    else
      gtb_piles (1).nom := pva_nom_pile;
      gtb_piles (1).niv_recrs_courn := 1;
      gtb_piles (1).mode_pile_courn := 'EMP';
    end if;
  end;

  function obten_indic_courn (pva_nom_pile in varchar2)
    return pls_integer is
    vnu_indic_courn                         pls_integer;
  begin
    if gtb_piles.count () != 0 then
      for i in gtb_piles.first () .. gtb_piles.last () loop
        if gtb_piles.exists (i) then
          if gtb_piles (i).nom = pva_nom_pile then
            vnu_indic_courn := i;
            exit;
          end if;
        end if;
      end loop;
    else
      vnu_indic_courn := 0;
    end if;

    return vnu_indic_courn;
  end;

  function obten_niv_recrs_courn (pva_nom_pile in varchar2)
    return number is
    vnu_indic_courn                         pls_integer;
  begin
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      return gtb_piles (vnu_indic_courn).niv_recrs_courn;
    else
      return 0;
    end if;
  end;

  procedure mode_depil (pva_nom_pile in varchar2) is
    vnu_indic_courn                         pls_integer;
  begin
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).mode_pile_courn = 'DEP' then
        raise_application_error (-20999,
                                 'La pile ' || pva_nom_pile || ' est déjà en mode dépilage');
      else
        gtb_piles (vnu_indic_courn).mode_pile_courn := 'DEP';



        --trouver tous les enfants et les mettre en mode dépile
        if gtb_piles (vnu_indic_courn).elemn.count () != 0 then
          for i in gtb_piles (vnu_indic_courn).elemn.first () .. gtb_piles (vnu_indic_courn).elemn.last () loop
            if gtb_piles (vnu_indic_courn).elemn (i).niv_recrs = gtb_piles (vnu_indic_courn).niv_recrs_courn then
              gtb_piles (vnu_indic_courn).elemn (i).mode_pile := 'DEP';
            end if;
          end loop;
        end if;
      end if;
    end if;
  end;

  procedure empil_numbr (pva_nom_pile in varchar2,
                         pnu_seqnc in number) is
    vnu_indic_courn                         pls_integer;
  begin
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).mode_pile_courn = 'DEP' then
        raise_application_error (
          -20999,
          'La pile ' || pva_nom_pile || ' est en mode dépilage, impossible d''ajouter une valeur à son contenu'
        );
      end if;

      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count () + 1).valr_number := pnu_seqnc;
      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count ()).niv_recrs :=
        gtb_piles (vnu_indic_courn).niv_recrs_courn;
      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count ()).mode_pile := 'EMP';
    end if;
  end;

  procedure empil_varch (pva_nom_pile in varchar2,
                         pva_clef in varchar2) is
    vnu_indic_courn                         pls_integer;
  begin
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).mode_pile_courn = 'DEP' then
        raise_application_error (
          -20999,
          'La pile ' || pva_nom_pile || ' est en mode dépilage, impossible d''ajouter une valeur à son contenu'
        );
      end if;

      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count () + 1).valr_varch := pva_clef;
      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count ()).niv_recrs :=
        gtb_piles (vnu_indic_courn).niv_recrs_courn;
      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count ()).mode_pile := 'EMP';
    end if;
  end;

  procedure empil_rowid (pva_nom_pile in varchar2,
                         pro_rowid in rowid) is
    vnu_indic_courn                         pls_integer;
  begin
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).mode_pile_courn = 'DEP' then
        raise_application_error (
          -20999,
          'La pile ' || pva_nom_pile || ' est en mode dépilage, impossible d''ajouter une valeur à son contenu'
        );
      end if;

      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count () + 1).valr_rowid := pro_rowid;
      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count ()).niv_recrs :=
        gtb_piles (vnu_indic_courn).niv_recrs_courn;
      gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.count ()).mode_pile := 'EMP';
    end if;
  end empil_rowid;

  function depil_numbr (pva_nom_pile in varchar2)
    return number is
    vnu_indic_courn                         pls_integer;
    vnu_elemn_retr                          number;
  begin
    --on retourne pour le niveau courant
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).mode_pile_courn = 'DEP' then
        if gtb_piles (vnu_indic_courn).elemn.count () != 0 then
          if gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).mode_pile = 'DEP'
         and gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).niv_recrs =
               gtb_piles (vnu_indic_courn).niv_recrs_courn then
            vnu_elemn_retr := gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).valr_number;
            gtb_piles (vnu_indic_courn).elemn.delete (gtb_piles (vnu_indic_courn).elemn.last ());
          end if;
        end if;
      end if;
    end if;

    return vnu_elemn_retr;
  end;

  function depil_varch (pva_nom_pile in varchar2)
    return varchar2 is
    vnu_indic_courn                         pls_integer;
    vva_elemn_retr                          varchar2 (4000);
  begin
    --on retourne pour le niveau courant
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).mode_pile_courn = 'DEP' then
        if gtb_piles (vnu_indic_courn).elemn.count () != 0 then
          if gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).mode_pile = 'DEP'
         and gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).niv_recrs =
               gtb_piles (vnu_indic_courn).niv_recrs_courn then
            vva_elemn_retr := gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).valr_varch;
            gtb_piles (vnu_indic_courn).elemn.delete (gtb_piles (vnu_indic_courn).elemn.last ());
          end if;
        end if;
      end if;
    end if;

    return vva_elemn_retr;
  end;

  function depil_rowid (pva_nom_pile in varchar2)
    return rowid is
    vnu_indic_courn                         pls_integer;
    vro_elemn_retr                          rowid;
  begin
    --on retourne pour le niveau courant
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).mode_pile_courn = 'DEP' then
        if gtb_piles (vnu_indic_courn).elemn.count () != 0 then
          if gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).mode_pile = 'DEP'
         and gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).niv_recrs =
               gtb_piles (vnu_indic_courn).niv_recrs_courn then
            vro_elemn_retr := gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).valr_rowid;
            gtb_piles (vnu_indic_courn).elemn.delete (gtb_piles (vnu_indic_courn).elemn.last ());
          end if;
        end if;
      end if;
    end if;

    return vro_elemn_retr;
  end depil_rowid;

  procedure termn_utils_pile (pva_nom_pile in varchar2,
                              pbo_autor_pile_non_vide in boolean default false) is
    vnu_indic_courn                         pls_integer;
  begin
    --on retourne pour le niveau courant
    vnu_indic_courn := obten_indic_courn (pva_nom_pile);

    if vnu_indic_courn != 0 then
      if gtb_piles (vnu_indic_courn).elemn.count != 0 then
        if gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).mode_pile = 'DEP' then
          for i in reverse gtb_piles (vnu_indic_courn).elemn.first () .. gtb_piles (vnu_indic_courn).elemn.last () loop
            if gtb_piles (vnu_indic_courn).elemn.exists (i) then
              if gtb_piles (vnu_indic_courn).elemn (i).mode_pile = 'DEP'
             and gtb_piles (vnu_indic_courn).elemn (i).niv_recrs = gtb_piles (vnu_indic_courn).niv_recrs_courn then
                if pbo_autor_pile_non_vide then
                  gtb_piles (vnu_indic_courn).elemn.delete (i);
                else
                  raise_application_error (-20999,
                                           'La pile ' || pva_nom_pile || ' n''est pas vide');
                end if;
              else
                exit;
              end if;
            end if;
          end loop;
        end if;
      end if;

      --supprimer la pile
      if gtb_piles (vnu_indic_courn).niv_recrs_courn = 1 then
        gtb_piles.delete (vnu_indic_courn);
      else
        --selon le niveau de récursivité,
        if gtb_piles (vnu_indic_courn).elemn.count () = 0 then
          gtb_piles (vnu_indic_courn).niv_recrs_courn := gtb_piles (vnu_indic_courn).niv_recrs_courn - 1;
          gtb_piles (vnu_indic_courn).mode_pile_courn := 'DEP';
        else
          gtb_piles (vnu_indic_courn).niv_recrs_courn :=
            gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).niv_recrs;
          gtb_piles (vnu_indic_courn).mode_pile_courn :=
            gtb_piles (vnu_indic_courn).elemn (gtb_piles (vnu_indic_courn).elemn.last ()).mode_pile;
        end if;
      end if;
    end if;
  end termn_utils_pile;

  procedure vider_pile is
  begin
    --On vide le tout
    gtb_piles.delete ();
  end;
end sie_09_pile_pkg;
/

Prompt Package Body SIE_10_DBA_PKG;
/* Formatted on 04/12/2013 11:35:12 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_10_DBA_PKG" as
  procedure index_foreign_key (pva_schem in varchar2) is
    vva_sql_comnd                           varchar2 (32767);

    cursor cur_fk_non_index is
      select   *
        from   (select   decode (b.table_name, null, '****', null) status,
                         a.table_name,
                         a.columns columnsa,
                         b.columns columnsb,
                         constraint_name
                  from   (select     substr (a.table_name,
                                             1,
                                             30)
                                       table_name,
                                     substr (a.constraint_name,
                                             1,
                                             30)
                                       constraint_name,
                                        max (decode (position,
                                                     1, substr (column_name,
                                                                1,
                                                                30),
                                                     null))
                                     || max (decode (position,
                                                     2,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     3,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     4,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     5,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     6,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     7,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     8,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     9,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (position,
                                                     10,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (position,
                                                     11,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (position,
                                                     12,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (position,
                                                     13,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (position,
                                                     14,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (position,
                                                     15,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (position,
                                                     16,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                       columns
                              from   dba_cons_columns a,
                                     dba_constraints b
                             where   a.constraint_name = b.constraint_name
                                 and a.owner = pva_schem
                                 and b.constraint_type = 'R'
                          group by   substr (a.table_name,
                                             1,
                                             30),
                                     substr (a.constraint_name,
                                             1,
                                             30)) a,
                         (select     substr (table_name,
                                             1,
                                             30)
                                       table_name,
                                     substr (index_name,
                                             1,
                                             30)
                                       index_name,
                                        max (decode (column_position,
                                                     1, substr (column_name,
                                                                1,
                                                                30),
                                                     null))
                                     || max (decode (column_position,
                                                     2,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     3,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     4,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     5,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     6,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     7,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     8,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     9,    ', '
                                                        || substr (column_name,
                                                                   1,
                                                                   30),
                                                     null))
                                     || max (decode (column_position,
                                                     10,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (column_position,
                                                     11,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (column_position,
                                                     12,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (column_position,
                                                     13,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (column_position,
                                                     14,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (column_position,
                                                     15,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                     || max (decode (column_position,
                                                     16,    ', '
                                                         || substr (column_name,
                                                                    1,
                                                                    30),
                                                     null))
                                       columns
                              from   dba_ind_columns
                          group by   substr (table_name,
                                             1,
                                             30),
                                     substr (index_name,
                                             1,
                                             30)) b
                 where   a.table_name = b.table_name(+) and b.columns(+) like a.columns || '%')
       where   status is not null;

    vnu_nombr_index_cree                    pls_integer default 0;
  begin
    for i in cur_fk_non_index loop
      begin
        begin
          vva_sql_comnd :=
               'create index '
            || pva_schem
            || '.'
            || i.constraint_name
            || ' on '
            || pva_schem
            || '.'
            || i.table_name
            || '('
            || i.columnsa
            || ')';

          execute immediate vva_sql_comnd;
        exception
          when others then
            if sqlcode = -942 then
              null;                                                         --sie_unit.sem_dba_pkg.exect(vva_sql_comnd);
            else
              raise;
            end if;
        end;

        vnu_nombr_index_cree := vnu_nombr_index_cree + 1;
      exception
        when others then
          sie_03_journ_pkg.ecrir_journ (
               'create index '
            || pva_schem
            || '.'
            || i.constraint_name
            || ' on '
            || pva_schem
            || '.'
            || i.table_name
            || '('
            || i.columnsa
            || ')'
          );
      end;
    end loop;
  --sie_01_err_apex_pkg.ajout_mesg_infor_sesn_mesg (vnu_nombr_index_cree || ' indexes ont été créés');
  end;

  procedure creer_trigr_audit (pva_schem in varchar2,
                               pva_nom_table in varchar2,
                               pbo_alimt_seqnc in boolean default true,
                               pbo_creat_seqnc in boolean default false,
                               pbo_audit_colmn in boolean default true,
                               pbo_creat_audit_colmn in boolean default false) is
    vva_trg                                 varchar2 (32767);
  begin
    if pbo_creat_seqnc then
      begin
        execute immediate 'create sequence ' || pva_schem || '.' || pva_nom_table || '_seq';

        dbms_output.put_line ('Séquence ' || pva_nom_table || '_seq' || ' créée.');
      exception
        when others then
          dbms_output.put_line ('Séquence ' || pva_nom_table || '_seq' || ' non créée.(' || sqlerrm || ')');
          dbms_output.put_line ('create sequence ' || pva_schem || '.' || pva_nom_table || '_seq');
      end;
    end if;

    vva_trg :=
         'create or replace trigger '
      || pva_schem
      || '.'
      || pva_nom_table
      || '_biu_01_trg '
      || 'before insert or update on '
      || pva_schem
      || '.'
      || pva_nom_table
      || ' '
      || 'for each row '
      || 'begin ';

    if pbo_alimt_seqnc then
      vva_trg :=
           vva_trg
        || '   if inserting and :new.seqnc is null then '
        || '     select '
        || pva_nom_table
        || '_seq.nextval '
        || '       into :new.seqnc '
        || '       from dual; '
        || '   end if; ';
    end if;

    if pbo_creat_audit_colmn then
      begin
        execute immediate 'alter table ' || pva_schem || '.' || pva_nom_table || ' add date_creat date';

        dbms_output.put_line ('Table ' || pva_nom_table || ', colonne date_creat créée.');
      exception
        when others then
          dbms_output.put_line ('Table ' || pva_nom_table || ', colonne date_creat non créée.(' || sqlerrm || ')');
          dbms_output.put_line ('alter table ' || pva_schem || '.' || pva_nom_table || ' add date_creat date');
      end;

      begin
        execute immediate 'alter table ' || pva_schem || '.' || pva_nom_table || ' add utils_creat varchar2(30)';

        dbms_output.put_line ('Table ' || pva_nom_table || ', colonne utils_creat créée.');
      exception
        when others then
          dbms_output.put_line ('Table ' || pva_nom_table || ', colonne utils_creat non créée.(' || sqlerrm || ')');
          dbms_output.put_line ('alter table ' || pva_schem || '.' || pva_nom_table || ' add utils_creat varchar2(30)');
      end;

      begin
        execute immediate 'alter table ' || pva_schem || '.' || pva_nom_table || ' add date_modfc date';

        dbms_output.put_line ('Table ' || pva_nom_table || ', colonne date_modfc créée.');
      exception
        when others then
          dbms_output.put_line ('Table ' || pva_nom_table || ', colonne date_modfc non créée.(' || sqlerrm || ')');
          dbms_output.put_line ('alter table ' || pva_schem || '.' || pva_nom_table || ' add date_modfc date');
      end;

      begin
        execute immediate 'alter table ' || pva_schem || '.' || pva_nom_table || ' add utils_modfc varchar2(30)';

        dbms_output.put_line ('Table ' || pva_nom_table || ', colonne utils_modfc créée.');
      exception
        when others then
          dbms_output.put_line ('Table ' || pva_nom_table || ', colonne utils_modfc non créée.(' || sqlerrm || ')');
          dbms_output.put_line ('alter table ' || pva_schem || '.' || pva_nom_table || ' add utils_modfc varchar2(30)');
      end;
    end if;

    if pbo_audit_colmn then
      vva_trg := vva_trg || 'pws_util.genr_valr_audit(inserting,
                                 updating,
                                 :new.utils_creat,
                                 :new.date_creat,
                                 :new.utils_modfc,
                                 :new.date_modfc);';
    end if;

    vva_trg := vva_trg || ' end ' || pva_nom_table || '_biu_01_trg;';

    begin
      execute immediate vva_trg;

      dbms_output.put_line ('Trigger ' || pva_nom_table || '_biu_01_trg créée.');
    exception
      when others then
        dbms_output.put_line ('Trigger ' || pva_nom_table || '_biu_01_trg non créée.(' || sqlerrm || ')');
        dbms_output.put_line (vva_trg);
    end;
  end creer_trigr_audit;

  procedure creer_vue (pva_schem in varchar2,
                       pva_nom_table in varchar2) is
  begin
    execute immediate
      'create or replace view ' || pva_schem || '.vd_' || pva_nom_table || ' as select * from ' || pva_nom_table;

    dbms_output.put_line ('Vue vd_' || pva_nom_table || ' créée.');
  exception
    when others then
      dbms_output.put_line ('Vue vd_' || pva_nom_table || ' non créée.(' || sqlerrm || ')');
      dbms_output.put_line (
        'create or replace view ' || pva_schem || '.vd_' || pva_nom_table || ' as select * from ' || pva_nom_table
      );
  end creer_vue;

  function creer_trg_pile_table (pva_schema in varchar2,
                                 pva_table in varchar2,
                                 pva_table_abreg in varchar2,
                                 pbo_creat_bd in boolean default true)
    return varchar2 is
    vva_code                                varchar2 (32000);
    vva_code_tous                           varchar2 (32000);
  begin
    if length (pva_table) > 20 and pva_table_abreg is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000007');
    end if;

    --before statement
    vva_code :=
         '
create trigger '
      || lower (nvl (pva_table_abreg, pva_table))
      || '_bsiud_trg
  before insert or update or delete
  on '
      || pva_schema
      || '.'
      || pva_table
      || '
declare
begin
  sie_09_pile_pkg.init_pile (''NOM_PILE'');
exception
when others then
  sie_09_pile_pkg.vider_pile ();
  raise;
end '
      || lower (nvl (pva_table_abreg, pva_table))
      || '_bsiud_trg;';

    if pbo_creat_bd then
      execute immediate vva_code;
    end if;

    vva_code_tous := vva_code_tous || vva_code || chr (13) || chr (13);

    --after row
    vva_code :=
         '
create trigger '
      || lower (nvl (pva_table_abreg, pva_table))
      || '_aiud_trg
  after insert or update or delete
  on '
      || pva_schema
      || '.'
      || pva_table
      || '
  for each row
declare
begin
  sie_09_pile_pkg.empil_rowid (''NOM_PILE'', :new.rowid);
exception
when others then
  sie_09_pile_pkg.vider_pile ();
  raise;
end '
      || lower (nvl (pva_table_abreg, pva_table))
      || '_aiud_trg;';

    if pbo_creat_bd then
      execute immediate vva_code;
    end if;

    vva_code_tous := vva_code_tous || vva_code || chr (13) || chr (13);

    --After statement
    vva_code :=
         '
create trigger '
      || lower (nvl (pva_table_abreg, pva_table))
      || '_asiud_trg
  after insert or update or delete
  on '
      || pva_schema
      || '.'
      || pva_table
      || '
declare
  vro_rowid       rowid;
begin
  sie_09_pile_pkg.mode_depil (''NOM_PILE'');
  vro_rowid := sie_09_pile_pkg.depil_rowid (''NOM_PILE'');
      
  while vro_rowid is not null loop
    --traitement ici


    vro_rowid := sie_09_pile_pkg.depil_rowid (''NOM_PILE'');
  end loop;
      
  sie_09_pile_pkg.termn_utils_pile (''NOM_PILE'');
      
exception
when others then
  sie_09_pile_pkg.vider_pile ();
  raise;
end '
      || lower (nvl (pva_table_abreg, pva_table))
      || '_asiud_trg;';

    if pbo_creat_bd then
      execute immediate vva_code;
    end if;

    vva_code_tous := vva_code_tous || vva_code || chr (13) || chr (13);

    --sie_01_err_apex_pkg.ajout_mesg_infor_sesn_mesg ('Les déclencheurs ont été créés avec succès');

    return vva_code_tous;
  end creer_trg_pile_table;

  procedure creer_trg_pile_table (pva_schema in varchar2,
                                  pva_table in varchar2,
                                  pva_table_abreg in varchar2,
                                  pbo_creat_bd in boolean default true) is
    vva_code                                varchar2 (32000);
  begin
    vva_code :=
      creer_trg_pile_table (pva_schema,
                            pva_table,
                            pva_table_abreg,
                            pbo_creat_bd);
  end;

  function creer_fk (pva_cle in varchar2)
    return boolean is
    vva_nom_table_base                      varchar2 (30);
    vva_coln_base                           varchar2 (30);
    vva_nom_table_cible                     varchar2 (30);
    vva_coln_cible                          varchar2 (30) default 'seqnc';
    vva_cle_travl                           varchar2 (200) default pva_cle;
    vnu_count_fk                            pls_integer;
    vva_nom_schema_cible                    varchar2 (30);
    vva_sql_comnd                           varchar2 (32767);
  begin
    --on recoit la clé sous cette forme
    --COMPT|REF_COMPT|COMPT_PK
    vva_nom_table_base :=
      substr (vva_cle_travl,
              1,
              instr (vva_cle_travl,
                     '|') -
              1);
    vva_cle_travl :=
      substr (vva_cle_travl,
              instr (vva_cle_travl,
                     '|') +
              1);
    vva_coln_base :=
      substr (vva_cle_travl,
              1,
              instr (vva_cle_travl,
                     '|') -
              1);
    vva_cle_travl :=
      substr (vva_cle_travl,
              instr (vva_cle_travl,
                     '|') +
              1);

    select   table_name,
             owner
      into   vva_nom_table_cible,
             vva_nom_schema_cible
      from   dba_constraints ac
     where   ac.constraint_name = vva_cle_travl and owner in ('SIE_UNIT', 'AFW_UNIT');

    select   count (1) + 1
      into   vnu_count_fk
      from   dba_constraints
     where   table_name = vva_nom_table_base
         and constraint_type = 'R'
         and owner in ('SIE_UNIT', 'AFW_UNIT')
         and constraint_name not like '%FK99';

    begin
      vva_sql_comnd :=
           'alter table sie_unit.'
        || vva_nom_table_base
        || ' add constraint '
        || vva_nom_table_base
        || '_fk'
        || vnu_count_fk
        || ' foreign key ('
        || vva_coln_base
        || ')
        references '
        || vva_nom_schema_cible
        || '.'
        || vva_nom_table_cible
        || '('
        || vva_coln_cible
        || ')';

      execute immediate vva_sql_comnd;
    exception
      when others then
        if sqlcode = -942 then
          null;                                                            --sie_unit.sem_dba_pkg.exect (vva_sql_comnd);
        else
          raise;
        end if;
    end;

    return true;
  exception
    when others then
      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_mesg (sqlerrm);
      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_mesg (
           'Erreur : alter table sie_unit.'
        || vva_nom_table_base
        || ' add constraint '
        || vva_nom_table_base
        || '_fk'
        || vnu_count_fk
        || ' foreign key ('
        || vva_coln_base
        || ')
      references '
        || vva_nom_schema_cible
        || '.'
        || vva_nom_table_cible
        || '('
        || vva_coln_cible
        || ')'
      );
      return false;
  end creer_fk;

  function obten_seqnc_max_table (pva_table varchar2)
    return number is
    cur_max                                 sys_refcursor;
    vnu_max                                 number;
  begin
    open cur_max for 'select max(seqnc) from ' || pva_table;

    fetch cur_max
    into vnu_max;

    close cur_max;

    return nvl (vnu_max, 0);
  exception
    when others then
      return null;
  end obten_seqnc_max_table;

  procedure corgr_seqnc_trop_petit (pbo_mode_debug boolean default true) is
    vnu_nb_seqnc_corg                       number default 0;
    vva_drop_scrip                          varchar2 (2000);
    vva_creat_scrip                         varchar2 (2000);

    cursor cur_seqnc is
      select   *
        from   (select   seq.sequence_name,
                         seq.last_number,
                         trg.table_name,
                         obten_seqnc_max_table (trg.table_name) seqnc_max,
                         seq.max_value,
                         seq.min_value,
                         cycle_flag,
                         cache_size,
                         order_flag
                  from   user_source src,
                         user_sequences seq,
                         user_triggers trg
                 where   src.type = 'TRIGGER'
                     and upper (src.text) like '% ' || seq.sequence_name || '.NEXTVAL%'
                     and trg.trigger_name = src.name)
       where   seqnc_max >= last_number and seqnc_max is not null;
  begin
    for rec_seqnc in cur_seqnc loop
      vnu_nb_seqnc_corg := vnu_nb_seqnc_corg + 1;
      vva_drop_scrip := 'drop sequence ' || rec_seqnc.sequence_name;

      vva_creat_scrip :=
           'create sequence '
        || rec_seqnc.sequence_name
        || ' start with '
        || (rec_seqnc.seqnc_max + 1)
        || case when rec_seqnc.max_value is not null then ' maxvalue ' || rec_seqnc.max_value else ' nomaxvalue' end
        || case when rec_seqnc.min_value is not null then ' minvalue ' || rec_seqnc.min_value else ' nominvalue' end
        || case rec_seqnc.cycle_flag when 'Y' then ' cycle' else ' nocycle' end
        || case when nvl (rec_seqnc.cache_size, 0) > 0 then ' cache ' || rec_seqnc.cache_size else ' nocache' end
        || case rec_seqnc.order_flag when 'Y' then ' order' else ' noorder' end;

      if pbo_mode_debug = false then
        dbms_output.put_line ('#' || vnu_nb_seqnc_corg);
        dbms_output.put_line ('Correction de la séquence: ' || rec_seqnc.sequence_name);
        dbms_output.put_line ('Valeur: ' || rec_seqnc.last_number || ' -> ' || (rec_seqnc.seqnc_max + 1));

        -- Détruire la séquence
        execute immediate vva_drop_scrip;

        -- La recréer avec la bonne valeur
        execute immediate vva_creat_scrip;
      else
        dbms_output.put_line ('#' || vnu_nb_seqnc_corg);
        dbms_output.put_line ('Séquence: ' || rec_seqnc.sequence_name);
        dbms_output.put_line ('Valr. seq: ' || rec_seqnc.last_number);
        dbms_output.put_line ('Table: ' || rec_seqnc.table_name);
        dbms_output.put_line ('Seqnc table: ' || rec_seqnc.seqnc_max);
        dbms_output.put_line ('Script drop: ' || vva_drop_scrip);
        dbms_output.put_line ('Script création: ' || vva_creat_scrip);
      end if;

      dbms_output.put_line (' ');
    end loop;

    if pbo_mode_debug then
      dbms_output.put_line ('Nombre de séquences à corriger: ' || vnu_nb_seqnc_corg);
      dbms_output.put_line (' ');
      dbms_output.put_line ('*** MODE DEBUG ***');
      dbms_output.put_line ('*** AUCUNE ACTION EFFECTUÉE ***');
    else
      dbms_output.put_line ('Nombre de séquences corrigées: ' || vnu_nb_seqnc_corg);
    end if;
  end corgr_seqnc_trop_petit;

  function audit_touts_table (pva_utils in varchar2 default null,
                              pda_date_minm in date default null,
                              pda_date_maxm in date default null)
    return typ_arr_audit
    pipelined is
    cursor cur_table is
      select     table_name
          from   user_tables
      order by   1;

    cur_enreg                               sys_refcursor;
    rec_enreg                               typ_audit;
  begin
    -- Looper les tables
    for rec_table in cur_table loop
      begin
        begin
          open cur_enreg for
               'select :1 nom_table, seqnc, date_creat, utils_creat, date_modfc, utils_modfc'
            || ' from '
            || rec_table.table_name
            || ' where (   (:2 is null or utils_creat = :2)'
            || '       and (:3 is null or date_creat >= :3)'
            || '       and (:4 is null or date_creat <= :4) )'
            || '    or (   (:2 is null or utils_modfc = :2)'
            || '       and (:3 is null or date_modfc >= :3)'
            || '       and (:4 is null or date_modfc <= :4) )'
            using rec_table.table_name,
                  pva_utils,
                  pva_utils,
                  pda_date_minm,
                  pda_date_minm,
                  pda_date_maxm,
                  pda_date_maxm,
                  pva_utils,
                  pva_utils,
                  pda_date_minm,
                  pda_date_minm,
                  pda_date_maxm,
                  pda_date_maxm;
        exception
          when others then
            open cur_enreg for
                 'select :1 nom_table, seqnc, date_creat, utils_creat, null date_modfc, null utils_modfc'
              || ' from '
              || rec_table.table_name
              || ' where (   (:2 is null or utils_creat = :2)'
              || '       and (:3 is null or date_creat >= :3)'
              || '       and (:4 is null or date_creat <= :4) )'
              using rec_table.table_name,
                    pva_utils,
                    pva_utils,
                    pda_date_minm,
                    pda_date_minm,
                    pda_date_maxm,
                    pda_date_maxm;
        end;

        fetch cur_enreg
        into rec_enreg;

        while cur_enreg%found loop
          pipe row (rec_enreg);

          fetch cur_enreg
          into rec_enreg;
        end loop;

        close cur_enreg;
      exception
        when others then
          null;
      end;
    end loop;

    return;
  end;
end sie_10_dba_pkg;
/

Prompt Package Body SIE_11_APLIC_PKG;
/* Formatted on 04/12/2013 11:35:13 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_11_APLIC_PKG" is
  gda_const_date                 constant date
    default to_date ('1' || '9' || '8' || '7' || '-' || '0' || '7' || '-' || '0' || '9',
                     'yyyy-mm-dd') ;
  gnu_versn_niv_1                         number default 2;
  gnu_versn_niv_2                         number default 3;
  gnu_versn_niv_3                         number default 0;
  gnu_versn_niv_4                         number default 0;

  function obten_lang_deft (pnu_aplic in number)
    return number is
    vnu_lang                                vd_sie_01_lang.seqnc%type;
  begin
    select   l.seqnc
      into   vnu_lang
      from   vd_i_sie_11_aplic p,
             apex_aplic aa,
             vd_i_sie_01_lang l
     where   p.seqnc = pnu_aplic and aa.id = p.numr_aplic_apex and upper (aa.flow_language) = l.code;

    return vnu_lang;
  exception
    when no_data_found then
      return null;
  end obten_lang_deft;

  function obten_lang_deft_formt (pnu_aplic in number)
    return varchar2 is
    vva_lang                                vd_sie_01_lang.code%type;
  begin
    select   aa.flow_language
      into   vva_lang
      from   vd_i_sie_11_aplic p,
             apex_aplic aa
     where   p.seqnc = pnu_aplic and aa.id = p.numr_aplic_apex;

    return vva_lang;
  exception
    when no_data_found then
      return null;
  end obten_lang_deft_formt;

  function obten_aplic_sesn
    return number is
    vnu_seqnc_aplic                         sie_11_aplic.seqnc%type;
  begin
    select   pr.seqnc
      into   vnu_seqnc_aplic
      from   vd_i_sie_11_aplic pr
     where   pr.numr_aplic_apex = sie_07_util_pkg.v ('APP_ID');

    return vnu_seqnc_aplic;
  exception
    when no_data_found then
      raise;
  end obten_aplic_sesn;

  function obten_aplic (pva_code_aplic in varchar2)
    return number is
    vnu_aplic                               sie_11_aplic.seqnc%type;
  begin
    select   seqnc
      into   vnu_aplic
      from   vd_i_sie_11_aplic
     where   code = pva_code_aplic;

    return vnu_aplic;
  exception
    when no_data_found then
      return null;
  end obten_aplic;

  function obten_aplic (pnu_numr_apex in number)
    return number is
    vnu_aplic                               sie_11_aplic.seqnc%type;
  begin
    select   seqnc
      into   vnu_aplic
      from   vd_i_sie_11_aplic
     where   numr_aplic_apex = pnu_numr_apex;

    return vnu_aplic;
  end obten_aplic;

  function obten_aplic_numr_apex (pnu_numr_apex in number)
    return number is
    vnu_aplic                               sie_11_aplic.seqnc%type;
  begin
    select   seqnc
      into   vnu_aplic
      from   vd_i_sie_11_aplic
     where   numr_aplic_apex = pnu_numr_apex;

    return vnu_aplic;
  end obten_aplic_numr_apex;

  function obten_numr_apex_aplic (pnu_seqnc in number default null)
    return number is
    vnu_aplic                               sie_11_aplic.seqnc%type;
  begin
    select   numr_aplic_apex
      into   vnu_aplic
      from   vd_i_sie_11_aplic
     where   seqnc = nvl (pnu_seqnc, obten_aplic_sesn);

    return vnu_aplic;
  exception
    when others then
      return null;
  end obten_numr_apex_aplic;

  function obten_numr_apex_aplic (pva_code_aplic in varchar2)
    return number is
    vnu_aplic                               sie_11_aplic.seqnc%type;
  begin
    select   numr_aplic_apex
      into   vnu_aplic
      from   vd_i_sie_11_aplic
     where   code = pva_code_aplic;

    return vnu_aplic;
  exception
    when others then
      return null;
  end obten_numr_apex_aplic;

  function obten_code_aplic (pnu_seqnc in number default null)
    return varchar2 is
    vva_code                                sie_11_aplic.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_11_aplic
     where   seqnc = nvl (pnu_seqnc, obten_aplic_sesn);

    return vva_code;
  end obten_code_aplic;

  function obten_page_conxn (pnu_aplic in number default null)
    return number is
    vnu_page                                vd_i_sie_13_page.seqnc%type;
  begin
    select   p.ref_page_conxn
      into   vnu_page
      from   vd_i_sie_11_aplic p
     where   p.seqnc = nvl (pnu_aplic, obten_aplic_sesn);

    return vnu_page;
  exception
    when others then
      raise;
  end obten_page_conxn;

  function obten_numr_apex_page_conxn (pnu_aplic in number default null)
    return number is
    vnu_page_conxn                          vd_i_sie_11_aplic.ref_page_conxn%type;
  begin
    select   p.ref_page_conxn
      into   vnu_page_conxn
      from   vd_i_sie_11_aplic p
     where   p.seqnc = nvl (pnu_aplic, obten_aplic_sesn);

    if vnu_page_conxn is not null then
      return sie_13_page_pkg.obten_numr_apex_page (vnu_page_conxn);
    else
      return null;
    end if;
  exception
    when others then
      return null;
  end obten_numr_apex_page_conxn;

  function obten_page_acuei (pnu_aplic in number default null)
    return number is
    vnu_page                                vd_i_sie_13_page.seqnc%type;
  begin
    select   p.ref_page_acuei
      into   vnu_page
      from   vd_i_sie_11_aplic p
     where   p.seqnc = nvl (pnu_aplic, obten_aplic_sesn);

    return vnu_page;
  exception
    when others then
      raise;
  end obten_page_acuei;

  function obten_numr_apex_page_acuei (pnu_aplic in number default null)
    return number is
    vnu_page_acuei                          vd_i_sie_11_aplic.ref_page_acuei%type;
  begin
    select   p.ref_page_acuei
      into   vnu_page_acuei
      from   vd_i_sie_11_aplic p
     where   p.seqnc = nvl (pnu_aplic, obten_aplic_sesn);

    if vnu_page_acuei is not null then
      return sie_13_page_pkg.obten_numr_apex_page (vnu_page_acuei);
    else
      return null;
    end if;
  exception
    when others then
      return null;
  end obten_numr_apex_page_acuei;

  /*
      OBSOLETE: il faut utiliser SIE_11_VERSN_PKG.OBTEN_NUMR_VERSN
  */
  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic is
  begin
    return sie_11_versn_pkg.obten_numr_versn (pnu_versn_niv_1,
                                              pnu_versn_niv_2,
                                              pnu_versn_niv_3,
                                              pnu_versn_niv_4);
  end obten_numr_versn;

  function obten_numr_versn_aplic (pnu_numr_aplic in number default null)
    return number is
    vnu_versn_formt                         number;
  begin
    --TODO revoir cette partie lorsqu'on remplacera le repartiteur
    if pnu_numr_aplic is null then
      return obten_numr_versn (gnu_versn_niv_1,
                               gnu_versn_niv_2,
                               gnu_versn_niv_3,
                               gnu_versn_niv_4);
    else
      select   (select   sie_11_aplic_pkg.obten_numr_versn (v.numr_versn_1,
                                                            v.numr_versn_2,
                                                            v.numr_versn_3,
                                                            v.numr_versn_4)
                  from   vd_i_sie_11_versn v
                 where   v.ref_aplic = p.seqnc)
        into   vnu_versn_formt
        from   vd_sie_11_aplic p
       where   p.numr_aplic_apex = pnu_numr_aplic;

      return vnu_versn_formt;
    end if;
  end obten_numr_versn_aplic;

  /*
                                      OBSOLETE: il faut utiliser SIE_11_VERSN_PKG.OBTEN_VERSN
  */
  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic is
  begin
    return sie_11_versn_pkg.obten_versn (pnu_versn_niv_1,
                                         pnu_versn_niv_2,
                                         pnu_versn_niv_3,
                                         pnu_versn_niv_4);
  end obten_versn;

  function obten_versn
    return varchar2 is
    vva_nom                                 varchar2 (200);
  begin
    select      p.nom
             || ' '
             || (select   sie_11_aplic_pkg.obten_versn (v.numr_versn_1,
                                                        v.numr_versn_2,
                                                        v.numr_versn_3,
                                                        v.numr_versn_4)
                   from   vd_i_sie_11_versn v
                  where   v.ref_aplic = p.seqnc and rownum = 1)
      into   vva_nom
      from   vd_i_sie_11_aplic p
     where   p.seqnc = obten_aplic_sesn;

    return vva_nom;
  end obten_versn;

  function obten_schem (pnu_seqnc in number default null)
    return varchar2 is
    vva_schem                               varchar2 (60);
  begin
    if pnu_seqnc is null then
      select   a.owner
        into   vva_schem
        from   apex_aplic a
       where   a.id = sie_07_util_pkg.nv ('APP_ID');
    else
      select   a.owner
        into   vva_schem
        from   apex_aplic a,
               vd_i_sie_11_aplic p
       where   a.id = p.numr_aplic_apex and p.seqnc = pnu_seqnc;
    end if;

    return vva_schem;
  end obten_schem;

  procedure defnr_varbl_numr_aplic is
    cursor cur_aplic is
      select   code,
               numr_aplic_apex
        from   vd_i_sie_11_aplic p;

    vva_nom_item                            varchar2 (60);
  begin
    for rec_aplic in cur_aplic loop
      vva_nom_item := 'A_SIE_11_' || rec_aplic.code;

      if sie_07_util_pkg.exist_item (vva_nom_item) then
        sie_07_util_pkg.defnr_etat_sessn (vva_nom_item,
                                          rec_aplic.numr_aplic_apex);
      end if;
    end loop;
  end defnr_varbl_numr_aplic;

  function obten_aplic_sga
    return number is
    vnu_numr_aplic                          number;
  begin
    select   p.numr_aplic_apex
      into   vnu_numr_aplic
      from   vd_i_sie_11_aplic p
     where   p.code = 'SGA';

    return vnu_numr_aplic;
  exception
    when no_data_found then
      return null;
  end obten_aplic_sga;

  function obten_aplic_sdp
    return number is
    vnu_numr_aplic                          number;
  begin
    select   p.numr_aplic_apex
      into   vnu_numr_aplic
      from   vd_i_sie_11_aplic p
     where   p.code = 'SAFP';

    return vnu_numr_aplic;
  exception
    when no_data_found then
      return null;
  end obten_aplic_sdp;

  function obten_code_aplic_sdp
    return varchar2 is
    vva_numr_aplic                          varchar2 (10);
  begin
    select   p.code
      into   vva_numr_aplic
      from   vd_i_sie_11_aplic p
     where   p.code = 'SAFP';

    return vva_numr_aplic;
  exception
    when no_data_found then
      return null;
  end obten_code_aplic_sdp;

  procedure inser_aplic (pva_code in varchar2,
                         pva_nom in varchar2,
                         pnu_numr_aplic_apex in number,
                         pnu_numr_versn_1 in number,
                         pnu_numr_versn_2 in number,
                         pnu_numr_versn_3 in number,
                         pnu_numr_versn_4 in number) is
    vnu_aplic                               sie_11_aplic.seqnc%type;
    vnu_versn                               sie_11_versn.seqnc%type;
  begin
    insert into   vd_i_sie_11_aplic (code, nom, numr_aplic_apex)
         values   (pva_code,
                   pva_nom,
                   pnu_numr_aplic_apex)
      returning   seqnc
           into   vnu_aplic;

    insert into   vd_i_sie_11_versn (ref_aplic, numr_versn_1, numr_versn_2, numr_versn_3, numr_versn_4)
         values   (vnu_aplic,
                   pnu_numr_versn_1,
                   pnu_numr_versn_2,
                   pnu_numr_versn_3,
                   pnu_numr_versn_4)
      returning   seqnc
           into   vnu_versn;

    update   vd_i_sie_11_aplic
       set   ref_versn = vnu_versn
     where   seqnc = vnu_aplic;
  exception
    when others then
      raise_application_error (-20001,
                               'Erreur - sie_11_aplic_pkg.inser_aplic - ' || sqlerrm);
  end inser_aplic;

  function maj_aplic (pva_code in varchar2,
                      pva_nom in varchar2,
                      pnu_numr_aplic_apex in number,
                      pnu_ref_prodt in number,
                      pnu_ref_versn_courn in number default null)
    return number is
    vnu_seqnc                               number;
  begin
    begin
      select   seqnc
        into   vnu_seqnc
        from   vd_i_sie_11_aplic
       where   code = upper (pva_code);

      update   vd_i_sie_11_aplic
         set   nom = pva_nom,
               numr_aplic_apex = pnu_numr_aplic_apex,
               ref_versn = pnu_ref_versn_courn,
               ref_prodt = pnu_ref_prodt,
               dnr_ref_prodt = pnu_ref_prodt
       where   seqnc = vnu_seqnc;
    exception
      when no_data_found then
        null;

        insert into   vd_i_sie_11_aplic (code, nom, numr_aplic_apex, ref_prodt, dnr_ref_prodt)
             values   (pva_code,
                       pva_nom,
                       pnu_numr_aplic_apex,
                       pnu_ref_prodt,
                       pnu_ref_prodt)
          returning   seqnc
               into   vnu_seqnc;
    end;

    return vnu_seqnc;
  exception
    when others then
      --TODO: revoir la gestion des erreurs selon CADRE SIE
      raise_application_error (-20001,
                               'Erreur - sie_11_aplic_pkg.maj_aplic - ' || sqlerrm);
  end maj_aplic;

  function obten_lang (pva_code in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    /*select l.seqnc
            into vnu_seqnc
      from vd_sie_11_prodt p, vd_sie_01_lang l
     where     p.seqnc = sie_11_prodt_pkg.obten_prodt_sesn ()
           and l.seqnc = p.ref_lang
           and l.code = upper (pva_code)
    union*/
    select   l.seqnc
      into   vnu_seqnc
      from   vd_sie_11_prodt_lang pl,
             vd_sie_01_lang l
     where   pl.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn ()
         and l.seqnc = pl.ref_lang
         and l.code = upper (pva_code);

    return vnu_seqnc;
  exception
    when others then
      return null;
  end obten_lang;

  function obten_lang_sesn (pva_code_deft in varchar2 default null)
    return number is
    vnu_seqnc_lang                          number (10);
    vva_code_lang                           varchar2 (10) default sie_07_util_pkg.obten_lang_furtr ();
  begin
    -- Determiner si la langue du browser existe pour l'application
    vnu_seqnc_lang := obten_lang (vva_code_lang);

    -- Si la langue du browser n'existe pas pour l'application
    -- Determiner si la langue du browser sans territoire existe pour l'application
    if vnu_seqnc_lang is null
   and instr (vva_code_lang,
              '-') > 0 then
      vnu_seqnc_lang :=
        obten_lang (substr (vva_code_lang,
                            1,
                            instr (vva_code_lang,
                                   '-') -
                            1));
    end if;

    -- Si la langue du browser sans territoire n'existe pas pour l'application
    -- Utiliser la langue par defaut
    if vnu_seqnc_lang is null and pva_code_deft is not null then
      vnu_seqnc_lang := obten_lang (pva_code_deft);
    end if;

    --Prendre l'application primaire de l'application
    if vnu_seqnc_lang is null then
      vnu_seqnc_lang := obten_lang (sie_07_util_pkg.obten_lang_aplic_deft ());
    end if;

    return vnu_seqnc_lang;
  end;

  function obten_code_lang_sesn (pva_code_deft in varchar2 default null)
    return varchar2 is
    vva_code                                vd_i_sie_01_lang.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_01_lang l
     where   l.seqnc = obten_lang_sesn (pva_code_deft);

    return vva_code;
  end obten_code_lang_sesn;

  function obten_secrt_group_id (pnu_aplic in number)
    return number is
    vnu_secrt_group_id                      apex_aplic.security_group_id%type;
  begin
    select   aa.security_group_id
      into   vnu_secrt_group_id
      from   apex_aplic aa,
             vd_sie_11_aplic p
     where   aa.id = p.numr_aplic_apex and p.seqnc = pnu_aplic;

    return vnu_secrt_group_id;
  end obten_secrt_group_id;

  function obten_theme_apex (pnu_aplic in number)
    return number is
    vnu_theme_id                            apex_aplic.theme_id%type;
  begin
    select   aa.theme_id
      into   vnu_theme_id
      from   vd_sie_11_aplic p,
             apex_aplic aa
     where   p.seqnc = pnu_aplic and aa.id = p.numr_aplic_apex;

    return vnu_theme_id;
  exception
    when no_data_found then
      return null;
  end obten_theme_apex;

  --OBSOLETE::CARLO
  /*
  procedure defnr_aplic_safp (pnu_aplic in number) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_APLIC_DEFT',
                                     sie_11_aplic_pkg.obten_code_aplic (pnu_aplic));
  end defnr_aplic_safp;
  */

  --OBSOLETE::CARLO
  /*
  procedure chang_aplic_safp (pnu_aplic in number) is
  begin
    defnr_aplic_safp (pnu_aplic);
    sie_12_utils_pkg.updat_dernr_aplic (sie_12_utils_pkg.obten_usagr_conct,
                                        sie_11_aplic_pkg.obten_code_aplic (pnu_aplic));
  end chang_aplic_safp;
  */

  --OBSOLETE::CARLO
  /*
  procedure chang_aplic (pnu_aplic in number) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_APLIC_DEFT',
                                     sie_11_aplic_pkg.obten_code_aplic (pnu_aplic));
    sie_12_utils_pkg.updat_dernr_aplic (sie_12_utils_pkg.obten_usagr_conct,
                                        sie_11_aplic_pkg.obten_code_aplic (pnu_aplic));
  end chang_aplic;
  */

  function obten_versn_courn (pnu_aplic in number)
    return number is
    vnu_versn                               number (10);
  begin
    select   ref_versn
      into   vnu_versn
      from   vd_i_sie_11_aplic
     where   seqnc = pnu_aplic;

    return vnu_versn;
  end obten_versn_courn;

  function obten_aplic_authe (pnu_aplic in number default null)
    return number is
    vnu_ref_aplic_authe                     vd_i_sie_11_aplic.ref_aplic_authe%type;
  begin
    select   ref_aplic_authe
      into   vnu_ref_aplic_authe
      from   vd_i_sie_11_aplic
     where   seqnc = nvl (pnu_aplic, obten_aplic_sesn);

    return vnu_ref_aplic_authe;
  end obten_aplic_authe;

  function obten_prodt (pnu_aplic in vd_i_sie_11_aplic.seqnc%type)
    return vd_i_sie_11_prodt.seqnc%type is
    vnu_prodt                               vd_i_sie_11_prodt.seqnc%type;
  begin
    select   s.seqnc
      into   vnu_prodt
      from   vd_i_sie_11_prodt s,
             vd_i_sie_11_aplic p
     where   s.seqnc = p.ref_prodt and p.seqnc = pnu_aplic;

    return vnu_prodt;
  exception
    when no_data_found then
      return null;
  end;
end sie_11_aplic_pkg;
/

Prompt Package Body SIE_11_AUTHE_APEX_PKG;
/* Formatted on 04/12/2013 11:35:13 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_11_authe_apex_pkg is
  gbo_defnr_sesn                          boolean default false;
  gva_code_utils_derv                     varchar2 (30);

  function valid_utils (p_username in varchar2,
                        p_password in varchar2)
    return boolean is
    vbo_info_valid                          boolean default false;
    vva_utils                               varchar2 (30);
  begin
    --il faut qu'ils aient passé par la validation d'usager/espace de travail/mot de passe avant (procedure valdr_mot_passe)
    --valider l'info
    if gva_code_utils_derv is not null then
      vva_utils := gva_code_utils_derv;
    elsif instr (p_username,
                 '@') > 0 then
      vva_utils :=
        substr (p_username,
                1,
                instr (p_username,
                       '@') -
                1);
    else
      vva_utils := p_username;
    end if;

    vbo_info_valid :=
      sie_12_mot_passe_pkg.valdr_mot_passe (vva_utils,
                                            p_password);

    /* if vbo_info_valid then
       vbo_info_valid   := sie_12_utils_pkg.verfr_usagr_vald (p_username);

       --encrypter la session selon une clé codée ici et dans le package de fil d'ariane
       --sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_SESN',                                     encry (sie_07_util_pkg.nv ('SESSION')));
       if vbo_info_valid then
         gbo_defnr_sesn   := true;
       end if;
     end if;*/

    --return vbo_info_valid;
    return true;
  end valid_utils;
end sie_11_authe_apex_pkg;
/

Prompt Package Body SIE_11_INSTA_AFW_PKG;
/* Formatted on 04/12/2013 11:35:18 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_11_insta_afw_pkg as
  --Exceptions
  gex_page_globl_non_trouv                exception;
  gex_page_conxn_non_trouv                exception;

  gnu_secrt_group_id                      number;
  gnu_numr_apex_modl                      vd_i_sie_11_aplic.numr_aplic_apex%type;                  --À definir plus tard
  gnu_regn_item_cache_id                  number;
  gnu_authe_afw_id                        number;

  --Constantes pour schema
  kva_schem_apex                 constant varchar2 (30) default 'APEX_040200';
  kva_code_aplic_modl            constant vd_i_sie_11_aplic.code%type default 'SAFP';
  knu_page_globl                 constant number default 0;
  knu_page_conxn                 constant number default 101;
  kva_mesg_afw_insta             constant varchar2 (50) default 'AFW deja installe.';
  kva_mesg_afw_non_insta         constant varchar2 (50) default 'AFW non installe.';
  kva_mesg_afw_insta_termn       constant varchar2 (50) default 'Installation AFW termine.';
  kva_chain_item_aplic           constant varchar2 (4000)
    default 'A_SIE_04_ACTIO:A_SIE_04_AUTOR_DUPLQ_PAGE:A_SIE_04_CONTX:A_SIE_04_CONTX_FORMT:A_SIE_04_SEQNC_CONTX:A_SIE_04_SOURC_ACTIO:A_SIE_04_SOURC_CONTX:A_SIE_04_SOURC_CONTX_FORMT:A_SIE_04_SOURC_NUMR_APLIC:A_SIE_04_SOURC_NUMR_PAGE:A_SIE_04_SOURC_SEQNC_CONTX:A_SIE_04_SOURC_URL:A_SIE_04_SUPRM_FIL_COURN:A_SIE_04_SUR_SOUMS:A_SIE_11_ACRON_PRODT:A_SIE_11_DEPLC_RANGE_RAPRT:A_SIE_11_DOSR_FICHR:A_SIE_11_DOSR_FICHR_AFW:A_SIE_11_ENVIR:A_SIE_11_JQUER_UI_CSS_SCOPE:A_SIE_11_MESG_SUPRS:A_SIE_11_MESG_TOUT_DROIT_RESRV:A_SIE_11_NUMR_VERSN_PRODT:A_SIE_11_NUMR_VERSN_PRODT_AFW:A_SIE_11_TEMPL_CUSTM:A_SIE_11_TEMPL_ECHO_CUSTM:A_SIE_11_TEMPL_JAVSC_CORE_1:A_SIE_11_TEMPL_JAVSC_CORE_2:A_SIE_11_TEMPL_JAVSC_JQUER:A_SIE_11_TEMPL_THEME_JQUER_UI:A_SIE_11_TRAIT_MESGS_ERR:A_SIE_11_URL_ACUEI:A_SIE_11_URL_AUTHE_CIBLE:A_SIE_11_VERSN_PRODT:A_SIE_12_UTILS:A_SIE_12_UTILS_CODE:A_SIE_12_UTILS_NOM_FORMT:A_SIE_13_LIEN_EDITN_RAPRT:A_SIE_13_MESG_AUCUN_DON_TROUV:A_SIE_13_MESG_ECHEC_SPECF:A_SIE_13_MESG_IMPOS_FETCH:A_SIE_13_MESG_RANGE_INSER:A_SIE_13_MESG_RANGE_MODF:A_SIE_13_MESG_RANGE_SUPRM:A_SIE_13_MESG_SUCS_SPECF:A_SIE_13_MESG_TROP_DON_TROUV:A_SIE_13_MODE_RECHR:A_SIE_13_PAGE_META:A_SIE_13_PAGE_TITRE:A_SIE_13_PAGNT_NAVGT:A_SIE_14_POPUP_LOV_IR:A_SIE_14_POPUP_LOV_IR_RETR:A_SIE_25_URL_RAPRT';

  function afw_deja_insta (pnu_numr_apex in number)
    return boolean is
    vnu_exist                               number (1) default 0;
  begin
    select   1
      into   vnu_exist
      from   dual
     where   exists
               (select   1
                  from   apex_item_aplic aia
                 where   aia.flow_id = pnu_numr_apex
                     and instr (':' || kva_chain_item_aplic || ':',
                                ':' || upper (aia.name) || ':') > 0);

    return vnu_exist = 1;
  exception
    when no_data_found then
      return false;
  end afw_deja_insta;

  procedure verfr_afw_insta (pnu_numr_apex in number) is
  begin
    if not afw_deja_insta (pnu_numr_apex) then
      ete (kva_mesg_afw_non_insta);
    else
      ete (kva_mesg_afw_insta);
    end if;
  end verfr_afw_insta;

  function verfr_page_globl (pnu_numr_apex in number)
    return boolean is
    vnu_nombr                               pls_integer;
  begin
    select   1
      into   vnu_nombr
      from   apex_040200.wwv_flow_steps fs
     where   fs.flow_id = pnu_numr_apex and fs.page_component_map = '14';

    --Pourrait définir une variable globale pour avoir la bonne ID de page globl

    return vnu_nombr = 1;
  exception
    when others then
      return false;
  end verfr_page_globl;

  function verfr_page_conxn (pnu_numr_apex in number)
    return boolean is
    vnu_nombr                               pls_integer;
  begin
    select   1
      into   vnu_nombr
      from   apex_040200.wwv_flow_steps fs
     where   fs.flow_id = pnu_numr_apex and fs.page_component_map = '12';

    --Pourrait définir une variable globale pour avoir la bonne ID de page globl

    return vnu_nombr = 1;
  exception
    when others then
      return false;
  end verfr_page_conxn;

  procedure defnr_secrt_group_id (pnu_numr_apex in number) is
  begin
    select   security_group_id
      into   gnu_secrt_group_id
      from   apex_aplic
     where   id = pnu_numr_apex;

    apex_040200.wwv_flow_security.g_security_group_id := gnu_secrt_group_id;

    apex_040200.wwv_flow_api.set_security_group_id (gnu_secrt_group_id);
  exception
    when no_data_found then
      ete ();
      raise;
  end defnr_secrt_group_id;

  procedure defnr_numr_apex_modl is
  begin
    null;                               --Éventuellement,savoir à partir de quelle application il faut copier les objets
  end defnr_numr_apex_modl;

  function item_aplic_exist (pnu_numr_apex in number,
                             pva_nom_item in varchar2)
    return boolean is
    vnu_exist                               pls_integer;
  begin
    select   1
      into   vnu_exist
      from   apex_item_aplic aia
     where   aia.flow_id = pnu_numr_apex and aia.name = pva_nom_item and rownum = 1;

    return true;
  exception
    when no_data_found then
      return false;
  end item_aplic_exist;

  procedure creer_item_aplic (pnu_numr_apex in number) is
  begin
    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_ACTIO',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_AUTOR_DUPLQ_PAGE',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_CONTX',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_CONTX_FORMT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SEQNC_CONTX',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SOURC_ACTIO',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SOURC_CONTX',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SOURC_CONTX_FORMT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SOURC_NUMR_APLIC',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SOURC_NUMR_PAGE',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SOURC_SEQNC_CONTX',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SOURC_URL',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SUPRM_FIL_COURN',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_04_SUR_SOUMS',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_ACRON_PRODT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_DEPLC_RANGE_RAPRT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_DOSR_FICHR',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_DOSR_FICHR_AFW',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_ENVIR',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_JQUER_UI_CSS_SCOPE',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_MESG_SUPRS',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_MESG_TOUT_DROIT_RESRV',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_NUMR_VERSN_PRODT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_NUMR_VERSN_PRODT_AFW',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_TEMPL_CUSTM',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_TEMPL_ECHO_CUSTM',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_TEMPL_JAVSC_CORE_1',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_TEMPL_JAVSC_CORE_2',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_TEMPL_JAVSC_JQUER',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_TEMPL_THEME_JQUER_UI',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_TRAIT_MESGS_ERR',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_URL_ACUEI',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_URL_AUTHE_CIBLE',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_11_VERSN_PRODT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_12_UTILS',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_12_UTILS_CODE',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_12_UTILS_NOM_FORMT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_LIEN_EDITN_RAPRT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_AUCUN_DON_TROUV',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_ECHEC_SPECF',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_IMPOS_FETCH',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_RANGE_INSER',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_RANGE_MODF',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_RANGE_SUPRM',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_SUCS_SPECF',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MESG_TROP_DON_TROUV',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_MODE_RECHR',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_PAGE_META',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_PAGE_TITRE',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_13_PAGNT_NAVGT',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_14_POPUP_LOV_IR',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_14_POPUP_LOV_IR_RETR',
                   'VARCHAR',
                   'Y',
                   'I');

    insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
         values   (pnu_numr_apex,
                   'A_SIE_25_URL_RAPRT',
                   'VARCHAR',
                   'Y',
                   'I');

    if not item_aplic_exist (pnu_numr_apex,
                             'FSP_LANGUAGE_PREFERENCE') then
      insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
           values   (pnu_numr_apex,
                     'FSP_LANGUAGE_PREFERENCE',
                     'VARCHAR',
                     'Y',
                     'I');
    end if;

    if not item_aplic_exist (pnu_numr_apex,
                             'FSP_AFTER_LOGIN_URL') then
      insert into   apex_item_aplic (flow_id, name, data_type, is_persistent, protection_level)
           values   (pnu_numr_apex,
                     'FSP_AFTER_LOGIN_URL',
                     'VARCHAR',
                     'Y',
                     'N');
    end if;
  exception
    when others then
      ete ();
      raise;
  end creer_item_aplic;

  procedure creer_item_page_zero (pnu_numr_apex in number) is
  begin
    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SIDF',
              'N',
              10,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SSPC',
              'N',
              30,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SCPC',
              'N',
              20,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SAPC',
              'N',
              40,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SNPI',
              'N',
              80,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SCPI',
              'N',
              50,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SSPI',
              'N',
              60,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SAPI',
              'N',
              70,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');

    insert
      into   apex_item_page (flow_id,
                             flow_step_id,
                             name,
                             is_required,
                             item_sequence,
                             item_plug_id,
                             use_cache_before_default,
                             item_default_type,
                             source_type,
                             display_as,
                             encrypt_session_state_yn)
    values   (pnu_numr_apex,
              knu_page_globl,
              'SADA',
              'N',
              90,
              gnu_regn_item_cache_id,
              'YES',
              'STATIC_TEXT_WITH_SUBSTITUTIONS',
              'STATIC',
              'NATIVE_HIDDEN',
              'N');
  exception
    when others then
      ete ();
      raise;
  end creer_item_page_zero;


  procedure creer_regn_page_zero (pnu_numr_apex in number) is
  begin
    insert
         into   apex_regn (flow_id,
                           page_id,
                           plug_name,
                           plug_template,
                           plug_display_sequence,
                           plug_display_column,
                           plug_display_point,
                           plug_caching,
                           escape_on_http_output,
                           plug_query_row_template,
                           plug_query_headings_type,
                           plug_query_num_rows_type,
                           pagination_display_position,
                           plug_query_row_count_max,
                           plug_query_show_nulls_as)
       values   (pnu_numr_apex,
                 knu_page_globl,
                 'AFW - items cachés',
                 0,
                 10,
                 1,
                 'BEFORE_FOOTER',
                 'NOT_CACHED',
                 'Y',
                 1,
                 'QUERY_COLUMNS',
                 'NEXT_PREVIOUS_LINKS',
                 'BOTTOM_RIGHT',
                 500,
                 ' - ')
    returning   id
         into   gnu_regn_item_cache_id;
  exception
    when others then
      ete ();
      raise;
  end creer_regn_page_zero;

  procedure creer_procs (pnu_numr_apex in number) is
  begin
    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'ON_DEMAND',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE_04 - Autoriser la duplication de la page dans le fil d''Ariane',
      p_process_sql_clob         => ':A_SIE_04_AUTOR_DUPLQ_PAGE := ''O'';',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (p_flow_id                  => pnu_numr_apex,
                                                  p_process_sequence         => 1,
                                                  p_process_point            => 'BEFORE_FOOTER',
                                                  p_process_type             => 'PLSQL',
                                                  p_process_name             => 'AFW - SIE 25 - Tri alternatif',
                                                  p_process_sql_clob         => 'sie_25_tri_alter_pkg.scrip_charg();',
                                                  p_process_error_message    => '',
                                                  p_error_display_location   => 'ON_ERROR_PAGE',
                                                  p_process_when             => '',
                                                  p_process_when_type        => 'NEVER',
                                                  p_process_when2            => '',
                                                  p_process_when_type2       => '',
                                                  p_security_scheme          => '',
                                                  p_required_patch           => '');

    apex_040200.wwv_flow_api.create_flow_process (p_flow_id                  => pnu_numr_apex,
                                                  p_process_sequence         => 1,
                                                  p_process_point            => 'BEFORE_FOOTER',
                                                  p_process_type             => 'PLSQL',
                                                  p_process_name             => 'AFW - SIE 25 - Tri alternatif',
                                                  p_process_sql_clob         => 'sie_25_tri_alter_pkg.scrip_charg();',
                                                  p_process_error_message    => '',
                                                  p_error_display_location   => 'ON_ERROR_PAGE',
                                                  p_process_when             => '',
                                                  p_process_when_type        => 'NEVER',
                                                  p_process_when2            => '',
                                                  p_process_when_type2       => '',
                                                  p_security_scheme          => '',
                                                  p_required_patch           => '');

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'ON_DEMAND',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 -  Tout lecture seule',
      p_process_sql_clob         => 'sie_13_condt_piltb_pkg.lectr_seule_tout;',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'ON_DEMAND',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Cacher tous les boutons',
      p_process_sql_clob         => 'sie_13_condt_piltb_pkg.cachr_tous_boutn;',
      p_process_error_message    => '#SQLERRM#',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'ON_DEMAND',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Gérer touches haut/bas',
      p_process_sql_clob         => 'htp.p('' < script type="text/javascript">
apex.jQuery(document).keydown(checkUpDownKey);
</script>'');',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'ON_DEMAND',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE_04 - Réinitialiser la séquence',
      p_process_sql_clob         => 'declare
  vnu_page           number default sie_07_util_pkg.nv (''APP_PAGE_ID'');
  vvc_nom_item_seqnc varchar2 (30) default ''P'' || to_char (vnu_page) || ''_SEQNC'';
begin
  if sie_07_util_pkg.exist_item (vvc_nom_item_seqnc) then
    sie_07_util_pkg.defnr_etat_sessn (vvc_nom_item_seqnc, null);
  end if;
end;',
      p_process_error_message    => '#SQLERRM#',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'AFTER_SUBMIT',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE_04 - Synchroniser variables fil d''Ariane',
      p_process_sql_clob         => 'sie_04_fil_arian_pkg.synch_varbl();',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => 'sie_13_page_pkg.obten_page_sesn <>  sie_11_aplic_pkg.obten_page_conxn',
      p_process_when_type        => 'PLSQL_EXPRESSION',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'ON_DEMAND',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 04 - Retourner valeurs modales',
      p_process_sql_clob         => 'if :A_SIE_04_ACTIO = ''XRM'' then
  sie_04_contx_pkg.retr_modl;
end if;',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => 'A_SIE_04_ACTIO',
      p_process_when_type        => 'VAL_OF_ITEM_IN_COND_EQ_COND2',
      p_process_when2            => 'XRM',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1,
      p_process_point            => 'ON_DEMAND',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Cacher la liste de navigation',
      p_process_sql_clob         => 'sie_13_page_pkg.cachr_liste_navgt();',
      p_process_error_message    => 'Erreur
',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1.1,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 07 - Libérer les sémaphores hors persistances',
      p_process_sql_clob         => 'sie_07_semph_pkg.libr_semph_perst_page();',
      p_process_error_message    => 'Error',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1.1,
      p_process_point            => 'ON_SUBMIT_BEFORE_COMPUTATION',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE_04 - Valider info de provenance avant Submit',
      p_process_sql_clob         => 'if not sie_04_fil_arian_pkg.est_valid_sidf(true) then
  sie_08_url_pkg.redrg_page_acuei_postn;
end if;
        ',
      p_process_error_message    => 'erreur lors de la validation de la provenance.',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => 'sie_13_page_pkg.obten_page_sesn <>  sie_11_aplic_pkg.obten_page_conxn',
      p_process_when_type        => 'PLSQL_EXPRESSION',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1.2,
      p_process_point            => 'AFTER_AUTHENTICATION',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 11 - Alimenter les variables des numéros de produits',
      p_process_sql_clob         => 'sie_11_aplic_pkg.defnr_varbl_numr_aplic();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (p_flow_id                  => pnu_numr_apex,
                                                  p_process_sequence         => 1.2,
                                                  p_process_point            => 'BEFORE_HEADER',
                                                  p_process_type             => 'PLSQL',
                                                  p_process_name             => 'AFW - SIE 11 - Définir la langue',
                                                  p_process_sql_clob         => 'sie_07_util_pkg.defnr_lang_sesn();',
                                                  p_process_error_message    => '',
                                                  p_error_display_location   => 'ON_ERROR_PAGE',
                                                  p_process_when             => ':FSP_LANGUAGE_PREFERENCE is null',
                                                  p_process_when_type        => 'PLSQL_EXPRESSION',
                                                  p_process_when2            => '',
                                                  p_process_when_type2       => '',
                                                  p_security_scheme          => '',
                                                  p_required_patch           => '');

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1.2,
      p_process_point            => 'ON_SUBMIT_BEFORE_COMPUTATION',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 04 - Synchroniser variables contexte',
      p_process_sql_clob         => 'sie_04_contx_pkg.synch_varbl;',
      p_process_error_message    => '#SQLERRM#',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => 'sie_13_page_pkg.obten_page_sesn <>  sie_11_aplic_pkg.obten_page_conxn',
      p_process_when_type        => 'PLSQL_EXPRESSION',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (p_flow_id                  => pnu_numr_apex,
                                                  p_process_sequence         => 1.3,
                                                  p_process_point            => 'ON_SUBMIT_BEFORE_COMPUTATION',
                                                  p_process_type             => 'PLSQL',
                                                  p_process_name             => 'AFW - SIE 13 - Recherche',
                                                  p_process_sql_clob         => 'sie_13_navgt_pkg.efect_rechr ();',
                                                  p_process_error_message    => 'Erreur',
                                                  p_error_display_location   => 'ON_ERROR_PAGE',
                                                  p_process_when             => 'SIE_13_RECHR_FORML',
                                                  p_process_when_type        => 'REQUEST_EQUALS_CONDITION',
                                                  p_process_when2            => '',
                                                  p_process_when_type2       => '',
                                                  p_security_scheme          => '',
                                                  p_required_patch           => '');

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1.3,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 11 - Définir items application',
      p_process_sql_clob         => 'sie_11_prodt_pkg.defnr_item_aplic_apex();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1.4,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 12 - Définir items application',
      p_process_sql_clob         => 'sie_12_utils_pkg.defnr_item_aplic_apex();',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1.5,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Définir items application',
      p_process_sql_clob         => 'sie_13_page_pkg.defnr_item_aplic_apex;',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 5,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Aller au dernier enregistrement',
      p_process_sql_clob         => 'sie_13_navgt_pkg.obten_dernr_enreg();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => ':SAPC = ''XDE''',
      p_process_when_type        => 'PLSQL_EXPRESSION',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 8,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 04 - Synchroniser fil d''ariane',
      p_process_sql_clob         => 'sie_04_fil_arian_pkg.synch;',
      p_process_error_message    => 'Erreur lors de la synchronisation du fil d''ariane.',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 9,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 04 - Synchroniser le contexte',
      p_process_sql_clob         => 'sie_04_contx_pkg.synch;',
      p_process_error_message    => '#SQLERRM#',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 9.1,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Gérer le mode recherche',
      p_process_sql_clob         => 'sie_13_navgt_pkg.trait_mode_rechr ();
:a_sie_13_mode_rechr := sie_13_navgt_pkg.est_en_mode_rechr_va();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 9.2,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Définir contexte navigation',
      p_process_sql_clob         => 'sie_13_navgt_pkg.defnr_contx_navgt();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 9.5,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Charger les préférences',
      p_process_sql_clob         => 'sie_13_prefr_pkg.charg_prefr_page();',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (p_flow_id                  => pnu_numr_apex,
                                                  p_process_sequence         => 12.1,
                                                  p_process_point            => 'BEFORE_HEADER',
                                                  p_process_type             => 'PLSQL',
                                                  p_process_name             => 'AFW - SIE 25 - Export CSV',
                                                  p_process_sql_clob         => 'sie_25_spx_expor_ir_pkg.afich_csv ();',
                                                  p_process_error_message    => '',
                                                  p_error_display_location   => 'ON_ERROR_PAGE',
                                                  p_process_when             => 'CSV',
                                                  p_process_when_type        => 'REQUEST_EQUALS_CONDITION',
                                                  p_process_when2            => '',
                                                  p_process_when_type2       => '',
                                                  p_security_scheme          => '',
                                                  p_required_patch           => '');

    apex_040200.wwv_flow_api.create_flow_process (p_flow_id                  => pnu_numr_apex,
                                                  p_process_sequence         => 12.1,
                                                  p_process_point            => 'BEFORE_HEADER',
                                                  p_process_type             => 'PLSQL',
                                                  p_process_name             => 'AFW - SIE 25 - Export CSV',
                                                  p_process_sql_clob         => 'sie_25_spx_expor_ir_pkg.afich_csv ();',
                                                  p_process_error_message    => '',
                                                  p_error_display_location   => 'ON_ERROR_PAGE',
                                                  p_process_when             => 'CSV',
                                                  p_process_when_type        => 'REQUEST_EQUALS_CONDITION',
                                                  p_process_when2            => '',
                                                  p_process_when_type2       => '',
                                                  p_security_scheme          => '',
                                                  p_required_patch           => '');

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 12.2,
      p_process_point            => 'BEFORE_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 25 - Export PDF',
      p_process_sql_clob         => 'sie_25_plpdf_expor_ir_pkg.afich_pdf ();',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => 'PDF',
      p_process_when_type        => 'REQUEST_EQUALS_CONDITION',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 20,
      p_process_point            => 'BEFORE_FOOTER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Script mode recherche',
      p_process_sql_clob         => 'sie_13_navgt_pkg.script_mode_rechr ();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1000000000,
      p_process_point            => 'BEFORE_FOOTER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE_25_Générer le script d''affichage du rapport',
      p_process_sql_clob         => 'sie_25_appel_raprt_apex_pkg.genr_script_popup_raprt();',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => 'A_SIE_25_URL_RAPRT',
      p_process_when_type        => 'ITEM_IS_NOT_NULL',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1000000000,
      p_process_point            => 'AFTER_FOOTER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Réinitialiser la variable d''exclusion',
      p_process_sql_clob         => 'sie_13_page_pkg.reint_exclu_liste_navgt();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1000000000.1,
      p_process_point            => 'AFTER_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Initialiser le contexte d''exécution d''une page',
      p_process_sql_clob         => 'sie_13_condt_piltb_pkg.defn_contx_exect_page();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1000000000.1,
      p_process_point            => 'AFTER_SUBMIT',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 04 - Mettre à jour le contexte',
      p_process_sql_clob         => 'sie_04_contx_pkg.maj_seqnc_contx();',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1000000000.2,
      p_process_point            => 'AFTER_SUBMIT',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 13 - Sauvegarde des préférences',
      p_process_sql_clob         => 'sie_13_prefr_pkg.sauvg_prefr_page();',
      p_process_error_message    => '',
      p_error_display_location   => 'INLINE_IN_NOTIFICATION',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1000000000.3,
      p_process_point            => 'AFTER_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - SIE 19 - Definir les variables de sessions',
      p_process_sql_clob         => 'sie_19_boutn_pkg.defnr_varbl_sesn();',
      p_process_error_message    => 'Erreur',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );

    apex_040200.wwv_flow_api.create_flow_process (
      p_flow_id                  => pnu_numr_apex,
      p_process_sequence         => 1000000000.4,
      p_process_point            => 'AFTER_HEADER',
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - JavaScript au chargement',
      p_process_sql_clob         => 'sie_01_javsc_pkg.ajout_scrip_charg ();
sie_07_javsc_pkg.ajout_scrip_charg ();
--sie_19_javsc_pkg.ajout_scrip_charg ();
sie_25_javsc_pkg.ajout_scrip_charg ();',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when             => '',
      p_process_when_type        => '',
      p_process_when2            => '',
      p_process_when_type2       => '',
      p_security_scheme          => '',
      p_required_patch           => ''
    );
  exception
    when others then
      ete ();
      raise;
  end creer_procs;

  procedure creer_racrc (pnu_numr_apex in number) is
  begin
    --Penser à vérifier si le DELETE_CONFIRM_MSG est déjà existant, mais non utilisé par afw
    --Si c'est le cas, update celui présent pour DELETE_CONFIRM_MESG_[CODE_NUMR_APEX]
    insert
      into   apex_aplic_short (flow_id, shortcut_name, shortcut_consideration_seq, shortcut_type, error_text, shortcut)
    values   (pnu_numr_apex,
              'DELETE_CONFIRM_MSG',
              1,
              'FUNCTION_BODY',
              '',
              'return sie_07_util_pkg.obten_mesg_suprs();');

    insert
      into   apex_aplic_short (flow_id, shortcut_name, shortcut_consideration_seq, shortcut_type, error_text, shortcut)
    values   (pnu_numr_apex,
              'SIE_13_LISTE_NAVGT',
              1,
              'FUNCTION_BODY',
              '',
              'declare
         vva_optio_liste_navgt varchar2 (32767)
                           default sie_13_page_pkg.genr_elemn_liste_navgt;
      begin
          -- Ne pas generer si la liste est vide
         -- Exclure la page de connexion
         if     vva_optio_liste_navgt is not null
            and sie_13_page_pkg.obten_page_sesn !=
                   sie_11_aplic_pkg.obten_page_conxn
         then
            return vva_optio_liste_navgt;
         end if;
end;');

    insert
      into   apex_aplic_short (flow_id, shortcut_name, shortcut_consideration_seq, shortcut_type, error_text, shortcut)
    values   (pnu_numr_apex,
              'SIE_13_OBTEN_LIBL',
              1,
              'FUNCTION_BODY',
              'Erreur',
              'return sie_13_page_item_pkg.obten_tradc_libl(#CURRENT_ITEM_ID#);');
  exception
    when others then
      ete ();
      raise;
  end creer_racrc;

  procedure creer_plugn_evenm (pnu_numr_apex in number) is
  begin
    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                   'close_node.jstree',
                   'Fermer un noeud');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                   'create_node.jstree',
                   'Ajouter un noeud');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                   'delete_node.jstree',
                   'Supprimer un noeud');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                   'move_node.jstree',
                   'Déplacer un noeud');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                   'open_node.jstree',
                   'Ouvrir un noeud');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                   'rename_node.jstree',
                   'Renommer un noeud');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                   'select_node.jstree',
                   'Sélectionner un noeud');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                   'ouvridialg',
                   'Ouvrir le dialogue');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SIE_12_MODFR_MDP'),
                   'afw_sie_21_actio_dynmq_sie_12_modfr_mp_afich',
                   'Afficher');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                   'onadd',
                   'onAdd');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                   'ondelete',
                   'onDelete');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                   'onready',
                   'onReady');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                   'onresult',
                   'onResult');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SUPRM_ITEM_CLOB'),
                   'suprm_item_clob_delete_termn',
                   'Supprimer items CLOB terminé (DELETE)');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'dayclick',
                   'dayClick');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'drop',
                   'drop');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventafterrender',
                   'eventAfterRender');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventclick',
                   'eventClick');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventdragstart',
                   'eventDragStart');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventdragstop',
                   'eventDragStop');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventdrop',
                   'eventDrop');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventmouseout',
                   'eventMouseout');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventmouseover',
                   'eventMouseover');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventrender',
                   'eventRender');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventresize',
                   'eventResize');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventresizestart',
                   'eventResizeStart');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'eventresizestop',
                   'eventResizeStop');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'loading',
                   'loading');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'loadingstart',
                   'loadingStart');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'loadingstop',
                   'loadingStop');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'select',
                   'select');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'unselect',
                   'unselect');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'viewdisplay',
                   'viewDisplay');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND'),
                   'windowresize',
                   'windowResize');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogbeforeclose',
                   'beforeClose');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogclose',
                   'close');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogclose_actio_dynmq',
                   'close Dynamic Action Plugin');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogclose_procs',
                   'close Process Plugin');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogdrag',
                   'drag');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogdragstart',
                   'dragStart');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogdragstop',
                   'dragStop');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogfocus',
                   'focus');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogopen',
                   'open');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogresize',
                   'resize');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogresizestart',
                   'resizeStart');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                   'dialogresizestop',
                   'resizeStop');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SOUMT_CLOB'),
                   'soumt_create_clob_termn',
                   'Soumettre CLOB terminé (CREATE)');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SOUMT_CLOB'),
                   'soumt_delete_clob_termn',
                   'Soumettre CLOB terminé (DELETE)
');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SOUMT_CLOB'),
                   'soumt_save_clob_termn',
                   'Soumettre CLOB terminé (SAVE)');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_opening',
                   'opening');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_open',
                   'open');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_close',
                   'close');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_highlight',
                   'highlight');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_selecting',
                   'selecting');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_removing',
                   'removing');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_removed',
                   'removed');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_loaded',
                   'loaded');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_focus',
                   'focus');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                   'selct2_blur',
                   'blur');

    insert into   apex_040200.wwv_flow_plugin_events (flow_id, plugin_id, name, display_name)
         values   (pnu_numr_apex,
                   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SIE_13_AIDE_PAGE'),
                   'afw_sie_21_actio_dynmq_sie_13_aide_page_afich',
                   'Afficher');
  end creer_plugn_evenm;

  procedure creer_plugn_fichr (pnu_numr_apex in number) is
  begin
    null;                                                                     --Pas utilisé par les plugins du framework
  end creer_plugn_fichr;

  procedure creer_plugn_optio (pnu_numr_apex in number) is
  begin
    insert
      into   apex_040200.wwv_flow_plugin_settings (flow_id,
                                                   plugin_type,
                                                   plugin,
                                                   attribute_01,
                                                   attribute_02,
                                                   attribute_03,
                                                   attribute_04,
                                                   attribute_05,
                                                   attribute_06,
                                                   attribute_07,
                                                   attribute_08,
                                                   attribute_09,
                                                   attribute_10,
                                                   attribute_11,
                                                   attribute_12,
                                                   attribute_13,
                                                   attribute_14,
                                                   attribute_15)
    values   (pnu_numr_apex,
              'ITEM TYPE',
              'PLUGIN_CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR',
              '&A_SIE_11_DOSR_FICHR_AFW.plugin/javascript/sie_13_plugn_popup_lov_ir.js',
              '&A_SIE_11_DOSR_FICHR_AFW.plugin/css/sie_13_plugn_popup_lov_ir.css',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '');

    insert
      into   apex_040200.wwv_flow_plugin_settings (flow_id,
                                                   plugin_type,
                                                   plugin,
                                                   attribute_01,
                                                   attribute_02,
                                                   attribute_03,
                                                   attribute_04,
                                                   attribute_05,
                                                   attribute_06,
                                                   attribute_07,
                                                   attribute_08,
                                                   attribute_09,
                                                   attribute_10,
                                                   attribute_11,
                                                   attribute_12,
                                                   attribute_13,
                                                   attribute_14,
                                                   attribute_15)
    values   (pnu_numr_apex,
              'ITEM TYPE',
              'PLUGIN_CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR',
              '&A_SIE_11_DOSR_FICHR_AFW.plugin/javascript/sie_13_plugn_item_popup_lov_ir.js',
              '&A_SIE_11_DOSR_FICHR_AFW.plugin/css/sie_13_plugn_item_popup_lov_ir.css',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '');
  end creer_plugn_optio;

  procedure creer_plugn_atrib (pnu_numr_apex in number) is
  begin
    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 1,
                 10,
                 'Type',
                 'SELECT LIST',
                 'Y',
                 'SINGL_VALUE',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81189314005887439');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (
                  pnu_numr_apex,
                  gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                  'COMPONENT',
                  6,
                  60,
                  'Maximum number of items that can be selected',
                  'NUMBER',
                  'Y',
                  '0',
                  null,
                  null,
                  null,
                  null,
                  '',
                  'N',
                  gta_id_atrib_plugn ('81189314005887439'),
                  'EQUALS',
                  'MULTP_VALUE',
                  'The maximum number of items that can be selected in a multi-select control. If this number is less than 1 selection is not limited.',
                  ''
                )
    returning   id
         into   gta_id_atrib_plugn ('81267915864495387');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 2,
                 20,
                 'Allow clear',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('81189314005887439'),
                 'EQUALS',
                 'SINGL_VALUE',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81288527965703549');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 3,
                 30,
                 'Loading Remote Data',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81266929248473974');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (
                  pnu_numr_apex,
                  gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                  'COMPONENT',
                  4,
                  40,
                  'Minimum number of results',
                  'NUMBER',
                  'Y',
                  '10',
                  null,
                  null,
                  null,
                  null,
                  '',
                  'N',
                  gta_id_atrib_plugn ('81266929248473974'),
                  'EQUALS',
                  'N',
                  'The minimum number of results that must be initially (after opening the dropdown for the first time) populated in order to keep the search field. This is useful for cases where local data is used with just a few results, in which case the search box is not very useful and wastes screen space.

The option can be set to a negative value to permanently hide the search field.',
                  ''
                )
    returning   id
         into   gta_id_atrib_plugn ('81267307250484146');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 10,
                 35,
                 'Search type',
                 'SELECT LIST',
                 'Y',
                 'LIKE_IGNORE',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('81266929248473974'),
                 'EQUALS',
                 'Y',
                 'CONTAINS_CASE   -- uses INSTR
CONTAINS_IGNORE -- uses INSTR with UPPER
EXACT_CASE      -- uses LIKE value%
EXACT_IGNORE    -- uses LIKE VALUE% with UPPER
LIKE_CASE       -- uses LIKE %value%
LIKE_IGNORE     -- uses LIKE %VALUE% with UPPER
LOOKUP          -- uses = value',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81275900883155519');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 7,
                 70,
                 'Number of characters necessary to start a search',
                 'NUMBER',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81268811539512573');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 8,
                 80,
                 'Maximum number of characters that can be entered for an input.',
                 'NUMBER',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81269108951513772');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 9,
                 90,
                 'Separator',
                 'TEXT',
                 'Y',
                 ':',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'Separator character or string used to delimit ids in value attribute of the multi-valued selects.',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81269429857519268');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 5,
                 50,
                 'Maximum number of results',
                 'NUMBER',
                 'Y',
                 '100',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81275300693125233');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2'),
                 'COMPONENT',
                 11,
                 110,
                 'initSelection Query',
                 'SQL',
                 'N',
                 'select nom d, seqnc r
    from vd_sie_13_page
order by 1',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('81294631235457771');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_PRODT_CONTX_A'),
                 'COMPONENT',
                 1,
                 10,
                 'Changement de produits',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('436748269614443476');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONFR_SAUVG'),
                 'COMPONENT',
                 1,
                 10,
                 'Message de confirmation',
                 'TEXTAREA',
                 'Y',
                 'Des modifications au formulaire ne sont pas sauvegardées.',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447211059729900770');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (
                  pnu_numr_apex,
                  gta_id_plugn ('CA_SIESOLUTIONS_SIE21_PAGE_ITEM_MASQ'),
                  'COMPONENT',
                  3,
                  30,
                  'Caractère de soulignement',
                  'TEXT',
                  'Y',
                  '_',
                  1,
                  1,
                  null,
                  null,
                  '',
                  'Y',
                  null,
                  '',
                  '',
                  'Si vous n''êtes pas satisfait avec le caractère de soulignement (''_'') comme un espace réservé, vous pouvez passer un argument optionnel.',
                  ''
                )
    returning   id
         into   gta_id_atrib_plugn ('447605276709184907');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 1,
                 10,
                 'Logo ouvrir popup LOV IR',
                 'TEXT',
                 'Y',
                 '/i/lov_16x16.gif',
                 60,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 'URL

ex.: /i/lov_16x16.gif',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447714650816915446');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'APPLICATION',
                 1,
                 10,
                 'Librairie JavaScript du plugin',
                 'TEXT',
                 'Y',
                 '&A_SIE_11_DOSR_FICHR_AFW.plugin/javascript/sie_13_plugn_popup_lov_ir.js',
                 60,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'URL

ex.: &A_SIE_11_DOSR_FICHR_AFW.plugin/javascript/sie_13_plugn_popup_lov_ir.js',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447715169301930242');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'APPLICATION',
                 2,
                 20,
                 'Fichier CSS du plugin',
                 'TEXT',
                 'Y',
                 '&A_SIE_11_DOSR_FICHR_AFW.plugin/css/sie_13_plugn_popup_lov_ir.css',
                 60,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'URL

ex.: &A_SIE_11_DOSR_FICHR_AFW.plugin/css/sie_13_plugn_popup_lov_ir.css',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447715674627941250');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 6,
                 15,
                 'Largeur du popup',
                 'NUMBER',
                 'Y',
                 '600',
                 10,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447761963928658834');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 7,
                 20,
                 'Hauteur du popup',
                 'NUMBER',
                 'Y',
                 '500',
                 10,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447762575010661987');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 3,
                 30,
                 'Mode gestion',
                 'SELECT LIST',
                 'Y',
                 'SIMPL',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447837150070291429');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 2,
                 40,
                 'Page popup lov',
                 'TEXT',
                 'Y',
                 '',
                 20,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('447837150070291429'),
                 'IN_LIST',
                 'SIMPL,AVANC',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447720580108279471');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 4,
                 40,
                 'Items qui reçoivent les valeurs',
                 'PAGE ITEMS',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('447837150070291429'),
                 'EQUALS',
                 'AVANC',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447755367345931178');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 5,
                 50,
                 'Colonnes qui retournent les valeurs',
                 'PAGE ITEMS',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('447837150070291429'),
                 'EQUALS',
                 'AVANC',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447755976003933739');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR'),
                 'COMPONENT',
                 8,
                 35,
                 'Application popup lov IR',
                 'NUMBER',
                 'Y',
                 '',
                 20,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('447837150070291429'),
                 'IN_LIST',
                 'SIMPL,AVANC',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447803172798170451');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR'),
                 'APPLICATION',
                 1,
                 10,
                 'Librairie JavaScript du plugin',
                 'TEXT',
                 'N',
                 '&A_SIE_11_DOSR_FICHR_AFW.plugin/javascript/sie_13_plugn_popup_lov_ir.js',
                 60,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'URL

ex.: &A_SIE_11_DOSR_FICHR_AFW.plugin/javascript/sie_13_plugn_popup_lov_ir.js',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('448065765219121185');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR'),
                 'APPLICATION',
                 2,
                 20,
                 'Fichier CSS du plugin',
                 'TEXT',
                 'N',
                 '&A_SIE_11_DOSR_FICHR_AFW.plugin/css/sie_13_plugn_popup_lov_ir.css',
                 60,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'URL

ex.: &A_SIE_11_DOSR_FICHR_AFW.plugin/css/sie_13_plugn_popup_lov_ir.css',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('448066269028122310');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR'),
                 'COMPONENT',
                 1,
                 10,
                 'Logo ouvrir popup',
                 'TEXT',
                 'Y',
                 '/i/lov_16x16.gif',
                 60,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 'URL

ex.: /i/lov_16x16.gif',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('448068761157176765');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR'),
                 'COMPONENT',
                 2,
                 20,
                 'Largeur du popup',
                 'NUMBER',
                 'Y',
                 '600',
                 10,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('448069281589182729');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR'),
                 'COMPONENT',
                 3,
                 30,
                 'Hauteur du popup',
                 'NUMBER',
                 'Y',
                 '600',
                 10,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('448069757132185046');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX'),
                 'COMPONENT',
                 1,
                 10,
                 'Item qui contient le ID du noeud',
                 'TEXT',
                 'Y',
                 '',
                 60,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('448137881493107190');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_PAGE_ITEM_MASQ'),
                 'COMPONENT',
                 1,
                 10,
                 'Type de masque',
                 'SELECT LIST',
                 'Y',
                 'PERSN',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('449618791079690316');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_PAGE_ITEM_MASQ'),
                 'COMPONENT',
                 2,
                 20,
                 'Masque personnalisé',
                 'TEXT',
                 'Y',
                 '',
                 60,
                 200,
                 null,
                 null,
                 '',
                 'Y',
                 gta_id_atrib_plugn ('449618791079690316'),
                 'EQUALS',
                 'PERSN',
                 'a - Représente un caractère alphabétique (A-Z, a-z)
9 - Représente un caractère numérique (0-9)
* - Représente un caractère alphanumérique (AZ, az ,0-9)',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('447604755107169154');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ACORD'),
                 'COMPONENT',
                 1,
                 10,
                 'Largeur (px)',
                 'TEXT',
                 'Y',
                 '215',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '1- Exemple: 215
2- Exemple: P1_LARGR_REGN_ACORD',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('452430063549519499');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ACORD'),
                 'COMPONENT',
                 2,
                 20,
                 'Largeur par défaut (px)',
                 'NUMBER',
                 'Y',
                 '215',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'Exemple: 215',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('454300181398329774');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG'),
                 'COMPONENT',
                 1,
                 10,
                 'Numéro de message    ',
                 'TEXT',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('473520143532245626');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONTX_FIL_ARIAN'),
                 'COMPONENT',
                 1,
                 10,
                 'Informations supplémentaires (HTML)',
                 'TEXTAREA',
                 'N',
                 '',
                 null,
                 4000,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('491838350685219078');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONTX_FIL_ARIAN'),
                 'COMPONENT',
                 2,
                 20,
                 'Informations supplémentaires',
                 'PLSQL EXPRESSION',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('491842766961223771');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_MENU'),
                 'COMPONENT',
                 1,
                 10,
                 'Code du menu',
                 'TEXT',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('515605022605227797');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                 'COMPONENT',
                 7,
                 70,
                 'Largeur',
                 'NUMBER',
                 'Y',
                 '300',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('519835056570564309');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_MATRC_RAPRT_SQL'),
                 'COMPONENT',
                 1,
                 10,
                 'Nombre de colonnes à gauche',
                 'NUMBER',
                 'Y',
                 '1',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'Nombre de dimensions verticales.<br/>Ex.: 1',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('520473164089491904');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_MATRC_RAPRT_SQL'),
                 'COMPONENT',
                 2,
                 20,
                 'Surligner des lignes',
                 'TEXT',
                 'N',
                 'Total,**Tous**',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 'Permet de mettre en évidence certaines lignes (totaux).<br/>Ex.: Total,**Tous**',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('520474076210495414');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                 'COMPONENT',
                 1,
                 10,
                 'Modale',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('530333946293176901');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                 'COMPONENT',
                 2,
                 20,
                 'Redimensionner',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('530778753382412312');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                 'COMPONENT',
                 3,
                 30,
                 'Fermer avec la touche "Échap" (Esc)',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('530779374160418280');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                 'COMPONENT',
                 4,
                 40,
                 'Classe CSS',
                 'TEXT',
                 'N',
                 '',
                 60,
                 100,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'Pour cacher le bouton "Fermer" (X). Ajouter la classe: no-close.<br />Ex.: ui-afw no-close',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('530780077408428657');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                 'COMPONENT',
                 5,
                 50,
                 'Ouvrir automatiquement',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('530781059146830257');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG'),
                 'COMPONENT',
                 6,
                 60,
                 'Déplaçable',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('530781777500835579');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHAMP_RECHR'),
                 'COMPONENT',
                 1,
                 10,
                 'Filigrane',
                 'TEXT',
                 'Y',
                 'Recherche...',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('595898849929552854');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHAMP_RECHR'),
                 'COMPONENT',
                 2,
                 20,
                 'Nombre critères en mémoire',
                 'NUMBER',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('595903360664555888');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_PRODT_CONTX_A'),
                 'COMPONENT',
                 2,
                 20,
                 'Afficher date dernière m-à-j référentiel AFW',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('596766653794658012');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_PRODT_CONTX_A'),
                 'COMPONENT',
                 3,
                 30,
                 'Produits affichés',
                 'SELECT LIST',
                 'Y',
                 'TOUS',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('629419043194676002');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_PRODT_CONTX_A'),
                 'COMPONENT',
                 4,
                 40,
                 'Produits SAF',
                 'CHECKBOXES',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('629419043194676002'),
                 'EQUALS',
                 'SEULM_AFW',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('629258464956578251');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_LISTE_NAVGT'),
                 'COMPONENT',
                 1,
                 10,
                 'Icône',
                 'SELECT LIST',
                 'Y',
                 'ui-icon-arrowthick-1-e',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('681316156849983643');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TRAIT_MESS_ERR'),
                 'COMPONENT',
                 1,
                 10,
                 'Traiter messages',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('690465143667346710');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DEFNR_ITEM_PAGE'),
                 'COMPONENT',
                 1,
                 10,
                 'Définir ces éléments',
                 'PAGE ITEMS',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('697520862811824697');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DEFNR_ITEM_PAGE'),
                 'COMPONENT',
                 2,
                 20,
                 'Avec ces valeurs',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('697520862811824697'),
                 'NOT_NULL',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('697525269045826527');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_FERMR_DIALG_IFRAM'),
                 'COMPONENT',
                 1,
                 10,
                 'Fenêtre parent (Item clé étrangère) - Valeur de retour',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('697784092004965553');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_INSER_TRACE'),
                 'COMPONENT',
                 1,
                 10,
                 'Valeur 1',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('776950646679677056');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_INSER_TRACE'),
                 'COMPONENT',
                 2,
                 20,
                 'Valeur 2',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('776955149796677931');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONFR_SAUVG_REQT'),
                 'COMPONENT',
                 1,
                 10,
                 'Message de confirmation',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('854686355232622290');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONFR_SAUVG_REQT'),
                 'COMPONENT',
                 2,
                 20,
                 'Requêtes',
                 'TEXTAREA',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('854686863543624659');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REDRC_URL'),
                 'COMPONENT',
                 1,
                 10,
                 'URL',
                 'PLSQL EXPRESSION',
                 'Y',
                 'sie_08_url_pkg.genr_url([saisir les paramètres])',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('857986563176375634');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TRANS_IDENT_COLN'),
                 'COMPONENT',
                 1,
                 10,
                 'Identifiants',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '"A":"Libellé A","B":"Libellé B"',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('858696452588385806');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHOSN'),
                 'COMPONENT',
                 4,
                 40,
                 'Nb. lignes maximum',
                 'NUMBER',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('859173838650504627');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_PRIS_CHARG_NAVGT'),
                 'COMPONENT',
                 1,
                 10,
                 'Titre',
                 'TEXT',
                 'Y',
                 'Avertissement',
                 80,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('865270047016288243');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (
                  pnu_numr_apex,
                  gta_id_plugn ('CA_SIESOLUTIONS_SIE21_PRIS_CHARG_NAVGT'),
                  'COMPONENT',
                  2,
                  20,
                  'Message',
                  'TEXT',
                  'Y',
                  'La version de votre navigateur n''est pas supportée. Veuillez en faire la mise à jour ou utilisez un autre navigateur.',
                  80,
                  1000,
                  null,
                  null,
                  '',
                  'Y',
                  null,
                  '',
                  '',
                  '',
                  ''
                )
    returning   id
         into   gta_id_atrib_plugn ('865270657752291340');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHANG_LIBL_FIL_ARI'),
                 'COMPONENT',
                 1,
                 10,
                 'Nouveau libellé',
                 'PLSQL EXPRESSION',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('880949664706905291');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_REGN_DIALG'),
                 'COMPONENT',
                 1,
                 10,
                 'Largeur',
                 'TEXT',
                 'N',
                 '',
                 10,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('896439187347572104');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SIE04_MODE_PAGE'),
                 'COMPONENT',
                 1,
                 10,
                 'Item cible',
                 'PAGE ITEM',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('906221772315661012');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SIE04_MODE_PAGE'),
                 'COMPONENT',
                 2,
                 20,
                 'Valeur par défaut',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('906317864397687188');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AIDE_PAGE_ITEM'),
                 'COMPONENT',
                 1,
                 10,
                 'Afficher plusieurs à la fois',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('926596150147540736');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 9,
                 90,
                 'Largeur (px)',
                 'NUMBER',
                 'Y',
                 '400',
                 10,
                 10,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('971708071180101980');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN'),
                 'COMPONENT',
                 7,
                 70,
                 'Afficher premier niveau',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1001811058557499134');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 1,
                 10,
                 'minChars',
                 'NUMBER',
                 'Y',
                 '1',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1034357183267749611');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 2,
                 20,
                 'prePopulate',
                 'PLSQL EXPRESSION',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1044489697267573291');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 3,
                 30,
                 'hintText',
                 'TEXT',
                 'Y',
                 'Tapez un terme de recherche',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1044490214582578249');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 4,
                 40,
                 'noResultsText',
                 'TEXT',
                 'Y',
                 'Aucun résultat',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1044490693934581769');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 5,
                 50,
                 'searchingText',
                 'TEXT',
                 'Y',
                 'Recherche...',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1044491599260592802');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 6,
                 60,
                 'tokenLimit',
                 'NUMBER',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1044492102162603014');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 7,
                 70,
                 'preventDuplicates',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1044492610473605437');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT'),
                 'COMPONENT',
                 8,
                 80,
                 'Lazy Load',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1044497703162700983');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL'),
                 'COMPONENT',
                 1,
                 10,
                 'Ligne 1 - Entêtes ',
                 'TEXT',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 'Liste des libellés dans les entêtes.<br/>Ex.: ,Valeur,%',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1184047898318573414');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (
                  pnu_numr_apex,
                  gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL'),
                  'COMPONENT',
                  2,
                  20,
                  'Ligne 1 - colspan/rowspan',
                  'TEXT',
                  'Y',
                  '',
                  null,
                  null,
                  null,
                  null,
                  '',
                  'N',
                  null,
                  '',
                  '',
                  'Formatage des entêtes.<br/>Ex.: 1;
1,4;
1,4;
1<br/><br/>colspan;
                                                                                                                                                                                                                                             rowspan,colspan;rowspan,colspan;rowspan',
                  ''
                )
    returning   id
         into   gta_id_atrib_plugn ('1184048408015576164');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL'),
                 'COMPONENT',
                 3,
                 30,
                 'Ligne 2 - Entête',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 'Liste des libellés dans les entêtes.<br/>Ex.: ,Valeur,%',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1184049589445580307');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL'),
                 'COMPONENT',
                 4,
                 40,
                 'Ligne 2 - colspan/rowspan',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'Formatage des entêtes.<br/>Ex.: 1;1,4;1,4;1<br/><br/>colspan;rowspan,colspan;rowspan,colspan;rowspan',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1184050093601581495');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL'),
                 'COMPONENT',
                 5,
                 50,
                 'Ligne 3 - Entêtes',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 'Liste des libellés dans les entêtes.<br/>Ex.: ,Valeur,%',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1184051005029584808');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL'),
                 'COMPONENT',
                 6,
                 60,
                 'Ligne 3 - colspan/rowspan',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 'Formatage des entêtes.<br/>Ex.: 1;1,4;1,4;1<br/><br/>colspan;rowspan,colspan;rowspan,colspan;rowspan',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1184051506414585224');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 14,
                 18,
                 'Application',
                 'PLSQL EXPRESSION',
                 'Y',
                 'sie_11_prodt_pkg.obten_numr_apex_prodt',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1206058734940019136');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 15,
                 19,
                 'Page',
                 'PLSQL EXPRESSION',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1206067240135020637');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 6,
                 130,
                 'SAPC',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1207749519944932548');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 2,
                 105,
                 'SCPI',
                 'TEXT',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1209515622086463072');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT'),
                 'COMPONENT',
                 1,
                 10,
                 'Ligne 1 - Entêtes/colspan/rowspan',
                 'TEXT',
                 'Y',
                 '',
                 100,
                 200,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1214258715411685092');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT'),
                 'COMPONENT',
                 2,
                 20,
                 'Ligne 2 - Entêtes/colspan/rowspan',
                 'TEXT',
                 'N',
                 '',
                 100,
                 200,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1214270921991686996');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT'),
                 'COMPONENT',
                 3,
                 30,
                 'Ligne 3 - Entêtes/colspan/rowspan',
                 'TEXT',
                 'N',
                 '',
                 100,
                 200,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1214275324761687770');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_VALDT_CLOB'),
                 'COMPONENT',
                 1,
                 10,
                 'Type de validation',
                 'SELECT LIST',
                 'Y',
                 'NOT_NULL',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1299491177008827801');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_VALDT_CLOB'),
                 'COMPONENT',
                 2,
                 20,
                 'Numéro message',
                 'TEXT',
                 'Y',
                 '',
                 30,
                 20,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1299526787181840259');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_VALDT_CLOB'),
                 'COMPONENT',
                 3,
                 30,
                 'Item',
                 'PAGE ITEM',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1299546773807845838');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_VALDT_CLOB'),
                 'COMPONENT',
                 4,
                 40,
                 'Colonne',
                 'TEXT',
                 'Y',
                 '',
                 60,
                 30,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1299555081079847971');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SUPRM_ITEM_CLOB'),
                 'COMPONENT',
                 1,
                 10,
                 'Liste des items (clob)',
                 'PAGE ITEMS',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1309331352513157087');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 10,
                 100,
                 'Définir élément SSPC',
                 'PAGE ITEM',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1391911752360804746');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 11,
                 110,
                 'Définir élément SSPI',
                 'PAGE ITEM',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1469233052891720691');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 12,
                 120,
                 'Item clé étrangère',
                 'PAGE ITEM',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1470328541443616224');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 1,
                 10,
                 'Titre',
                 'TEXT',
                 'Y',
                 '',
                 30,
                 50,
                 null,
                 null,
                 '',
                 'Y',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1481334537892572364');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 3,
                 30,
                 'Largeur',
                 'NUMBER',
                 'Y',
                 '640',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1481343362396598395');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 5,
                 50,
                 'Classe CSS',
                 'TEXT',
                 'N',
                 '',
                 30,
                 100,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1481347749713604143');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 7,
                 70,
                 'Redimensionner',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1481356538070610300');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 8,
                 80,
                 'Fermer avec la touche "Échap" (Esc)',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1481360949498613597');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 9,
                 90,
                 'Déplaçable',
                 'CHECKBOX',
                 'N',
                 'N',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1481365364735617978');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM'),
                 'COMPONENT',
                 4,
                 40,
                 'Hauteur',
                 'NUMBER',
                 'Y',
                 '480',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1481655455213453797');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SOUMT_CLOB'),
                 'COMPONENT',
                 1,
                 10,
                 'Liste des items (clob)',
                 'PAGE ITEMS',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1702755239132488057');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB'),
                 'COMPONENT',
                 1,
                 10,
                 'Table (Vue)',
                 'TEXT',
                 'Y',
                 '',
                 60,
                 92,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1706005824428347788');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB'),
                 'COMPONENT',
                 2,
                 20,
                 'Elément contenant la valeur de colonne de clé primaire',
                 'PAGE ITEM',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1706050808629352712');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB'),
                 'COMPONENT',
                 3,
                 30,
                 'Colonne de clé primaire',
                 'TEXT',
                 'Y',
                 '',
                 60,
                 30,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1706055215901354754');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB'),
                 'COMPONENT',
                 4,
                 40,
                 'Elément contenant la valeur de colonne de clé secondaire',
                 'PAGE ITEM',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1706059622135356587');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB'),
                 'COMPONENT',
                 5,
                 50,
                 'Colonne de clé secondaire',
                 'TEXT',
                 'N',
                 '',
                 60,
                 30,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1706064033216359752');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB'),
                 'COMPONENT',
                 6,
                 60,
                 'Liste des items (séparées par des virgules)',
                 'PAGE ITEMS',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1707032921535763274');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB'),
                 'COMPONENT',
                 7,
                 70,
                 'Liste des colonnes (séparées par des virgules)',
                 'TEXT',
                 'Y',
                 '',
                 100,
                 200,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1707070931232766007');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB'),
                 'COMPONENT',
                 1,
                 10,
                 'Table (Vue)',
                 'TEXT',
                 'Y',
                 '',
                 60,
                 92,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1721926294441997720');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB'),
                 'COMPONENT',
                 2,
                 20,
                 'Elément contenant la valeur de colonne de clé primaire',
                 'PAGE ITEM',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1721930703100000223');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB'),
                 'COMPONENT',
                 3,
                 30,
                 'Colonne de clé primaire',
                 'TEXT',
                 'Y',
                 '',
                 60,
                 30,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1721935108295001635');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB'),
                 'COMPONENT',
                 4,
                 40,
                 'Elément contenant la valeur de colonne de clé secondaire',
                 'PAGE ITEM',
                 'N',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1721939481414003357');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB'),
                 'COMPONENT',
                 5,
                 50,
                 'Colonne de clé secondaire',
                 'TEXT',
                 'N',
                 '',
                 60,
                 30,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1721943886262004781');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB'),
                 'COMPONENT',
                 6,
                 60,
                 'Liste des items (séparées par des virgules)',
                 'PAGE ITEMS',
                 'Y',
                 '',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1721963405655010362');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB'),
                 'COMPONENT',
                 7,
                 70,
                 'Liste des colonnes (séparées par des virgules)',
                 'TEXT',
                 'Y',
                 '',
                 100,
                 200,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1721967781545012860');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN'),
                 'COMPONENT',
                 1,
                 10,
                 'Icône',
                 'SELECT LIST',
                 'Y',
                 'ui-icon-arrowthick-1-e',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1908507902161920089');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN'),
                 'COMPONENT',
                 3,
                 30,
                 'Préfixe',
                 'TEXT',
                 'N',
                 '',
                 30,
                 50,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1908510826946920102');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN'),
                 'COMPONENT',
                 4,
                 40,
                 'Mode',
                 'SELECT LIST',
                 'Y',
                 'AVANC',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1908511206340920102');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN'),
                 'COMPONENT',
                 5,
                 50,
                 'Afficher informations supplémentaires',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1908512630746920103');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN'),
                 'COMPONENT',
                 6,
                 60,
                 'Inclure le contexte',
                 'CHECKBOX',
                 'N',
                 'Y',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 gta_id_atrib_plugn ('1908512630746920103'),
                 'EQUALS',
                 'Y',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('1908513007670920103');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHOSN'),
                 'COMPONENT',
                 2,
                 20,
                 'Type',
                 'SELECT LIST',
                 'Y',
                 'SIMPL',
                 null,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('64670911225199394543');

    insert
         into   apex_040200.wwv_flow_plugin_attributes (flow_id,
                                                        plugin_id,
                                                        attribute_scope,
                                                        attribute_sequence,
                                                        display_sequence,
                                                        prompt,
                                                        attribute_type,
                                                        is_required,
                                                        default_value,
                                                        display_length,
                                                        max_length,
                                                        sql_min_column_count,
                                                        sql_max_column_count,
                                                        column_data_types,
                                                        is_translatable,
                                                        depending_on_attribute_id,
                                                        depending_on_condition_type,
                                                        depending_on_expression,
                                                        help_text,
                                                        attribute_comment)
       values   (pnu_numr_apex,
                 gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHOSN'),
                 'COMPONENT',
                 3,
                 30,
                 'Message aucun résultat',
                 'TEXT',
                 'N',
                 '',
                 50,
                 null,
                 null,
                 null,
                 '',
                 'N',
                 null,
                 '',
                 '',
                 '',
                 '')
    returning   id
         into   gta_id_atrib_plugn ('64670919497279395968');
  end creer_plugn_atrib;

  procedure creer_plugn_valr_atrib (pnu_numr_apex in number) is
  begin
    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81189314005887439'),
              20,
              'Mutliple-value',
              'MULTP_VALUE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81189314005887439'),
              10,
              'Single-value',
              'SINGL_VALUE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('447837150070291429'),
              10,
              'Simple',
              'SIMPL');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('447837150070291429'),
              20,
              'Avancée',
              'AVANC');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('447837150070291429'),
              30,
              'APEXFramework',
              'APEXF');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('449618791079690316'),
              5,
              'Personnalisé',
              'PERSN');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('449618791079690316'),
              10,
              'Téléphone',
              '999-999-9999');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('449618791079690316'),
              20,
              'Code postal (Canada)',
              'a9a 9a9');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('449618791079690316'),
              30,
              'Permis de conduire',
              'a9999-999999-99');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629419043194676002'),
              10,
              'Tous les produits',
              'TOUS');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629419043194676002'),
              20,
              'Exclure les produits AFW',
              'EXCLU_AFW');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629419043194676002'),
              30,
              'Seulement les produits AFW',
              'SEULM_AFW');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629258464956578251'),
              10,
              'SAFP',
              'SAFP');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629258464956578251'),
              20,
              'SAFD',
              'SAFD');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629258464956578251'),
              30,
              'SAFU',
              'SAFU');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629258464956578251'),
              40,
              'SAFS',
              'SAFS');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('629258464956578251'),
              50,
              'SGA',
              'SGA');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('681316156849983643'),
              10,
              'ui-icon-arrowthick-1-e',
              'ui-icon-arrowthick-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('681316156849983643'),
              20,
              'ui-icon-arrow-1-e',
              'ui-icon-arrow-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('681316156849983643'),
              30,
              'ui-icon-carat-1-e',
              'ui-icon-carat-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('681316156849983643'),
              40,
              'ui-icon-triangle-1-e',
              'ui-icon-triangle-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('681316156849983643'),
              50,
              'ui-icon-circle-arrow-e',
              'ui-icon-circle-arrow-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1299491177008827801'),
              10,
              'La valeur n''est pas nulle',
              'NOT_NULL');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1908507902161920089'),
              10,
              'ui-icon-arrowthick-1-e',
              'ui-icon-arrowthick-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1908507902161920089'),
              20,
              'ui-icon-arrow-1-e',
              'ui-icon-arrow-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1908507902161920089'),
              30,
              'ui-icon-carat-1-e',
              'ui-icon-carat-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1908507902161920089'),
              40,
              'ui-icon-triangle-1-e',
              'ui-icon-triangle-1-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1908507902161920089'),
              50,
              'ui-icon-circle-arrow-e',
              'ui-icon-circle-arrow-e');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1908511206340920102'),
              10,
              'Classique',
              'CLASQ');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('1908511206340920102'),
              20,
              'Avancé',
              'AVANC');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('64670911225199394543'),
              10,
              'Simple',
              'SIMPL');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('64670911225199394543'),
              20,
              'Multiple',
              'MULTP');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81275900883155519'),
              10,
              'Contains case',
              'CONTAINS_CASE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81275900883155519'),
              20,
              'Contains ignore',
              'CONTAINS_IGNORE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81275900883155519'),
              30,
              'Exact case',
              'EXACT_CASE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81275900883155519'),
              40,
              'Exact ignore',
              'EXACT_IGNORE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81275900883155519'),
              50,
              'Like case',
              'LIKE_CASE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81275900883155519'),
              60,
              'Like ignore',
              'LIKE_IGNORE');

    insert
      into   apex_040200.wwv_flow_plugin_attr_values (flow_id,
                                                      plugin_attribute_id,
                                                      display_sequence,
                                                      display_value,
                                                      return_value)
    values   (pnu_numr_apex,
              gta_id_atrib_plugn ('81275900883155519'),
              70,
              'Lookup',
              'LOOKUP');
  end creer_plugn_valr_atrib;

  procedure creer_exten (pnu_numr_apex in number) is
  begin
    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHENTICATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTHE_11_UTILS',
                 'APEXFramework - SIE 21 - Authentification Utilisateur (SIE_11_UTILS)',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_authe_pkg.sentn',
                 '',
                 'sie_21_authe_pkg.authe_11_utils',
                 '',
                 '',
                 '',
                 'INVALID_SESSION',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTHE_11_UTILS');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHENTICATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTHE_12_UTILS',
                 'APEXFramework - SIE 21 - Authentification Utilisateur (SIE_12_UTILS)',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_authe_pkg.sentn',
                 '',
                 'sie_21_authe_pkg.authe_12_utils',
                 '',
                 '',
                 '',
                 'INVALID_SESSION',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTHE_12_UTILS');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_ACCES_PAGE',
                 'APEXFramework - SIE 21 - Autorisation Accès Page',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_acces_page',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_ACCES_PAGE');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_ADMIN_DOMN',
                 'APEXFramework - SIE 21 - Autorisation administrateur Domaine',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_admin_domn',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_ADMIN_DOMN');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_ADMIN_PRODT',
                 'APEXFramework - SIE 21 - Autorisation administrateur Produit',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_admin_prodt',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_ADMIN_PRODT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_CREAT',
                 'APEXFramework - SIE 21 - Autorisation Création',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_creat',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '256326647326815230',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_CREAT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_DEVLP_PRODT',
                 'APEXFramework - SIE 21 - Autorisation développeur Produit',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_devlp_prodt',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_DEVLP_PRODT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_MODFC',
                 'APEXFramework - SIE 21 - Autorisation Modification',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_modfc',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_MODFC');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_OPERT_DML',
                 'APEXFramework - SIE 21 - Autorisation Opération DML',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_opert_dml',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_OPERT_DML');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_SUPER_UTILS',
                 'APEXFramework - SIE 21 - Autorisation super utilisateur',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_super_utils',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_SUPER_UTILS');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'AUTHORIZATION TYPE',
                 'CA_SIESOLUTIONS_SIE21_AUTOR_SUPRS',
                 'APEXFramework - SIE 21 - Autorisation Suppression',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_autor_pkg.genr_autor_suprs',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AUTOR_SUPRS');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM',
                 'APEXFramework - SIE 21 - Afficher dialogue (iFrame)',
                 'NOTIFICATION',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_afich_dialg_ifram',
                 'sie_21_actio_dynmq_pkg.ajax_afich_dialg_ifram',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_AFICH_PRODT_AUTOR',
                 'APEXFramework - SIE 21 - Afficher la liste des produits autorisés',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_afich_prodt_autor',
                 'sie_21_actio_dynmq_pkg.ajax_afich_prodt_autor',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'JQUERY_SELECTOR',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_PRODT_AUTOR');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_AFICH_REGN_DIALG',
                 'APEXFramework - SIE 21 - Afficher dialogue (Région)',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_afich_regn_dialg',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'REGION',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AFICH_REGN_DIALG');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_AIDE_PAGE_ITEM',
                 'APEXFramework - SIE 21 - SIE 13 Aide page item',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_sie_13_aide_page_item',
                 'sie_21_actio_dynmq_pkg.ajax_sie_13_aide_page_item',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '420769810180509321',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_AIDE_PAGE_ITEM');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_CLIQR_SELCT_TEXTE',
                 'APEXFramework - SIE 21 - Cliquer pour sélectionner tout le texte',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_plugn_cliqr_selct_texte',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'ITEM',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CLIQR_SELCT_TEXTE');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_CONFR_SAUVG',
                 'APEXFramework - SIE 21 - Confirmer la sauvegarde (Initialisation)',
                 'NOTIFICATION',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_plugn_confr_sauvg',
                 'sie_21_actio_dynmq_pkg.ajax_plugn_confr_sauvg',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONFR_SAUVG');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_CONFR_SAUVG_REINTL',
                 'APEXFramework - SIE 21 - Confirmer la sauvegarde (Réinitilisation)',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_plugn_confr_sauvg_reint',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONFR_SAUVG_REINTL');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_DEPSM_TABLR_FORM',
                 'APEXFramework - SIE 21 - Dépassement Tabular Form',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_sie_18_depsm_tablr_form',
                 'sie_21_actio_dynmq_pkg.ajax_sie_18_depsm_tablr_form',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DEPSM_TABLR_FORM');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB',
                 'APEXFramework - SIE 21 - Extraction de ligne automatisée (DML) - CLOB',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_dml_obten_clob',
                 'sie_21_actio_dynmq_pkg.ajax_dml_obten_clob',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'STOP_EXECUTION_ON_ERROR',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_OBTEN_CLOB');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_FERMR_DIALG_IFRAM',
                 'APEXFramework - SIE 21 - Fermer dialogue (iFrame)',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_fermr_dialg_ifram',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_FERMR_DIALG_IFRAM');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_FERMR_REGN_DIALG',
                 'APEXFramework - SIE 21 - Fermer dialogue (Région)',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_fermr_regn_dialg',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'REGION',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_FERMR_REGN_DIALG');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_GESTN_TABLR_FORM',
                 'APEXFramework - SIE 21 - Gestion Tabular Form',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_plugn_gestn_tablr_form',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GESTN_TABLR_FORM');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT',
                 'APEXFramework - SIE 21 - Groupe entêtes rapport interactif',
                 'COMPONENT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_group_entet_raprt_inter',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'REGION',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL',
                 'APEXFramework - SIE 21 - Groupe entêtes rapport SQL',
                 'COMPONENT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_group_entet_raprt_sql',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'REGION',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT_SQL');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_INITL_COMPS',
                 'APEXFramework - SIE 21 - Initialisation composants',
                 'INIT',
                 'DESKTOP',
                 '',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_initl_comps',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_INITL_COMPS');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_MATRC_RAPRT_SQL',
                 'APEXFramework - SIE 21 - Matrice rapport SQL',
                 'COMPONENT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_matrc_raprt_sql',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'REGION',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_MATRC_RAPRT_SQL');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_MENU_REDRC',
                 'APEXFramework - SIE 21 - SIE 13 Menu redirection',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_sie_13_menu_redrc',
                 'sie_21_actio_dynmq_pkg.ajax_sie_13_menu_redrc',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '420470922400147878',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_MENU_REDRC');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_NAVGT_ENREG',
                 'APEXFramework - SIE 21 - Navigation par enregistrement',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_sie_21_navgt_enreg',
                 'sie_21_actio_dynmq_pkg.ajax_sie_21_navgt_enreg',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_NAVGT_ENREG');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_NAVGT_TABLR_FORM',
                 'APEXFramework - SIE 21 - Navigation Tabular Form',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_plugn_navgt_tablr_form',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_NAVGT_TABLR_FORM');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_POPUP_LOV',
                 'APEXFramework - SIE 21 - Popup LOV',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_plugn_popup_lov_ir',
                 'sie_21_actio_dynmq_pkg.ajax_plugn_popup_lov_ir',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_POPUP_LOV');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_PRIS_CHARG_NAVGT',
                 'APEXFramework - SIE 21 - Prise en charge du navigateur',
                 'NOTIFICATION',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_pris_charg_navgt',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_PRIS_CHARG_NAVGT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_REDRC_URL',
                 'APEXFramework - SIE 21 - Redirection URL',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_redrc_url',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REDRC_URL');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_IN',
                 'APEXFramework - SIE 21 - Afficher message informatif',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_afich_mesg_infor',
                 'sie_21_actio_dynmq_pkg.ajax_afich_mesg_infor',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_IN');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_PR',
                 'APEXFramework - SIE 21 - Afficher message processus',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_afich_mesg_procs',
                 'sie_21_actio_dynmq_pkg.ajax_afich_mesg_procs',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_PR');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_SIE_12_MODFR_MDP',
                 'APEXFramework - SIE 21 - SIE 12 modifier mot passe',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_sie_12_modfr_mot_passe',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SIE_12_MODFR_MDP');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_SIE_13_AIDE_PAGE',
                 'APEXFramework - SIE 21 - SIE 13 Aide page',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_sie_13_aide_page',
                 'sie_21_actio_dynmq_pkg.ajax_sie_13_aide_page',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SIE_13_AIDE_PAGE');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_SOUMT_CLOB',
                 'APEXFramework - SIE 21 - Soumettre - CLOB',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_soumt_clob',
                 'sie_21_actio_dynmq_pkg.ajax_soumt_clob',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'STOP_EXECUTION_ON_ERROR',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SOUMT_CLOB');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_SUPRM_ITEM_CLOB',
                 'APEXFramework - SIE 21 - Supprimer contenu items - CLOB',
                 'EXECUTE',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_suprm_item_clob',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'STOP_EXECUTION_ON_ERROR',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SUPRM_ITEM_CLOB');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'DYNAMIC ACTION',
                 'CA_SIESOLUTIONS_SIE21_TRANS_IDENT_COLN',
                 'APEXFramework - SIE 21 - Transformer les identifiants de colonnes d''un IR',
                 'INIT',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_actio_dynmq_pkg.genr_trans_ident_coln_ir',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TRANS_IDENT_COLN');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'ITEM TYPE',
                 'CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR',
                 'APEXFramework - SIE 21 - Popup LOV Arborescence',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_item_pkg.genr_plugn_item_popup_arbor',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'VISIBLE:READONLY:SOURCE:ELEMENT:WIDTH:ELEMENT_OPTION:LOV:LOV_DISPLAY_NULL',
                 '2',
                 '2',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_ARBOR');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'ITEM TYPE',
                 'CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR',
                 'APEXFramework - SIE 21 - Popup LOV IR',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_item_pkg.genr_plugn_item_popup_lov_ir',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'VISIBLE:READONLY:SOURCE:ELEMENT:WIDTH:ELEMENT_OPTION:LOV:LOV_REQUIRED:LOV_DISPLAY_NULL',
                 '2',
                 '2',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE13_ITEM_POPUP_LOV_IR');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'ITEM TYPE',
                 'CA_SIESOLUTIONS_SIE21_CHAMP_RECHR',
                 'APEXFramework - SIE 21 - Champ de recherche',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_item_pkg.genr_champ_rechr',
                 'sie_21_item_pkg.ajax_champ_rechr',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'VISIBLE:SOURCE:WIDTH',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHAMP_RECHR');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (
                  pnu_numr_apex,
                  'ITEM TYPE',
                  'CA_SIESOLUTIONS_SIE21_CHOSN',
                  'APEXFramework - SIE 21 - Chosen',
                  '',
                  'DESKTOP',
                  '#PLUGIN_PREFIX#',
                  '',
                  'sie_21_item_pkg.genr_plugn_chosn',
                  'sie_21_item_pkg.ajax_plugn_chosn',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  'VISIBLE:SESSION_STATE:READONLY:ESCAPE_OUTPUT:QUICKPICK:SOURCE:ELEMENT:WIDTH:ELEMENT_OPTION:ENCRYPT:LOV:LOV_REQUIRED:LOV_DISPLAY_NULL:CASCADING_LOV',
                  '2',
                  '2',
                  '',
                  'Y',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  'Y',
                  '',
                  '0.8',
                  '',
                  ''
                )
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHOSN');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'ITEM TYPE',
                 'CA_SIESOLUTIONS_SIE21_PAGE_ITEM_MASQ',
                 'APEXFramework - SIE 21- Masque pour la saisie',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_item_pkg.genr_plugn_item_masq',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'VISIBLE:SESSION_STATE:READONLY:ESCAPE_OUTPUT:SOURCE:ELEMENT:WIDTH',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_PAGE_ITEM_MASQ');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (
                  pnu_numr_apex,
                  'ITEM TYPE',
                  'CA_SIESOLUTIONS_SIE21_SELCT_2',
                  'APEXFramework - SIE 21 - select2',
                  '',
                  'DESKTOP',
                  '#PLUGIN_PREFIX#',
                  '',
                  'sie_21_item_pkg.genr_selct_2',
                  'sie_21_item_pkg.ajax_selct_2',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  'VISIBLE:SESSION_STATE:READONLY:ESCAPE_OUTPUT:QUICKPICK:SOURCE:ELEMENT:WIDTH:ELEMENT_OPTION:PLACEHOLDER:ENCRYPT:LOV:LOV_REQUIRED:LOV_DISPLAY_NULL:CASCADING_LOV',
                  '2',
                  '3',
                  '',
                  'Y',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  '',
                  'Y',
                  '',
                  '0.8',
                  'http://www.apexframework.com',
                  ''
                )
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SELCT_2');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'ITEM TYPE',
                 'CA_SIESOLUTIONS_SIE21_TOKN_INPUT',
                 'APEXFramework - SIE 21 - Token Input',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_item_pkg.genr_tokn_input',
                 'sie_21_item_pkg.ajax_tokn_input',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'VISIBLE:SESSION_STATE:SOURCE:LOV:LOV_REQUIRED',
                 '2',
                 '2',
                 'select 1, 2 from dual',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TOKN_INPUT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_CHANG_LIBL_FIL_ARI',
                 'APEXFramework - SIE 21 - Changer libellé fil d''ariane',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.chang_libl_fil_arian',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CHANG_LIBL_FIL_ARI');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_CONFR_SAUVG_REQT',
                 'APEXFramework - SIE 21 - Confirmer la sauvegarde (Requêtes)',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.defnr_sie_21_confr_sauvg',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONFR_SAUVG_REQT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_CONTX_FIL_ARIAN',
                 'APEXFramework - SIE 21 - Contexte fil d''ariane',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.defnr_contx_sie_04_fil_arian',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_CONTX_FIL_ARIAN');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_DEFNR_ITEM_PAGE',
                 'APEXFramework - SIE 21 - Définir item(s) page',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.defnr_item_page',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DEFNR_ITEM_PAGE');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_DEFNR_PRODT_SAFP',
                 'APEXFramework - SIE 21 - Définir produit SAFP',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.defnr_prodt_safp',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DEFNR_PRODT_SAFP');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB',
                 'APEXFramework - SIE 21 - Traitement de ligne automatique (DML) - CLOB',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.dml_maj_clob',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_DML_MAJ_CLOB');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_FERMR_DIALG_IFRAM',
                 'APEXFramework - SIE 21 - Fermer dialogue (iFrame)',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.fermr_dialg_ifram',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_FERMR_DIALG_IFRAM');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_INSER_TRACE',
                 'APEXFramework - SIE 21 - Insérer trace',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.inser_trace',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_INSER_TRACE');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_SIE04_MODE_PAGE',
                 'APEXFramework - SIE 21 - Définir le mode de la page (SIE_04)',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.defnr_sie_04_mode_page',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SIE04_MODE_PAGE');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_SURPM_COLCT_CLOB',
                 'APEXFramework - SIE 21 - Supprimer collection - CLOB',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.suprm_sie_21_colct_clob',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_SURPM_COLCT_CLOB');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_TRAIT_MESS_ERR',
                 'APEXFramework - SIE 21 - Traiter messages d''erreur',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.trait_mesgs_err',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_TRAIT_MESS_ERR');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'PROCESS TYPE',
                 'CA_SIESOLUTIONS_SIE21_VALDT_CLOB',
                 'APEXFramework - SIE 21 - Validation - CLOB',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 '',
                 '',
                 '',
                 'sie_21_procs_pkg.valdt_sie_21_colct_clob',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_VALDT_CLOB');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_LISTE_NAVGT',
                 'APEXFramework - SIE 21 - Liste de navigation',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_sie_13_liste_navgt',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_LISTE_NAVGT');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_ACORD',
                 'APEXFramework - SIE 21 - Accordion',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_plugn_regn_acord',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ACORD');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG',
                 'APEXFramework - SIE 21 - Afficher message',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_sie_01_afich_mesg',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX',
                 'APEXFramework - SIE 21 - Arborescence',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_plugn_regn_arbre',
                 'sie_21_regn_pkg.ajax_plugn_regn_arbre',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'SOURCE_PLAIN',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_ARBRE_AJAX');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_BARRE_RECHR_IR',
                 'APEXFramework - SIE 21 - Barre recherche IR',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_plugn_regn_barre_rechr_ir',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_BARRE_RECHR_IR');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_CALND',
                 'APEXFramework - SIE 21 - Calendrier',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_plugn_regn_calnd',
                 'sie_21_regn_pkg.ajax_plugn_regn_calnd',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_CALND');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_DIALG',
                 'APEXFramework - SIE 21 - Boîte de dialogue',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_plugn_regn_dialg',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '<br />
',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_DIALG');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN',
                 'APEXFramework - SIE 21 - Fil d''ariane',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'SIE_21_REGN_pkg.genr_sie_04_fil_arian',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '448659041313949161',
                 'Y',
                 '',
                 '1',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_MENU',
                 'APEXFramework - SIE 21 - Menu',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_sie_13_menu',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '174315002511187337',
                 'Y',
                 '',
                 '1.0',
                 '',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_MENU');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_PILE_MESG',
                 'APEXFramework - SIE 21 - Pile messages',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_sie_01_err_apex',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_PILE_MESG');

    insert
         into   apex_040200.wwv_flow_plugins (flow_id,
                                              plugin_type,
                                              name,
                                              display_name,
                                              category,
                                              supported_ui_types,
                                              image_prefix,
                                              plsql_code,
                                              render_function,
                                              ajax_function,
                                              validation_function,
                                              execution_function,
                                              session_sentry_function,
                                              invalid_session_function,
                                              authentication_function,
                                              post_logout_function,
                                              builder_validation_function,
                                              migration_function,
                                              standard_attributes,
                                              sql_min_column_count,
                                              sql_max_column_count,
                                              sql_examples,
                                              substitute_attributes,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              reference_id,
                                              subscribe_plugin_settings,
                                              help_text,
                                              version_identifier,
                                              about_url,
                                              plugin_comment)
       values   (pnu_numr_apex,
                 'REGION TYPE',
                 'CA_SIESOLUTIONS_SIE21_REGN_PRODT_CONTX_A',
                 'APEXFramework - SIE 21 - Produit contexte autorisé',
                 '',
                 'DESKTOP',
                 '#PLUGIN_PREFIX#',
                 '',
                 'sie_21_regn_pkg.genr_prodt_contx_autor',
                 'sie_21_regn_pkg.ajax_prodt_contx_autor',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Y',
                 '',
                 '0.8',
                 'http://www.apexframework.com',
                 '')
    returning   id
         into   gta_id_plugn ('CA_SIESOLUTIONS_SIE21_REGN_PRODT_CONTX_A');

    creer_plugn_evenm (pnu_numr_apex);

    creer_plugn_fichr (pnu_numr_apex);

    creer_plugn_optio (pnu_numr_apex);

    creer_plugn_atrib (pnu_numr_apex);

    creer_plugn_valr_atrib (pnu_numr_apex);
  exception
    when others then
      ete ();
      raise;
  end creer_exten;

  procedure creer_autor_schem (pnu_numr_apex in number) is
  begin
    insert
      into   apex_040200.wwv_flow_security_schemes (flow_id,
                                                    name,
                                                    scheme_type,
                                                    attribute_01,
                                                    attribute_02,
                                                    attribute_03,
                                                    attribute_04,
                                                    attribute_05,
                                                    attribute_06,
                                                    attribute_07,
                                                    attribute_08,
                                                    attribute_09,
                                                    attribute_10,
                                                    attribute_11,
                                                    attribute_12,
                                                    attribute_13,
                                                    attribute_14,
                                                    attribute_15,
                                                    scheme,
                                                    scheme_text,
                                                    error_message,
                                                    caching,
                                                    comments)
    values   (pnu_numr_apex,
              'Accès page',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_AUTOR_ACCES_PAGE',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Accès refusé.',
              'BY_USER_BY_PAGE_VIEW',
              '');

    insert
      into   apex_040200.wwv_flow_security_schemes (flow_id,
                                                    name,
                                                    scheme_type,
                                                    attribute_01,
                                                    attribute_02,
                                                    attribute_03,
                                                    attribute_04,
                                                    attribute_05,
                                                    attribute_06,
                                                    attribute_07,
                                                    attribute_08,
                                                    attribute_09,
                                                    attribute_10,
                                                    attribute_11,
                                                    attribute_12,
                                                    attribute_13,
                                                    attribute_14,
                                                    attribute_15,
                                                    scheme,
                                                    scheme_text,
                                                    error_message,
                                                    caching,
                                                    comments)
    values   (pnu_numr_apex,
              'Création',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_AUTOR_CREAT',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Accès refusé.',
              'BY_USER_BY_PAGE_VIEW',
              '');

    insert
      into   apex_040200.wwv_flow_security_schemes (flow_id,
                                                    name,
                                                    scheme_type,
                                                    attribute_01,
                                                    attribute_02,
                                                    attribute_03,
                                                    attribute_04,
                                                    attribute_05,
                                                    attribute_06,
                                                    attribute_07,
                                                    attribute_08,
                                                    attribute_09,
                                                    attribute_10,
                                                    attribute_11,
                                                    attribute_12,
                                                    attribute_13,
                                                    attribute_14,
                                                    attribute_15,
                                                    scheme,
                                                    scheme_text,
                                                    error_message,
                                                    caching,
                                                    comments)
    values   (pnu_numr_apex,
              'Modification',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_AUTOR_MODFC',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Accès refusé.',
              'BY_USER_BY_PAGE_VIEW',
              '');

    insert
      into   apex_040200.wwv_flow_security_schemes (flow_id,
                                                    name,
                                                    scheme_type,
                                                    attribute_01,
                                                    attribute_02,
                                                    attribute_03,
                                                    attribute_04,
                                                    attribute_05,
                                                    attribute_06,
                                                    attribute_07,
                                                    attribute_08,
                                                    attribute_09,
                                                    attribute_10,
                                                    attribute_11,
                                                    attribute_12,
                                                    attribute_13,
                                                    attribute_14,
                                                    attribute_15,
                                                    scheme,
                                                    scheme_text,
                                                    error_message,
                                                    caching,
                                                    comments)
    values   (pnu_numr_apex,
              'Opération DML',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_AUTOR_OPERT_DML',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Accès refusé.',
              'BY_USER_BY_PAGE_VIEW',
              '');

    insert
      into   apex_040200.wwv_flow_security_schemes (flow_id,
                                                    name,
                                                    scheme_type,
                                                    attribute_01,
                                                    attribute_02,
                                                    attribute_03,
                                                    attribute_04,
                                                    attribute_05,
                                                    attribute_06,
                                                    attribute_07,
                                                    attribute_08,
                                                    attribute_09,
                                                    attribute_10,
                                                    attribute_11,
                                                    attribute_12,
                                                    attribute_13,
                                                    attribute_14,
                                                    attribute_15,
                                                    scheme,
                                                    scheme_text,
                                                    error_message,
                                                    caching,
                                                    comments)
    values   (pnu_numr_apex,
              'Suppression',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_AUTOR_SUPRS',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Accès refusé.',
              'BY_USER_BY_PAGE_VIEW',
              '');
  exception
    when others then
      ete ();
      raise;
  end creer_autor_schem;

  procedure creer_authe_schem (pnu_numr_apex in number) is
  begin
    insert
         into   apex_040200.wwv_flow_authentications (flow_id,
                                                      name,
                                                      scheme_type,
                                                      invalid_session_type,
                                                      invalid_session_url,
                                                      cookie_name,
                                                      cookie_path,
                                                      cookie_domain,
                                                      use_secure_cookie_yn,
                                                      logout_url,
                                                      plsql_code,
                                                      verification_function,
                                                      pre_auth_process,
                                                      post_auth_process,
                                                      attribute_01,
                                                      attribute_02,
                                                      attribute_03,
                                                      attribute_04,
                                                      attribute_05,
                                                      attribute_06,
                                                      attribute_07,
                                                      attribute_08,
                                                      attribute_09,
                                                      attribute_10,
                                                      attribute_11,
                                                      attribute_12,
                                                      attribute_13,
                                                      attribute_14,
                                                      attribute_15,
                                                      help_text,
                                                      comments)
       values   (pnu_numr_apex,
                 'APEXFramework - SIE 21 - Authentification Utilisateur (12)',
                 'PLUGIN_CA_SIESOLUTIONS_SIE21_AUTHE_12_UTILS',
                 'URL',
                 'f?p=&APP_ID.:101',
                 'SIE',
                 '',
                 '',
                 'N',
                 'f?p=&APP_ID.:101',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 '',
                 'Authentification SIE')
    returning   id
         into   gnu_authe_afw_id;
  exception
    when others then
      ete ();
      raise;
  end creer_authe_schem;

  procedure ajust_propr_aplic (pnu_numr_apex in number) is
  begin
    update   apex_aplic
       set   authentication_id = gnu_authe_afw_id,
             authentication = 'PLUGIN',
             error_handling_function = 'sie_01_err_apex_pkg.gestn_mesg_err_apex'
     where   id = pnu_numr_apex and security_group_id = gnu_secrt_group_id;
  exception
    when others then
      ete ();
      raise;
  end ajust_propr_aplic;

  procedure creer_exten_page_zero (pnu_numr_apex in number) is
  begin
    apex_040200.wwv_flow_wizard_api.create_page_dynamic_action (
      p_flow_id                  => pnu_numr_apex,
      p_page_id                  => knu_page_globl,
      p_event_name               => 'APEXFramework',
      p_event_sequence           => 10,
      p_event_triggering_elem_type => '',
      p_event_triggering_region_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_button_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_element => '',
      p_event_triggering_cond_type => '',
      p_event_triggering_expression => '',
      p_event_bind_type          => 'bind',
      p_event_bind_delegate_to   => '',
      p_event_bind_event_type    => 'ready',
      p_event_bind_event_type_custom => '',
      p_event_display_when_type  => '',
      p_event_display_when_cond  => '',
      p_event_display_when_cond2 => '',
      p_event_comment            => '',
      p_action_true_action_sequence => 1,
      p_action_true_exec_on_init => 'N',
      p_action_true_action       => 'NATIVE_EXECUTE_PLSQL_CODE',
      p_action_true_aff_elems_type => null
    );

    apex_040200.wwv_flow_wizard_api.create_page_dynamic_action (
      p_flow_id                  => pnu_numr_apex,
      p_page_id                  => knu_page_globl,
      p_event_name               => 'APEXFramework - Commentaires/Bogues (Afficher dialogue)',
      p_event_sequence           => 20,
      p_event_triggering_elem_type => 'JQUERY_SELECTOR',
      p_event_triggering_region_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_button_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_element => '#boutn_comnt_bogue',
      p_event_triggering_cond_type => '',
      p_event_triggering_expression => '',
      p_event_bind_type          => 'live',
      p_event_bind_delegate_to   => '',
      p_event_bind_event_type    => 'click',
      p_event_bind_event_type_custom => '',
      p_event_display_when_type  => '',
      p_event_display_when_cond  => '',
      p_event_display_when_cond2 => '',
      p_event_comment            => '',
      p_action_true_action_sequence => 1,
      p_action_true_exec_on_init => 'N',
      p_action_true_action       => 'NATIVE_EXECUTE_PLSQL_CODE',
      p_action_true_aff_elems_type => null
    );

    apex_040200.wwv_flow_wizard_api.create_page_dynamic_action (
      p_flow_id                  => pnu_numr_apex,
      p_page_id                  => knu_page_globl,
      p_event_name               => 'APEXFramework - Commentaires/Bogues (Fermer dialogue)',
      p_event_sequence           => 30,
      p_event_triggering_elem_type => 'JQUERY_SELECTOR',
      p_event_triggering_region_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_button_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_element => 'div.dialg_comnt_bogue div.afw_sie_21_actio_dynmq_dialg',
      p_event_triggering_cond_type => '',
      p_event_triggering_expression => '',
      p_event_bind_type          => 'live',
      p_event_bind_delegate_to   => '',
      p_event_bind_event_type    => 'PLUGIN_CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM|DYNAMIC ACTION|dialogbeforeclose',
      p_event_bind_event_type_custom => '',
      p_event_display_when_type  => '',
      p_event_display_when_cond  => '',
      p_event_display_when_cond2 => '',
      p_event_comment            => '',
      p_action_true_action_sequence => 1,
      p_action_true_exec_on_init => 'N',
      p_action_true_action       => 'NATIVE_EXECUTE_PLSQL_CODE',
      p_action_true_aff_elems_type => null
    );

    apex_040200.wwv_flow_wizard_api.create_page_dynamic_action (
      p_flow_id                  => pnu_numr_apex,
      p_page_id                  => knu_page_globl,
      p_event_name               => 'APEXFramework - Modifier mot de passe (Afficher dialogue)',
      p_event_sequence           => 40,
      p_event_triggering_elem_type => 'DOM_OBJECT',
      p_event_triggering_region_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_button_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_element => 'document',
      p_event_triggering_cond_type => '',
      p_event_triggering_expression => '',
      p_event_bind_type          => 'bind',
      p_event_bind_delegate_to   => '',
      p_event_bind_event_type    => 'PLUGIN_CA_SIESOLUTIONS_SIE21_SIE_12_MODFR_MDP|DYNAMIC ACTION|afw_sie_21_actio_dynmq_sie_12_modfr_mp_afich',
      p_event_bind_event_type_custom => '',
      p_event_display_when_type  => '',
      p_event_display_when_cond  => '',
      p_event_display_when_cond2 => '',
      p_event_comment            => '',
      p_action_true_action_sequence => 1,
      p_action_true_exec_on_init => 'N',
      p_action_true_action       => 'NATIVE_EXECUTE_PLSQL_CODE',
      p_action_true_aff_elems_type => null
    );

    apex_040200.wwv_flow_wizard_api.create_page_dynamic_action (
      p_flow_id                  => pnu_numr_apex,
      p_page_id                  => knu_page_globl,
      p_event_name               => 'APEXFramework - Modifier mot de passe (Fermer dialogue)',
      p_event_sequence           => 50,
      p_event_triggering_elem_type => 'JQUERY_SELECTOR',
      p_event_triggering_region_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_button_id => null,                      --Si jamais il est pour en avoir, corriger manuellement
      p_event_triggering_element => 'div.dialg_modfr_mot_passe div.afw_sie_21_actio_dynmq_dialg',
      p_event_triggering_cond_type => '',
      p_event_triggering_expression => '',
      p_event_bind_type          => 'live',
      p_event_bind_delegate_to   => '',
      p_event_bind_event_type    => 'PLUGIN_CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM|DYNAMIC ACTION|dialogbeforeclose',
      p_event_bind_event_type_custom => '',
      p_event_display_when_type  => '',
      p_event_display_when_cond  => '',
      p_event_display_when_cond2 => '',
      p_event_comment            => '',
      p_action_true_action_sequence => 1,
      p_action_true_exec_on_init => 'N',
      p_action_true_action       => 'NATIVE_EXECUTE_PLSQL_CODE',
      p_action_true_aff_elems_type => null
    );

    --IL FAUT SUPPRIMER les true events créées (On en a pas besoin, mais la procedure l'exige)
    delete from   apex_actio_dynmq_actio ada
          where   ada.flow_id = pnu_numr_apex
              and ada.page_id = knu_page_globl
              and ada.event_id in
                    (select   ade.id
                       from   apex_actio_dynmq_evenm ade
                      where   ade.flow_id = ada.flow_id
                          and ade.page_id = ada.page_id
                          and ade.name like 'APEXFramework%');
  exception
    when others then
      ete ();
      raise;
  end creer_exten_page_zero;

  procedure creer_exten_actio_page_zero (pnu_numr_apex in number) is
  begin
    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              100,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_NAVGT_ENREG',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              90,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_INITL_COMPS',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              70,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_AIDE_PAGE_ITEM',
              '',
              null,
              null,
              '',
              'Y',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              80,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_SIE_13_AIDE_PAGE',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              60,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_MENU_REDRC',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              10,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_CONFR_SAUVG',
              '',
              null,
              null,
              '',
              'Êtes-vous certain de vouloir quitter cette page sans sauvegarder les modifications apportées?',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              20,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_DEPSM_TABLR_FORM',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              30,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_NAVGT_TABLR_FORM',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              40,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_GESTN_TABLR_FORM',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              50,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_POPUP_LOV',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   ( (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex and ade.page_id = knu_page_globl and ade.name = 'APEXFramework'),
              pnu_numr_apex,
              knu_page_globl,
              'TRUE',
              100,
              'N',
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_SIE_12_MODFR_MDP',
              '',
              null,
              null,
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Y',
              '');

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Commentaires/Bogues (Afficher dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               10,
               'N',
               '',
               'PLUGIN_CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM',
               '',
               null,
               null,
               '',
               'Ajouter un commentaire et/ou bogue',
               '',
               '640',
               '480',
               'dialg_comnt_bogue',
               '',
               'N',
               'Y',
               'N',
               '',
               '',
               '',
               'Y',
               'sie_11_aplic_pkg.obten_numr_apex_aplic',
               '102',
               'Y',
               ''
             );

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Commentaires/Bogues (Fermer dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               10,
               'N',
               'Y',
               'NATIVE_EXECUTE_PLSQL_CODE',
               '',
               null,
               null,
               '',
               'sie_21_plugn_dialg_ifram_pkg.defnr_contx_apres_fermt_dialg();',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               'Y',
               ''
             );

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Commentaires/Bogues (Fermer dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               20,
               'N',
               '',
               'PLUGIN_CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_PR',
               '',
               null,
               null,
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               'Y',
               ''
             );

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Commentaires/Bogues (Fermer dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               30,
               'N',
               '',
               'PLUGIN_CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_IN',
               '',
               null,
               null,
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               'Y',
               ''
             );

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Modifier mot de passe (Afficher dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               10,
               'N',
               '',
               'PLUGIN_CA_SIESOLUTIONS_SIE21_AFICH_DIALG_IFRAM',
               '',
               null,
               null,
               '',
               'Modifier votre mot de passe',
               '',
               '640',
               '480',
               'dialg_modfr_mot_passe',
               '',
               'N',
               'Y',
               'N',
               '',
               '',
               '',
               'Y',
               'sie_11_aplic_pkg.obten_numr_apex_aplic(sie_11_aplic_pkg.obten_aplic_authe)',
               '106',
               'Y',
               ''
             );

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Modifier mot de passe (Fermer dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               10,
               'N',
               'Y',
               'NATIVE_EXECUTE_PLSQL_CODE',
               '',
               null,
               null,
               '',
               'sie_21_plugn_dialg_ifram_pkg.defnr_contx_apres_fermt_dialg();',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               'Y',
               ''
             );

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Modifier mot de passe (Fermer dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               20,
               'N',
               '',
               'PLUGIN_CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_PR',
               '',
               null,
               null,
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               'Y',
               ''
             );

    insert
      into   apex_actio_dynmq_actio (event_id,
                                     flow_id,
                                     page_id,
                                     event_result,
                                     action_sequence,
                                     execute_on_page_init,
                                     wait_for_result,
                                     action,
                                     affected_elements_type,
                                     affected_region_id,
                                     affected_button_id,
                                     affected_elements,
                                     attribute_01,
                                     attribute_02,
                                     attribute_03,
                                     attribute_04,
                                     attribute_05,
                                     attribute_06,
                                     attribute_07,
                                     attribute_08,
                                     attribute_09,
                                     attribute_10,
                                     attribute_11,
                                     attribute_12,
                                     attribute_13,
                                     attribute_14,
                                     attribute_15,
                                     stop_execution_on_error,
                                     da_action_comment)
    values   (
               (select   ade.id
                  from   apex_actio_dynmq_evenm ade
                 where   ade.flow_id = pnu_numr_apex
                     and ade.page_id = knu_page_globl
                     and ade.name = 'APEXFramework - Modifier mot de passe (Fermer dialogue)'),
               pnu_numr_apex,
               knu_page_globl,
               'TRUE',
               30,
               'N',
               '',
               'PLUGIN_CA_SIESOLUTIONS_SIE21_REGN_AFICH_MESG_IN',
               '',
               null,
               null,
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               '',
               'Y',
               ''
             );
  exception
    when others then
      ete ();
      raise;
  end creer_exten_actio_page_zero;

  --Produit le minimum pour les regn_plugn (Fil ariane, zone de message, liste de navigation)
  --Le reste des instances (Menu + Recherche?) ne sont pas jugée nécessaires car présent dans guide du développeur
  procedure creer_insta_exten_page_zero (pnu_numr_apex in number) is
  begin
    insert
      into   apex_040200.wwv_flow_page_plugs (flow_id,
                                              page_id,
                                              plug_name,
                                              plug_template,
                                              plug_display_sequence,
                                              plug_display_column,
                                              plug_display_point,
                                              plug_caching,
                                              escape_on_http_output,
                                              plug_query_row_template,
                                              plug_query_headings_type,
                                              plug_query_num_rows_type,
                                              pagination_display_position,
                                              plug_query_row_count_max,
                                              plug_query_show_nulls_as,
                                              plug_source_type,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              attribute_16,
                                              attribute_17,
                                              attribute_18,
                                              attribute_19,
                                              attribute_20,
                                              attribute_21,
                                              attribute_22,
                                              attribute_23,
                                              attribute_24,
                                              attribute_25)
    values   (pnu_numr_apex,
              knu_page_globl,
              'Fil d''ariane',
              0,
              30,
              1,
              'REGION_POSITION_01',
              '',
              'Y',
              1,
              'COLON_DELMITED_LIST',
              '',
              '',
              500,
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_REGN_FIL_ARIAN',
              'ui-icon-arrowthick-1-e',
              '',
              '',
              'AVANC',
              'Y',
              'N',
              'Y',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '');

    insert
      into   apex_040200.wwv_flow_page_plugs (flow_id,
                                              page_id,
                                              plug_name,
                                              plug_template,
                                              plug_display_sequence,
                                              plug_display_column,
                                              plug_display_point,
                                              plug_caching,
                                              escape_on_http_output,
                                              plug_query_row_template,
                                              plug_query_headings_type,
                                              plug_query_num_rows_type,
                                              pagination_display_position,
                                              plug_query_row_count_max,
                                              plug_query_show_nulls_as,
                                              plug_source_type,
                                              attribute_01,
                                              attribute_02,
                                              attribute_03,
                                              attribute_04,
                                              attribute_05,
                                              attribute_06,
                                              attribute_07,
                                              attribute_08,
                                              attribute_09,
                                              attribute_10,
                                              attribute_11,
                                              attribute_12,
                                              attribute_13,
                                              attribute_14,
                                              attribute_15,
                                              attribute_16,
                                              attribute_17,
                                              attribute_18,
                                              attribute_19,
                                              attribute_20,
                                              attribute_21,
                                              attribute_22,
                                              attribute_23,
                                              attribute_24,
                                              attribute_25)
    values   (pnu_numr_apex,
              knu_page_globl,
              'Messages Informatifs',
              0,
              70,
              1,
              'REGION_POSITION_07',
              'NOT_CACHED',
              'Y',
              1,
              'COLON_DELMITED_LIST',
              '',
              '',
              500,
              '',
              'PLUGIN_CA_SIESOLUTIONS_SIE21_REGN_PILE_MESG',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '');
  exception
    when others then
      ete ();
      raise;
  end creer_insta_exten_page_zero;

  procedure creer_redrc_page_conxn (pnu_numr_apex in number) is
  begin
    apex_040200.wwv_flow_api.create_page_process (
      p_id                       => null,
      p_flow_id                  => pnu_numr_apex,
      p_flow_step_id             => knu_page_conxn,
      p_process_sequence         => 60,
      p_process_point            => 'BEFORE_HEADER',
      p_region_id                => null,
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - Redirection vers le produit d''authentification',
      p_process_sql              => 'sie_12_authe_apex_pkg.redrg_prodt_authe;',
      p_attribute_01             => '',
      p_attribute_02             => '',
      p_attribute_03             => '',
      p_attribute_04             => '',
      p_attribute_05             => '',
      p_attribute_06             => '',
      p_attribute_07             => '',
      p_attribute_08             => '',
      p_attribute_09             => '',
      p_attribute_10             => '',
      p_attribute_11             => '',
      p_attribute_12             => '',
      p_attribute_13             => '',
      p_attribute_14             => '',
      p_attribute_15             => '',
      p_process_item_name        => '',
      p_process_error_message    => '',
      p_error_display_location   => 'ON_ERROR_PAGE',
      p_process_when_button_id   => null,
      p_process_when             => '',
      p_process_when2            => '',
      p_process_when_type        => '',
      p_exec_cond_for_each_row   => '',
      p_only_for_changed_rows    => '',
      p_process_success_message  => '',
      p_required_patch           => null,
      p_process_comment          => null
    );
  end creer_redrc_page_conxn;

  procedure creer_conxn_page_conxn (pnu_numr_apex in number) is
  begin
    apex_040200.wwv_flow_api.create_page_process (
      p_id                       => null,
      p_flow_id                  => pnu_numr_apex,
      p_flow_step_id             => knu_page_conxn,
      p_process_sequence         => 30,
      p_process_point            => 'AFTER_SUBMIT',
      p_region_id                => null,
      p_process_type             => 'PLSQL',
      p_process_name             => 'AFW - Connexion',
      p_process_sql              => 'begin
  sie_12_authe_apex_pkg.exect_procd_persn();

  sie_12_authe_apex_pkg.authe_redrg (
    pva_code_utils        => :p101_code_utils,
    pva_mot_passe         => :p101_mot_passe,
    pva_domn              => :p101_domn,
    pnu_numr_apex_aplic   => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_numr_apex_aplic''),
    pnu_numr_apex_page    => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_numr_apex_page''),
    pbo_indic_forcr_sspc  => true,
    pbo_indic_forcr_sidf  => true,
    pva_scpc              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_scpc''),
    pnu_sspc              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_sspc''),
    pva_sapc              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_sapc''),
    pva_scpi              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_scpi''),
    pnu_sspi              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_sspi''),
    pva_sapi              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_sapi''),
    pnu_snpi              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_snpi''),
    pnu_sidf              => sie_07_sesn_pkg.obten_valr_sesn (
                              ''s_authe_cible_sidf''));
end;',
      p_attribute_01             => '',
      p_attribute_02             => '',
      p_attribute_03             => '',
      p_attribute_04             => '',
      p_attribute_05             => '',
      p_attribute_06             => '',
      p_attribute_07             => '',
      p_attribute_08             => '',
      p_attribute_09             => '',
      p_attribute_10             => '',
      p_attribute_11             => '',
      p_attribute_12             => '',
      p_attribute_13             => '',
      p_attribute_14             => '',
      p_attribute_15             => '',
      p_process_item_name        => '',
      p_process_error_message    => '',
      p_error_display_location   => 'INLINE_IN_NOTIFICATION',
      p_process_when_button_id   => null,
      p_process_when             => '',
      p_process_when2            => '',
      p_process_when_type        => '',
      p_exec_cond_for_each_row   => '',
      p_only_for_changed_rows    => '',
      p_process_success_message  => '',
      p_required_patch           => null,
      p_process_comment          => null
    );
  end creer_conxn_page_conxn;

  procedure insta_afw_aplic_apex (pnu_id_apex in number) is
  begin
    if not verfr_page_globl (pnu_id_apex) then
      raise gex_page_globl_non_trouv;
    elsif not verfr_page_conxn (pnu_id_apex) then
      raise gex_page_conxn_non_trouv;
    end if;

    if not afw_deja_insta (pnu_id_apex) then
      --Définir le groupe de sécurité pour le vpd apex (security_group_id)
      defnr_secrt_group_id (pnu_id_apex);

      creer_item_aplic (pnu_id_apex);

      creer_regn_page_zero (pnu_id_apex);

      creer_item_page_zero (pnu_id_apex);

      creer_procs (pnu_id_apex);

      creer_racrc (pnu_id_apex);

      creer_exten (pnu_id_apex);

      creer_exten_page_zero (pnu_id_apex);

      creer_exten_actio_page_zero (pnu_id_apex);

      creer_insta_exten_page_zero (pnu_id_apex);

      --Créer les autorizations schemes et authentifications schemes à partir des plugins nouvellements créés
      --Voir p-e même les sélectionner en tant que PAR DÉFAUT
      creer_autor_schem (pnu_id_apex);

      creer_authe_schem (pnu_id_apex);

      creer_redrc_page_conxn (pnu_id_apex);

      creer_conxn_page_conxn (pnu_id_apex);

      --Pour finir, ajuster les proprietes de l'application
      ajust_propr_aplic (pnu_id_apex);

      ete (kva_mesg_afw_insta_termn);
    else
      ete (kva_mesg_afw_insta);
    end if;
  exception
    when gex_page_globl_non_trouv then
      ete (
        'Page commune (Global page) non trouvee.  Veuillez creer la page ou definir la variable "knu_page_globl" selon la page existante.',
        'Valeur courante:' || knu_page_globl
      );
      raise;
    when gex_page_conxn_non_trouv then
      ete (
        'Page connexion (Login page) non trouvee.  Veuillez creer la page ou definir la variable "knu_page_conxn" selon la page existante.',
        'Valeur courante:' || knu_page_conxn
      );
      raise;
    when others then
      ete ();
      raise;
  end insta_afw_aplic_apex;

  procedure anals_versn_plugn (pnu_id_apex in number) is
    cursor cur_plugn is
      select     *
          from   apex_040200.wwv_flow_plugins fp
         where   fp.flow_id = pnu_id_apex and fp.name like 'CA_SIESOLUTIONS%'
      order by   fp.name;

    vva_code_aplic_safp                     varchar2 (23) default 'SAFP';
    vnu_numr_aplic_safp                     number default sie_11_aplic_pkg.obten_numr_apex_aplic (vva_code_aplic_safp);

    cursor cur_plugn_afw (vva_nom_plugn in varchar2) is
      select   *
        from   apex_040200.wwv_flow_plugins fp
       where   fp.flow_id = vnu_numr_aplic_safp and fp.name = vva_nom_plugn;
  begin
    ete ('-- Analyse du versionnage des plugins AFW --',
         'Application: ' || pnu_id_apex);

    for rec_plugn in cur_plugn loop
      ete ('Comparation plugin ' || rec_plugn.name,
           'Nom: ' || rec_plugn.display_name);

      for rec_afw in cur_plugn_afw (rec_plugn.name) loop
        --Pour l'instant, ne valider que si les versions concordent.
        if rec_afw.version_identifier <> rec_plugn.version_identifier then
          ete (
               'Version non correspondante.  Veuillez exporter/importer "'
            || rec_plugn.display_name
            || '" de l''application '
            || vva_code_aplic_safp
            || '.'
          );
        else
          ete ('Version identique.');
        end if;
      end loop;
    end loop;
  end anals_versn_plugn;

  --On suppose que l'installation du framework a été exécuté SANS l'ajout des events / attributes
  procedure maj_evenm_atrib_plugn (pnu_numr_apex in number) is
    cursor cur_plugn is
      select   fp.id,
               fp.name
        from   apex_040200.wwv_flow_plugins fp
       where   fp.flow_id = pnu_numr_apex and fp.name like 'CA_SIESOLUTIONS_%';
  begin
    defnr_secrt_group_id (pnu_numr_apex);

    --Alimenter le tableau des plugins (ID)
    for rec_plugn in cur_plugn loop
      gta_id_plugn (rec_plugn.name) := rec_plugn.id;
    end loop;

    creer_plugn_evenm (pnu_numr_apex);

    creer_plugn_fichr (pnu_numr_apex);

    creer_plugn_optio (pnu_numr_apex);

    creer_plugn_atrib (pnu_numr_apex);

    creer_plugn_valr_atrib (pnu_numr_apex);
  end maj_evenm_atrib_plugn;
end sie_11_insta_afw_pkg;
/

Prompt Package Body SIE_11_MIGRT_PKG;
/* Formatted on 04/12/2013 11:35:20 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_11_migrt_pkg is
  type typ_rec_elemn_enonc_inser is record
  (
    nom_entit_refrn                         varchar2 (30),
    nom_coln                                varchar2 (30),
    valr_varch                              varchar2 (32767),
    valr_numbr                              number,
    valr_date                               date,
    valr_clob                               clob,
    indic_selct                             varchar2 (1),
    indic_updat                             varchar2 (1)
  );

  type typ_tab_elemn_enonc_inser is table of typ_rec_elemn_enonc_inser
                                      index by pls_integer;

  gta_elemn_enonc_inser                   typ_tab_elemn_enonc_inser;
  gnu_prodt                               vd_i_sie_11_prodt.seqnc%type;
  gnu_aplic                               vd_i_sie_11_aplic.seqnc%type;
  gva_contx                               varchar2 (23);
  gva_contx_courn                         varchar2 (23);
  gnu_versn_afw                           vd_i_sie_11_versn.seqnc%type;
  gnu_index_alimn_table                   sie_07_clob_pkg.typ_index;
  gnu_index_genrl                         sie_07_clob_pkg.typ_index;
  gnu_index_prodt                         sie_07_clob_pkg.typ_index;
  gnu_index_aplic                         sie_07_clob_pkg.typ_index;
  gnu_index_selct                         sie_07_clob_pkg.typ_index;
  gnu_index_updat                         sie_07_clob_pkg.typ_index;
  gva_fin_ligne                           varchar2 (10) := chr (10);
  gnu_nombr_seprt                         number (10) default null;
  gnu_compt_ligne_bloc                    number (10) default 0;
  gbo_merge                               boolean default false;
  gbl_zip                                 blob;
  gva_schem                               varchar2 (30);

  procedure metr_a_jour_refrn (pnu_versn in number) is
    vnu_ref_prodt                           number (10);
    vva_owner                               varchar2 (60);
  begin
    --Obtenir le schema du framework
    vnu_ref_prodt := sie_11_prodt_pkg.obten_prodt ('AFW');

    vva_owner := sie_11_prodt_pkg.obten_schem_afw;

    --Supprimer les attributs d'entites qui n'existent plus
    delete   vd_sie_11_atrib_entit sourc
     where   not exists
                   (select   1
                      from   all_tab_columns tc,
                             vd_i_sie_11_entit e
                     where   tc.table_name = e.nom
                         and tc.owner = vva_owner
                         and e.seqnc = sourc.ref_entit
                         and tc.column_name = sourc.nom)
         and pnu_versn = (select   ref_versn
                            from   vd_i_sie_11_entit e
                           where   e.seqnc = sourc.ref_entit);

    --Supprimer les entites qui n'existent plus
    delete   vd_i_sie_11_entit sourc
     where   nom not in (select   table_name
                           from   all_tables
                          where   owner = vva_owner)
         and ref_versn = pnu_versn;

    --Mettre a jour les entites
    merge into   vd_i_sie_11_entit dest
         using   (select   table_name
                    from   all_tables at
                   where   at.owner = vva_owner and at.table_name like 'SIE%') sourc
            on   (sourc.table_name = dest.nom and dest.ref_versn = pnu_versn)
    when not matched then
      insert       (nom,
                    nom_table_tempr,
                    nom_table_ereur,
                    indic_creer_ocurn,
                    indic_modif_ocurn,
                    indic_suprm_ocurn,
                    indic_nouvl_entit,
                    ref_versn)
          values   (sourc.table_name,
                       'TC$'
                    || replace (substr (sourc.table_name,
                                        5),
                                '_',
                                '$'),
                       'EM$'
                    || substr (sourc.table_name,
                               5),
                    'N',
                    'N',
                    'N',
                    'O',
                    pnu_versn);

    --Mettre a jour les attributs d'entite
    merge into   vd_i_sie_11_atrib_entit dest
         using   (select   atc.column_name,
                           atc.data_type,
                           atc.table_name,
                           (select   se.seqnc
                              from   vd_i_sie_11_entit se
                             where   se.nom = atc.table_name and se.ref_versn = pnu_versn)
                             as ref_entit
                    from   all_tab_columns atc,
                           all_tables at
                   where   atc.owner = at.owner
                       and atc.table_name = at.table_name
                       and at.owner = vva_owner
                       and at.table_name like 'SIE%') sourc2
            on   (sourc2.column_name = dest.nom and dest.ref_entit = sourc2.ref_entit)
    /* when matched then
update set dest.type_don = (decode (sourc2.data_type, 'DATE', 'D', 'VARCHAR2', 'V', 'NUMBER', 'N', 'V'))*/
    when not matched then
      insert       (dest.nom, dest.type_don, dest.compr_migrt, dest.ref_entit, dest.indic_nouvl_atrib)
          values   (
                     sourc2.column_name,
                     (decode (sourc2.data_type,  'DATE', 'D',  'VARCHAR2', 'V',  'NUMBER', 'N',  'V')),
                     (case
                        when sourc2.column_name in ('SEQNC', 'DNR_REF_PRODT', 'DNR_REF_APLIC') then
                          'CLE_SUBST'
                        when sourc2.column_name = 'CODE' then
                          'CLE_FONCT'
                        when sourc2.column_name in ('DATE_CREAT', 'DATE_MODFC', 'UTILS_CREAT', 'UTILS_MODFC') then
                          'NON_MIGRE'
                        else
                          'VALR_MIGRE'
                      end),
                     sourc2.ref_entit,
                     'O'
                   );
  end metr_a_jour_refrn;

  function obten_type_atrib (pva_type_don in varchar2,
                             pva_seprt in varchar2)
    return varchar2 is
    vva_ligne                               varchar2 (200);
  begin
    case pva_type_don
      when 'N' then
        vva_ligne := ' number' || pva_seprt;
      when 'D' then
        vva_ligne := ' date' || pva_seprt;
      when 'V' then
        vva_ligne := ' varchar2(4000)' || pva_seprt;
      when 'C' then
        vva_ligne := ' clob' || pva_seprt;
    end case;

    return vva_ligne;
  end obten_type_atrib;

  function obten_indic_tabl_index (pnu_seqnc_entit in number)
    return varchar2 is
    vva_indic_tabl_index                    varchar2 (1);
  begin
    select   indic_expor_tabl_index
      into   vva_indic_tabl_index
      from   vd_i_sie_11_entit
     where   seqnc = pnu_seqnc_entit;

    return vva_indic_tabl_index;
  end obten_indic_tabl_index;

  function obten_indic_suprm_don_prodt (pnu_seqnc_entit in number)
    return varchar2 is
    vva_indic_suprm_don_prodt               varchar2 (1);
  begin
    select   indic_suprm_don_prodt
      into   vva_indic_suprm_don_prodt
      from   vd_i_sie_11_entit
     where   seqnc = pnu_seqnc_entit;

    return vva_indic_suprm_don_prodt;
  end obten_indic_suprm_don_prodt;

  function formt_chain_enonc (pva_enonc in varchar2,
                              pva_replc in varchar2 default ',')
    return varchar2 is
  begin
    return substr (pva_enonc,
                   1,
                   instr (pva_enonc,
                          pva_replc,
                          -1) -
                   1);
  end formt_chain_enonc;

  function formt_chain (pva_valr in varchar2)
    return varchar2 is
  begin
    if pva_valr is null then
      return 'null';
    else
      return    ''''
             || replace (pva_valr,
                         '''',
                         '''''')
             || '''';
    end if;
  end;

  function formt_numrq (pnu_valr in number)
    return varchar2 is
    vva_valr                                varchar2 (100) default pnu_valr;
  begin
    if pnu_valr is null then
      return 'null';
    else
      vva_valr :=
        replace (vva_valr,
                 ',',
                 '.');

      if vva_valr like '.%' then
        vva_valr := '0' || vva_valr;
      end if;

      return vva_valr;
    end if;
  end;

  function formt_date (pda_valr in date)
    return varchar2 is
  begin
    if pda_valr is null then
      return 'null';
    else
      return    'to_date('''
             || to_char (pda_valr,
                         'YYYY-MM-DD HH24:MI:SS')
             || ''', ''YYYY-MM-DD HH24:MI:SS'')';
    end if;
  end;

  function formt_ref (pnu_valr in number,
                      pva_varbl in varchar2)
    return varchar2 is
    vva_valr                                varchar2 (200) default pnu_valr;
  begin
    if pnu_valr is null then
      return 'null';
    else
      return 'sie$migrt$pkg.' || pva_varbl || '(' || formt_numrq (pnu_valr) || ')';
    end if;
  end;

  function formt_fonct (pnu_valr in number,
                        pva_varbl in varchar2,
                        pva_contx in varchar2 default null)
    return varchar2 is
  begin
    if pnu_valr is null then
      return 'null';
    else
      return    'sie$migrt$pkg.obten_'
             || pva_varbl
             || '('
             || formt_numrq (pnu_valr)
             || ', '
             || formt_chain (pva_contx)
             || ')';
    end if;
  end formt_fonct;

  function formt_detl_domn_valr (pva_code_domn in varchar2,
                                 pva_code_valr in varchar2,
                                 pva_code_prodt in varchar2 default 'AFW')
    return varchar2 is
  begin
    if pva_code_domn is null
    or pva_code_valr is null then
      return 'null';
    else
      return    'sie_14_domn_valr_pkg.obten_seqnc('
             || formt_chain (pva_code_domn)
             || ','
             || formt_chain (pva_code_valr)
             || ','
             || pva_code_prodt
             || ')';
    end if;
  end;

  function formt_nom_entit (vva_nom_entit in varchar2)
    return varchar2 is
  begin
    return lower (substr (vva_nom_entit,
                          8));
  end formt_nom_entit;

  procedure ajout_ligne (pva_ligne in varchar2 default null,
                         pnu_index in sie_07_clob_pkg.typ_index default gnu_index_genrl) is
  begin
    sie_07_clob_pkg.ajout_ligne (pva_ligne,
                                 pnu_index);
  --dbms_output.put_line (pva_ligne || gva_fin_ligne);
  exception
    when others then
      raise;
  end ajout_ligne;

  procedure debtr_bloc (pva_table in varchar2,
                        pnu_index in sie_07_clob_pkg.typ_index default gnu_index_genrl) is
  begin
    sie_03_journ_pkg.ecrir_journ ('debut bloc: ' || pva_table);
    ajout_ligne ('begin',
                 pnu_index);
    ajout_ligne ('if sie$migrt$pkg.vnu_sql_code = 0 then',
                 pnu_index);
    ajout_ligne ('sie_03_journ_pkg.ecrir_journ(' || formt_chain (pva_table) || ');',
                 pnu_index);
  end;

  procedure termn_bloc (pva_table in varchar2,
                        pnu_index in sie_07_clob_pkg.typ_index default gnu_index_genrl) is
  begin
    sie_03_journ_pkg.ecrir_journ ('fin bloc: ' || pva_table);
    ajout_ligne ('null;',
                 pnu_index);
    ajout_ligne ('end if;',
                 pnu_index);
    ajout_ligne ('exception',
                 pnu_index);
    ajout_ligne ('when others then',
                 pnu_index);
    ajout_ligne ('sie$migrt$pkg.defnr_ereur (' || formt_chain (pva_table) || ');',
                 pnu_index);
    ajout_ligne ('end;',
                 pnu_index);
    ajout_ligne ('/',
                 pnu_index);
    ajout_ligne ('',
                 pnu_index);
  end;

  function obten_fonct_entit_spec (pva_nom_fonct in varchar2)
    return varchar2 is
  begin
    return    'function obten_'
           || pva_nom_fonct
           || ' (pnu_seqnc in number, pva_contx in varchar2 default null) return number;';
  end obten_fonct_entit_spec;

  function obten_fonct_entit_body (pva_nom_fonct in varchar2)
    return varchar2 is
    vva_fonct                               varchar2 (32000);
  begin
    vva_fonct :=
         'function obten_'
      || pva_nom_fonct
      || ' (pnu_seqnc in number, 
                                                      pva_contx in varchar2 default null) 
                    return number is
                  begin
                    return sie$migrt$pkg.'
      || pva_nom_fonct
      || '(pnu_seqnc);
                  exception
                    when others then
                      raise;
                  end obten_'
      || pva_nom_fonct
      || ';';

    return vva_fonct;
  end obten_fonct_entit_body;

  function obten_sql_entit (pnu_entit in number,
                            pnu_versn in number,
                            pva_indic_genrl in varchar2 default 'N',
                            pbo_expor_page in boolean default false)
    return varchar2 is
    vva_enonc                               varchar2 (32767);
    vnu_prodt                               number (10);

    cursor cur_entit is
      select   nom,
               niv_inclu_migrt,
               confg_inclu_migrt
        from   vd_i_sie_11_entit e
       where   seqnc = pnu_entit;

    rec_entit                               cur_entit%rowtype;

    cursor cur_atrib is
      select     ae.nom,
                 ae.type_don,
                 ae.compr_migrt
          from   vd_sie_11_atrib_entit ae
         where   ae.ref_entit = pnu_entit and ae.compr_migrt not in ('NON_MIGRE')
      order by   ae.nom;
  begin
    open cur_entit;

    fetch cur_entit
    into rec_entit;

    close cur_entit;

    vva_enonc := 'select ';

    for rec_atrib in cur_atrib loop
      vva_enonc := vva_enonc || rec_atrib.nom || ', ';
    end loop;

    vva_enonc := formt_chain_enonc (vva_enonc);
    vva_enonc := vva_enonc || ' from ' || lower (rec_entit.nom) || ' p';

    case rec_entit.niv_inclu_migrt
      when 'PRODT' then
        vva_enonc := vva_enonc || ' where dnr_ref_prodt = ' || gnu_prodt;
      when 'APLIC' then
        vva_enonc := vva_enonc || ' where dnr_ref_aplic = ' || gnu_aplic;
      when 'CONTX' then
        if gva_contx_courn = 'PRODT' then
          vva_enonc := vva_enonc || ' where dnr_ref_prodt = ' || gnu_prodt;
        elsif gva_contx_courn = 'APLIC' then
          vva_enonc := vva_enonc || ' where dnr_ref_aplic = ' || gnu_aplic;
        end if;
      else
        null;
    end case;

    return vva_enonc;
  end obten_sql_entit;

  function obten_ligne_atrib (pva_atrib in varchar2,
                              pva_mode in varchar2,
                              pva_alias_table_1 in varchar2 default null,
                              pva_alias_table_2 in varchar2 default null,
                              pva_seprt in varchar2 default null,
                              pva_conjc in varchar2 default null)
    return varchar2 is
    vva_ligne_atrib                         varchar2 (32767) default null;
  begin
    case pva_mode
      when 'INSER' then
        if pva_alias_table_1 is not null then
          vva_ligne_atrib := pva_alias_table_1 || '.';
        end if;

        vva_ligne_atrib := vva_ligne_atrib || pva_atrib || ', ';
      when 'UPDAT' then
        if pva_alias_table_1 is not null then
          vva_ligne_atrib := pva_alias_table_1 || '.';
        end if;

        vva_ligne_atrib := vva_ligne_atrib || pva_atrib || ' = ';

        if pva_alias_table_2 is not null then
          vva_ligne_atrib := vva_ligne_atrib || pva_alias_table_2 || '.';
        end if;

        vva_ligne_atrib := vva_ligne_atrib || pva_atrib || ', ';
      when 'MERGE' then
        vva_ligne_atrib := '(';

        if pva_alias_table_1 is not null then
          vva_ligne_atrib := vva_ligne_atrib || pva_alias_table_1 || '.';
        end if;

        vva_ligne_atrib := vva_ligne_atrib || pva_atrib || ' = ';

        if pva_alias_table_2 is not null then
          vva_ligne_atrib := vva_ligne_atrib || pva_alias_table_2 || '.';
        end if;

        vva_ligne_atrib := vva_ligne_atrib || pva_atrib;

        if pva_atrib like 'ref_%' then
          vva_ligne_atrib :=
               vva_ligne_atrib
            || ' or ('
            || pva_alias_table_1
            || '.'
            || pva_atrib
            || ' is null and '
            || pva_alias_table_2
            || '.'
            || pva_atrib
            || ' is null'
            || ') or '
            || pva_alias_table_2
            || '.'
            || pva_atrib
            || ' is null ';
        end if;

        vva_ligne_atrib := vva_ligne_atrib || ') and ';
      when 'CUSTM' then
        if pva_alias_table_1 is not null then
          vva_ligne_atrib := pva_alias_table_1 || '.';
        end if;

        vva_ligne_atrib := vva_ligne_atrib || pva_atrib || ' ' || pva_seprt || ' ';

        if pva_alias_table_2 is not null then
          vva_ligne_atrib := vva_ligne_atrib || pva_alias_table_2 || '.';
        end if;

        vva_ligne_atrib :=
          vva_ligne_atrib || pva_atrib || case when pva_conjc is not null then ' ' || pva_conjc || ' ' else null end;
      else
        null;
    end case;

    return vva_ligne_atrib;
  end obten_ligne_atrib;

  function obten_ligne_atrib_entit (pnu_entit in number,
                                    pva_mode in varchar2 default 'INSER',
                                    pva_compr in varchar2 default '''VALR_MIGRE''',
                                    pva_alias_table_1 in varchar2 default null,
                                    pva_alias_table_2 in varchar2 default null,
                                    pva_replc in varchar2 default ',',
                                    pva_seprt in varchar2 default null)
    return varchar2 is
    cur_atrib                               sys_refcursor;
    vnu_seqnc_atrib                         number (10);
    vva_nom_atrib                           varchar2 (30);
    vva_enonc_sql                           varchar2 (500);
    vva_ligne_atrib_entit                   varchar2 (32767);
  begin
    vva_enonc_sql :=
         'select seqnc, lower(nom) nom from vd_i_sie_11_atrib_entit where nom != ''SEQNC'' and ref_entit = :1 and compr_migrt in ('
      || pva_compr
      || ') order by nom';

    open cur_atrib for vva_enonc_sql using pnu_entit;

    loop
      fetch cur_atrib
      into vnu_seqnc_atrib, vva_nom_atrib;

      exit when cur_atrib%notfound;

      vva_ligne_atrib_entit :=
           vva_ligne_atrib_entit
        || obten_ligne_atrib (vva_nom_atrib,
                              pva_mode,
                              pva_alias_table_1,
                              pva_alias_table_2,
                              pva_seprt,
                              pva_replc);
    end loop;

    if obten_indic_tabl_index (pnu_entit) = 'N' and pva_mode = 'MERGE' then
      vva_ligne_atrib_entit :=
        obten_ligne_atrib ('seqnc',
                           pva_mode,
                           pva_alias_table_1,
                           pva_alias_table_2,
                           pva_seprt,
                           pva_replc);
    elsif obten_indic_tabl_index (pnu_entit) = 'N' and pva_mode = 'INSER' then
      vva_ligne_atrib_entit :=
           vva_ligne_atrib_entit
        || obten_ligne_atrib ('seqnc',
                              pva_mode,
                              pva_alias_table_1,
                              pva_alias_table_2,
                              pva_seprt,
                              pva_replc);
    end if;

    return formt_chain_enonc (vva_ligne_atrib_entit,
                              pva_replc);
  exception
    when others then
      raise;
  end obten_ligne_atrib_entit;

  procedure ajout_ligne_comnt (pva_ligne in varchar2,
                               pnu_index in sie_07_clob_pkg.typ_index default gnu_index_genrl) is
    vva_comnt                               varchar2 (10) := '--';
  begin
    ajout_ligne (vva_comnt || pva_ligne,
                 pnu_index);
  end ajout_ligne_comnt;

  procedure ajout_clob_fichr_compr (pnu_index in sie_07_clob_pkg.typ_index,
                                    pva_nom_fichr in varchar2) is
    vlb                                     blob;
    vnu_off_sourc                           pls_integer default 1;
    vnu_off_dest                            pls_integer default 1;
    vnu_lang                                pls_integer default 0;
    vnu_warng                               pls_integer;
    vnu_chars_id                            pls_integer default 873;
  begin
    dbms_lob.createtemporary (vlb,
                              true);
    dbms_lob.converttoblob (vlb,
                            sie_07_clob_pkg.obten (pnu_index),
                            dbms_lob.lobmaxsize,
                            vnu_off_dest,
                            vnu_off_sourc,
                            vnu_chars_id,
                            vnu_lang,
                            vnu_warng);

    sie_07_util_compr_zip_pkg.ajout_fichr (gbl_zip,
                                           pva_nom_fichr,
                                           vlb);
  end ajout_clob_fichr_compr;

  procedure termn_fichr_compr is
  begin
    sie_07_util_compr_zip_pkg.clotr_fichr (gbl_zip,
                                           'Export metadonnees SAF');
  end termn_fichr_compr;

  procedure genr_fichr_migrt_meta is
    cursor cur_aplic is
      select     ref_aplic_code
          from   vd_sie_13_expor_aplic
         where   ref_sesn = sie_12_sesn_pkg.obten_sesn ()
      order by   case when ref_aplic_aplic_authe is null then 0 else 1 end;

    vnu_index_fichr_globl                   sie_07_clob_pkg.typ_index;
  begin
    vnu_index_fichr_globl := sie_07_clob_pkg.creer_nouv ();

    ajout_ligne ('@pre_apps.sql;',
                 vnu_index_fichr_globl);

    for rec_aplic in cur_aplic loop
      ajout_ligne ('@app_' || lower (rec_aplic.ref_aplic_code) || '.sql;',
                   vnu_index_fichr_globl);
    end loop;

    ajout_ligne ('@post_apps.sql;',
                 vnu_index_fichr_globl);

    ajout_clob_fichr_compr (vnu_index_fichr_globl,
                            'install_meta.sql');
  end genr_fichr_migrt_meta;

  procedure genr_fichr_migrt_app is
    vnu_index_fichr_globl                   sie_07_clob_pkg.typ_index;
    vnu_id_fichr                            number;
    vbl_aplic_apex                          blob;
    vva_nom_fichr                           varchar2 (400);

    cursor cur_aplic is
      select     numr_aplic_courn
          from   vd_sie_13_expor_aplic
         where   ref_sesn = sie_12_sesn_pkg.obten_sesn () and indic_ajout_aplic_apex = 'O'
      order by   numr_aplic_courn;
  begin
    vnu_index_fichr_globl := sie_07_clob_pkg.creer_nouv ();
    ajout_ligne ('--Ligne vide',
                 vnu_index_fichr_globl);

    for rec_aplic in cur_aplic loop
      --Caller export apex
      apex_flow_gen_api2.export (rec_aplic.numr_aplic_courn,
                                 p_format                   => 'DB',
                                 p_export_comments          => 'Y',
                                 p_export_ir_public_reports => 'Y');

      --Obtenir id fichier généré + contenu
      vnu_id_fichr := wwv_flow_id.curr_val;

      select   blob_content,
               title
        into   vbl_aplic_apex,
               vva_nom_fichr
        from   apex_fichr
       where   id = vnu_id_fichr;

      --Ajouter fichier dans zip + ajout call dans install_app.sql
      sie_07_util_compr_zip_pkg.ajout_fichr (gbl_zip,
                                             vva_nom_fichr,
                                             vbl_aplic_apex);

      ajout_ligne ('@' || vva_nom_fichr || ';',
                   vnu_index_fichr_globl);

      --Supprimer fichier dans table apex
      delete from   apex_fichr
            where   id = vnu_id_fichr;
    end loop;

    ajout_clob_fichr_compr (vnu_index_fichr_globl,
                            'install_app.sql');
  end genr_fichr_migrt_app;

  procedure genr_fichr_migrt_globl is
    vnu_index_fichr_globl                   sie_07_clob_pkg.typ_index;
  begin
    vnu_index_fichr_globl := sie_07_clob_pkg.creer_nouv ();

    ajout_ligne ('@install_app.sql;',
                 vnu_index_fichr_globl);
    ajout_ligne ('@install_meta.sql;',
                 vnu_index_fichr_globl);

    ajout_clob_fichr_compr (vnu_index_fichr_globl,
                            'install.sql');
  end genr_fichr_migrt_globl;

  /*
                                                                  Cette fonction s'occupe de créer le package de migration (sie$migrt$pkg)
    ainsi que d'initialiser les variables ncessaires à la migration
  */
  procedure genr_fichr_migrt_initl (pva_schem in varchar2 default '/* NOM SCHEMA */') is
    cursor cur_entit is
      select     seqnc,
                 lower (nom) nom,
                 lower (nom_table_tempr) nom_table_tempr,
                 lower (nom_table_ereur) nom_table_ereur,
                 indic_creer_ocurn,
                 indic_modif_ocurn,
                 indic_suprm_ocurn,
                 indic_force_selct,
                 ref_versn,
                 longr_bloc,
                 indic_expor_tabl_index,
                 indic_suprm_don_prodt
          from   vd_i_sie_11_entit e
         where   ref_versn = gnu_versn_afw
             and niv_inclu_migrt is not null
             and (sie_11_prodt_pkg.obten_code_prodt (gnu_prodt) = 'AFW'
               or sie_11_prodt_pkg.obten_code_prodt (gnu_prodt) != 'AFW'
              and e.nom not in ('SIE_11_ENTIT', 'SIE_11_ATRIB_ENTIT', 'SIE_11_PLUGN'))
      order by   ordre_exect;

    cursor cur_atrib_entit (pnu_entit in number) is
      select     seqnc,
                 lower (nom) nom,
                 type_don,
                 compr_migrt
          from   vd_i_sie_11_atrib_entit
         where   ref_entit = pnu_entit and compr_migrt not in ('NON_MIGRE')
      order by   nom;

    cursor cur_aplic_authe is
      select   p2.seqnc,
               p2.code
        from   vd_sie_11_aplic p2
       where   p2.indic_aplic_authe = 'O';

    cur_sys                                 sys_refcursor;
    vva_enonc_sql                           varchar2 (32767);
    vnu_versn_prodt                         number (10);
    vva_ligne                               varchar2 (32767);
    vva_ligne_creat_table                   varchar2 (32767);
    vnu_index_table_tempr                   sie_07_clob_pkg.typ_index;
    vnu_index_arr                           sie_07_clob_pkg.typ_index;
    vnu_index_fonct_spec                    sie_07_clob_pkg.typ_index;
    vnu_index_fonct_body                    sie_07_clob_pkg.typ_index;
    vnu_index_suprm_table                   sie_07_clob_pkg.typ_index;
    versn_non_trouv                         exception;
  begin
    if gnu_versn_afw is null then
      raise versn_non_trouv;
    end if;

    vnu_index_table_tempr := sie_07_clob_pkg.creer_nouv ();
    vnu_index_arr := sie_07_clob_pkg.creer_nouv ();
    vnu_index_fonct_spec := sie_07_clob_pkg.creer_nouv ();
    vnu_index_fonct_body := sie_07_clob_pkg.creer_nouv ();
    vnu_index_suprm_table := sie_07_clob_pkg.creer_nouv ();

    --Tableaux de séquences
    ajout_ligne ('  var_prodt_authe typ_arr_seqnc;',
                 vnu_index_arr);

    for rec_entit in cur_entit loop
      --Tableaux de séquences
      ajout_ligne ('  var_' || formt_nom_entit (rec_entit.nom) || ' typ_arr_seqnc;',
                   vnu_index_arr);

      --générer fonction entité spec
      ajout_ligne ('  ' || obten_fonct_entit_spec ('var_' || formt_nom_entit (rec_entit.nom)),
                   vnu_index_fonct_spec);

      --générer fonction entité body
      ajout_ligne ('  ' || obten_fonct_entit_body ('var_' || formt_nom_entit (rec_entit.nom)),
                   vnu_index_fonct_body);

      --générer tables erreurs
      ajout_ligne ('begin',
                   vnu_index_table_tempr);
      ajout_ligne (
           'dbms_errlog.create_error_log('
        || formt_chain (upper (rec_entit.nom))
        || ', '
        || formt_chain (upper (rec_entit.nom_table_ereur))
        || ', '
        || formt_chain (upper (gva_schem))
        || ', null, true);',
        vnu_index_table_tempr
      );
      ajout_ligne (
        '  exception
                        when others then
                          ete(''' || rec_entit.nom_table_ereur || ''',sqlerrm);
                      end;',
        vnu_index_table_tempr
      );

      ajout_ligne (null,
                   vnu_index_table_tempr);

      ajout_ligne ('execute immediate ''delete from ' || rec_entit.nom_table_ereur || ''';',
                   vnu_index_table_tempr);

      ajout_ligne (null,
                   vnu_index_table_tempr);

      --générer tables temporaires
      ajout_ligne ('  begin',
                   vnu_index_table_tempr);
      ajout_ligne ('   execute immediate ''create table ' || rec_entit.nom_table_tempr,
                   vnu_index_table_tempr);

      vva_ligne_creat_table := '    (';

      for rec_atrib_entit in cur_atrib_entit (rec_entit.seqnc) loop
        vva_ligne_creat_table :=
             vva_ligne_creat_table
          || gva_fin_ligne
          || '      '
          || rec_atrib_entit.nom
          || obten_type_atrib (rec_atrib_entit.type_don,
                               ',');
      end loop;

      vva_ligne_creat_table := formt_chain_enonc (vva_ligne_creat_table);
      ajout_ligne (vva_ligne_creat_table || gva_fin_ligne || '    )'';',
                   vnu_index_table_tempr);
      ajout_ligne (
        '  exception
                        when others then
                          ete(''' || rec_entit.nom_table_tempr || ''',sqlerrm);
                      end;',
        vnu_index_table_tempr
      );
      ajout_ligne (null,
                   vnu_index_table_tempr);

      --supprimer tables temporaires
      ajout_ligne ('  begin',
                   vnu_index_suprm_table);
      ajout_ligne ('    execute immediate ''drop table ' || rec_entit.nom_table_tempr || ''';',
                   vnu_index_suprm_table);
      ajout_ligne (
        '  exception
                        when others then
                          ete(''' || rec_entit.nom_table_tempr || ''',sqlerrm);
                      end;',
        vnu_index_suprm_table
      );
      ajout_ligne (null,
                   vnu_index_suprm_table);

      --supprimer les tables d'erreurs qui sont vides
      ajout_ligne ('declare',
                   vnu_index_suprm_table);
      ajout_ligne ('  vnu_count pls_integer;',
                   vnu_index_suprm_table);
      ajout_ligne ('begin',
                   vnu_index_suprm_table);
      ajout_ligne ('execute immediate  ''select count(1) from ' || rec_entit.nom_table_ereur || ''' into vnu_count;',
                   vnu_index_suprm_table);
      ajout_ligne (null,
                   vnu_index_suprm_table);
      ajout_ligne ('  if vnu_count = 0 then',
                   vnu_index_suprm_table);
      ajout_ligne ('    execute immediate ''drop table ' || rec_entit.nom_table_ereur || ''';',
                   vnu_index_suprm_table);
      ajout_ligne ('  end if;',
                   vnu_index_suprm_table);
      ajout_ligne ('exception',
                   vnu_index_suprm_table);
      ajout_ligne ('  when others then
                          ete(''' || rec_entit.nom_table_ereur || ''',sqlerrm);
                      end;',
                   vnu_index_suprm_table);
      ajout_ligne (null,
                   vnu_index_suprm_table);
    end loop;

    --Définir entête
    gnu_index_genrl := sie_07_clob_pkg.creer_nouv ();
    ajout_ligne ('set define off');
    ajout_ligne ('set serveroutput on');
    ajout_ligne ('set feedback off');
    ajout_ligne ();
    ajout_ligne ('alter session set current_schema = ' || pva_schem || ';');
    ajout_ligne ();
    ajout_ligne_comnt ('Fichier de migration');
    ajout_ligne_comnt ('Code produit: ' || sie_11_prodt_pkg.obten_code_prodt (gnu_prodt));
    ajout_ligne_comnt (   'Date de creation: '
                       || to_char (sysdate,
                                   'yyyy-mm-dd hh24:mi:ss'));


    --Création du package de migration
    ajout_ligne ('create or replace package sie$migrt$pkg as');
    ajout_ligne ('  vnu_sql_code                number default 0;');
    ajout_ligne ('  vva_sql_errm                varchar2(4000);');
    ajout_ligne ('  vva_back_trace              varchar2(32500);');
    ajout_ligne ('  vva_nom_bloc_err            varchar2(100);');
    ajout_ligne ();
    ajout_ligne ('  vnu_seqnc_prodt             number;');
    ajout_ligne ('  vnu_seqnc_aplic             number;');
    ajout_ligne ('  vva_code_prodt              varchar2(23);');

    ajout_ligne ();

    ajout_ligne ('  type typ_arr_seqnc is table of number(10) index by pls_integer;');
    ajout_ligne ();
    ajout_ligne_comnt ('Tableaux de sequences');

    sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                vnu_index_arr);
    sie_07_clob_pkg.termn (vnu_index_arr);

    ajout_ligne_comnt ('Fonctions de garde, spec');

    sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                vnu_index_fonct_spec);
    sie_07_clob_pkg.termn (vnu_index_fonct_spec);

    ajout_ligne ();
    ajout_ligne ('  procedure defnr_ereur (pva_nom in varchar2);');
    ajout_ligne ();
    ajout_ligne ('  procedure creer_table_tempr;');
    ajout_ligne ();
    ajout_ligne ('  procedure suprm_table_tempr;');
    ajout_ligne ('end;');
    ajout_ligne ('/');
    ajout_ligne ();

    ajout_ligne ('create or replace package body sie$migrt$pkg as');
    ajout_ligne ('  procedure defnr_ereur (pva_nom in varchar2) is');
    ajout_ligne ('  begin');
    ajout_ligne ('    vnu_sql_code := sqlcode;');
    ajout_ligne ('    vva_sql_errm := sqlerrm;');
    ajout_ligne ('    vva_back_trace := dbms_utility.format_error_backtrace();');
    ajout_ligne ('    vva_nom_bloc_err := pva_nom;');
    ajout_ligne ('  end defnr_ereur;');
    ajout_ligne ();

    ajout_ligne_comnt ('Fonctions de garde, body');
    sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                vnu_index_fonct_body);
    sie_07_clob_pkg.termn (vnu_index_fonct_body);
    ajout_ligne ();

    ajout_ligne ('  procedure creer_table_tempr is');
    ajout_ligne ('  begin');

    sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                vnu_index_table_tempr);
    sie_07_clob_pkg.termn (vnu_index_table_tempr);

    ajout_ligne ('  end creer_table_tempr;');
    ajout_ligne ();
    ajout_ligne ('  procedure suprm_table_tempr is');
    ajout_ligne ('  begin');

    sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                vnu_index_suprm_table);
    sie_07_clob_pkg.termn (vnu_index_suprm_table);

    ajout_ligne ('  end suprm_table_tempr;');
    ajout_ligne ('end;');
    ajout_ligne ('/');
    ajout_ligne ();

    ajout_ligne ();
    debtr_bloc ('Debut - Initialisation');
    ajout_ligne ('  sie_11_migrt_pkg.gva_indic_migrt := ''O'';');
    ajout_ligne ('  sie$migrt$pkg.vva_code_prodt := ''AFW'';');
    ajout_ligne ();
    ajout_ligne ('  sie$migrt$pkg.suprm_table_tempr;');
    ajout_ligne ('  sie$migrt$pkg.creer_table_tempr;');
    termn_bloc ('Fin - Initialisation');
    ajout_ligne ();

    debtr_bloc ('Debut - Alimentation produit authentification');

    for rec_aplic_authe in cur_aplic_authe loop
      ajout_ligne (
           'sie$migrt$pkg.var_aplic('
        || rec_aplic_authe.seqnc
        || ') := sie_11_aplic_pkg.obten_aplic('
        || formt_chain (rec_aplic_authe.code)
        || ');'
      );
    end loop;

    termn_bloc ('Fin - Alimentation produit authentification');
  exception
    when versn_non_trouv then
      raise;
    when others then
      raise;
  end genr_fichr_migrt_initl;

  procedure genr_fichr_migrt_prodt is
    cursor cur_entit is
      select     seqnc,
                 lower (nom) nom,
                 lower (nom_table_tempr) nom_table_tempr,
                 lower (nom_table_ereur) nom_table_ereur,
                 indic_creer_ocurn,
                 indic_modif_ocurn,
                 indic_suprm_ocurn,
                 indic_force_selct,
                 ref_versn,
                 longr_bloc,
                 indic_expor_tabl_index,
                 indic_suprm_don_prodt
          from   vd_i_sie_11_entit e
         where   ref_versn = gnu_versn_afw
             and niv_inclu_migrt in ('GLOBL', 'CONTX', 'PRODT')
             and (sie_11_prodt_pkg.obten_code_prodt (gnu_prodt) = 'AFW'
               or sie_11_prodt_pkg.obten_code_prodt (gnu_prodt) != 'AFW'
              and e.nom not in ('SIE_11_ENTIT', 'SIE_11_ATRIB_ENTIT', 'SIE_11_PLUGN'))
      order by   ordre_exect;

    cursor cur_atrib_entit (pnu_entit in number) is
      select     seqnc,
                 lower (nom) nom,
                 type_don,
                 compr_migrt
          from   vd_i_sie_11_atrib_entit
         where   ref_entit = pnu_entit and compr_migrt not in ('NON_MIGRE')
      order by   nom;

    cursor cur_sie_11_prodt is
      select   seqnc,
               code,
               nom,
               procd_expor_metdn,
               tail_tabl_extra,
               indic_extra_tout,
               ref_group_utils_admin,
               ref_versn,
               ident_envir,
               dosr_fichr,
               mesg_tout_droit_resrv,
               jquer_ui_css_scope,
               indic_afich_err_code,
               indic_page_inexs_maj_refrn,
               ref_mesg_sucs,
               ref_mesg_echec,
               ref_mesg_fetch,
               ref_mesg_range_suprm,
               ref_mesg_range_modf,
               ref_mesg_range_inser,
               ref_mesg_aucun_don_trouv,
               ref_mesg_trop_don_trouv,
               fonct_obten_base_url,
               ref_aplic_acuei,
               ref_page_acuei,
               ref_aplic_comnt_bogue,
               ref_page_comnt_bogue
        from   vd_i_sie_11_prodt
       where   seqnc = gnu_prodt;

    vva_enonc_sql                           varchar2 (32767);
    rec_sie_11_prodt                        cur_sie_11_prodt%rowtype;
  begin
    ajout_ligne ('set define off');
    ajout_ligne ('set serveroutput on');
    ajout_ligne ('set feedback off');
    ajout_ligne ();
    ajout_ligne ('alter session set current_schema = ' || gva_schem || ';');
    ajout_ligne ();


    open cur_sie_11_prodt;

    fetch cur_sie_11_prodt
    into rec_sie_11_prodt;

    close cur_sie_11_prodt;

    --Mettre à jour le produit et initialiser les valeurs si nous sommes en train de migrer un produit

    ajout_ligne ();
    debtr_bloc ('Debut - Initialisation - Produit');

    if gva_contx = 'PRODT' then
      ajout_ligne (
           '  sie$migrt$pkg.vnu_seqnc_prodt := sie_11_prodt_pkg.maj_prodt ('
        || formt_chain (rec_sie_11_prodt.code)
        || ','
        || formt_chain (rec_sie_11_prodt.nom)
        || ','
        || formt_chain (rec_sie_11_prodt.procd_expor_metdn)
        || ','
        || formt_numrq (rec_sie_11_prodt.tail_tabl_extra)
        || ','
        || formt_chain (rec_sie_11_prodt.indic_extra_tout)
        || ');'
      );
    else
      ajout_ligne (
           '  sie$migrt$pkg.vnu_seqnc_prodt := sie_11_prodt_pkg.obten_prodt ('
        || formt_chain (rec_sie_11_prodt.code)
        || ');'
      );
    end if;

    termn_bloc ('Fin - Initialisation - Produit');
    ajout_ligne ();

    --Ouvrir un clob pour les updates à faire.
    gnu_index_updat := sie_07_clob_pkg.creer_nouv ();
    ajout_ligne ('set define off',
                 gnu_index_updat);
    ajout_ligne ('set serveroutput on',
                 gnu_index_updat);
    ajout_ligne ('set feedback off',
                 gnu_index_updat);
    ajout_ligne (null,
                 gnu_index_updat);
    ajout_ligne ('alter session set current_schema = ' || gva_schem || ';',
                 gnu_index_updat);
    ajout_ligne (null,
                 gnu_index_updat);

    for rec_entit in cur_entit loop
      --Section clob_update
      begin
        ajout_ligne ('begin',
                     gnu_index_updat);
        ajout_ligne ('if sie$migrt$pkg.vnu_sql_code = 0 then',
                     gnu_index_updat);
      end;

      ajout_ligne_comnt ('Debut - ' || rec_entit.nom);
      debtr_bloc ('Debut - ' || rec_entit.nom);

      gnu_nombr_seprt := rec_entit.longr_bloc;
      vva_enonc_sql :=
        obten_sql_entit (rec_entit.seqnc,
                         rec_entit.ref_versn);


      gnu_index_selct := sie_07_clob_pkg.creer_nouv ();
      gnu_index_alimn_table := sie_07_clob_pkg.creer_nouv ();


      if rec_entit.indic_creer_ocurn = 'O'
      or rec_entit.indic_modif_ocurn = 'O'
      or rec_entit.indic_suprm_ocurn = 'O'
      or rec_entit.indic_force_selct = 'O' then
        trait_genrq (rec_entit.seqnc,
                     rec_entit.nom,
                     vva_enonc_sql);
      end if;

      if rec_entit.indic_force_selct = 'N' and gva_contx = 'PRODT' then
        sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                    gnu_index_alimn_table);
      end if;

      sie_07_clob_pkg.termn (gnu_index_alimn_table);

      if gbo_presn_don and gva_contx = 'PRODT' then
        if gnu_nombr_seprt is not null then
          termn_bloc ('Fin partie - ' || rec_entit.nom);
          debtr_bloc ('Debut partie - ' || rec_entit.nom);
        end if;

        --Ajouter nouvelle ligne, update celle présente
        if (rec_entit.indic_creer_ocurn = 'O'
         or rec_entit.indic_modif_ocurn = 'O') then
          if rec_entit.indic_suprm_don_prodt = 'O' then
            ajout_ligne ();
            ajout_ligne (
                 'delete from '
              || rec_entit.nom
              || '
                            where dnr_ref_prodt = sie$migrt$pkg.vnu_seqnc_prodt;'
            );
          end if;

          ajout_ligne ();
          ajout_ligne (   'merge into '
                       || rec_entit.nom
                       || ' t
                        using '
                       || rec_entit.nom_table_tempr
                       || ' tf
               on ('
                       || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                   'MERGE',
                                                   '''CLE_FONCT''',
                                                   't',
                                                   'tf',
                                                   ' and')
                       || ')');

          if rec_entit.indic_creer_ocurn = 'O' then
            ajout_ligne (   'when not matched then
              insert ('
                         || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                     'INSER',
                                                     '''VALR_MIGRE'', ''CLE_FONCT''',
                                                     't')
                         || ')
              values ('
                         || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                     'INSER',
                                                     '''VALR_MIGRE'', ''CLE_FONCT''',
                                                     'tf')
                         || ')');
          end if;

          if rec_entit.indic_modif_ocurn = 'O' then
            ajout_ligne (   'when matched then
              update set '
                         || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                     'UPDAT',
                                                     '''VALR_MIGRE''',
                                                     't',
                                                     'tf'));
          end if;

          ajout_ligne ('log errors into ' || rec_entit.nom_table_ereur || '(''Merge'')');
          ajout_ligne ('reject limit unlimited');

          ajout_ligne (';');
          ajout_ligne ();

          ajout_ligne ('declare');
          ajout_ligne ('  vnu_count pls_integer;');
          ajout_ligne ('begin');
          ajout_ligne ('  select count(1) into vnu_count from ' || rec_entit.nom_table_ereur || ';');
          ajout_ligne ();
          ajout_ligne ('  if vnu_count > 0 then');
          ajout_ligne ('    sie$migrt$pkg.defnr_ereur (' || formt_chain ('Merge sur ' || rec_entit.nom) || ');');
          ajout_ligne ('  end if;');
          ajout_ligne ('end;');
          ajout_ligne ();
        end if;

        if rec_entit.indic_suprm_ocurn = 'O' then
          ajout_ligne (   'delete '
                       || rec_entit.nom
                       || ' t
            where t.dnr_ref_prodt = sie$migrt$pkg.vnu_seqnc_prodt
              and not exists (select null
                                from '
                       || rec_entit.nom_table_tempr
                       || ' tf
                               where '
                       || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                   'MERGE',
                                                   '''CLE_FONCT''',
                                                   't',
                                                   'tf',
                                                   ' and')
                       || ');');
          ajout_ligne ();
        end if;

        if gnu_nombr_seprt is not null then
          termn_bloc ('Fin partie - ' || rec_entit.nom);
          debtr_bloc ('Debut partie - ' || rec_entit.nom);
        end if;

        gbo_presn_don := false;
      end if;

      --Storer la nouvelle seqnc
      sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                  gnu_index_selct);
      sie_07_clob_pkg.termn (gnu_index_selct);

      ajout_ligne_comnt ('Fin - ' || rec_entit.nom);
      termn_bloc ('Fin - ' || rec_entit.nom);

      --Section clob_update
      begin
        ajout_ligne ('declare',
                     gnu_index_updat);
        ajout_ligne ('  vnu_count pls_integer;',
                     gnu_index_updat);
        ajout_ligne ('begin',
                     gnu_index_updat);
        ajout_ligne ('  select count(1) into vnu_count from ' || rec_entit.nom_table_ereur || ';',
                     gnu_index_updat);
        ajout_ligne (null,
                     gnu_index_updat);
        ajout_ligne ('  if vnu_count > 0 then',
                     gnu_index_updat);
        ajout_ligne ('    sie$migrt$pkg.defnr_ereur (' || formt_chain ('Update sur ' || rec_entit.nom) || ');',
                     gnu_index_updat);
        ajout_ligne ('  end if;',
                     gnu_index_updat);
        ajout_ligne ('end;',
                     gnu_index_updat);
        ajout_ligne ('null;',
                     gnu_index_updat);
        ajout_ligne ('end if;',
                     gnu_index_updat);
        ajout_ligne ('exception',
                     gnu_index_updat);
        ajout_ligne ('when others then',
                     gnu_index_updat);
        ajout_ligne ('sie$migrt$pkg.defnr_ereur (' || formt_chain ('Update sur ' || rec_entit.nom) || ');',
                     gnu_index_updat);
        ajout_ligne ('end;',
                     gnu_index_updat);
        ajout_ligne ('/',
                     gnu_index_updat);
        ajout_ligne ('',
                     gnu_index_updat);
      end;
    end loop;

    if gva_contx = 'PRODT' then
      ajout_ligne ('begin',
                   gnu_index_updat);
      ajout_ligne ('if sie$migrt$pkg.vnu_sql_code = 0 then',
                   gnu_index_updat);
      ajout_ligne (   'update sie_11_prodt
                       set indic_extra_tout = '
                   || formt_chain (rec_sie_11_prodt.indic_extra_tout)
                   || ',
                           ref_group_utils_admin = '
                   || formt_fonct (rec_sie_11_prodt.ref_group_utils_admin,
                                   'var_group_utils',
                                   'Update')
                   || ',
                           dosr_fichr = '
                   || formt_chain (rec_sie_11_prodt.dosr_fichr)
                   || ',
                           ident_envir = '
                   || formt_chain (rec_sie_11_prodt.ident_envir)
                   || ',
                           ref_versn = '
                   || formt_fonct (rec_sie_11_prodt.ref_versn,
                                   'var_versn',
                                   'Update')
                   || ',
                           mesg_tout_droit_resrv = '
                   || formt_chain (rec_sie_11_prodt.mesg_tout_droit_resrv)
                   || ',
                           jquer_ui_css_scope = '
                   || formt_chain (rec_sie_11_prodt.jquer_ui_css_scope)
                   || ',
                           indic_afich_err_code = '
                   || formt_chain (rec_sie_11_prodt.indic_afich_err_code)
                   || ',
                           indic_page_inexs_maj_refrn = '
                   || formt_chain (rec_sie_11_prodt.indic_page_inexs_maj_refrn)
                   || ',
                           fonct_obten_base_url = '
                   || formt_chain (rec_sie_11_prodt.fonct_obten_base_url)
                   || ',
                           ref_mesg_sucs = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_sucs,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_mesg_echec = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_echec,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_mesg_fetch = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_fetch,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_mesg_range_suprm = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_range_suprm,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_mesg_range_modf = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_range_modf,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_mesg_range_inser = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_range_inser,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_mesg_aucun_don_trouv = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_aucun_don_trouv,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_mesg_trop_don_trouv = '
                   || formt_fonct (rec_sie_11_prodt.ref_mesg_trop_don_trouv,
                                   'var_mesg',
                                   'Update')
                   || ',
                           ref_aplic_acuei = '
                   || formt_fonct (rec_sie_11_prodt.ref_aplic_acuei,
                                   'var_aplic',
                                   'Update')
                   || ',
                           ref_page_acuei = '
                   || formt_fonct (rec_sie_11_prodt.ref_page_acuei,
                                   'var_page',
                                   'Update')
                   || ',
                           ref_aplic_comnt_bogue = '
                   || formt_fonct (rec_sie_11_prodt.ref_aplic_comnt_bogue,
                                   'var_aplic',
                                   'Update')
                   || ',
                           ref_page_comnt_bogue = '
                   || formt_fonct (rec_sie_11_prodt.ref_page_comnt_bogue,
                                   'var_page',
                                   'Update')
                   || '
                     where seqnc = sie$migrt$pkg.vnu_seqnc_prodt;',
                   gnu_index_updat);
      ajout_ligne ('end if;',
                   gnu_index_updat);
      ajout_ligne ('exception',
                   gnu_index_updat);
      ajout_ligne ('when others then',
                   gnu_index_updat);
      ajout_ligne ('sie$migrt$pkg.defnr_ereur (''Update sur sie_11_prodt'');',
                   gnu_index_updat);
      ajout_ligne ('end;',
                   gnu_index_updat);
      ajout_ligne ('/',
                   gnu_index_updat);
    end if;


    --FIN PACKAGE MIGRT
    ajout_ligne ('begin',
                 gnu_index_updat);
    ajout_ligne ('  if sie$migrt$pkg.vnu_sql_code = 0 then',
                 gnu_index_updat);
    ajout_ligne ('    commit;',
                 gnu_index_updat);
    ajout_ligne ('    dbms_output.put_line (' || formt_chain ('La migration s''est completee correctement.') || ');',
                 gnu_index_updat);
    ajout_ligne ('  else',
                 gnu_index_updat);
    ajout_ligne ('    rollback;',
                 gnu_index_updat);
    ajout_ligne ('    sie_13_condt_piltb_pkg.vbo_en_charg := false;',
                 gnu_index_updat);
    ajout_ligne (
         '    dbms_output.put_line ('
      || formt_chain ('Une erreur est survenue lors de l''execution du script de migration.')
      || ');',
      gnu_index_updat
    );
    ajout_ligne ('    dbms_output.put_line (''Bloc   : '' || sie$migrt$pkg.vva_nom_bloc_err);',
                 gnu_index_updat);
    ajout_ligne ('    dbms_output.put_line (''Code   : '' || sie$migrt$pkg.vnu_sql_code);',
                 gnu_index_updat);
    ajout_ligne ('    dbms_output.put_line (''Message: '' || sie$migrt$pkg.vva_sql_errm);',
                 gnu_index_updat);
    ajout_ligne ('    dbms_output.put_line (''Pile   :'');',
                 gnu_index_updat);
    ajout_ligne ('    dbms_output.put_line (sie$migrt$pkg.vva_back_trace);',
                 gnu_index_updat);
    ajout_ligne ('    sie_03_journ_pkg.ecrir_journ (sie$migrt$pkg.vva_sql_errm);',
                 gnu_index_updat);
    ajout_ligne ('    sie_03_journ_pkg.ecrir_journ (sie$migrt$pkg.vva_back_trace);',
                 gnu_index_updat);
    ajout_ligne ('  end if;',
                 gnu_index_updat);
    ajout_ligne ('end;',
                 gnu_index_updat);
    ajout_ligne ('/',
                 gnu_index_updat);
    ajout_ligne (null,
                 gnu_index_updat);
    ajout_ligne ('begin',
                 gnu_index_updat);
    ajout_ligne ('  if sie$migrt$pkg.vnu_sql_code <> 0 then',
                 gnu_index_updat);
    ajout_ligne ('    raise_application_error (-20100, sie$migrt$pkg.vva_sql_errm);',
                 gnu_index_updat);
    ajout_ligne ('  end if;',
                 gnu_index_updat);
    ajout_ligne ('end;',
                 gnu_index_updat);
    ajout_ligne ('/',
                 gnu_index_updat);
    ajout_ligne (null,
                 gnu_index_updat);
    ajout_ligne ('exec sie$migrt$pkg.suprm_table_tempr;',
                 gnu_index_updat);
    ajout_ligne (null,
                 gnu_index_updat);
    ajout_ligne ('drop package sie$migrt$pkg;',
                 gnu_index_updat);
    ajout_ligne (null,
                 gnu_index_updat);

    ajout_ligne ('begin 
                    sie_11_migrt_pkg.gva_indic_migrt := ''N''; 
                  end;
                  /',
                 gnu_index_updat);

    ajout_clob_fichr_compr (gnu_index_genrl,
                            'pre_apps.sql');
    ajout_clob_fichr_compr (gnu_index_updat,
                            'post_apps.sql');

    sie_07_clob_pkg.termn (gnu_index_genrl);
    sie_07_clob_pkg.termn (gnu_index_updat);
  end genr_fichr_migrt_prodt;

  procedure genr_fichr_migrt_aplic is
    cursor cur_entit is
      select     seqnc,
                 lower (nom) nom,
                 lower (nom_table_tempr) nom_table_tempr,
                 lower (nom_table_ereur) nom_table_ereur,
                 indic_creer_ocurn,
                 indic_modif_ocurn,
                 indic_suprm_ocurn,
                 indic_force_selct,
                 ref_versn,
                 longr_bloc,
                 indic_expor_tabl_index,
                 indic_suprm_don_prodt
          from   vd_i_sie_11_entit e
         where   ref_versn = gnu_versn_afw and niv_inclu_migrt in ('CONTX', 'APLIC')
      order by   ordre_exect;

    cursor cur_atrib_entit (pnu_entit in number) is
      select     seqnc,
                 lower (nom) nom,
                 type_don,
                 compr_migrt
          from   vd_i_sie_11_atrib_entit
         where   ref_entit = pnu_entit and compr_migrt not in ('NON_MIGRE')
      order by   nom;

    cursor cur_sie_11_aplic is
      select   ea.seqnc,
               ea.ref_aplic,
               ea.ref_aplic_code,
               ea.ref_aplic_nom,
               nvl (ea.numr_aplic_cible, ea.numr_aplic_courn) numr_aplic_cible,
               a.ref_versn,
               a.indic_aplic_authe,
               a.ref_aplic_authe,
               a.ref_page_conxn
        from   vd_sie_13_expor_aplic ea,
               vd_sie_11_aplic a
       where   ea.ref_aplic = gnu_aplic and ea.ref_aplic = a.seqnc;

    vva_enonc_sql                           varchar2 (32767);
    rec_sie_11_aplic                        cur_sie_11_aplic%rowtype;
  begin
    --Mettre à jour le produit et initialiser les valeurs si nous sommes en train de migrer un produit
    open cur_sie_11_aplic;

    fetch cur_sie_11_aplic
    into rec_sie_11_aplic;

    close cur_sie_11_aplic;

    gnu_index_genrl := sie_07_clob_pkg.creer_nouv ();

    ajout_ligne ('set define off');
    ajout_ligne ('set serveroutput on');
    ajout_ligne ('set feedback off');
    ajout_ligne ();
    ajout_ligne ('alter session set current_schema = ' || gva_schem || ';');
    ajout_ligne ();

    ajout_ligne ();
    debtr_bloc ('Debut - Initialisation - Application - ' || rec_sie_11_aplic.ref_aplic_code);
    ajout_ligne (
         '  sie$migrt$pkg.var_aplic('
      || formt_numrq (rec_sie_11_aplic.ref_aplic)
      || ') := sie_11_aplic_pkg.maj_aplic ('
      || formt_chain (rec_sie_11_aplic.ref_aplic_code)
      || ','
      || formt_chain (rec_sie_11_aplic.ref_aplic_nom)
      || ','
      || formt_numrq (rec_sie_11_aplic.numr_aplic_cible)
      || ', sie$migrt$pkg.vnu_seqnc_prodt);'
    );
    ajout_ligne ();
    ajout_ligne (
         '  sie_13_page_pkg.maj_table_a_partr_refrt_apex(sie$migrt$pkg.var_aplic('
      || formt_numrq (rec_sie_11_aplic.ref_aplic)
      || '),''O'');'
    );
    termn_bloc ('Fin - Initialisation - Application - ' || rec_sie_11_aplic.ref_aplic_code);
    ajout_ligne ();

    --Ouvrir un clob pour les updates à faire.
    gnu_index_updat := sie_07_clob_pkg.creer_nouv ();

    for rec_entit in cur_entit loop
      --Section clob_update
      begin
        ajout_ligne ('begin',
                     gnu_index_updat);
        ajout_ligne ('if sie$migrt$pkg.vnu_sql_code = 0 then',
                     gnu_index_updat);
      end;

      ajout_ligne_comnt ('Debut - ' || rec_entit.nom);
      debtr_bloc ('Debut - ' || rec_entit.nom);

      ajout_ligne ('delete from ' || rec_entit.nom_table_tempr || ';');
      ajout_ligne ();

      gnu_nombr_seprt := rec_entit.longr_bloc;
      vva_enonc_sql :=
        obten_sql_entit (rec_entit.seqnc,
                         rec_entit.ref_versn);


      gnu_index_selct := sie_07_clob_pkg.creer_nouv ();
      gnu_index_alimn_table := sie_07_clob_pkg.creer_nouv ();

      if rec_entit.indic_creer_ocurn = 'O'
      or rec_entit.indic_modif_ocurn = 'O'
      or rec_entit.indic_suprm_ocurn = 'O'
      or rec_entit.indic_force_selct = 'O' then
        trait_genrq (rec_entit.seqnc,
                     rec_entit.nom,
                     vva_enonc_sql);
      end if;

      if rec_entit.indic_force_selct = 'N' then
        sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                    gnu_index_alimn_table);
      end if;

      sie_07_clob_pkg.termn (gnu_index_alimn_table);

      if gbo_presn_don then
        if gnu_nombr_seprt is not null then
          termn_bloc ('Fin partie - ' || rec_entit.nom);
          debtr_bloc ('Debut partie - ' || rec_entit.nom);
        end if;

        --Ajouter nouvelle ligne, update celle présente
        if (rec_entit.indic_creer_ocurn = 'O'
         or rec_entit.indic_modif_ocurn = 'O') then
          if rec_entit.indic_suprm_don_prodt = 'O' then
            ajout_ligne ();
            ajout_ligne (
                 'delete from '
              || rec_entit.nom
              || '
                            where dnr_ref_aplic = sie$migrt$pkg.var_aplic('
              || formt_numrq (rec_sie_11_aplic.ref_aplic)
              || ');'
            );
          end if;

          ajout_ligne ();
          ajout_ligne (   'merge into '
                       || rec_entit.nom
                       || ' t
                        using '
                       || rec_entit.nom_table_tempr
                       || ' tf
               on ('
                       || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                   'MERGE',
                                                   '''CLE_FONCT''',
                                                   't',
                                                   'tf',
                                                   ' and')
                       || ')');

          if rec_entit.indic_creer_ocurn = 'O' then
            ajout_ligne (   'when not matched then
              insert ('
                         || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                     'INSER',
                                                     '''VALR_MIGRE'', ''CLE_FONCT''',              /*, ''CLE_REFRN''',*/
                                                     't')
                         || ')
              values ('
                         || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                     'INSER',
                                                     '''VALR_MIGRE'', ''CLE_FONCT''',              /*, ''CLE_REFRN''',*/
                                                     'tf')
                         || ')');
          end if;

          if rec_entit.indic_modif_ocurn = 'O' then
            ajout_ligne (   'when matched then
              update set '
                         || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                     'UPDAT',
                                                     '''VALR_MIGRE''',                                 --''CLE_REFRN''',
                                                     't',
                                                     'tf'));
          end if;

          ajout_ligne ('log errors into ' || rec_entit.nom_table_ereur);
          ajout_ligne ('reject limit unlimited');

          ajout_ligne (';');
          ajout_ligne ();

          ajout_ligne ('declare');
          ajout_ligne ('  vnu_count pls_integer;');
          ajout_ligne ('begin');
          ajout_ligne ('  select count(1) into vnu_count from ' || rec_entit.nom_table_ereur || ';');
          ajout_ligne ();
          ajout_ligne ('  if vnu_count > 0 then');
          ajout_ligne ('    sie$migrt$pkg.defnr_ereur (' || formt_chain ('Merge sur ' || rec_entit.nom) || ');');
          ajout_ligne ('  end if;');
          ajout_ligne ('end;');
          ajout_ligne ();
        end if;

        if rec_entit.indic_suprm_ocurn = 'O' then
          ajout_ligne (   'delete '
                       || rec_entit.nom
                       || ' t
            where t.dnr_ref_aplic = sie$migrt$pkg.var_aplic('
                       || formt_numrq (rec_sie_11_aplic.ref_aplic)
                       || ')
              and not exists (select null
                                from '
                       || rec_entit.nom_table_tempr
                       || ' tf
                               where '
                       || obten_ligne_atrib_entit (rec_entit.seqnc,
                                                   'MERGE',
                                                   '''CLE_FONCT''',
                                                   't',
                                                   'tf',
                                                   ' and')
                       || ');');
          ajout_ligne ();
        end if;

        if gnu_nombr_seprt is not null then
          termn_bloc ('Fin partie - ' || rec_entit.nom);
          debtr_bloc ('Debut partie - ' || rec_entit.nom);
        end if;

        gbo_presn_don := false;
      end if;

      --Storer la nouvelle seqnc
      sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                  gnu_index_selct);
      sie_07_clob_pkg.termn (gnu_index_selct);

      ajout_ligne_comnt ('Fin - ' || rec_entit.nom);
      termn_bloc ('Fin - ' || rec_entit.nom);

      --Section clob_update
      begin
        ajout_ligne ('declare',
                     gnu_index_updat);
        ajout_ligne ('  vnu_count pls_integer;',
                     gnu_index_updat);
        ajout_ligne ('begin',
                     gnu_index_updat);
        ajout_ligne ('  select count(1) into vnu_count from ' || rec_entit.nom_table_ereur || ';',
                     gnu_index_updat);
        ajout_ligne (null,
                     gnu_index_updat);
        ajout_ligne ('  if vnu_count > 0 then',
                     gnu_index_updat);
        ajout_ligne ('    sie$migrt$pkg.defnr_ereur (' || formt_chain ('Update sur ' || rec_entit.nom) || ');',
                     gnu_index_updat);
        ajout_ligne ('  end if;',
                     gnu_index_updat);
        ajout_ligne ('end;',
                     gnu_index_updat);
        ajout_ligne (null,
                     gnu_index_updat);
        ajout_ligne ('null;',
                     gnu_index_updat);
        ajout_ligne ('end if;',
                     gnu_index_updat);
        ajout_ligne ('exception',
                     gnu_index_updat);
        ajout_ligne ('when others then',
                     gnu_index_updat);
        ajout_ligne ('sie$migrt$pkg.defnr_ereur (' || formt_chain ('Update sur ' || rec_entit.nom) || ');',
                     gnu_index_updat);
        ajout_ligne ('end;',
                     gnu_index_updat);
        ajout_ligne ('/',
                     gnu_index_updat);
        ajout_ligne ('',
                     gnu_index_updat);
      end;
    end loop;

    sie_07_clob_pkg.fusnr_clob (gnu_index_genrl,
                                gnu_index_updat);
    sie_07_clob_pkg.termn (gnu_index_updat);

    ajout_ligne ('begin');
    ajout_ligne ('if sie$migrt$pkg.vnu_sql_code = 0 then');
    ajout_ligne (   'update sie_11_aplic
                       set ref_versn = '
                 || formt_fonct (rec_sie_11_aplic.ref_versn,
                                 'var_versn',
                                 'Update')
                 || ',
                           indic_aplic_authe = '
                 || formt_chain (rec_sie_11_aplic.indic_aplic_authe)
                 || ',
                           ref_aplic_authe = '
                 || formt_fonct (rec_sie_11_aplic.ref_aplic_authe,
                                 'var_aplic',
                                 'Update')
                 || ',
                           ref_page_conxn = '
                 || formt_fonct (rec_sie_11_aplic.ref_page_conxn,
                                 'var_page',
                                 'Update')
                 || '
                     where seqnc = sie$migrt$pkg.obten_var_aplic('
                 || rec_sie_11_aplic.ref_aplic
                 || ');');
    ajout_ligne ('end if;');
    ajout_ligne ('exception');
    ajout_ligne ('when others then');
    ajout_ligne ('sie$migrt$pkg.defnr_ereur (''Update sur sie_11_aplic'');');
    ajout_ligne ('end;');
    ajout_ligne ('/');

    ajout_ligne ('begin');
    ajout_ligne ('  if sie$migrt$pkg.vnu_sql_code = 0 then');
    ajout_ligne (
         '    dbms_output.put_line ('
      || formt_chain (
              'Mise a jour du referentiel pour application : '
           || rec_sie_11_aplic.ref_aplic_code
           || ' - '
           || rec_sie_11_aplic.ref_aplic_nom
         )
      || ');'
    );
    ajout_ligne (
         '    sie_13_page_pkg.maj_table_a_partr_refrt_apex(sie$migrt$pkg.var_aplic('
      || formt_numrq (rec_sie_11_aplic.ref_aplic)
      || '),''O'');'
    );
    ajout_ligne ('  end if;');
    ajout_ligne ('end;');
    ajout_ligne ('/');
    ajout_ligne ();

    ajout_clob_fichr_compr (gnu_index_genrl,
                            'app_' || lower (rec_sie_11_aplic.ref_aplic_code) || '.sql');

    sie_07_clob_pkg.termn (gnu_index_genrl);
  end genr_fichr_migrt_aplic;

  procedure telch_fichr_expor_metdn_afw (pva_contx in varchar2,
                                         pnu_seqnc_contx in number,
                                         pva_nom_fichr in varchar2 default null,
                                         pva_schem in varchar2 default '/* NOM SCHEMA */') is
    vcl_final                               clob;
    vva_nom_fichr                           varchar2 (200);

    cursor cur_aplic_a_migr is
      select     sie_11_aplic_pkg.obten_code_aplic (ref_aplic) code_aplic,
                 ref_aplic,
                 indic_maj_refrn,
                 numr_aplic_cible
          from   vd_sie_13_expor_aplic
         where   ref_sesn = sie_12_sesn_pkg.obten_sesn ()
      order by   case when ref_aplic_aplic_authe is null then 0 else 1 end;
  begin
    --Définir les variables globales du pkg
    gva_contx := pva_contx;
    gnu_prodt := pnu_seqnc_contx;
    gva_schem := pva_schem;
    gnu_versn_afw := sie_11_prodt_pkg.obten_versn_courn (sie_11_prodt_pkg.obten_prodt ('AFW'));

    --Générer le fichier meta
    genr_fichr_migrt_meta;

    --Générer le ficher des app
    genr_fichr_migrt_app;

    --Générer le fichier global
    genr_fichr_migrt_globl;

    --Générer le spec/body du package de migration
    genr_fichr_migrt_initl (pva_schem);

    --Générer les opérations fait sur le produit
    gva_contx_courn := 'PRODT';
    genr_fichr_migrt_prodt;

    --Générer les opérations pour chaque des applications migrées
    gva_contx_courn := 'APLIC';

    for rec_aplic_a_migr in cur_aplic_a_migr loop
      gnu_aplic := rec_aplic_a_migr.ref_aplic;

      if rec_aplic_a_migr.indic_maj_refrn = 'O' then
        sie_13_page_pkg.maj_table_a_partr_refrt_apex (gnu_aplic);
      end if;

      genr_fichr_migrt_aplic;
    end loop;

    --Préparer le nom du fichier.
    if pva_nom_fichr is not null then
      vva_nom_fichr := pva_nom_fichr || '.zip';
    else
      vva_nom_fichr := 'fichr_migrt_' || lower (sie_11_prodt_pkg.obten_code_prodt (gnu_prodt)) || '.zip';
    end if;

    termn_fichr_compr;

    --telechargement le fichier de migration
    sie_11_prodt_pkg.telvs_fichr (pbl_fichr                  => gbl_zip,
                                  pva_nom_fichr              => vva_nom_fichr,
                                  pva_contn_type             => null,
                                  pbo_arret_engin_apex       => true);
  end telch_fichr_expor_metdn_afw;

  procedure debt_enonc_inser (pva_table_tempr in varchar2) is
  begin
    gta_elemn_enonc_inser.delete ();
    gva_ligne_selct := null;
    gva_ligne_updat := null;
    gva_ligne_inser := 'insert into ' || lower (pva_table_tempr) || ' (';
  end debt_enonc_inser;

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pva_valr_varch in varchar2,
                                     pnu_valr_numbr in number,
                                     pda_valr_date in date,
                                     pva_indic_selct in varchar2,
                                     pva_entit_refrn in varchar2,
                                     pva_indic_updat in varchar2,
                                     pcl_valr_clob in clob default null) is
    i                                       pls_integer;
  begin
    i := gta_elemn_enonc_inser.count ();
    gta_elemn_enonc_inser (i).nom_coln := pva_code_coln;
    gta_elemn_enonc_inser (i).valr_varch := pva_valr_varch;
    gta_elemn_enonc_inser (i).valr_numbr := pnu_valr_numbr;
    gta_elemn_enonc_inser (i).valr_date := pda_valr_date;
    gta_elemn_enonc_inser (i).valr_clob := pcl_valr_clob;
    gta_elemn_enonc_inser (i).indic_selct := pva_indic_selct;
    gta_elemn_enonc_inser (i).nom_entit_refrn := pva_entit_refrn;
    gta_elemn_enonc_inser (i).indic_updat := pva_indic_updat;
  end ajout_elemn_enonc_inser;

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pva_valr in varchar2,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             pva_valr,
                             null,
                             null,
                             'N',
                             pva_entit_refrn,
                             'N');
  end ajout_elemn_enonc_inser;

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pnu_valr in number,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             pnu_valr,
                             null,
                             'N',
                             pva_entit_refrn,
                             'N');
  end ajout_elemn_enonc_inser;

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pda_valr in date,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             null,
                             pda_valr,
                             'N',
                             pva_entit_refrn,
                             'N');
  end ajout_elemn_enonc_inser;

  procedure ajout_elemn_enonc_inser (pva_code_coln in varchar2,
                                     pcl_valr in clob,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             null,
                             null,
                             'N',
                             pva_entit_refrn,
                             'N',
                             pcl_valr);
  end ajout_elemn_enonc_inser;

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pva_valr in varchar2,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             pva_valr,
                             null,
                             null,
                             'O',
                             pva_entit_refrn,
                             'N');
  end ajout_elemn_enonc_selct;

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pnu_valr in number,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             pnu_valr,
                             null,
                             'O',
                             pva_entit_refrn,
                             'N');
  end ajout_elemn_enonc_selct;

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pda_valr in date,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             null,
                             pda_valr,
                             'O',
                             pva_entit_refrn,
                             'N');
  end ajout_elemn_enonc_selct;

  procedure ajout_elemn_enonc_selct (pva_code_coln in varchar2,
                                     pcl_valr in clob,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             null,
                             null,
                             'O',
                             pva_entit_refrn,
                             'N',
                             pcl_valr);
  end ajout_elemn_enonc_selct;

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pva_valr in varchar2,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             pva_valr,
                             null,
                             null,
                             'N',
                             pva_entit_refrn,
                             'O');
  end ajout_elemn_enonc_updat;

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pnu_valr in number,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             pnu_valr,
                             null,
                             'N',
                             pva_entit_refrn,
                             'O');
  end ajout_elemn_enonc_updat;

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pda_valr in date,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             null,
                             pda_valr,
                             'N',
                             pva_entit_refrn,
                             'O');
  end ajout_elemn_enonc_updat;

  procedure ajout_elemn_enonc_updat (pva_code_coln in varchar2,
                                     pcl_valr in clob,
                                     pva_entit_refrn in varchar2) is
  begin
    ajout_elemn_enonc_inser (pva_code_coln,
                             null,
                             null,
                             null,
                             'N',
                             pva_entit_refrn,
                             'O',
                             pcl_valr);
  end ajout_elemn_enonc_updat;

  procedure ajout_bloc_limt (pva_entit in varchar2,
                             pnu_index in number) is
  begin
    termn_bloc (pva_entit,
                pnu_index);
    debtr_bloc (pva_entit,
                pnu_index);
  end ajout_bloc_limt;

  procedure termn_enonc_inser (pva_entit in varchar2) is
    vva_ligne_valr                          varchar2 (32767);
  begin
    gva_ligne_inser := formt_chain_enonc (gva_ligne_inser);

    vva_ligne_valr := ') values (';

    for i in gta_elemn_enonc_inser.first .. gta_elemn_enonc_inser.last loop
      if gta_elemn_enonc_inser (i).indic_selct = 'N' and gta_elemn_enonc_inser (i).indic_updat = 'N' then
        vva_ligne_valr :=
             vva_ligne_valr
          || case
               when gta_elemn_enonc_inser (i).valr_varch is not null then
                 formt_chain (gta_elemn_enonc_inser (i).valr_varch)
               when gta_elemn_enonc_inser (i).valr_numbr is not null then
                 case
                   when gta_elemn_enonc_inser (i).nom_coln like 'dnr_ref_aplic' then
                     formt_fonct (gta_elemn_enonc_inser (i).valr_numbr,
                                  'var_aplic',
                                  'Insert')
                   when gta_elemn_enonc_inser (i).nom_coln like '%ref_prodt' then
                     'sie$migrt$pkg.vnu_seqnc_prodt'
                   when gta_elemn_enonc_inser (i).nom_coln like 'ref_dv_%' then
                     formt_detl_domn_valr (
                       sie_14_domn_valr_pkg.obten_code_parnt (gta_elemn_enonc_inser (i).valr_numbr),
                       sie_14_domn_valr_pkg.obten_code (gta_elemn_enonc_inser (i).valr_numbr),
                       'sie$migrt$pkg.vva_code_prodt'
                     )
                   when gta_elemn_enonc_inser (i).nom_coln like 'ref_%' then
                     formt_fonct (gta_elemn_enonc_inser (i).valr_numbr,
                                     'var_'
                                  || substr (gta_elemn_enonc_inser (i).nom_entit_refrn,
                                             8),
                                  'Insert')
                   else
                     formt_numrq (gta_elemn_enonc_inser (i).valr_numbr)
                 end
               when gta_elemn_enonc_inser (i).valr_date is not null then
                 formt_date (gta_elemn_enonc_inser (i).valr_date)
               else
                 formt_chain (null)
             end
          || ', ';
        gbo_merge := true;
      elsif gta_elemn_enonc_inser (i).indic_selct = 'O' then
        gva_ligne_selct :=
             gva_ligne_selct
          || gta_elemn_enonc_inser (i).nom_coln
          || case
               when gta_elemn_enonc_inser (i).valr_varch is not null then
                 ' = ' || formt_chain (gta_elemn_enonc_inser (i).valr_varch)
               when gta_elemn_enonc_inser (i).valr_numbr is not null then
                 case
                   when gta_elemn_enonc_inser (i).nom_coln like 'dnr_ref_aplic' then
                        ' = '
                     || formt_fonct (gta_elemn_enonc_inser (i).valr_numbr,
                                     'var_aplic',
                                     'Insert')
                   when gta_elemn_enonc_inser (i).nom_coln like '%ref_prodt' then
                     ' = sie$migrt$pkg.vnu_seqnc_prodt'
                   when gta_elemn_enonc_inser (i).nom_coln like 'ref_dv_%' then
                        ' = '
                     || formt_detl_domn_valr (
                          sie_14_domn_valr_pkg.obten_code_parnt (gta_elemn_enonc_inser (i).valr_numbr),
                          sie_14_domn_valr_pkg.obten_code (gta_elemn_enonc_inser (i).valr_numbr),
                          'sie$migrt$pkg.vva_code_prodt'
                        )
                   when gta_elemn_enonc_inser (i).nom_coln like 'ref_%' then
                        ' = '
                     || formt_fonct (gta_elemn_enonc_inser (i).valr_numbr,
                                        'var_'
                                     || substr (gta_elemn_enonc_inser (i).nom_entit_refrn,
                                                8),
                                     'Select')
                   else
                     ' = ' || formt_numrq (gta_elemn_enonc_inser (i).valr_numbr)
                 end
               when gta_elemn_enonc_inser (i).valr_date is not null then
                 ' = ' || formt_date (gta_elemn_enonc_inser (i).valr_date)
               else
                 ' is ' || formt_chain (null)
             end
          || ' and ';
      elsif gta_elemn_enonc_inser (i).indic_updat = 'O' then
        gva_ligne_updat :=
             gva_ligne_updat
          || gta_elemn_enonc_inser (i).nom_coln
          || case
               when gta_elemn_enonc_inser (i).valr_varch is not null then
                 ' = ' || formt_chain (gta_elemn_enonc_inser (i).valr_varch)
               when gta_elemn_enonc_inser (i).valr_numbr is not null then
                 case
                   when gta_elemn_enonc_inser (i).nom_coln like 'dnr_ref_aplic' then
                        ' = '
                     || formt_fonct (gta_elemn_enonc_inser (i).valr_numbr,
                                     'var_aplic',
                                     'Insert')
                   when gta_elemn_enonc_inser (i).nom_coln like '%ref_prodt' then
                     ' = sie$migrt$pkg.vnu_seqnc_prodt'
                   when gta_elemn_enonc_inser (i).nom_coln like 'ref_dv_%' then
                        ' = '
                     || formt_detl_domn_valr (
                          sie_14_domn_valr_pkg.obten_code_parnt (gta_elemn_enonc_inser (i).valr_numbr),
                          sie_14_domn_valr_pkg.obten_code (gta_elemn_enonc_inser (i).valr_numbr),
                          'sie$migrt$pkg.vva_code_prodt'
                        )
                   when gta_elemn_enonc_inser (i).nom_coln like 'ref_%' then
                        ' = '
                     || formt_fonct (gta_elemn_enonc_inser (i).valr_numbr,
                                        'var_'
                                     || substr (gta_elemn_enonc_inser (i).nom_entit_refrn,
                                                8),
                                     'Update')
                   else
                     ' = ' || formt_numrq (gta_elemn_enonc_inser (i).valr_numbr)
                 end
               when gta_elemn_enonc_inser (i).valr_date is not null then
                 ' = ' || formt_date (gta_elemn_enonc_inser (i).valr_date)
               else
                 ' = ' || formt_chain (null)
             end
          || ', ';
      end if;
    end loop;

    gva_ligne_selct :=
         formt_chain_enonc (gva_ligne_selct,
                            ' and')
      || ';';

    gva_ligne_updat :=
      formt_chain_enonc (gva_ligne_updat,
                         ',');

    vva_ligne_valr := formt_chain_enonc (vva_ligne_valr) || ');';
    ajout_ligne (gva_ligne_inser || vva_ligne_valr,
                 gnu_index_alimn_table);

    if gnu_compt_ligne_bloc > gnu_nombr_seprt then
      ajout_bloc_limt (pva_entit,
                       gnu_index_alimn_table);
    end if;
  end termn_enonc_inser;

  procedure trait_genrq (pnu_seqnc_entit in number,
                         pva_entit in varchar2,
                         vva_enonc_sql varchar2) is
    vva_entit                               number (10);
    vva_table_tempr                         varchar2 (30);
    vva_nom_varbl_rowtp                     varchar2 (30)
                                              default    'vre_'
                                                      || substr (pva_entit,
                                                                 1,
                                                                 26);
    vva_varbl_ref_cursor                    varchar2 (30) default 'vcu_cursr';

    cursor cur_atrib is
      select     lower (nom) nom,
                 type_don,
                 compr_migrt,
                 lower (ref_entit_refrn_formt) refrn
          from   vd_sie_11_atrib_entit ae
         where   ae.ref_entit = pnu_seqnc_entit and compr_migrt not in ('NON_MIGRE')
      order by   nom;

    cursor cur_atrib_inser_selct is
      select     lower (nom) nom,
                 type_don,
                 compr_migrt,
                 lower (ref_entit_refrn_formt) refrn
          from   vd_sie_11_atrib_entit ae
         where   ae.ref_entit = pnu_seqnc_entit and compr_migrt not in ('NON_MIGRE', 'CLE_REFRN')
      order by   nom;

    cursor cur_atrib_updat is
      select     lower (nom) nom,
                 type_don,
                 compr_migrt,
                 lower (ref_entit_refrn_formt) refrn
          from   vd_sie_11_atrib_entit ae
         where   ae.ref_entit = pnu_seqnc_entit and compr_migrt = 'CLE_REFRN'
      order by   nom;

    vva_enonc_a_exect                       varchar2 (32767);
    vva_declr_varbl                         varchar2 (32767);
    vva_varbl_cursr                         varchar2 (32767);
    vva_varbl_conct_chain                   varchar2 (32767);
    vva_inser_elemn                         varchar2 (32767);
    vva_selct_elemn                         varchar2 (32767);
    vva_updat_elemn                         varchar2 (32767);

    procedure ajout_enonc_a_exect (pva_code in varchar2) is
    begin
      vva_enonc_a_exect := vva_enonc_a_exect || pva_code;
    end ajout_enonc_a_exect;
  begin
    select   nom_table_tempr
      into   vva_table_tempr
      from   vd_i_sie_11_entit
     where   seqnc = pnu_seqnc_entit;


    --Initialiser variable chaine selon atrib
    begin
      for rec_atrib in cur_atrib loop
        vva_declr_varbl :=
             vva_declr_varbl
          || substr ('var_' || rec_atrib.nom,
                     1,
                     30)
          || ' '
          || obten_type_atrib (rec_atrib.type_don,
                               ';');

        vva_varbl_cursr :=
             vva_varbl_cursr
          || substr ('var_' || rec_atrib.nom,
                     1,
                     30)
          || ', ';
      end loop;

      for rec_atrib_inser_selct in cur_atrib_inser_selct loop
        vva_varbl_conct_chain :=
             vva_varbl_conct_chain
          || 'sie_11_migrt_pkg.gva_ligne_inser := sie_11_migrt_pkg.gva_ligne_inser || '''
          || rec_atrib_inser_selct.nom
          || ', '
          || ''';';

        vva_inser_elemn :=
             vva_inser_elemn
          || 'sie_11_migrt_pkg.ajout_elemn_enonc_inser('''
          || substr (rec_atrib_inser_selct.nom,
                     1,
                     30)
          || ''', '
          || substr ('var_' || rec_atrib_inser_selct.nom,
                     1,
                     30)
          || ', '''
          || substr (rec_atrib_inser_selct.refrn,
                     1,
                     30)
          || ''');';

        if rec_atrib_inser_selct.compr_migrt = 'CLE_FONCT' then
          vva_selct_elemn :=
               vva_selct_elemn
            || 'sie_11_migrt_pkg.ajout_elemn_enonc_selct('''
            || substr (rec_atrib_inser_selct.nom,
                       1,
                       30)
            || ''', '
            || substr ('var_' || rec_atrib_inser_selct.nom,
                       1,
                       30)
            || ', '''
            || substr (rec_atrib_inser_selct.refrn,
                       1,
                       30)
            || ''');';
        end if;
      end loop;

      for rec_atrib_updat in cur_atrib_updat loop
        vva_updat_elemn :=
             vva_updat_elemn
          || 'sie_11_migrt_pkg.ajout_elemn_enonc_updat('''
          || substr (rec_atrib_updat.nom,
                     1,
                     30)
          || ''', '
          || substr ('var_' || rec_atrib_updat.nom,
                     1,
                     30)
          || ', '''
          || substr (rec_atrib_updat.refrn,
                     1,
                     30)
          || ''');';
      end loop;

      vva_varbl_cursr := formt_chain_enonc (vva_varbl_cursr);
    end;

    ajout_enonc_a_exect ('
    declare
      ' || vva_varbl_ref_cursor || ' sys_refcursor;');

    ajout_enonc_a_exect (vva_declr_varbl);

    ajout_enonc_a_exect (
         'begin
    
      open '
      || vva_varbl_ref_cursor
      || ' for '
      || vva_enonc_sql
      || ';
      fetch '
      || vva_varbl_ref_cursor
      || ' into '
    );

    ajout_enonc_a_exect (vva_varbl_cursr);

    ajout_enonc_a_exect (
         ';
      
      while '
      || vva_varbl_ref_cursor
      || '%found loop
        sie_11_migrt_pkg.gbo_presn_don := true;
        sie_11_migrt_pkg.debt_enonc_inser('''
      || vva_table_tempr
      || ''');
        '
    );

    ajout_enonc_a_exect (vva_varbl_conct_chain);
    ajout_enonc_a_exect (vva_inser_elemn);
    ajout_enonc_a_exect (vva_selct_elemn);
    ajout_enonc_a_exect (vva_updat_elemn);

    ajout_enonc_a_exect (
         '
        sie_11_migrt_pkg.termn_enonc_inser('''
      || pva_entit
      || ''');
        sie_11_migrt_pkg.alimn_clob_selct('
      || pnu_seqnc_entit
      || ', var_seqnc);
        
        sie_11_migrt_pkg.alimn_clob_updat('
      || pnu_seqnc_entit
      || ', var_seqnc);
        sie_11_migrt_pkg.incre_nombr_ligne;
        fetch '
      || vva_varbl_ref_cursor
      || ' into '
    );

    ajout_enonc_a_exect (vva_varbl_cursr);

    ajout_enonc_a_exect (';
      end loop;
      
      close ' || vva_varbl_ref_cursor || ';
    end;');

    execute immediate (vva_enonc_a_exect);
  --dbms_output.put_line (vva_enonc_a_exect);
  exception
    when others then
      sie_01_err_apex_pkg.lever_err_apex_code ('SAF.000043',
                                               upper (pva_entit),
                                               pva_code_prodt             => 'AFW');
  end trait_genrq;

  procedure alimn_clob_selct (pnu_seqnc_entit in number,
                              pnu_seqnc_dev in number) is
    vva_nom_table                           varchar2 (30);
    vva_nom_type_arr                        varchar2 (30);
    vva_ligne                               varchar2 (32767);
    vva_indic_tabl_index                    varchar2 (1);
  begin
    select   lower (nom),
             lower (substr (nom,
                            8))
               type_arr,
             indic_expor_tabl_index
      into   vva_nom_table,
             vva_nom_type_arr,
             vva_indic_tabl_index
      from   vd_i_sie_11_entit
     where   seqnc = pnu_seqnc_entit;

    vva_ligne :=
         'select seqnc into '
      || formt_ref (pnu_seqnc_dev,
                    'var_' || vva_nom_type_arr)
      || ' from '
      || vva_nom_table
      || ' where ';

    if vva_indic_tabl_index = 'O' then
      vva_ligne := vva_ligne || gva_ligne_selct;
    else
      vva_ligne := vva_ligne || 'seqnc = ' || pnu_seqnc_dev || ';';
    end if;

    ajout_ligne (vva_ligne,
                 gnu_index_selct);

    if gnu_compt_ligne_bloc > gnu_nombr_seprt then
      ajout_bloc_limt (vva_nom_table,
                       gnu_index_selct);
    end if;
  end alimn_clob_selct;

  procedure alimn_clob_updat (pnu_seqnc_entit in number,
                              pnu_seqnc_dev in number) is
    vva_nom_table                           varchar2 (30);
    vva_nom_type_arr                        varchar2 (30);
    vva_nom_table_ereur                     varchar2 (30);
    vva_ligne                               varchar2 (32767);
    vva_indic_tabl_index                    varchar2 (1);
  begin
    select   lower (nom),
             lower (substr (nom,
                            8))
               type_arr,
             lower (nom_table_ereur),
             indic_expor_tabl_index
      into   vva_nom_table,
             vva_nom_type_arr,
             vva_nom_table_ereur,
             vva_indic_tabl_index
      from   vd_i_sie_11_entit
     where   seqnc = pnu_seqnc_entit;

    if gva_ligne_updat is not null
   and (gva_contx = 'PRODT'
     or gva_contx = 'APLIC' and gva_contx_courn = 'APLIC') then
      vva_ligne := 'update ' || vva_nom_table || ' set ' || gva_ligne_updat || ' where ';

      if vva_indic_tabl_index = 'O' then
        vva_ligne := vva_ligne || gva_ligne_selct;
      else
        vva_ligne := vva_ligne || 'seqnc = ' || pnu_seqnc_dev || ';';
      end if;

      /*
            vva_ligne :=
              substr (vva_ligne,
                      1,
                      length (vva_ligne) - 1) ||
              ' log errors into ' ||
              vva_nom_table_ereur ||
              '(''Update'') reject limit unlimited;';*/

      ajout_ligne (vva_ligne,
                   gnu_index_updat);

      if gnu_compt_ligne_bloc > gnu_nombr_seprt then
        ajout_bloc_limt (vva_nom_table,
                         gnu_index_updat);
      end if;
    end if;
  end alimn_clob_updat;

  procedure incre_nombr_ligne is
  begin
    if gnu_compt_ligne_bloc > gnu_nombr_seprt then
      gnu_compt_ligne_bloc := 0;
    end if;

    gnu_compt_ligne_bloc := gnu_compt_ligne_bloc + 1;
  end incre_nombr_ligne;
end sie_11_migrt_pkg;
/

Prompt Package Body SIE_11_PARMT_AFW_PKG;
/* Formatted on 04/12/2013 11:35:20 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_11_PARMT_AFW_PKG" is
  function obten_valr_parmt (pva_code_parmt in varchar)
    return varchar2 is
    vnu_valr                                varchar2 (200);
  begin
    select   valr
      into   vnu_valr
      from   sie_11_parmt_afw
     where   code = pva_code_parmt;

    return vnu_valr;
  exception
    when no_data_found then
      return null;
  end obten_valr_parmt;
end sie_11_parmt_afw_pkg;
/

Prompt Package Body SIE_11_PRODT_PKG;
/* Formatted on 04/12/2013 11:35:21 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_11_PRODT_PKG" is
  gda_const_date                 constant date
    default to_date ('1' || '9' || '8' || '7' || '-' || '0' || '7' || '-' || '0' || '9',
                     'yyyy-mm-dd') ;
  gnu_versn_niv_1                         number default 2;
  gnu_versn_niv_2                         number default 3;
  gnu_versn_niv_3                         number default 0;
  gnu_versn_niv_4                         number default 0;

  function obten_prodt_sesn
    return number is
    vnu_seqnc_prodt                         vd_i_sie_11_prodt.seqnc%type;
  begin
    select   pr.seqnc
      into   vnu_seqnc_prodt
      from   vd_i_sie_11_prodt pr,
             vd_i_sie_11_aplic ap
     where   pr.seqnc = ap.ref_prodt and ap.seqnc = sie_11_aplic_pkg.obten_aplic_sesn ();

    return vnu_seqnc_prodt;
  exception
    when no_data_found then
      raise;
  end obten_prodt_sesn;

  function obten_prodt (pva_code_prodt in varchar2)
    return number is
    vnu_prodt                               sie_11_prodt.seqnc%type;
  begin
    select   seqnc
      into   vnu_prodt
      from   vd_i_sie_11_prodt
     where   code = pva_code_prodt;

    return vnu_prodt;
  exception
    when no_data_found then
      return null;
  end obten_prodt;

  function obten_code_prodt (pnu_seqnc in number default null)
    return varchar2 is
    vva_code                                sie_11_prodt.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_seqnc, obten_prodt_sesn);

    return vva_code;
  end obten_code_prodt;

  function obten_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_acuei%type is
    vnu_aplic                               vd_i_sie_11_aplic.seqnc%type;
  begin
    select   p.ref_aplic_acuei
      into   vnu_aplic
      from   vd_i_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_aplic;
  end obten_aplic_acuei;

  function obten_numr_apex_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number is
    vnu_aplic_acuei                         vd_sie_11_prodt.ref_numr_aplic_acuei%type;
  begin
    select   p.ref_numr_aplic_acuei
      into   vnu_aplic_acuei
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);


    return vnu_aplic_acuei;
  end obten_numr_apex_aplic_acuei;

  function obten_page_acuei (pnu_prodt in number default null)
    return number is
    vnu_page                                vd_i_sie_13_page.seqnc%type;
  begin
    select   p.ref_page_acuei
      into   vnu_page
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page;
  end obten_page_acuei;

  function obten_numr_apex_page_acuei (pnu_prodt in number default null)
    return number is
    vnu_page_acuei                          vd_sie_11_prodt.ref_numr_page_acuei%type;
  begin
    select   p.ref_numr_page_acuei
      into   vnu_page_acuei
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page_acuei;
  end obten_numr_apex_page_acuei;

  function obten_aplic_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_comnt_bogue%type is
    vnu_aplic_comnt_bogue                   vd_sie_11_prodt.ref_aplic_comnt_bogue%type;
  begin
    select   p.ref_aplic_comnt_bogue
      into   vnu_aplic_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_aplic_comnt_bogue;
  end obten_aplic_comnt_bogue;

  function obten_numr_apex_aplic_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number is
    vnu_aplic_comnt_bogue                   vd_sie_11_prodt.ref_numr_aplic_comnt_bogue%type;
  begin
    select   p.ref_numr_aplic_comnt_bogue
      into   vnu_aplic_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_aplic_comnt_bogue;
  end obten_numr_apex_aplic_cb;

  function obten_page_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_page_comnt_bogue%type is
    vnu_page_comnt_bogue                    vd_sie_11_prodt.ref_page_comnt_bogue%type;
  begin
    select   p.ref_page_comnt_bogue
      into   vnu_page_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page_comnt_bogue;
  end obten_page_comnt_bogue;

  function obten_numr_apex_page_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number is
    vnu_page_comnt_bogue                    vd_sie_11_prodt.ref_numr_page_comnt_bogue%type;
  begin
    select   p.ref_numr_page_comnt_bogue
      into   vnu_page_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page_comnt_bogue;
  end obten_numr_apex_page_cb;

  /*
      OBSOLETE: il faut utiliser SIE_11_VERSN_PKG.OBTEN_NUMR_VERSN
  */
  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic is
  begin
    return sie_11_versn_pkg.obten_numr_versn (pnu_versn_niv_1,
                                              pnu_versn_niv_2,
                                              pnu_versn_niv_3,
                                              pnu_versn_niv_4);
  end obten_numr_versn;

  --CONAL :: Ne devrait plus etre utilise
  /*
          function obten_numr_versn_aplic (pnu_numr_aplic in number default null)
      return number is
      vnu_versn_formt   number;
    begin
      --TODO revoir cette partie lorsqu'on remplacera le repartiteur
      if pnu_numr_aplic is null then
        return obten_numr_versn (gnu_versn_niv_1,
                                 gnu_versn_niv_2,
                                 gnu_versn_niv_3,
                                 gnu_versn_niv_4);
      else
        select (select obten_numr_versn (v.numr_versn_1,
                                                          v.numr_versn_2,
                                                          v.numr_versn_3,
                                                          v.numr_versn_4)
                  from vd_i_sie_11_versn v
                 where v.ref_prodt = p.seqnc)
          into vnu_versn_formt
          from vd_sie_11_prodt p
         where p.numr_aplic_apex = pnu_numr_aplic;
        return vnu_versn_formt;
      end if;
    end obten_numr_versn_aplic;
  */

  --OBSOLETE: il faut utiliser SIE_11_VERSN_PKG.OBTEN_VERSN
  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic is
  begin
    return sie_11_versn_pkg.obten_versn (pnu_versn_niv_1,
                                         pnu_versn_niv_2,
                                         pnu_versn_niv_3,
                                         pnu_versn_niv_4);
  end obten_versn;

  function obten_versn
    return varchar2 is
    vva_nom                                 varchar2 (200);
  begin
    select      p.nom
             || ' '
             || (select   obten_versn (v.numr_versn_1,
                                       v.numr_versn_2,
                                       v.numr_versn_3,
                                       v.numr_versn_4)
                   from   vd_i_sie_11_versn v
                  where   v.seqnc = p.ref_versn)
      into   vva_nom
      from   vd_i_sie_11_prodt p
     where   p.seqnc = obten_prodt_sesn;

    return vva_nom;
  end obten_versn;

  --CONAL, il faut trouver une facon d'obtenir le schema d'un produit
  /*
        function obten_schem (pnu_seqnc in number default null )
      return varchar2 is
      vva_schem                               varchar2 (60);
    begin
      if pnu_seqnc is null then
        select   a.owner
          into   vva_schem
          from   apex_aplic a
         where   a.id = sie_07_util_pkg.nv ('APP_ID');
      else
        select   a.owner
          into   vva_schem
          from   apex_aplic a,
                 vd_i_sie_11_prodt p
         where   a.id = p.numr_aplic_apex and p.seqnc = pnu_seqnc;
      end if;
      return vva_schem;
    end obten_schem;
  */
  --Temporairement, j'en ai besoin pour la migration CONAL
  function obten_schem_afw
    return varchar2 is
    vnu_seqnc_safp                          vd_i_sie_11_aplic.seqnc%type default sie_11_aplic_pkg.obten_aplic ('SAFP');
  begin
    return sie_11_aplic_pkg.obten_schem (vnu_seqnc_safp);
  end obten_schem_afw;

  function obten_dosr_fichr_prodt (pnu_seqnc in number default null)
    return varchar2 is
    vva_dosr_fichr                          vd_sie_11_prodt.dosr_fichr%type;
  begin
    select   dosr_fichr
      into   vva_dosr_fichr
      from   vd_sie_11_prodt
     where   seqnc = nvl (pnu_seqnc, obten_prodt_sesn);

    return vva_dosr_fichr;
  end obten_dosr_fichr_prodt;

  procedure inser_prodt (pva_code in varchar2,
                         pva_nom in varchar2,
                         pnu_numr_versn_1 in number,
                         pnu_numr_versn_2 in number,
                         pnu_numr_versn_3 in number,
                         pnu_numr_versn_4 in number) is
    vnu_prodt                               vd_i_sie_11_prodt.seqnc%type;
    vnu_versn                               vd_i_sie_11_versn.seqnc%type;
  begin
    insert into   vd_i_sie_11_prodt (code, nom)
         values   (pva_code,
                   pva_nom)
      returning   seqnc
           into   vnu_prodt;

    insert into   vd_i_sie_11_versn (ref_prodt, numr_versn_1, numr_versn_2, numr_versn_3, numr_versn_4, dnr_ref_prodt)
         values   (vnu_prodt,
                   pnu_numr_versn_1,
                   pnu_numr_versn_2,
                   pnu_numr_versn_3,
                   pnu_numr_versn_4,
                   vnu_prodt)
      returning   seqnc
           into   vnu_versn;

    update   vd_i_sie_11_prodt
       set   ref_versn = vnu_versn
     where   seqnc = vnu_prodt;
  exception
    when others then
      raise_application_error (-20001,
                               'Erreur - sie_11_prodt_pkg.inser_prodt - ' || sqlerrm);
  end inser_prodt;

  function maj_prodt (pva_code in varchar2,
                      pva_nom in varchar2,
                      pva_procd_expor_metdn in varchar2,
                      pnu_tail_tabl_extra in number,
                      pva_indic_extra_tout in varchar2,
                      pnu_ref_versn_courn in number default null)
    return number is
    vnu_seqnc                               number;
  begin
    begin
      select   seqnc
        into   vnu_seqnc
        from   vd_i_sie_11_prodt
       where   code = upper (pva_code);

      update   vd_i_sie_11_prodt
         set   nom = pva_nom,
               procd_expor_metdn = pva_procd_expor_metdn,
               tail_tabl_extra = pnu_tail_tabl_extra,
               indic_extra_tout = pva_indic_extra_tout,
               ref_versn = pnu_ref_versn_courn
       where   seqnc = vnu_seqnc;
    exception
      when no_data_found then
        null;

        insert into   vd_i_sie_11_prodt (code, nom, procd_expor_metdn, tail_tabl_extra, indic_extra_tout, ident_envir)
             values   (pva_code,
                       pva_nom,
                       pva_procd_expor_metdn,
                       pnu_tail_tabl_extra,
                       pva_indic_extra_tout,
                       'ACC')
          returning   seqnc
               into   vnu_seqnc;
    end;

    return vnu_seqnc;
  exception
    when others then
      --TODO: revoir la gestion des erreurs selon CADRE SIE
      raise_application_error (-20001,
                               'Erreur - sie_11_prodt_pkg.maj_prodt - ' || sqlerrm);
  end maj_prodt;

  procedure telvs_fichr (pcl_fichr in clob,
                         pva_nom_fichr in varchar2,
                         pbo_atach in boolean default true,
                         pva_contn_type in varchar2 default 'text/plain',
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0) is
    vlb                                     blob;
    vnu_off_sourc                           pls_integer default 1;
    vnu_off_dest                            pls_integer default 1;
    vnu_lang                                pls_integer default 0;
    vnu_warng                               pls_integer;
  begin
    if pbo_arret_engin_apex then
      aa.g_page_text_generated := true;
      aa.g_unrecoverable_error := true;
    --sie_07_util_pkg.aret_trait_page_apex;
    end if;

    dbms_lob.createtemporary (vlb,
                              true);
    dbms_lob.converttoblob (vlb,
                            pcl_fichr,
                            dbms_lob.lobmaxsize,                                  --dbms_lob.getlength (pcl_fichr), /**/
                            vnu_off_dest,
                            vnu_off_sourc,
                            pnu_chars_id,
                            vnu_lang,
                            vnu_warng);
    owa_util.mime_header (ccontent_type              => nvl (pva_contn_type, 'application/octet'),
                          bclose_header              => false);

    htp.p ('Content-length: ' || dbms_lob.getlength (vlb));

    if pbo_atach then
      htp.p ('Content-Disposition: attachment; filename="' || pva_nom_fichr || '"');
    else
      htp.p ('Content-Disposition: filename="' || pva_nom_fichr || '"');
    end if;

    owa_util.http_header_close;
    wpg_docload.download_file (vlb);
  end;

  procedure telvs_fichr (pbl_fichr in out nocopy blob,
                         pva_nom_fichr in varchar2,
                         pva_contn_type in varchar2,
                         pbo_atach in  boolean default true,
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0) is
  begin
    if pbo_arret_engin_apex then
      aa.g_page_text_generated := true;
      sie_07_util_pkg.aret_trait_page_apex;
    end if;

    owa_util.mime_header (ccontent_type              => nvl (pva_contn_type, 'application/octet'),
                          bclose_header              => false);

    htp.p ('Content-length: ' || dbms_lob.getlength (pbl_fichr));

    if pbo_atach then
      htp.p ('Content-Disposition: attachment; filename="' || pva_nom_fichr || '"');
    else
      htp.p ('Content-Disposition: filename="' || pva_nom_fichr || '"');
    end if;

    owa_util.http_header_close;
    wpg_docload.download_file (pbl_fichr);
  end;

  function obten_lang (pva_code in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    /*select   l.seqnc
                                                                                                      into   vnu_seqnc
      from   vd_sie_11_prodt p,
             vd_sie_01_lang l
     where   p.seqnc = obten_prodt_sesn () and l.seqnc = p.ref_lang and l.code = upper (pva_code)
    union*/
    select   l.seqnc
      into   vnu_seqnc
      from   vd_sie_11_prodt_lang pl,
             vd_sie_01_lang l
     where   pl.ref_prodt = obten_prodt_sesn () and l.seqnc = pl.ref_lang and l.code = upper (pva_code);

    return vnu_seqnc;
  exception
    when others then
      return null;
  end obten_lang;

  function obten_lang_sesn (pva_code_deft in varchar2 default null)
    return number is
    vnu_seqnc_lang                          number (10);
    vva_code_lang                           varchar2 (10) default sie_07_util_pkg.obten_lang_furtr ();
  begin
    -- Determiner si la langue du browser existe pour l'application
    vnu_seqnc_lang := obten_lang (vva_code_lang);

    -- Si la langue du browser n'existe pas pour l'application
    -- Determiner si la langue du browser sans territoire existe pour l'application
    if vnu_seqnc_lang is null
   and instr (vva_code_lang,
              '-') > 0 then
      vnu_seqnc_lang :=
        obten_lang (substr (vva_code_lang,
                            1,
                            instr (vva_code_lang,
                                   '-') -
                            1));
    end if;

    -- Si la langue du browser sans territoire n'existe pas pour l'application
    -- Utiliser la langue par defaut
    if vnu_seqnc_lang is null and pva_code_deft is not null then
      vnu_seqnc_lang := obten_lang (pva_code_deft);
    end if;

    --Prendre l'application primaire de l'application
    if vnu_seqnc_lang is null then
      vnu_seqnc_lang := obten_lang (sie_07_util_pkg.obten_lang_aplic_deft ());
    end if;

    return vnu_seqnc_lang;
  end obten_lang_sesn;

  function obten_code_lang_sesn (pva_code_deft in varchar2 default null)
    return varchar2 is
    vva_code                                vd_i_sie_01_lang.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_01_lang l
     where   l.seqnc = obten_lang_sesn (pva_code_deft);

    return vva_code;
  end obten_code_lang_sesn;

  function obten_versn_plugn_formt (pnu_no_versn in number)
    return varchar2 is
  begin
    return null;
  end obten_versn_plugn_formt;

  function obten_ident_envir (pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2 is
    vva_ident_envir                         varchar2 (60);
  begin
    select   ident_envir
      into   vva_ident_envir
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_ident_envir;
  end obten_ident_envir;

  function obten_versn_courn (pnu_prodt in number)
    return number is
    vnu_versn                               number (10);
  begin
    select   ref_versn
      into   vnu_versn
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vnu_versn;
  end obten_versn_courn;

  function obten_jquer_ui_css_scope (pnu_prodt in number default null)
    return varchar2 is
    vva_jquer_ui_css_scope                  vd_i_sie_11_prodt.jquer_ui_css_scope%type;
  begin
    select   jquer_ui_css_scope
      into   vva_jquer_ui_css_scope
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_jquer_ui_css_scope;
  exception
    when others then
      --TODO::CARLO
      return obten_code_prodt (pnu_prodt);
  end obten_jquer_ui_css_scope;

  function obten_mesg_tout_droit_resrv (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg_tout_droit_resrv               vd_i_sie_11_prodt.mesg_tout_droit_resrv%type;
  begin
    select   mesg_tout_droit_resrv
      into   vva_mesg_tout_droit_resrv
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg_tout_droit_resrv;
  exception
    when others then
      return null;
  end obten_mesg_tout_droit_resrv;

  function obten_templ_javsc_core_1 (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                obten_dosr_fichr_afw || 'javascript/afw_core_4.1.0.js?v=' || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script');
  exception
    when others then
      return null;
  end obten_templ_javsc_core_1;

  function obten_templ_theme_jquer_ui (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    '<!-- APEXFramework - Theme - jQuery UI - CSS -->'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'theme/jquery-ui/css/ui-afw/jquery-ui-1.8.17.custom.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_prodt
           || 'theme/jquery-ui/css/'
           || obten_jquer_ui_css_scope
           || '/jquery-ui-1.8.17.custom.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<!-- APEXFramework - Theme - jQuery UI - Custom Icons -->'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'theme/jquery-ui/custom_icons/assets/css/fff.icon.core.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'theme/jquery-ui/custom_icons/assets/css/fff.icon.icons.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />';
  end obten_templ_theme_jquer_ui;

  function obten_templ_javsc_core_2 (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                obten_dosr_fichr_afw || 'javascript/afw_4.1.0.js?v=' || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script')
           || sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                obten_dosr_fichr_afw || 'javascript/afw_legacy.js?v=' || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script')
           || sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                   obten_dosr_fichr_afw
                || 'theme/jquery-ui/js/jquery-ui-1.8.17.custom.min.js?v='
                || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script');
  end obten_templ_javsc_core_2;

  function obten_templ_javsc_jquer (pnu_prodt in number default null)
    return varchar2 is
  begin
    --todo CARLO
    --remplacer impromptu par jquery ui dialog
    --trouver un remplacement pour hotkey
    return    '<!-- APEXFramework - JavaScript - jQuery Plug-in -->'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jquery.apex-aplic_procs-4.1.0.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jquery.apex-session-4.1.0.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jquery-impromptu.2.8.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jgrowl/javascript/jquery.jgrowl_minimized.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>';
  end obten_templ_javsc_jquer;

  function obten_templ_echo_custm (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    '<!-- APEXFramework - Theme - Echo 2.1 -->'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'theme/echo2.1/src/css/custom/theme.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_prodt
           || 'theme/echo2.1/src/css/custom/theme.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<script type="text/javascript" src="'
           || obten_dosr_fichr_afw
           || 'theme/echo2.1/src/js/jquery.layout.js?v='
           || obten_numr_versn_prodt_afw
           || '"></script>'
           || '<script type="text/javascript" src="'
           || obten_dosr_fichr_afw
           || 'theme/echo2.1/src/js/jquery.layout.state.js?v='
           || obten_numr_versn_prodt_afw
           || '"></script>'
           || '<script type="text/javascript" src="'
           || obten_dosr_fichr_afw
           || 'theme/echo2.1/src/js/json2.js?v='
           || obten_numr_versn_prodt_afw
           || '"></script>'
           || '<script type="text/javascript" src="'
           || obten_dosr_fichr_afw
           || 'theme/echo2.1/src/js/theme.js?v='
           || obten_numr_versn_prodt_afw
           || '"></script>'
           || '<script type="text/javascript" src="'
           || obten_dosr_fichr_afw
           || 'theme/echo2.1/src/js/custom/theme.js?v='
           || obten_numr_versn_prodt_afw
           || '"></script>';
  end obten_templ_echo_custm;

  function obten_templ_custm (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    '<!-- Application - Theme - CSS -->'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'css/theme.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_prodt
           || 'css/theme.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />';
  end obten_templ_custm;

  function obten_boutn_deplc_range_raprt
    return varchar2 is
  begin
    return    sie_15_htp_pkg.ouvri_bals ('div',
                                         'class',
                                         'barre_boutn_deplc_range_raprt')
           || sie_15_htp_pkg.ouvri_bals ('a',
                                         'href',
                                         '#',
                                         'onclick',
                                         'afw.sie_13.page.raprt_sql.deplc_rang_haut(this);')
           || sie_15_htp_pkg.ouvri_bals (
                'span',
                'class',
                'small_text_button ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only'
              )
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-icon-primary ui-icon ui-icon-triangle-1-n',
                                         'title',
                                         'Déplacer vers le haut.')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-button-text')
           || 'Déplacer vers le haut.'
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('a')
           || sie_15_htp_pkg.ouvri_bals ('a',
                                         'href',
                                         '#',
                                         'onclick',
                                         'afw.sie_13.page.raprt_sql.deplc_rang_bas(this);')
           || sie_15_htp_pkg.ouvri_bals (
                'span',
                'class',
                'small_text_button ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only'
              )
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-icon-primary ui-icon ui-icon-triangle-1-s',
                                         'title',
                                         'Déplacer vers le bas.')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-button-text')
           || 'Déplacer vers le bas.'
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('a')
           || sie_15_htp_pkg.fermr_bals ('div');
  end obten_boutn_deplc_range_raprt;

  function obten_url_acuei (pnu_prodt in number default obten_prodt_sesn)
    return varchar2 is
  begin
    return    obten_base_url (pnu_prodt)
           || sie_08_url_pkg.genr_url (obten_numr_apex_aplic_acuei (pnu_prodt),
                                       obten_numr_apex_page_acuei (pnu_prodt),
                                       'SIDF',
                                       null);
  end obten_url_acuei;

  function obten_url_authe_cible_sesn
    return varchar2 is
  begin
    return    obten_base_url (obten_prodt_sesn)
           || sie_08_url_pkg.genr_url (sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_APLIC'),
                                       sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_PAGE'),
                                       'SIDF',
                                       null);
  end obten_url_authe_cible_sesn;

  procedure defnr_item_aplic_apex is
  begin
    --Initialisation d'etat dans la session
    if sie_12_utils_pkg.obten_usagr_conct is not null
   and sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_11_TRAIT_MESGS_ERR') is null then
      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_TRAIT_MESGS_ERR',
                                       0);
    end if;

    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_NUMR_VERSN_PRODT',
                                     obten_numr_versn_prodt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_NUMR_VERSN_PRODT_AFW',
                                     obten_numr_versn_prodt_afw);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_DOSR_FICHR',
                                     obten_dosr_fichr_prodt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_DOSR_FICHR_AFW',
                                     obten_dosr_fichr_afw);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_ENVIR',
                                     '<span class="ident_envir">' || obten_ident_envir || '</span>');
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_VERSN_PRODT',
                                     obten_versn);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_ACRON_PRODT',
                                     obten_code_prodt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_JQUER_UI_CSS_SCOPE',
                                     obten_jquer_ui_css_scope);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_MESG_TOUT_DROIT_RESRV',
                                     obten_mesg_tout_droit_resrv);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_JAVSC_CORE_1',
                                     obten_templ_javsc_core_1);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_THEME_JQUER_UI',
                                     obten_templ_theme_jquer_ui);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_JAVSC_CORE_2',
                                     obten_templ_javsc_core_2);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_JAVSC_JQUER',
                                     obten_templ_javsc_jquer);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_ECHO_CUSTM',
                                     obten_templ_echo_custm || obten_templ_custm);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_CUSTM',
                                     obten_templ_custm);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_MESG_SUPRS',
                                     sie_07_util_pkg.obten_mesg_suprs ());
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TRAIT_MESGS_ERR',
                                     nvl (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_11_TRAIT_MESGS_ERR'), 0));
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_URL_ACUEI',
                                     obten_url_acuei);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_URL_AUTHE_CIBLE',
                                     obten_url_authe_cible_sesn);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_DEPLC_RANGE_RAPRT',
                                     obten_boutn_deplc_range_raprt);
  exception
    when others then
      ete ();
      raise;
  end defnr_item_aplic_apex;

  function obten_page_inexs_maj_refrn (pnu_prodt in vd_i_sie_11_prodt.seqnc%type)
    return boolean is
    vva_indic_page_inexs_maj_refrn          varchar2 (1);
  begin
    select   indic_page_inexs_maj_refrn
      into   vva_indic_page_inexs_maj_refrn
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return (vva_indic_page_inexs_maj_refrn = 'O');
  end obten_page_inexs_maj_refrn;

  function obten_mesg_sucs_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_sucs)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  exception
    when others then
      raise;
  end obten_mesg_sucs_prodt;

  function obten_mesg_echec_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_echec)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_echec_prodt;

  function obten_mesg_fetch_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_fetch)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_fetch_prodt;

  function obten_mesg_suprm_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_range_suprm)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_suprm_prodt;

  function obten_mesg_modf_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_range_modf)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_modf_prodt;

  function obten_mesg_inser_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_range_inser)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_inser_prodt;

  function obten_mesg_aucun_don_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_aucun_don_trouv)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_aucun_don_prodt;

  function obten_mesg_trop_don_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_trop_don_trouv)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_trop_don_prodt;

  procedure deplr_formt_resrc_prodt (pnu_prodt in number) is
  begin
    --delete from vd_i_sie_13_formt_resrc where ref_prodt = pnu_prodt;
    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('ICONE_16PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     16,
                     16,
                     'Icone 16 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_MOYEN',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     48,
                     48,
                     'Icone moyenne');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_24PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     24,
                     24,
                     'Icone 24 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_32PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     32,
                     32,
                     'Icone 32 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_64PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     64,
                     64,
                     'Icone 64 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_48PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     48,
                     48,
                     'Icone 48 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_128PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     128,
                     128,
                     'Icone 128 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('NON_COMPR',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'CSS'),
                     'Non compresse');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('NON_COMPR',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Non compresse');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('COMPR',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Compresse');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('JS_MIN',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Javascript compresse (minify)');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('JS_DEBUG',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Javascript non compresse (debug)');
    exception
      when dup_val_on_index then
        null;
    end;
  end deplr_formt_resrc_prodt;

  function obten_dosr_fichr_afw (pnu_prodt in number default null)
    return varchar2
    result_cache relies_on (sie_11_prodt) is
    vva_dosr_fichr                          varchar2 (200);
  begin
    select   dosr_fichr
      into   vva_dosr_fichr
      from   vd_i_sie_11_prodt
     where   code = 'AFW';

    return vva_dosr_fichr;
  end obten_dosr_fichr_afw;

  function obten_fonct_obten_base_url (pnu_prodt in vd_i_sie_11_prodt.seqnc%type)
    return varchar2 is
    vva_fonct_obten_base_url                vd_i_sie_11_prodt.fonct_obten_base_url%type;
  begin
    select   fonct_obten_base_url
      into   vva_fonct_obten_base_url
      from   vd_i_sie_11_prodt s
     where   s.seqnc = pnu_prodt;

    return vva_fonct_obten_base_url;
  exception
    when no_data_found then
      raise;
  end obten_fonct_obten_base_url;

  function obten_base_url (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2 is
    vva_base_url                            varchar2 (1000);
    vva_fonct_obten_base_url                vd_i_sie_11_prodt.fonct_obten_base_url%type;

    function exect_fonct_obten_base_url (pva_nom_fonct in varchar2)
      return varchar2 is
      vva_progr_a_lancr                       varchar2 (4000)
        default    'begin '
                || '  sie_11_prodt_pkg.gva_base_url := %FONCT_PERSN%; '
                || '  exception when others then ete();'
                || 'end;';
    begin
      vva_progr_a_lancr :=
        replace (vva_progr_a_lancr,
                 '%FONCT_PERSN%',
                 pva_nom_fonct);

      execute immediate vva_progr_a_lancr;

      return gva_base_url;
    exception
      when others then
        return null;
    end exect_fonct_obten_base_url;
  begin
    vva_fonct_obten_base_url := obten_fonct_obten_base_url (pnu_prodt);

    if vva_fonct_obten_base_url is not null then
      vva_base_url :=
           rtrim (exect_fonct_obten_base_url (vva_fonct_obten_base_url),
                  '/')
        || '/';
    else
      vva_base_url :=
           case when sie_08_url_pkg.obten_port_servr = 443 then 'https://' else 'http://' end
        || sie_08_url_pkg.obten_host_http
        || case
             when sie_08_url_pkg.obten_port_servr not in (80, 443, 8080) then ':' || sie_08_url_pkg.obten_port_servr
             else null
           end
        || sie_08_url_pkg.obten_nom_scrip
        || '/';
    end if;

    return vva_base_url;
  exception
    when others then
      return null;
  end obten_base_url;

  function obten_procd_entet_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_entet_pdf_ir%type is
    vva_procd                               vd_i_sie_11_prodt.procd_impre_entet_pdf_ir%type;
  begin
    select   procd_impre_entet_pdf_ir
      into   vva_procd
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_procd;
  end obten_procd_entet_plpdf;

  function obten_procd_pied_page_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_pied_page_pdf_ir%type is
    vva_procd                               vd_i_sie_11_prodt.procd_impre_pied_page_pdf_ir%type;
  begin
    select   procd_impre_pied_page_pdf_ir
      into   vva_procd
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_procd;
  end obten_procd_pied_page_plpdf;

  function obten_procd_coulr_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_plpdf_coulr%type is
    vva_procd                               vd_i_sie_11_prodt.procd_plpdf_coulr%type;
  begin
    select   procd_plpdf_coulr
      into   vva_procd
      from   vd_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_procd;
  end obten_procd_coulr_plpdf;

  function obten_numr_versn_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2 is
    vva_numr_versn                          varchar2 (200);
  begin
    select   (select   sie_11_versn_pkg.obten_versn (v.numr_versn_1,
                                                     v.numr_versn_2,
                                                     v.numr_versn_3,
                                                     v.numr_versn_4)
                from   vd_i_sie_11_versn v
               where   v.seqnc = p.ref_versn)
      into   vva_numr_versn
      from   vd_sie_11_prodt p
     where   p.seqnc = pnu_prodt;

    return vva_numr_versn;
  exception
    when no_data_found then
      return null;
  end obten_numr_versn_prodt;

  function obten_numr_versn_prodt_afw
    return varchar2 is
  begin
    return obten_numr_versn_prodt (obten_prodt ('AFW'));
  end obten_numr_versn_prodt_afw;

  function obten_nom (pnu_seqnc in number)
    return varchar2 is
    vva_nom                                 vd_i_sie_11_prodt.nom%type;
  begin
    select   nom
      into   vva_nom
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_seqnc;

    return vva_nom;
  exception
    when no_data_found then
      return null;
  end obten_nom;

  procedure creer_mesg_base_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type,
                                   pnu_lang in vd_i_sie_01_lang.seqnc%type default null) is
    vva_mesg_sucs                           vd_i_sie_01_mesg_lang.mesg%type default 'Opération réussie.';
    vva_type_mesg_sucs                      varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_echec                          vd_i_sie_01_mesg_lang.mesg%type default 'Opération échouée.';
    vva_type_mesg_echec                     varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_err;

    vva_mesg_extra                          vd_i_sie_01_mesg_lang.mesg%type default 'Impossible d''extraire la ligne.';
    vva_type_mesg_extra                     varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_err;

    vva_mesg_rang_suprm                     vd_i_sie_01_mesg_lang.mesg%type default 'rangée(s) supprimée(s)';
    vva_type_mesg_rang_suprm                varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_rang_modf                      vd_i_sie_01_mesg_lang.mesg%type default 'rangée(s) modifiée(s)';
    vva_type_mesg_rang_modf                 varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_rang_inser                     vd_i_sie_01_mesg_lang.mesg%type default 'rangée(s) insérée(s)';
    vva_type_mesg_rang_inser                varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_aucun_don                      vd_i_sie_01_mesg_lang.mesg%type default 'Aucune donnée trouvée.';
    vva_type_mesg_aucun_don                 varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_trop_don                       vd_i_sie_01_mesg_lang.mesg%type
      default 'La requête retourne plus de #MAX_ROW_COUNT# enregistrements. Veuillez utiliser un filtre pour accéder aux enregistrements désirés.';
    vva_type_mesg_trop_don                  varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_err;

    vva_catgr_mesg                          varchar2 (3) default 'GEN';

    vnu_mesg_sucs                           vd_i_sie_11_prodt.ref_mesg_sucs%type;
    vnu_mesg_echec                          vd_i_sie_11_prodt.ref_mesg_echec%type;
    vnu_mesg_extra                          vd_i_sie_11_prodt.ref_mesg_fetch%type;
    vnu_mesg_rang_suprm                     vd_i_sie_11_prodt.ref_mesg_range_suprm%type;
    vnu_mesg_rang_modf                      vd_i_sie_11_prodt.ref_mesg_range_modf%type;
    vnu_mesg_rang_inser                     vd_i_sie_11_prodt.ref_mesg_range_inser%type;
    vnu_mesg_aucun_don                      vd_i_sie_11_prodt.ref_mesg_aucun_don_trouv%type;
    vnu_mesg_trop_don                       vd_i_sie_11_prodt.ref_mesg_trop_don_trouv%type;

    vnu_lang                                vd_i_sie_01_lang.seqnc%type;
  begin
    vnu_lang := nvl (pnu_lang, sie_01_lang_pkg.obten_lang ('FR-CA'));

    vnu_mesg_sucs :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_sucs,
                                        vva_type_mesg_sucs,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_echec :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_echec,
                                        vva_type_mesg_echec,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_extra :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_extra,
                                        vva_type_mesg_extra,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_rang_suprm :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_rang_suprm,
                                        vva_type_mesg_rang_suprm,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_rang_modf :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_rang_modf,
                                        vva_type_mesg_rang_modf,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_rang_inser :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_rang_inser,
                                        vva_type_mesg_rang_inser,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_aucun_don :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_aucun_don,
                                        vva_type_mesg_aucun_don,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_trop_don :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_trop_don,
                                        vva_type_mesg_trop_don,
                                        pnu_prodt,
                                        vnu_lang);

    update   vd_i_sie_11_prodt
       set   ref_mesg_sucs = vnu_mesg_sucs,
             ref_mesg_echec = vnu_mesg_echec,
             ref_mesg_fetch = vnu_mesg_extra,
             ref_mesg_range_suprm = vnu_mesg_rang_suprm,
             ref_mesg_range_modf = vnu_mesg_rang_modf,
             ref_mesg_range_inser = vnu_mesg_rang_inser,
             ref_mesg_aucun_don_trouv = vnu_mesg_aucun_don,
             ref_mesg_trop_don_trouv = vnu_mesg_trop_don
     where   seqnc = pnu_prodt;
  end creer_mesg_base_prodt;
--OBSOLETE::CARLO
/*procedure defnr_prodt_safp (pnu_prodt in number) is
begin
  sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_PRODT_DEFT',
                                   obten_code_prodt (pnu_prodt));
end defnr_prodt_safp;*/

--OBSOLETE::CARLO
/*
procedure chang_prodt_safp (pnu_prodt in number) is
begin
  defnr_prodt_safp (pnu_prodt);
  apex_util.ir_reset (12031);
  apex_util.ir_clear (12031);
end chang_prodt_safp;
*/
end sie_11_prodt_pkg;
/

Prompt Package Body SIE_11_UTILS_PKG;
/* Formatted on 04/12/2013 11:35:21 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_11_UTILS_PKG" as
  procedure ajout_role (pnu_utils in number,
                        pva_role in varchar2) is
  begin
    insert into   vd_i_sie_11_utils (ref_prodt, ref_utils, role)
         values   (sie_07_sesn_pkg.gva_prodt_en_cours,
                   pnu_utils,
                   pva_role);
  end ajout_role;

  function verfc_role_prodt (pnu_seqnc_utils in number,
                             pnu_prodt_courn in number,
                             pva_role_reqs in varchar2)
    return boolean is
    pva_role_utils                          varchar2 (5);
    pnu_numr_role_utils                     number;
    pnu_numr_role_reqs                      number;
  begin
    if sie_12_secrt_pkg.verfr_presn_utils_group ('SUPER_UTILS') then
      return true;
    end if;

    begin
      select   role
        into   pva_role_utils
        from   vd_sie_11_utils
       where   ref_prodt = pnu_prodt_courn and ref_utils = pnu_seqnc_utils;
    exception
      when no_data_found then
        return false;
    end;

    case pva_role_utils
      when 'ADMIN' then
        pnu_numr_role_utils := 1;
      when 'DEVLP' then
        pnu_numr_role_utils := 2;
    end case;

    case pva_role_reqs
      when 'ADMIN' then
        pnu_numr_role_reqs := 1;
      when 'DEVLP' then
        pnu_numr_role_reqs := 2;
    end case;

    return pnu_numr_role_utils <= pnu_numr_role_reqs;
  end verfc_role_prodt;

  function verfc_role_prodt (pnu_seqnc_utils in number,
                             pva_code_prodt in varchar2,
                             pva_role_reqs in varchar2)
    return boolean is
    pnu_prodt                               number (10);
  begin
    pnu_prodt := sie_11_prodt_pkg.obten_prodt (pva_code_prodt);

    return verfc_role_prodt (pnu_seqnc_utils,
                             pnu_prodt,
                             pva_role_reqs);
  end verfc_role_prodt;

  function verfc_role_prodt_nombr (pnu_seqnc_utils in number,
                                   pnu_prodt_courn in number,
                                   pva_role_reqs in varchar2)
    return number is
  begin
    if verfc_role_prodt (pnu_seqnc_utils,
                         pnu_prodt_courn,
                         pva_role_reqs) then
      return 1;
    else
      return 0;
    end if;
  end verfc_role_prodt_nombr;
end sie_11_utils_pkg;
/

Prompt Package Body SIE_11_VERSN_PKG;
/* Formatted on 04/12/2013 11:35:21 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_11_VERSN_PKG" is
  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic is
  begin
    return pnu_versn_niv_1 * 10000000 + pnu_versn_niv_2 * 100000 + pnu_versn_niv_3 * 1000 + pnu_versn_niv_4;
  end obten_numr_versn;

  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic is
    vva_versn                               varchar2 (20);
  begin
    if nvl (pnu_versn_niv_4, 0) > 0 then
      vva_versn := '.' || pnu_versn_niv_4;
    end if;

    if nvl (pnu_versn_niv_3, 0) > 0
    or vva_versn is not null then
      vva_versn := '.' || nvl (pnu_versn_niv_3, 0) || vva_versn;
    end if;

    return nvl (pnu_versn_niv_1, 0) || '.' || nvl (pnu_versn_niv_2, 0) || vva_versn;
  end obten_versn;

  function obten_seqnc_versn_courn_prodt (pnu_seqnc_prodt in number)
    return varchar2
    deterministic is
    vnu_versn                               number (10);
  begin
    select   ref_versn
      into   vnu_versn
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_seqnc_prodt;

    return vnu_versn;
  end obten_seqnc_versn_courn_prodt;

  function obten_seqnc_versn_courn_aplic (pnu_seqnc_aplic in number)
    return varchar2
    deterministic is
    vnu_versn                               number (10);
  begin
    select   ref_versn
      into   vnu_versn
      from   vd_i_sie_11_aplic
     where   seqnc = pnu_seqnc_aplic;

    return vnu_versn;
  end obten_seqnc_versn_courn_aplic;

  procedure copr_entit (pnu_versn_sourc in number,
                        pnu_versn_destn in number) is
    vnu_entit                               number (10);

    cursor cur_entit is
      select   *
        from   vd_i_sie_11_entit
       where   ref_versn = pnu_versn_sourc;

    cursor cur_atrib_entit (pnu_entit_sourc in number) is
      select   *
        from   vd_i_sie_11_atrib_entit
       where   ref_entit = pnu_entit_sourc;
  begin
    for rec_entit in cur_entit loop
      insert
           into   vd_i_sie_11_entit (nom,
                                     nom_table_tempr,
                                     nom_table_ereur,
                                     indic_creer_ocurn,
                                     indic_modif_ocurn,
                                     indic_suprm_ocurn,
                                     indic_force_selct,
                                     ref_versn,
                                     ordre_exect,
                                     code,
                                     longr_bloc,
                                     indic_nouvl_entit,
                                     niv_inclu_migrt,
                                     confg_inclu_migrt)
         values   (rec_entit.nom,
                   rec_entit.nom_table_tempr,
                   rec_entit.nom_table_ereur,
                   rec_entit.indic_creer_ocurn,
                   rec_entit.indic_modif_ocurn,
                   rec_entit.indic_suprm_ocurn,
                   rec_entit.indic_force_selct,
                   pnu_versn_destn,
                   rec_entit.ordre_exect,
                   rec_entit.code,
                   rec_entit.longr_bloc,
                   rec_entit.indic_nouvl_entit,
                   rec_entit.niv_inclu_migrt,
                   rec_entit.confg_inclu_migrt)
      returning   seqnc
           into   vnu_entit;

      for rec_atrib_entit in cur_atrib_entit (rec_entit.seqnc) loop
        insert
          into   vd_i_sie_11_atrib_entit (nom,
                                          type_don,
                                          compr_migrt,
                                          ref_entit,
                                          code,
                                          ref_entit_refrn,
                                          indic_nouvl_atrib)
        values   (rec_atrib_entit.nom,
                  rec_atrib_entit.type_don,
                  rec_atrib_entit.compr_migrt,
                  vnu_entit,
                  rec_atrib_entit.code,
                  rec_atrib_entit.ref_entit_refrn,
                  rec_atrib_entit.indic_nouvl_atrib);
      end loop;

      if rec_entit.ref_atrib_entit_supr is not null then
        update   vd_i_sie_11_entit
           set   ref_atrib_entit_supr =
                   (select   a.seqnc
                      from   vd_i_sie_11_atrib_entit a
                     where   a.code = (select   code
                                         from   vd_i_sie_11_atrib_entit a2
                                        where   a2.seqnc = rec_entit.ref_atrib_entit_supr)
                         and a.ref_entit = vnu_entit)
         where   seqnc = vnu_entit;
      end if;
    end loop;
  end copr_entit;

  function creer_versn (pnu_seqnc in number,
                        pva_type in varchar2,
                        pnu_versn_niv1 in number,
                        pnu_versn_niv2 in number,
                        pnu_versn_niv3 in number,
                        pnu_versn_niv4 in number,
                        pva_code in varchar2 default null)
    return number is
    vva_code                                varchar2 (23);
    vnu_versn                               number (10);
  begin
    if pva_code is null then
      vva_code := pnu_versn_niv1 || pnu_versn_niv2 || pnu_versn_niv3 || pnu_versn_niv4;
    else
      vva_code := pva_code;
    end if;

    case pva_type
      when 'APLIC' then
        insert
             into   vd_i_sie_11_versn (ref_aplic,
                                       numr_versn_1,
                                       numr_versn_2,
                                       numr_versn_3,
                                       numr_versn_4,
                                       code,
                                       dnr_ref_aplic)
           values   (pnu_seqnc,
                     pnu_versn_niv1,
                     pnu_versn_niv2,
                     pnu_versn_niv3,
                     pnu_versn_niv4,
                     vva_code,
                     pnu_seqnc)
        returning   seqnc
             into   vnu_versn;
      when 'PRODT' then
        insert
             into   vd_i_sie_11_versn (ref_prodt,
                                       numr_versn_1,
                                       numr_versn_2,
                                       numr_versn_3,
                                       numr_versn_4,
                                       code,
                                       dnr_ref_prodt)
           values   (pnu_seqnc,
                     pnu_versn_niv1,
                     pnu_versn_niv2,
                     pnu_versn_niv3,
                     pnu_versn_niv4,
                     vva_code,
                     pnu_seqnc)
        returning   seqnc
             into   vnu_versn;
      when 'PLUGN' then
        insert into   vd_i_sie_11_versn (ref_plugn, numr_versn_1, numr_versn_2, numr_versn_3, numr_versn_4, code)
             values   (pnu_seqnc,
                       pnu_versn_niv1,
                       pnu_versn_niv2,
                       pnu_versn_niv3,
                       pnu_versn_niv4,
                       vva_code)
          returning   seqnc
               into   vnu_versn;
    end case;

    return vnu_versn;
  end creer_versn;

  procedure creer_versn (pnu_seqnc in number,
                         pva_type in varchar2,
                         pnu_versn_niv1 in number,
                         pnu_versn_niv2 in number,
                         pnu_versn_niv3 in number,
                         pnu_versn_niv4 in number,
                         pva_code in varchar2 default null) is
    vnu_versn                               number (10);
  begin
    vnu_versn :=
      creer_versn (pnu_seqnc,
                   pva_type,
                   pnu_versn_niv1,
                   pnu_versn_niv2,
                   pnu_versn_niv3,
                   pnu_versn_niv4,
                   pva_code);
  end creer_versn;

  procedure creer_versn_aplic (pnu_seqnc in number,
                               pnu_versn_niv1 in number,
                               pnu_versn_niv2 in number,
                               pnu_versn_niv3 in number default 0,
                               pnu_versn_niv4 in number default 0,
                               pva_code in varchar2 default null) is
  begin
    creer_versn (pnu_seqnc,
                 'APLIC',
                 pnu_versn_niv1,
                 pnu_versn_niv2,
                 pnu_versn_niv3,
                 pnu_versn_niv4,
                 pva_code);
  end creer_versn_aplic;

  function creer_versn_aplic (pnu_seqnc in number,
                              pnu_versn_niv1 in number,
                              pnu_versn_niv2 in number,
                              pnu_versn_niv3 in number default 0,
                              pnu_versn_niv4 in number default 0,
                              pva_code in varchar2 default null)
    return number is
    vnu_versn                               number (10);
  begin
    vnu_versn :=
      creer_versn (pnu_seqnc,
                   'APLIC',
                   pnu_versn_niv1,
                   pnu_versn_niv2,
                   pnu_versn_niv3,
                   pnu_versn_niv4,
                   pva_code);

    return vnu_versn;
  end creer_versn_aplic;

  procedure creer_versn_aplic_base (pnu_aplic in number) is
    vnu_versn                               number (10);
  begin
    vnu_versn :=
      creer_versn_aplic (pnu_aplic,
                         0,
                         1);

    update   vd_sie_11_aplic
       set   ref_versn = vnu_versn
     where   seqnc = pnu_aplic;
  end creer_versn_aplic_base;

  procedure creer_versn_prodt (pnu_seqnc in number,
                               pnu_versn_niv1 in number,
                               pnu_versn_niv2 in number,
                               pnu_versn_niv3 in number default 0,
                               pnu_versn_niv4 in number default 0,
                               pva_code in varchar2 default null) is
  begin
    creer_versn (pnu_seqnc,
                 'PRODT',
                 pnu_versn_niv1,
                 pnu_versn_niv2,
                 pnu_versn_niv3,
                 pnu_versn_niv4,
                 pva_code);
  end creer_versn_prodt;

  procedure creer_versn_plugn (pnu_seqnc in number,
                               pnu_versn_niv1 in number,
                               pnu_versn_niv2 in number,
                               pnu_versn_niv3 in number default 0,
                               pnu_versn_niv4 in number default 0,
                               pva_code in varchar2 default null) is
  begin
    creer_versn (pnu_seqnc,
                 'PLUGN',
                 pnu_versn_niv1,
                 pnu_versn_niv2,
                 pnu_versn_niv3,
                 pnu_versn_niv4,
                 pva_code);
  end creer_versn_plugn;
end;
/

Prompt Package Body SIE_12_ARBRE_PKG;
/* Formatted on 04/12/2013 11:35:21 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_arbre_pkg as
  gnu_sesn                                number default sie_12_sesn_pkg.obten_sesn;

  function obten_arbre (pnu_numr_apex_regn in number)
    return vd_i_sie_12_arbre.seqnc%type is
    vnu_arbre                               vd_i_sie_12_arbre.seqnc%type;
  begin
    select   a.seqnc
      into   vnu_arbre
      from   vd_i_sie_12_arbre a
     where   a.ref_sesn = gnu_sesn and a.id_apex_regn = pnu_numr_apex_regn;

    return vnu_arbre;
  exception
    when others then
      return null;
  end obten_arbre;

  function obten_arbre_noeud (pnu_arbre in number,
                              pva_noeud in varchar2)
    return number is
    vnu_arbre_noeud                         vd_i_sie_12_arbre_noeud.seqnc%type;
  begin
    select   an.seqnc
      into   vnu_arbre_noeud
      from   vd_i_sie_12_arbre_noeud an
     where   an.ref_arbre = pnu_arbre and an.noeud_ouver = pva_noeud;

    return vnu_arbre_noeud;
  exception
    when others then
      return null;
  end obten_arbre_noeud;

  procedure initl_arbre (pnu_numr_apex_regn in number) is
    vnu_arbre                               vd_i_sie_12_arbre.seqnc%type;
    rec_confg_plugn                         sie_21_plugn_arbre_pkg.typ_rec_confg_plugn
      default sie_21_plugn_arbre_pkg.obten_enreg_confg_plugn (pnu_numr_apex_regn);
  begin
    vnu_arbre := obten_arbre (pnu_numr_apex_regn);

    if vnu_arbre is null then
      insert into   vd_i_sie_12_arbre (id_apex_regn, noeud_actif, ref_sesn)
           values   (pnu_numr_apex_regn,
                     sie_07_util_pkg.v (rec_confg_plugn.item_noeud),
                     gnu_sesn);
    else
      update   vd_i_sie_12_arbre
         set   noeud_actif = sie_07_util_pkg.v (rec_confg_plugn.item_noeud)
       where   seqnc = vnu_arbre;
    end if;
  end initl_arbre;

  procedure ajout_liste_noeud (pnu_numr_apex_regn in number,
                               pta_liste_noeud in tab_noeud,
                               pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                               pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null) is
    vnu_arbre                               vd_i_sie_12_arbre.seqnc%type;
    vnu_indic_courn                         pls_integer;
  begin
    vnu_arbre := obten_arbre (pnu_numr_apex_regn);

    if pta_liste_noeud.count () <> 0 then
      vnu_indic_courn := pta_liste_noeud.first ();

      while vnu_indic_courn is not null loop
        if obten_arbre_noeud (vnu_arbre,
                              pta_liste_noeud (vnu_indic_courn))
             is null then
          insert into   vd_i_sie_12_arbre_noeud (ref_arbre, noeud_ouver)
               values   (vnu_arbre,
                         pta_liste_noeud (vnu_indic_courn));
        end if;

        vnu_indic_courn := pta_liste_noeud.next (vnu_indic_courn);
      end loop;
    end if;
  end ajout_liste_noeud;

  procedure fermr_liste_noeud (pnu_numr_apex_regn in number,
                               pta_liste_noeud in tab_noeud,
                               pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                               pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null) is
    vnu_arbre                               vd_sie_12_arbre.seqnc%type;
    vnu_indic_courn                         pls_integer;
  begin
    if pta_liste_noeud.count () <> 0 then
      vnu_arbre := obten_arbre (pnu_numr_apex_regn);

      vnu_indic_courn := pta_liste_noeud.first ();

      while vnu_indic_courn is not null loop
        delete   vd_sie_12_arbre_noeud
         where   ref_arbre = vnu_arbre and noeud_ouver = pta_liste_noeud (vnu_indic_courn);

        vnu_indic_courn := pta_liste_noeud.next (vnu_indic_courn);
      end loop;
    end if;
  end fermr_liste_noeud;

  procedure ouvri_noeud (pnu_numr_apex_regn in number,
                         pva_noeud in varchar2,
                         pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                         pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null) is
    vnu_arbre                               vd_sie_12_arbre.seqnc%type;
  begin
    if pva_noeud is not null then
      vnu_arbre := obten_arbre (pnu_numr_apex_regn);

      if obten_arbre_noeud (vnu_arbre,
                            pva_noeud)
           is null then
        insert into   vd_i_sie_12_arbre_noeud (ref_arbre, noeud_ouver)
             values   (vnu_arbre,
                       pva_noeud);
      end if;
    end if;
  end ouvri_noeud;

  procedure fermr_noeud (pnu_numr_apex_regn in number,
                         pva_noeud in varchar2,
                         pnu_utils in vd_i_sie_12_utils.seqnc%type default null,
                         pnu_sesn in vd_i_sie_12_sesn.id_sesn%type default null) is
    vnu_arbre                               vd_sie_12_arbre.seqnc%type;
  begin
    vnu_arbre := obten_arbre (pnu_numr_apex_regn);

    delete   vd_sie_12_arbre_noeud
     where   ref_arbre = vnu_arbre and noeud_ouver = pva_noeud;
  end fermr_noeud;


  function verfr_presn (pnu_numr_apex_regn in number)
    return boolean is
    vbo_presn                               boolean := false;
    vnu_exist                               number;
  begin
    select   count (nombr)
      into   vnu_exist
      from   (select   1 nombr
                from   vd_i_sie_12_arbre a
               where   a.ref_sesn = gnu_sesn and a.id_apex_regn = pnu_numr_apex_regn
              union all
              select   1 nombr
                from   vd_i_sie_12_arbre_noeud an,
                       vd_i_sie_12_arbre a
               where   a.id_apex_regn = pnu_numr_apex_regn and an.ref_arbre = a.seqnc and a.ref_sesn = gnu_sesn);

    if vnu_exist > 0 then
      vbo_presn := true;
    end if;

    return vbo_presn;
  exception
    when others then
      return false;
  end verfr_presn;

  function verfr_presn_sesn
    return boolean is
    vbo_presn                               boolean default false;
    vnu_exist                               number;
  begin
    select   count (1)
      into   vnu_exist
      from   vd_i_sie_12_arbre a
     where   a.ref_sesn = gnu_sesn;

    if vnu_exist > 0 then
      vbo_presn := true;
    end if;

    return vbo_presn;
  exception
    when others then
      return false;
  end verfr_presn_sesn;

  function obten_indic_rafrc (pnu_numr_apex_regn in number)
    return vd_i_sie_12_arbre.indic_rafrc%type is
    vva_indic_rafrc                         vd_i_sie_12_arbre.indic_rafrc%type;
  begin
    select   a.indic_rafrc
      into   vva_indic_rafrc
      from   vd_i_sie_12_arbre a
     where   a.ref_sesn = gnu_sesn and a.id_apex_regn = pnu_numr_apex_regn;

    return vva_indic_rafrc;
  exception
    when no_data_found then
      return 'O';
    when others then
      return null;
  end obten_indic_rafrc;

  procedure forcr_rafrc (pnu_numr_apex_regn in number,
                         pnu_utils in number default null) is
  begin
    update   vd_i_sie_12_arbre a
       set   a.indic_rafrc = 'O'
     where   a.id_apex_regn = pnu_numr_apex_regn
         and (pnu_utils is null
           or exists
                (select   null
                   from   vd_i_sie_12_sesn s,
                          vd_i_sie_12_utils u
                  where   s.id_sesn = a.ref_sesn and u.code_utils = s.app_user and u.seqnc = pnu_utils));
  end forcr_rafrc;

  procedure rafrc_efect (pnu_numr_apex_regn in number,
                         pnu_utils in number default null) is
  begin
    update   vd_i_sie_12_arbre a
       set   a.indic_rafrc = 'N'
     where   a.id_apex_regn = pnu_numr_apex_regn
         and (pnu_utils is null
           or exists
                (select   null
                   from   vd_i_sie_12_sesn s,
                          vd_i_sie_12_utils u
                  where   s.id_sesn = a.ref_sesn and u.code_utils = s.app_user and u.seqnc = pnu_utils));
  end rafrc_efect;

  function obten_noeud_actif
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_arbre_pkg.kva_s_noeud_actif);
  end obten_noeud_actif;
end sie_12_arbre_pkg;
/

Prompt Package Body SIE_12_AUDIT_STRUC_APLIC_PKG;
/* Formatted on 04/12/2013 11:35:21 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_audit_struc_aplic_pkg as
  procedure inscr_audit_afich_page is
  begin
    null;
  end inscr_audit_afich_page;

  procedure inscr_audit (pnu_seqnc_struc_aplic in number,
                         pnu_prodt in number,
                         pva_code_struc_aplic in varchar2,
                         pva_type in varchar2,
                         pva_valr_formt in varchar2,
                         pan_ancn_valr in anydata default null,
                         pan_nouvl_valr in anydata default null) is
    vnu_audit                               number (16);
  begin
    vnu_audit :=
      inscr_audit (pnu_seqnc_struc_aplic,
                   pnu_prodt,
                   pva_code_struc_aplic,
                   pva_type,
                   pva_valr_formt,
                   pan_ancn_valr,
                   pan_nouvl_valr);
  end inscr_audit;

  function inscr_audit (pnu_seqnc_struc_aplic in number,
                        pnu_prodt in number,
                        pva_code_struc_aplic in varchar2,
                        pva_type in varchar2,
                        pva_valr_formt in varchar2,
                        pan_ancn_valr in anydata default null,
                        pan_nouvl_valr in anydata default null)
    return number is
  begin
    --op()
    return null;
  end inscr_audit;
end sie_12_audit_struc_aplic_pkg;
/

Prompt Package Body SIE_12_AUTHE_APEX_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_authe_apex_pkg is
  gbo_defnr_sesn                          boolean default false;
  gnu_mod_encry                  constant pls_integer
    default dbms_crypto.encrypt_aes256 + dbms_crypto.chain_cbc + dbms_crypto.pad_pkcs5 ;
  gnu_longr_cle_encry            constant pls_integer default 256 / 8;
  gra_cle_encry                           raw (2000)
                                            default 'B9E13AF9390AF7C509F12EB4DF031D433524A0E25A4E0052B0E36711253A6116';
  gva_charc_set                  constant varchar2 (12) default 'WE8MSWIN1252';
  gva_code_utils                          varchar2 (30);
  gva_code_utils_pour                     varchar2 (30) default null;
  gva_code_domn                           varchar2 (30);
  gva_code_domn_pour                      varchar2 (30) default null;
  kva_code_aplic_sga             constant vd_i_sie_11_aplic.code%type default 'SGA';

  function encry (pva_valr in varchar2)
    return raw is
  begin
    return dbms_crypto.encrypt (utl_i18n.string_to_raw (pva_valr,
                                                        gva_charc_set),
                                gnu_mod_encry,
                                gra_cle_encry);
  end encry;

  procedure defnr_histr_acces (pva_code_evenm in varchar2,
                               pnu_seqnc_utils in number,
                               pnu_seqnc_pour in number) is
    pragma autonomous_transaction;
  begin
    insert into   vd_i_sie_12_histr_acces (ref_utils, ref_dv_type_evenm, ref_utils_pour)
         values   (pnu_seqnc_utils,
                   sie_14_domn_valr_pkg.obten_seqnc ('HISTR_ACCES',
                                                     pva_code_evenm,
                                                     'AFW'),
                   pnu_seqnc_pour);

    commit;
  exception
    when others then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000007',
                                               pva_code_prodt             => 'AFW');
  end defnr_histr_acces;

  procedure demnd_activ_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                     pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                     pnu_numr_aplic_apex_cible in number,
                                     pnu_numr_page_apex_cible in number,
                                     pbo_indic_desct boolean default false,
                                     pva_procd_persn in varchar2) is
    pragma autonomous_transaction;
  begin
    sie_12_reqt_inter_utils_pkg.demnd_activ_compt_utils (pnu_utils,
                                                         pnu_domn,
                                                         pnu_numr_aplic_apex_cible,
                                                         pnu_numr_page_apex_cible,
                                                         pbo_indic_desct,
                                                         pva_procd_persn);

    commit;
  end demnd_activ_compt_utils;

  procedure valdr_utils (pva_code_utils in varchar2,
                         pva_mot_passe in varchar2,
                         pva_domn in varchar2,
                         pbo_forcr_authe in boolean default false) is
    vva_utils                               varchar2 (61);
    vva_utils_pour                          varchar2 (30);
    vva_domn                                varchar2 (61);
    vva_domn_pour                           varchar2 (30);
  begin
    if pbo_forcr_authe and pva_code_utils is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000003',
                                               pva_code_prodt             => 'AFW');
    elsif not pbo_forcr_authe
      and (pva_code_utils is null
        or pva_mot_passe is null
        or pva_domn is null) then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000003',
                                               pva_code_prodt             => 'AFW');
    end if;

    vva_utils := upper (pva_code_utils);
    vva_domn := upper (pva_domn);

    -- Tentative de "connexion dérivée"
    if instr (vva_utils,
              '@') > 0 then
      vva_utils :=
        substr (vva_utils,
                1,
                instr (vva_utils,
                       '@') -
                1);

      -- Conserver le code de base pour l'authentification ulterieure
      gva_code_utils := vva_utils;

      vva_utils_pour :=
        substr (upper (pva_code_utils),
                instr (upper (pva_code_utils),
                       '@') +
                1);

      gva_code_utils_pour := vva_utils_pour;
    else
      gva_code_utils := vva_utils;
    end if;

    if instr (vva_domn,
              '@') > 0 then
      vva_domn :=
        substr (vva_domn,
                1,
                instr (vva_domn,
                       '@') -
                1);

      gva_code_domn := vva_domn;
      vva_domn_pour :=
        substr (upper (pva_domn),
                instr (upper (pva_domn),
                       '@') +
                1);

      gva_code_domn_pour := vva_domn_pour;
    elsif gva_code_utils_pour is not null then
      gva_code_domn_pour := vva_domn;
      gva_code_domn := vva_domn;
    else
      gva_code_domn := vva_domn;
    end if;
  end valdr_utils;

  procedure valdr_etat_authe (pbo_etat_authe in out boolean,
                              pva_code_utils in varchar2,
                              pva_code_domn in varchar2,
                              pva_code_utils_pour in varchar2,
                              pva_code_domn_pour in varchar2,
                              pbo_ignor_indic_actif in boolean default false) is
    vva_indic_verl                          varchar2 (1) default 'N';
    vva_indic_actif                         varchar2 (1) default 'N';
    vda_date_expir                          date default sysdate + 1;
    vnu_seqnc_utils                         number (10);
    vnu_seqnc_pour                          number (10);
    rec_utils                               vd_i_sie_12_utils%rowtype;
  begin
    rec_utils := sie_12_utils_pkg.obten_utils (sie_12_utils_pkg.obten_utils_de_code (pva_code_utils));

    if not pbo_etat_authe then
      -- Mauvais mot de passe
      defnr_histr_acces ('ECHEC_MOT_PASSE',
                         rec_utils.seqnc,
                         null);

      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000003',
                                               pva_code_prodt             => 'AFW');
    elsif not pbo_ignor_indic_actif and pbo_etat_authe then
      -- Bon mot de passe
      if rec_utils.indic_actif = 'N' then
        pbo_etat_authe := false;
        defnr_histr_acces ('ECHEC_COMPT_INACT',
                           rec_utils.seqnc,
                           null);

        begin
          -- Envoyer courriel pour activer le compte utilisateur
          demnd_activ_compt_utils (rec_utils.seqnc,
                                   sie_12_domn_pkg.obten_seqnc_domn (pva_code_domn),
                                   sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_APLIC'),
                                   sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_PAGE'),
                                   false,
                                   sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_PROCD_PERSN'));
        exception
          when others then
            --Afficher message compte inactif si impossible de résoudre l'activation de compte
            sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000029',
                                                     pva_code_prodt             => 'AFW');
        end;

        -- Afficher message d'erreur + Message disant qu'un courriel sera envoyé
        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000019',
                                                 pva_code_prodt             => 'AFW');
      elsif rec_utils.indic_verl = 'O' then
        pbo_etat_authe := false;
        defnr_histr_acces ('ECHEC_COMPT_VERL',
                           rec_utils.seqnc,
                           null);

        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000002',
                                                 pva_code_prodt             => 'AFW');
      elsif rec_utils.date_expir is not null and rec_utils.date_expir <= sysdate then
        pbo_etat_authe := false;
        defnr_histr_acces ('ECHEC_COMPT_EXPIR',
                           rec_utils.seqnc,
                           null);

        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000005',
                                                 pva_code_prodt             => 'AFW');
      end if;

      begin
        select   seqnc
          into   vnu_seqnc_utils
          from   vd_i_sie_12_utils u
         where   code_utils = upper (pva_code_utils)
             and exists
                   (select   1
                      from   vd_i_sie_12_domn_utils du,
                             vd_i_sie_12_domn d
                     where   d.code = upper (pva_code_domn)
                         and du.ref_domn = d.seqnc
                         and du.ref_utils = u.seqnc
                         and du.date_debut_efect <= sysdate
                         and (du.date_fin_efect is null
                           or du.date_fin_efect > sysdate));

        if pva_code_utils_pour is not null then
          if not sie_12_secrt_pkg.verif_apart_group_non_conct ('AUTOR_CONXN_DERV',
                                                               pva_code_utils) then
            -- Valider si l'utilisateur a les droits requis pour se connecter en tant qu'un autre utilisateur
            pbo_etat_authe := false;

            sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000009',
                                                     pva_code_prodt             => 'AFW');
          elsif pva_code_utils_pour = pva_code_utils then
            -- Valider que l'utilisateur ne fait pas le comique en voulant se connecter en tant que lui même
            -- TODO:: CARLO
            -- Ajouter un message comique => Easter egg
            pbo_etat_authe := false;

            sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000011',
                                                     pva_code_prodt             => 'AFW');
          end if;

          begin
            select   seqnc
              into   vnu_seqnc_pour
              from   vd_i_sie_12_utils u
             where   code_utils = upper (pva_code_utils_pour)
                 and exists
                       (select   1
                          from   vd_i_sie_12_domn_utils du,
                                 vd_i_sie_12_domn d
                         where   d.code = upper (nvl (pva_code_domn_pour, pva_code_domn))
                             and du.ref_domn = d.seqnc
                             and du.ref_utils = u.seqnc
                             and du.date_debut_efect <= sysdate
                             and (du.date_fin_efect is null
                               or du.date_fin_efect > sysdate));
          exception
            when no_data_found then
              pbo_etat_authe := false;
              defnr_histr_acces ('ECHEC_POUR',
                                 rec_utils.seqnc,
                                 vnu_seqnc_pour);
              sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000010',
                                                       pva_code_prodt             => 'AFW');
          end;

          defnr_histr_acces ('SUCS_POUR',
                             rec_utils.seqnc,
                             vnu_seqnc_pour);
        else
          defnr_histr_acces ('SUCS',
                             rec_utils.seqnc,
                             vnu_seqnc_pour);
        end if;
      exception
        when no_data_found then
          pbo_etat_authe := false;

          defnr_histr_acces ('ECHEC_DOMN',
                             rec_utils.seqnc,
                             vnu_seqnc_pour);

          sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000012',
                                                   pva_code_prodt             => 'AFW');
      end;
    end if;
  exception
    when no_data_found then
      pbo_etat_authe := false;
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000003',
                                               pva_code_prodt             => 'AFW');
  end valdr_etat_authe;

  function authe_utils (p_username in varchar2,
                        p_password in varchar2,
                        p_domaine in number,
                        pbo_ignor_indic_actif in boolean default false,
                        pbo_forcr_authe in boolean default false)
    return boolean is
    vbo_info_vald                           boolean default false;
    vva_procd_vald                          vd_i_sie_12_domn.procd_authe_exter_afw%type;

    function valdt_procd_authe_exter_afw (pva_nom_procd in varchar2,
                                          pva_code_utils in varchar2,
                                          pva_mot_passe in varchar2,
                                          pnu_domn in number)
      return boolean is
      vbo_valdt_procd_authe_exter             boolean default false;
      vva_progr_a_lancr                       varchar2 (4000)
        default    'begin '
                || '  sie_12_authe_apex_pkg.gbo_valdt_procd_authe_exter := %PROCD_PERSN%(:p1, :p2); '
                || '  exception when others then ete();'
                || 'end;';
    begin
      vva_progr_a_lancr :=
        replace (vva_progr_a_lancr,
                 '%PROCD_PERSN%',
                 pva_nom_procd);

      execute immediate vva_progr_a_lancr
        using pva_code_utils,
              pva_mot_passe;

      vbo_valdt_procd_authe_exter := gbo_valdt_procd_authe_exter;

      gbo_valdt_procd_authe_exter := false;

      return vbo_valdt_procd_authe_exter;
    exception
      when others then
        return false;
    end valdt_procd_authe_exter_afw;
  begin
    if not pbo_forcr_authe then
      -- Valider avec la méthode externe et ensuite valider avec la méthode interne

      -- Méthode d'authentification externe à AFW (ex.: LDAP)
      vva_procd_vald := sie_12_domn_pkg.obten_procd_authe_exter_afw (p_domaine);

      if vva_procd_vald is not null and p_password is not null then
        vbo_info_vald :=
          valdt_procd_authe_exter_afw (vva_procd_vald,
                                       p_username,
                                       p_password,
                                       p_domaine);
      end if;

      -- Méthode d'authentification interne à AFW
      if not vbo_info_vald and p_password is not null then
        vbo_info_vald :=
          sie_12_mot_passe_pkg.valdr_mot_passe (p_username,
                                                p_password);
      end if;
    elsif pbo_forcr_authe then
      vbo_info_vald := true;
    end if;

    valdr_etat_authe (vbo_info_vald,
                      gva_code_utils,
                      gva_code_domn,
                      gva_code_utils_pour,
                      gva_code_domn_pour,
                      pbo_ignor_indic_actif);

    return vbo_info_vald;
  end authe_utils;

  procedure inser_sesn is
    pragma autonomous_transaction;
  begin
    insert into   sie_12_sesn (id_sesn)
         values   (null);

    commit;
  exception
    when dup_val_on_index then
      null;
  end inser_sesn;

  procedure inser_lang_sesn is
    pragma autonomous_transaction;
  begin
    update   sie_12_sesn
       set   ref_lang = sie_01_lang_pkg.obten_lang (sie_07_util_pkg.v ('FSP_LANGUAGE_PREFERENCE'))
     where   id_sesn = sie_07_util_pkg.nv ('SESSION') and app_user = sie_07_util_pkg.v ('APP_USER');

    commit;
  exception
    when others then
      null;
  end inser_lang_sesn;

  procedure defnr_varbl_utils_domn is
  begin
    -- Utilisateur qui sert à l'authentification
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_UTILS',
                                     gva_code_utils);

    -- Connexion dérivée (optionnel et requiert des droits)
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_UTILS_POUR',
                                     gva_code_utils_pour);

    -- Domaine qui sert à l'authentification
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_DOMN',
                                     gva_code_domn);

    -- Connexion dérivée (optionnel et requiert des droits)
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_DOMN_POUR',
                                     gva_code_domn_pour);
  end defnr_varbl_utils_domn;

  procedure defnr_varbl_sesn is
    vnu_aplic                               vd_i_sie_11_aplic.seqnc%type;
    vva_code_aplic                          vd_i_sie_11_aplic.code%type;
  begin
    update   sie_12_sesn
       set   app_user = sie_12_utils_pkg.obten_code_usagr_conct
     where   id_sesn = sie_12_sesn_pkg.obten_sesn;

    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_SESN',
                                     encry (sie_07_util_pkg.nv ('SESSION')));

    sie_07_sesn_pkg.defnr_valr_sesn ('FSP_LANGUAGE_PREFERENCE',
                                     'fr-ca');

    --OBSOLETE::CARLO
    /*
    begin
      --CONAL, pour alimenter le produit en cours.
      --Peut être ajouter une colonne sur la table sie_12_utils pour obtenir le dernier produit connecté
      vva_code_aplic := 'AFW';

      vnu_aplic := sie_11_prodt_pkg.obten_prodt (vva_code_aplic);

      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_PRODT_DEFT',
                                       vva_code_aplic);
    exception
      when no_data_found then
        sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_PRODT_DEFT',
                                         'AFW');
    end;

    begin
      vva_code_aplic := nvl (sie_12_utils_pkg.obten_dernr_aplic (sie_12_utils_pkg.obten_usagr_conct), 'SAFP');

      vnu_aplic := sie_11_aplic_pkg.obten_aplic (vva_code_aplic);

      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_APLIC_DEFT',
                                       vva_code_aplic);
    exception
      when no_data_found then
        sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_APLIC_DEFT',
                                         'SAFP');
    end;
    */

    inser_lang_sesn ();
    gbo_defnr_sesn := false;
  exception
    when others then
      raise;
  end defnr_varbl_sesn;

  procedure rempl_mot_passe (pva_code_utils in varchar2,
                             pva_ancn_mot_passe in varchar2,
                             pva_nouv_mot_passe_1 in varchar2,
                             pva_nouv_mot_passe_2 in varchar2) is
    vra_nouv_mot_passe                      sie_12_utils.mot_passe%type;
    vva_code_utils                          varchar2 (200);
    vbo_gestn_mdp                           boolean;
  begin
    if pva_nouv_mot_passe_1 is null
    or pva_nouv_mot_passe_2 is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000004',
                                               pva_code_prodt             => 'AFW');
    end if;

    if trim (pva_nouv_mot_passe_1) != trim (pva_nouv_mot_passe_2) then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vbo_gestn_mdp := sie_12_secrt_pkg.verfr_presn_utils_group ('GESTN_MOT_PASSE');

    --Valider l'ancien mot de passe
    if vbo_gestn_mdp then
      vva_code_utils := pva_code_utils;
    else
      if not sie_12_mot_passe_pkg.valdr_mot_passe (pva_code_utils,
                                                   pva_ancn_mot_passe) then
        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000003',
                                                 pva_code_prodt             => 'AFW');
      end if;

      vva_code_utils := sie_07_util_pkg.v ('APP_USER');
    end if;

    -- Regler le nouveau mot de passe
    sie_12_mot_passe_pkg.defnr_mot_passe (vva_code_utils,
                                          pva_nouv_mot_passe_1);
  end rempl_mot_passe;

  procedure reint_mot_passe (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                             pva_mot_passe in varchar2,
                             pva_confr_mot_passe in varchar2,
                             pnu_domn in vd_i_sie_12_domn.seqnc%type default null) is
    vra_nouv_mot_passe                      sie_12_utils.mot_passe%type;
    rec_utils                               vd_i_sie_12_utils%rowtype;
  begin
    rec_utils := sie_12_utils_pkg.obten_utils (pnu_utils);

    if pva_mot_passe is null
    or pva_confr_mot_passe is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000004',
                                               pva_code_prodt             => 'AFW');
    elsif trim (pva_mot_passe) <> trim (pva_confr_mot_passe) then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000001',
                                               pva_code_prodt             => 'AFW');
    elsif not sie_12_mot_passe_pkg.valdr_niv_secrt_mot_passe (pva_mot_passe,
                                                              rec_utils.nom,
                                                              rec_utils.prenm,
                                                              pnu_domn) then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000015',
                                               pva_code_prodt             => 'AFW');
    else
      -- Définir le nouveau mot de passe
      sie_12_mot_passe_pkg.defnr_mot_passe (pnu_utils,
                                            pva_mot_passe);

      -- Dévérouiller le compte utilisateur
      sie_12_utils_pkg.devrl_utils (pnu_utils);

      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SEC.000018',
                                                      pva_code_prodt             => 'AFW');
    end if;
  exception
    when others then
      raise;
  end reint_mot_passe;

  procedure activ_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type) is
  begin
    -- Activer le compte utilisateur
    sie_12_utils_pkg.activ_utils (pnu_utils);

    sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SEC.000020',
                                                    pva_code_prodt             => 'AFW');
  end activ_utils;

  function valdr_sesn_sentr
    return boolean is
    vnu_exist                               number;
  begin
    -- Verifier si la session existe
    select   1
      into   vnu_exist
      from   vd_i_sie_12_sesn
     where   id_sesn = sie_12_sesn_pkg.obten_sesn and upper (app_user) = sie_12_utils_pkg.obten_code_usagr_conct;

    return true;
  exception
    when no_data_found then
      return false;
  end valdr_sesn_sentr;

  procedure redrg_page_conxn is
  begin
    sie_08_url_pkg.redrg_page_postn (sie_08_url_pkg.genr_url (sie_11_aplic_pkg.obten_numr_apex_aplic,
                                                              sie_11_aplic_pkg.obten_numr_apex_page_conxn));
  end redrg_page_conxn;

  procedure redrg_page_acuei is
  begin
    sie_08_url_pkg.redrg_page_postn (sie_08_url_pkg.genr_url (sie_11_prodt_pkg.obten_numr_apex_aplic_acuei,
                                                              sie_11_prodt_pkg.obten_numr_apex_page_acuei));
  end redrg_page_acuei;

  procedure defnr_parmt_url_apres_authe (pnu_numr_apex_aplic in number default sie_11_aplic_pkg.obten_numr_apex_aplic,
                                         pnu_numr_apex_page in number default sie_13_page_pkg.obten_numr_apex_page,
                                         pva_scpc in varchar2 default null,
                                         pnu_sspc in number default null,
                                         pva_sapc in varchar2 default null,
                                         pva_scpi in varchar2 default null,
                                         pnu_sspi in number default null,
                                         pva_sapi in varchar2 default null,
                                         pnu_snpi in number default null,
                                         pnu_sidf in number default null) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_APLIC',
                                     pnu_numr_apex_aplic);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_PAGE',
                                     pnu_numr_apex_page);

    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_SCPC',
                                     pva_scpc);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_SSPC',
                                     pnu_sspc);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_SAPC',
                                     pva_sapc);

    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_SCPI',
                                     pva_scpi);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_SSPI',
                                     pnu_sspi);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_SAPI',
                                     pva_sapi);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_SNPI',
                                     pnu_snpi);
  end defnr_parmt_url_apres_authe;

  function genr_url (pnu_numr_apex_aplic in number,
                     pnu_numr_apex_page in number,
                     pva_scpc in varchar2 default null,
                     pnu_sspc in number default null,
                     pva_sapc in varchar2 default null,
                     pva_scpi in varchar2 default null,
                     pnu_sspi in number default null,
                     pva_sapi in varchar2 default null,
                     pnu_snpi in number default null,
                     pnu_sidf in number default null,
                     pbo_indic_forcr_sspc in boolean default false,
                     pbo_indic_forcr_sidf in boolean default false,
                     pva_optio_reqst in varchar2 default null,
                     pva_optio_clear_page in varchar2 default null,
                     pva_indic_afich_valr_sesn in varchar2 default 'O')
    return varchar2 is
  begin
    return sie_08_url_pkg.genr_url (
             pnu_numr_aplic             => pnu_numr_apex_aplic,
             pnu_numr_page              => pnu_numr_apex_page,
             pva_nom_varbl_1            => case when pva_scpc is not null then 'SCPC' else null end,
             pva_valr_varbl_1           => case when pva_scpc is not null then pva_scpc else null end,
             pva_nom_varbl_2            => case
                                            when pbo_indic_forcr_sspc then 'SSPC'
                                            when pnu_sspc is not null then 'SSPC'
                                            else null
                                          end,
             pva_valr_varbl_2           => case
                                            when pbo_indic_forcr_sspc then pnu_sspc
                                            when pnu_sspc is not null then pnu_sspc
                                            else null
                                          end,
             pva_nom_varbl_3            => case when pva_sapc is not null then 'SAPC' else null end,
             pva_valr_varbl_3           => case when pva_sapc is not null then pva_sapc else null end,
             pva_nom_varbl_4            => case when pva_scpi is not null then 'SCPI' else null end,
             pva_valr_varbl_4           => case when pva_scpi is not null then pva_scpi else null end,
             pva_nom_varbl_5            => case when pnu_sspi is not null then 'SSPI' else null end,
             pva_valr_varbl_5           => case when pnu_sspi is not null then pnu_sspi else null end,
             pva_nom_varbl_6            => case when pva_sapi is not null then 'SAPI' else null end,
             pva_valr_varbl_6           => case when pva_sapi is not null then pva_sapi else null end,
             pva_nom_varbl_7            => case when pnu_snpi is not null then 'SNPI' else null end,
             pva_valr_varbl_7           => case when pnu_snpi is not null then pnu_snpi else null end,
             pva_nom_varbl_8            => case
                                            when pbo_indic_forcr_sidf then 'SIDF'
                                            when pnu_sidf is not null then 'SIDF'
                                            else null
                                          end,
             pva_valr_varbl_8           => case
                                            when pbo_indic_forcr_sidf then pnu_sidf
                                            when pnu_sidf is not null then pnu_sidf
                                            else null
                                          end,
             pva_optio_reqst            => pva_optio_reqst,
             pva_optio_clear_page       => pva_optio_clear_page,
             pva_indic_afich_valr_sesn  => pva_indic_afich_valr_sesn
           );
  end genr_url;

  procedure defnr_url_creat_utils (pva_url in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_URL_CREAT_UTILS',
                                     pva_url);
  end defnr_url_creat_utils;

  function obten_url_creat_utils
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_URL_CREAT_UTILS');
  end obten_url_creat_utils;

  procedure defnr_procd_persn (pva_nom_procd in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_PROCD_PERSN',
                                     pva_nom_procd);
  end defnr_procd_persn;

  procedure exect_procd_persn is
    vva_nom_procd                           varchar2 (61)
                                              default sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_PROCD_PERSN');
    vva_code_a_lancr                        varchar2 (4000)
                                              default 'declare ' || 'begin' || ' %PROCD_PERSN%(); ' || 'end;';
    vva_progr_a_lancr                       varchar2 (4000)
                                              default replace (vva_code_a_lancr,
                                                               '%PROCD_PERSN%',
                                                               vva_nom_procd);
  begin
    if vva_nom_procd is not null then
      execute immediate vva_progr_a_lancr;
    end if;
  end exect_procd_persn;

  procedure defnr_authe_redrc_cible (pnu_numr_aplic_apex in number,
                                     pnu_numr_page_apex in number) is
  begin
    -- Definir l'application cible apres l'authentification si elle est nulle
    if sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_APLIC') is null then
      sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_APLIC',
                                       pnu_numr_aplic_apex);
    end if;

    -- Definir la page cible apres l'authentification si elle est nulle
    if sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_PAGE') is null then
      sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_PAGE',
                                       pnu_numr_page_apex);
    end if;
  end defnr_authe_redrc_cible;

  procedure redrg_prodt_authe is
  begin
    redrg_aplic_authe;
  end redrg_prodt_authe;

  procedure redrg_aplic_authe is
    vnu_ref_aplic_authe                     vd_i_sie_11_aplic.ref_aplic_authe%type
                                              default sie_11_aplic_pkg.obten_aplic_authe;
    vnu_aplic_acuei_prodt                   vd_i_sie_11_prodt.ref_aplic_acuei%type
                                              default sie_11_prodt_pkg.obten_numr_apex_aplic_acuei;
    vnu_page_acuei_prodt                    vd_i_sie_11_prodt.ref_page_acuei%type
                                              default sie_11_prodt_pkg.obten_numr_apex_page_acuei;
  begin
    -- On réinitialise la cible
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_APLIC',
                                     null);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_PAGE',
                                     null);

    if vnu_aplic_acuei_prodt is not null and vnu_page_acuei_prodt is not null then
      defnr_authe_redrc_cible (vnu_aplic_acuei_prodt,
                               vnu_page_acuei_prodt);
    else
      defnr_authe_redrc_cible (sie_11_aplic_pkg.obten_numr_apex_aplic,
                               sie_11_aplic_pkg.obten_numr_apex_page_acuei);
    end if;

    -- Redirection vers le produit d'authentification
    if vnu_ref_aplic_authe is not null then
      sie_08_url_pkg.redrg_page_postn (sie_08_url_pkg.genr_url (
                                         sie_11_aplic_pkg.obten_numr_apex_aplic (vnu_ref_aplic_authe),
                                         sie_11_aplic_pkg.obten_numr_apex_page_conxn (vnu_ref_aplic_authe),
                                         'SIDF',
                                         null
                                       ));
    end if;
  exception
    when others then
      raise;
  end redrg_aplic_authe;

  procedure authe_redrg (pva_code_utils in varchar2,
                         pva_mot_passe in varchar2,
                         pva_domn in varchar2,
                         pnu_numr_apex_aplic in number,
                         pnu_numr_apex_page in number,
                         pva_scpc in varchar2 default null,
                         pnu_sspc in number default null,
                         pva_sapc in varchar2 default null,
                         pva_scpi in varchar2 default null,
                         pnu_sspi in number default null,
                         pva_sapi in varchar2 default null,
                         pnu_snpi in number default null,
                         pnu_sidf in number default null,
                         pbo_indic_forcr_sspc in boolean default false,
                         pbo_indic_forcr_sidf in boolean default false,
                         pva_optio_reqst in varchar2 default null,
                         pva_optio_clear_page in varchar2 default null,
                         pbo_ignor_indic_actif in boolean default false,
                         pbo_forcr_authe in boolean default false) is
    vva_code_utils                          varchar2 (100) default pva_code_utils;
    vva_fsp_after_login_url                 varchar2 (500);
    vnu_numr_apex_aplic                     number (10);
    vnu_numr_apex_page                      number (10);
  begin
    begin
      if (pnu_numr_apex_aplic is null
       or pnu_numr_apex_page is null) then
        vnu_numr_apex_aplic := sie_11_prodt_pkg.obten_numr_apex_aplic_acuei;
        vnu_numr_apex_page := sie_11_prodt_pkg.obten_numr_apex_page_acuei;

        defnr_authe_redrc_cible (vnu_numr_apex_aplic,
                                 vnu_numr_apex_page);
      else
        vnu_numr_apex_aplic := pnu_numr_apex_aplic;
        vnu_numr_apex_page := pnu_numr_apex_page;
      end if;
    exception
      when others then
        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000022',
                                                 pva_code_prodt             => 'AFW');
    end;

    sie_07_util_pkg.defnr_etat_sesn ('FSP_AFTER_LOGIN_URL',
                                     genr_url (vnu_numr_apex_aplic,
                                               vnu_numr_apex_page,
                                               pva_scpc,
                                               pnu_sspc,
                                               pva_sapc,
                                               pva_scpi,
                                               pnu_sspi,
                                               pva_sapi,
                                               pnu_snpi,
                                               pnu_sidf,
                                               pbo_indic_forcr_sspc,
                                               pbo_indic_forcr_sidf,
                                               pva_optio_reqst,
                                               pva_optio_clear_page));

    valdr_utils (pva_code_utils,
                 pva_mot_passe,
                 pva_domn,
                 pbo_forcr_authe);
    defnr_varbl_utils_domn;

    -- Définir si on doit ingnorer l'indicateur actif (sie_12_utils) lors de la connexion
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_AUTHE_IGNOR_INDIC_ACTIF',
                                     case when pbo_ignor_indic_actif then 'O' else 'N' end);

    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_AUTHE_FORCR_AUTHE',
                                     case when pbo_forcr_authe then 'O' else 'N' end);

    -- 1er) Authentifier l'utilisateur avec AFW car l'engin d'APEX n'aime pas les RAISE qu'on fait pour afficher les erreurs de connexion
    if authe_utils (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_UTILS'),
                    pva_mot_passe,
                    sie_12_domn_pkg.obten_seqnc_domn (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN')),
                    pbo_ignor_indic_actif,
                    pbo_forcr_authe) then
      -- 2e) Authentifier l'utilisateur avec l'engin d'APEX
      -- Passer l'utilisateur qui apparaîtra comme connecté car c'est le code qui sera dans APP_USER
      apex_custom_auth.login (nvl (gva_code_utils_pour, gva_code_utils),
                              pva_mot_passe,
                              sie_12_sesn_pkg.obten_sesn);

      if sie_12_utils_pkg.obten_code_usagr_conct is not null then
        defnr_varbl_sesn;

        if sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_UTILS_POUR') is null then
          sie_12_utils_pkg.updat_dernr_domn (sie_12_utils_pkg.obten_usagr_conct,
                                             pva_domn);
        end if;
      end if;
    end if;
  end authe_redrg;
begin
  gbo_valdt_procd_authe_exter := false;
end sie_12_authe_apex_pkg;
/

Prompt Package Body SIE_12_CALND_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_calnd_pkg as
  function obten_date (pnu_numr_apex_regn in number)
    return date is
    vda_date_calnd                          date;
  begin
    vda_date_calnd :=
      nvl (sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_date),
           sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_21_CALND_' || pnu_numr_apex_regn || '_DATE'));

    sie_07_sesn_pkg.suprm_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_date);

    return vda_date_calnd;
  end obten_date;

  function obten_mode (pnu_numr_apex_regn in number)
    return varchar2 is
    vva_mode_calnd                          varchar2 (30);
  begin
    vva_mode_calnd :=
      nvl (sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_mode),
           sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_21_CALND_' || pnu_numr_apex_regn || '_MODE'));

    sie_07_sesn_pkg.suprm_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_mode);

    return vva_mode_calnd;
  end obten_mode;

  function obten_type_agend
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_type_agend);
  end obten_type_agend;

  function obten_selct_indic_journ_compl
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_selct_indic_journ_compl);
  end obten_selct_indic_journ_compl;

  function obten_selct_date_debut
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_selct_date_debut);
  end obten_selct_date_debut;

  function obten_selct_date_fin
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_selct_date_fin);
  end obten_selct_date_fin;

  function obten_choix_evenm_ident
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_choix_evenm_ident);
  end obten_choix_evenm_ident;

  function obten_deplc_evenm_ident
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_deplc_ident);
  end obten_deplc_evenm_ident;

  function obten_deplc_indic_journ_compl
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_deplc_indic_journ_compl);
  end obten_deplc_indic_journ_compl;

  function obten_deplc_date_debut
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_deplc_date_debut);
  end obten_deplc_date_debut;

  function obten_deplc_date_fin
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_deplc_date_fin);
  end obten_deplc_date_fin;

  function obten_ajust_evenm_ident
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_ajust_ident);
  end obten_ajust_evenm_ident;

  function obten_ajust_date_fin
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_ajust_date_fin);
  end obten_ajust_date_fin;

  procedure defnr_date (pnu_numr_apex_regn in number,
                        pva_date in varchar2) is
  begin
    if pnu_numr_apex_regn is not null then
      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_CALND_' || pnu_numr_apex_regn || '_DATE',
                                       pva_date);
    else
      sie_07_sesn_pkg.defnr_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_date,
                                       pva_date);
    end if;
  end defnr_date;

  procedure defnr_mode (pnu_numr_apex_regn in number,
                        pva_mode in varchar2) is
  begin
    if pnu_numr_apex_regn is not null then
      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_CALND_' || pnu_numr_apex_regn || '_MODE',
                                       pva_mode);
    else
      sie_07_sesn_pkg.defnr_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_mode,
                                       pva_mode);
    end if;
  end defnr_mode;

  procedure defnr_type_agend (pva_type in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (sie_21_plugn_calnd_pkg.kva_s_type_agend,
                                     pva_type);
  end defnr_type_agend;
end sie_12_calnd_pkg;
/

Prompt Package Body SIE_12_DIALG_IFRAM_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_dialg_ifram_pkg is
  procedure ouvri_dialg (pnu_numr_apex_actio_dynmq in number,
                         pnu_numr_apex_aplic in number,
                         pnu_numr_apex_page in number) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_DIALG_IFRAM_APLIC_' || pnu_numr_apex_actio_dynmq,
                                     pnu_numr_apex_aplic);

    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_DIALG_IFRAM_PAGE_' || pnu_numr_apex_actio_dynmq,
                                     pnu_numr_apex_page);
  end;

  procedure defnr_item_cle_etran (pnu_numr_apex_actio_dynmq in number,
                                  pva_item_cle_etran in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_DIALG_IFRAM_ITEM_CLE_ETRAN_' || pnu_numr_apex_actio_dynmq,
                                     pva_item_cle_etran);
  end defnr_item_cle_etran;

  function obten_item_cle_etran (pnu_numr_apex_actio_dynmq in number)
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_21_DIALG_IFRAM_ITEM_CLE_ETRAN_' || pnu_numr_apex_actio_dynmq);
  end obten_item_cle_etran;

  function obten_dialg_ouver
    return number is
    vnu_numr_apex_actio_dynmq               number;
  begin
    select   to_number (substr (ss.nom,
                                27))
      into   vnu_numr_apex_actio_dynmq
      from   sie_07_etat_sesn ss
     where   ss.nom like 'S_SIE_21_DIALG_IFRAM_PAGE_%'
         and ss.session_id = sie_12_sesn_pkg.obten_sesn
         and ss.date_creat =
               (select   max (ss.date_creat)
                  from   sie_07_etat_sesn ss
                 where   ss.nom like 'S_SIE_21_DIALG_IFRAM_PAGE_%' and ss.session_id = sie_12_sesn_pkg.obten_sesn);

    return vnu_numr_apex_actio_dynmq;
  exception
    when no_data_found then
      return null;
  end obten_dialg_ouver;

  function valdr_dialg_ouvert
    return boolean is
    vbo_vald                                boolean default false;
  begin
    if obten_dialg_ouver is not null then
      vbo_vald := true;
    end if;

    return vbo_vald;
  end valdr_dialg_ouvert;

  procedure fermr_dialg_ouver is
    vnu_numr_apex_actio_dynmq               number;
  begin
    vnu_numr_apex_actio_dynmq := obten_dialg_ouver;

    sie_07_sesn_pkg.suprm_valr_sesn ('S_SIE_21_DIALG_IFRAM_APLIC_' || vnu_numr_apex_actio_dynmq);

    sie_07_sesn_pkg.suprm_valr_sesn ('S_SIE_21_DIALG_IFRAM_PAGE_' || vnu_numr_apex_actio_dynmq);
  end fermr_dialg_ouver;

  procedure suprm_dialg_sesn (pnu_sesn in number default sie_12_sesn_pkg.obten_sesn) is
    pragma autonomous_transaction;
  begin
    delete from   sie_07_etat_sesn ss
          where   ss.session_id = pnu_sesn
              and (ss.nom like 'S_SIE_21_DIALG_IFRAM_PAGE_%'
                or ss.nom like 'S_SIE_21_DIALG_IFRAM_APLIC_%'
                or ss.nom like 'S_SIE_21_DIALG_IFRAM_ITEM_CLE_ETRAN_%');

    commit;
  exception
    when others then
      rollback;
  end suprm_dialg_sesn;
end sie_12_dialg_ifram_pkg;
/

Prompt Package Body SIE_12_DOMN_GROUP_UTILS_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_domn_group_utils_pkg as
  procedure maj_ocurn_group_expos (pnu_domn in number) is
  begin
    merge into   vd_i_sie_12_g_u_opert_opt_dom cible
         using   (select     o.seqnc ref_opert,
                             gu.seqnc ref_group,
                             min (oo.seqnc) keep (dense_rank first order by prepn asc) ref_optio,
                             pnu_domn ref_domn
                      from   vd_i_sie_13_opert o,
                             vd_i_sie_13_opert_optio oo,
                             vd_i_sie_12_group_utils gu
                     where   gu.indic_acces_globl = 'O' and o.seqnc = oo.ref_opert
                  group by   o.seqnc,
                             gu.seqnc) source
            on   (cible.ref_group_utils = source.ref_group
              and cible.ref_opert = source.ref_opert
              and cible.ref_domn = source.ref_domn)
    when not matched then
      insert       (ref_group_utils, ref_opert, ref_opert_optio, ref_domn)
          values   (source.ref_group,
                    source.ref_opert,
                    source.ref_optio,
                    source.ref_domn);
  end maj_ocurn_group_expos;

  procedure maj_tous_domn is
    cursor cur_domn is
      select   seqnc
        from   vd_sie_12_domn;
  begin
    for rec_domn in cur_domn loop
      maj_ocurn_group_expos (rec_domn.seqnc);
    end loop;
  end maj_tous_domn;
end sie_12_domn_group_utils_pkg;
/

Prompt Package Body SIE_12_DOMN_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_domn_pkg is
  procedure ajout_domn (pva_code in varchar2,
                        pva_nom in varchar2,
                        pva_descr in varchar2) is
  begin
    insert into   vd_i_sie_12_domn (code, nom, descr)
         values   (upper (pva_code),
                   pva_nom,
                   pva_descr);
  exception
    when others then
      ete ();
  end ajout_domn;

  procedure modfc_domn (pnu_seqnc in number,
                        pva_code in varchar2,
                        pva_nom in varchar2,
                        pva_descr in varchar2) is
    vnu_seqnc                               number (10);
  begin
    if pnu_seqnc is null then
      vnu_seqnc := sie_12_domn_pkg.obten_seqnc_domn (pva_code);
    end if;

    update   vd_i_sie_12_domn
       set   code = upper (pva_code), nom = pva_nom, descr = pva_descr
     where   seqnc = vnu_seqnc;
  exception
    when no_data_found then
      ajout_domn (pva_code,
                  pva_nom,
                  pva_descr);
    when others then
      ete ();
  end modfc_domn;

  procedure suprm_domn (pnu_seqnc in number) is
  begin
    delete from   vd_i_sie_12_domn
          where   seqnc = pnu_seqnc;
  exception
    when others then
      ete ();
  end suprm_domn;

  function obten_code_domn (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn.code%type is
    vva_code                                vd_i_sie_12_domn.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_12_domn
     where   seqnc = pnu_domn;

    return vva_code;
  end obten_code_domn;

  function ajout_utils (pnu_utils in number,
                        pnu_domn in number,
                        pda_debut_efect in date default sysdate,
                        pda_fin_efect in date default null)
    return vd_i_sie_12_domn_utils.seqnc%type is
    vnu_domn_utils                          vd_i_sie_12_domn_utils.seqnc%type;
  begin
    if pnu_utils is not null and pnu_domn is not null then
      insert into   vd_i_sie_12_domn_utils (ref_utils, ref_domn, date_debut_efect, date_fin_efect)
           values   (pnu_utils,
                     pnu_domn,
                     pda_debut_efect,
                     pda_fin_efect)
        returning   seqnc
             into   vnu_domn_utils;
    end if;

    return vnu_domn_utils;
  end ajout_utils;

  procedure ajout_utils (pnu_utils in number,
                         pnu_domn in number,
                         pda_debut_efect in date default sysdate,
                         pda_fin_efect in date default null) is
    vnu_domn_utils                          vd_i_sie_12_domn_utils.seqnc%type;
  begin
    vnu_domn_utils :=
      ajout_utils (pnu_utils,
                   pnu_domn,
                   pda_debut_efect,
                   pda_fin_efect);
  end ajout_utils;

  procedure modfc_utils (pnu_seqnc in number,
                         pda_debut_efect in date,
                         pda_fin_efect in date) is
  begin
    if pnu_seqnc is not null then
      update   vd_i_sie_12_domn_utils
         set   date_debut_efect = pda_debut_efect, date_fin_efect = pda_fin_efect
       where   seqnc = pnu_seqnc;
    end if;
  end modfc_utils;

  --Terminer une plage precise d'un utilisateur
  procedure termn_utils (pnu_seqnc in number,
                         pda_fin_efect in date) is
  begin
    update   vd_i_sie_12_domn_utils
       set   date_fin_efect = pda_fin_efect
     where   seqnc = pnu_seqnc;
  end termn_utils;

  --Terminer toutes les plages ulterieures a pda_fin_efect
  procedure termn_utils (pnu_utils in number,
                         pnu_domn in number,
                         pda_fin_efect in date) is
  begin
    --TODO
    null;
  end termn_utils;

  procedure suprm_utils (pnu_seqnc in number) is
  begin
    delete from   vd_i_sie_12_domn_utils
          where   seqnc = pnu_seqnc;
  exception
    when others then
      ete ();
  end suprm_utils;

  function obten_seqnc_domn (pva_code in vd_i_sie_12_domn.code%type)
    return vd_i_sie_12_domn.seqnc%type is
    vnu_domn                                vd_i_sie_12_domn.seqnc%type;
  begin
    select   seqnc
      into   vnu_domn
      from   vd_i_sie_12_domn
     where   code = upper (pva_code);

    return vnu_domn;
  exception
    when others then
      return null;
  end obten_seqnc_domn;

  function obten_nom_domn (pva_code in vd_i_sie_12_domn.code%type)
    return vd_i_sie_12_domn.nom%type is
    vva_nom                                 vd_i_sie_12_domn.nom%type;
  begin
    select   nom
      into   vva_nom
      from   vd_i_sie_12_domn
     where   code = upper (pva_code);

    return vva_nom;
  exception
    when others then
      return null;
  end obten_nom_domn;

  function obten_nom_domn (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn.nom%type is
    vva_nom                                 vd_i_sie_12_domn.nom%type;
  begin
    select   nom
      into   vva_nom
      from   vd_i_sie_12_domn
     where   seqnc = pnu_domn;

    return vva_nom;
  exception
    when others then
      return null;
  end obten_nom_domn;

  function obten_domn_sesn
    return vd_i_sie_12_domn.seqnc%type is
  begin
    return obten_seqnc_domn (
             nvl (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN_POUR'),
                  sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN'))
           );
  exception
    when others then
      return null;
  end obten_domn_sesn;

  function obten_code_domn_sesn
    return vd_i_sie_12_domn.code%type is
  begin
    return nvl (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN_POUR'),
                sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN'));
  exception
    when others then
      return null;
  end obten_code_domn_sesn;

  function obten_nom_domn_sesn
    return vd_i_sie_12_domn.nom%type is
  begin
    return obten_nom_domn (
             nvl (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN_POUR'),
                  sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN'))
           );
  exception
    when others then
      return null;
  end obten_nom_domn_sesn;

  function obten_domn_sesn_authe
    return number is
  begin
    return obten_seqnc_domn (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN'));
  exception
    when others then
      return null;
  end obten_domn_sesn_authe;

  function obten_code_domn_sesn_authe
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN');
  exception
    when others then
      return null;
  end obten_code_domn_sesn_authe;

  function obten_type_travl_deft (pnu_seqnc in number)
    return number is
    vnu_type_travl                          number (10);
  begin
    select   type_travl_deft
      into   vnu_type_travl
      from   vd_i_sie_12_domn
     where   seqnc = pnu_seqnc;

    return vnu_type_travl;
  end obten_type_travl_deft;

  procedure chang_domn (pnu_domn in number) is
  begin
    if sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN_POUR') is not null then
      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_DOMN_POUR',
                                       sie_12_domn_pkg.obten_code_domn (pnu_domn));
    else
      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_12_DOMN',
                                       sie_12_domn_pkg.obten_code_domn (pnu_domn));
    end if;
  --TODO:: Ajouter 1 colonne sur sie_12_utils pour savoir le dernier domaine connecté
  /*
        sie_12_utils_pkg.updat_dernr_prodt (sie_12_utils_pkg.obten_usagr_conct,
                                      sie_11_prodt_pkg.obten_code_prodt (pnu_prodt));*/
  end chang_domn;

  function obten_procd_authe_exter_afw (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn.procd_authe_exter_afw%type is
    vva_procd_authe_exter_afw               vd_i_sie_12_domn.procd_authe_exter_afw%type;
  begin
    select   procd_authe_exter_afw
      into   vva_procd_authe_exter_afw
      from   vd_i_sie_12_domn
     where   seqnc = pnu_domn;

    return vva_procd_authe_exter_afw;
  exception
    when no_data_found then
      return null;
  end obten_procd_authe_exter_afw;

  function valdr_demnd_activ_compt_utils (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return boolean is
    vbo_vald                                boolean default false;
    vva_indic                               vd_i_sie_12_domn.indic_demnd_activ_compt_utils%type;
  begin
    select   indic_demnd_activ_compt_utils
      into   vva_indic
      from   vd_i_sie_12_domn
     where   seqnc = pnu_domn;

    if vva_indic = 'O' then
      vbo_vald := true;
    end if;

    return vbo_vald;
  exception
    when no_data_found then
      return vbo_vald;
  end valdr_demnd_activ_compt_utils;

  function obten_domn (pnu_domn in vd_i_sie_12_domn.seqnc%type)
    return vd_i_sie_12_domn%rowtype is
    cursor cur_domn (pnu_domn in vd_i_sie_12_domn.seqnc%type) is
      select   *
        from   vd_i_sie_12_domn
       where   seqnc = pnu_domn;

    rec_domn                                cur_domn%rowtype;
  begin
    open cur_domn (pnu_domn);

    fetch cur_domn
    into rec_domn;

    close cur_domn;

    return rec_domn;
  end;

  procedure alimn_type_travl (pnu_domn in vd_i_sie_12_domn.seqnc%type) is
  begin
    insert into   vd_i_sie_25_type_travl (code, nom, ref_domn)
         values   ('FILE_ATENT',
                   'File d''attente',
                   pnu_domn);

    insert into   vd_i_sie_25_type_travl (code, nom, ref_domn)
         values   ('SAUVG_DOSR',
                   'Sauvegarde dossier',
                   pnu_domn);
  end;

  procedure alimn_group_utils (pnu_domn in vd_i_sie_12_domn.seqnc%type,
                               pnu_modl_domn in vd_i_sie_12_domn.seqnc%type default 0) is
    cursor cur_group_utils is
      select   seqnc
        from   vd_sie_12_group_utils
       where   ref_domn = pnu_modl_domn;
  begin
    for rec_gu in cur_group_utils loop
      sie_12_group_utils_pkg.ajout_group_utils_domn (rec_gu.seqnc,
                                                     pnu_domn);
    end loop;
  end alimn_group_utils;

  procedure alimn_modl_rechr (pnu_domn in vd_sie_12_domn.seqnc%type,
                              pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0) is
    cursor cur_modl_rechr is
      select   seqnc
        from   vd_sie_23_modl_rechr
       where   ref_domn = pnu_modl_domn;
  begin
    for rec_mr in cur_modl_rechr loop
      sie_23_rechr_pkg.ajout_modl_rechr_domn (rec_mr.seqnc,
                                              pnu_domn);
    end loop;
  end alimn_modl_rechr;

  procedure alimn_domn_type_publc (pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                   pnu_modl_domn in vd_i_sie_12_domn.seqnc%type default 0) is
    cursor cur_domn_type_publc is
      select   seqnc
        from   vd_sie_25_domn_type_publc
       where   ref_domn = pnu_modl_domn;
  begin
    for rec_dtp in cur_domn_type_publc loop
      sie_25_domn_type_publc_pkg.creat_domn_type_publc (rec_dtp.seqnc,
                                                        pnu_domn);
    end loop;
  end alimn_domn_type_publc;

  procedure alimn_profl_courl (pnu_domn in vd_sie_12_domn.seqnc%type,
                               pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0) is
    cursor cur_profl_courl is
      select   seqnc
        from   vd_sie_17_profl_courl
       where   ref_domn = pnu_modl_domn;
  begin
    for rec_pc in cur_profl_courl loop
      sie_17_profl_courl_pkg.ajout_profl_courl_domn (rec_pc.seqnc,
                                                     pnu_domn);
    end loop;
  end alimn_profl_courl;

  procedure alimn_confg_evenm_notfb (pnu_domn in vd_sie_12_domn.seqnc%type,
                                     pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0) is
    cursor cur_confg_evenm_notfb is
      select   seqnc
        from   vd_sie_01_confg_evenm_notfb
       where   ref_domn = pnu_modl_domn;
  begin
    for rec_cen in cur_confg_evenm_notfb loop
      sie_01_evenm_notfb_pkg.ajout_confg_en_domn (rec_cen.seqnc,
                                                  pnu_domn);
    end loop;
  end alimn_confg_evenm_notfb;

  procedure alimn_domn_opert (pnu_domn in vd_sie_12_domn.seqnc%type,
                              pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0) is
    cursor cur_domn_opert is
      select   seqnc
        from   vd_sie_12_gr_ut_opert_opt_dom
       where   ref_domn = pnu_modl_domn;
  begin
    for rec_fd in cur_domn_opert loop
      sie_12_fonct_pkg.ajout_opert_domn (rec_fd.seqnc,
                                         pnu_domn);
    end loop;
  end alimn_domn_opert;

  procedure alimn_domn_fonct (pnu_domn in vd_sie_12_domn.seqnc%type,
                              pnu_modl_domn in vd_sie_12_domn.seqnc%type default 0) is
    cursor cur_domn_fonct is
      select   seqnc
        from   vd_sie_12_domn_fonct
       where   ref_domn = pnu_modl_domn;
  begin
    for rec_fd in cur_domn_fonct loop
      sie_12_fonct_pkg.ajout_fonct_domn (rec_fd.seqnc,
                                         pnu_domn);
    end loop;
  end alimn_domn_fonct;

  procedure valdr_chevc_date_domn_utils (pnu_seqnc in vd_sie_12_domn_utils.seqnc%type,
                                         pnu_ref_domn in vd_sie_12_domn.seqnc%type,
                                         pnu_ref_utils in vd_sie_12_utils.seqnc%type,
                                         pda_date_debut in date,
                                         pda_date_fin in date) is
    cursor cur_exist_perd is
      select   1
        from   vd_sie_12_domn_utils du
       where   du.ref_domn = pnu_ref_domn
           and du.ref_utils = pnu_ref_utils
           and du.seqnc != pnu_seqnc
           and (pda_date_fin >= du.date_debut_efect
             or pda_date_fin is null)
           and (pda_date_debut <= du.date_fin_efect
             or du.date_fin_efect is null)
           and rownum = 1;
  begin
    ete (pnu_ref_domn,
         pnu_ref_utils);
    ete (pda_date_debut,
         pda_date_fin);

    for rec_exist_perd in cur_exist_perd loop
      sie_01_err_apex_pkg.lever_err_apex_code (pva_code                   => 'DOM.000149',
                                               pva_code_prodt             => 'AFW');
    end loop;
  end valdr_chevc_date_domn_utils;
end sie_12_domn_pkg;
/

Prompt Package Body SIE_12_FAVR_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_favr_pkg as
  gnu_utils                               vd_sie_12_utils.seqnc%type default sie_12_utils_pkg.obten_usagr_conct ();
  gnu_struc_aplic                         number (10)
    default sie_13_page_pkg.obten_struc_aplic (sie_13_page_pkg.obten_page_sesn ());

  function obten_favr (pnu_struc_aplic in number,
                       pnu_seqnc_struc_aplic in number,
                       pnu_utils in number default null)
    return number is
    vnu_favr                                vd_sie_12_favr.seqnc%type;
    vnu_utils                               vd_sie_12_utils.seqnc%type;
  begin
    vnu_utils := nvl (pnu_utils, gnu_utils);

    select   seqnc
      into   vnu_favr
      from   vd_sie_12_favr
     where   ref_struc_aplic = pnu_struc_aplic
         and ref_seqnc_struc_aplic = pnu_seqnc_struc_aplic
         and ref_utils = pnu_utils;

    return vnu_favr;
  exception
    when others then
      return null;
  end obten_favr;

  procedure ajout_favr (pnu_struc_aplic in number,
                        pnu_seqnc_struc_aplic in number,
                        pnu_utils in number default null,
                        pbo_appel_plugn in boolean default true) is
    vnu_utils                               vd_sie_12_utils.seqnc%type;
  begin
    vnu_utils := nvl (pnu_utils, gnu_utils);

    if obten_favr (pnu_struc_aplic,
                   pnu_seqnc_struc_aplic,
                   pnu_utils)
         is null then
      insert into   vd_sie_12_favr (ref_struc_aplic, ref_seqnc_struc_aplic, ref_utils)
           values   (pnu_struc_aplic,
                     pnu_seqnc_struc_aplic,
                     vnu_utils);

      if sql%rowcount = 1 and pbo_appel_plugn then
        htp.prn ('{"class":"icon-star","title":"Supprimer des favoris"}');
      end if;
    end if;
  exception
    when others then
      ete (sqlerrm);
  end ajout_favr;

  procedure suprm_favr (pnu_struc_aplic in number,
                        pnu_seqnc_struc_aplic in number,
                        pnu_utils in number default null,
                        pbo_appel_plugn in boolean default true) is
    vnu_utils                               vd_sie_12_utils.seqnc%type;
    vnu_favr                                vd_sie_12_favr.seqnc%type;
  begin
    vnu_utils := nvl (pnu_utils, gnu_utils);

    vnu_favr :=
      obten_favr (pnu_struc_aplic,
                  pnu_seqnc_struc_aplic,
                  vnu_utils);

    delete   vd_sie_12_favr
     where   seqnc = vnu_favr;

    if sql%rowcount = 1 and pbo_appel_plugn then
      htp.prn ('{"class":"icon-star-empty","title":"Ajouter aux favoris"}');
    end if;
  exception
    when others then
      ete (sqlerrm);
  end suprm_favr;

  function obten_icone_favr_selct (pnu_struc_aplic in number,
                                   pnu_seqnc_struc_aplic in number)
    return varchar2 is
    vva_icone_favr                          varchar2 (4000);
  begin
    vva_icone_favr :=
         sie_15_htp_pkg.ouvri_bals (
           'i',
           'class',
           'icon-star ajout_suprm_favr',
           'title',
           'Supprimer de vos favoris',
           'onclick',
           'javascript:afw.sie_12.favr.ajout_suprm(this,' || pnu_struc_aplic || ',' || pnu_seqnc_struc_aplic || ');'
         )
      || sie_15_htp_pkg.fermr_bals ('i');

    return vva_icone_favr;
  end obten_icone_favr_selct;

  function obten_icone_favr_non_selct (pnu_struc_aplic in number,
                                       pnu_seqnc_struc_aplic in number)
    return varchar2 is
    vva_icone_favr                          varchar2 (4000);
  begin
    vva_icone_favr :=
         sie_15_htp_pkg.ouvri_bals (
           'i',
           'class',
           'icon-star-empty ajout_suprm_favr',
           'title',
           'Ajouter à vos favoris',
           'onclick',
           'javascript:afw.sie_12.favr.ajout_suprm(this,' || pnu_struc_aplic || ',' || pnu_seqnc_struc_aplic || ');'
         )
      || sie_15_htp_pkg.fermr_bals ('i');
    return vva_icone_favr;
  end obten_icone_favr_non_selct;

  function obten_icone_favr (pnu_seqnc_struc_aplic in number,
                             pnu_struc_aplic in number default null,
                             pnu_utils in number default null)
    return varchar2 is
    vnu_struc_aplic                         vd_sie_12_struc_aplic.seqnc%type;
    vnu_utils                               vd_sie_12_utils.seqnc%type;
    vva_icone_favr                          varchar2 (4000);
  begin
    vnu_struc_aplic := nvl (pnu_struc_aplic, gnu_struc_aplic);

    vnu_utils := nvl (pnu_utils, gnu_utils);

    if obten_favr (vnu_struc_aplic,
                   pnu_seqnc_struc_aplic,
                   vnu_utils)
         is null then
      vva_icone_favr :=
        obten_icone_favr_non_selct (vnu_struc_aplic,
                                    pnu_seqnc_struc_aplic);
    else
      vva_icone_favr :=
        obten_icone_favr_selct (vnu_struc_aplic,
                                pnu_seqnc_struc_aplic);
    end if;

    return vva_icone_favr;
  end;
end sie_12_favr_pkg;
/

Prompt Package Body SIE_12_FONCT_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_fonct_pkg as
  function verif_activ_fonct_domn (pnu_struc_aplic in number)
    return boolean is
    vnu_domn                                number (10) default sie_12_domn_pkg.obten_domn_sesn ();
    vnu_count                               pls_integer;
  begin
    select   count (1)
      into   vnu_count
      from   vd_i_sie_12_domn_fonct df,
             vd_i_sie_12_fonct_struc_aplic fsa
     where   df.ref_domn = vnu_domn
         and df.ref_fonct = fsa.ref_fonct
         and fsa.ref_struc_aplic = pnu_struc_aplic
         and df.indic_actif = 'O'
         and rownum = 1;

    return vnu_count = 1;
  end verif_activ_fonct_domn;

  function verif_activ_fonct_domn (pva_struc_aplic in varchar2)
    return boolean is
  begin
    return verif_activ_fonct_domn (sie_12_struc_aplic_pkg.obten_seqnc (pva_struc_aplic));
  end verif_activ_fonct_domn;

  procedure ajout_opert_domn (pnu_opert_domn in number,
                              pnu_domn_cible in number) is
  begin
    insert into   vd_sie_12_gr_ut_opert_opt_dom (ref_group_utils, ref_opert, ref_opert_optio, ref_domn)
      select   ref_group_utils,
               ref_opert,
               ref_opert_optio,
               pnu_domn_cible
        from   vd_sie_12_gr_ut_opert_opt_dom
       where   seqnc = pnu_opert_domn;
  end ajout_opert_domn;

  procedure ajout_fonct_domn (pnu_domn_fonct in number,
                              pnu_domn_cible in number) is
  begin
    insert into   vd_sie_12_domn_fonct (ref_fonct, indic_actif, ref_domn)
      select   ref_fonct,
               indic_actif,
               pnu_domn_cible
        from   vd_sie_12_domn_fonct
       where   seqnc = pnu_domn_fonct;
  end ajout_fonct_domn;

  function obten_liste_fonct (pnu_page in vd_i_sie_13_page.seqnc%type)
    return varchar2 is
    vva_liste                               varchar2 (4000);

    cursor cur_fonct (pnu_page in vd_i_sie_13_page.seqnc%type) is
      select   f.nom
        from   vd_sie_12_fonct f
       where   exists
                 (select   null
                    from   vd_sie_12_fonct_struc_aplic fsa,
                           vd_sie_13_page p
                   where   p.seqnc = pnu_page and fsa.ref_struc_aplic = p.ref_struc_aplic and fsa.ref_fonct = f.seqnc);
  begin
    for rec_fonct in cur_fonct (pnu_page) loop
      vva_liste := vva_liste || ', ' || rec_fonct.nom;
    end loop;

    return ltrim (vva_liste,
                  ', ');
  end obten_liste_fonct;
end sie_12_fonct_pkg;
/

Prompt Package Body SIE_12_GROUP_STAT_PKG;
/* Formatted on 04/12/2013 11:35:22 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_12_GROUP_STAT_PKG" as
  procedure creer_group_stat (pva_code in varchar2,
                              pva_nom in varchar2,
                              pva_descr in varchar2,
                              pva_code_prodt in varchar2) is
    vnu_seqnc                               number (10);
  begin
    vnu_seqnc :=
      creer_group_stat (pva_code,
                        pva_nom,
                        pva_descr,
                        pva_code_prodt);
  end creer_group_stat;

  function creer_group_stat (pva_code in varchar2,
                             pva_nom in varchar2,
                             pva_descr in varchar2,
                             pva_code_prodt in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    insert into   vd_i_sie_12_group_stat (nom, descr, ref_prodt, code, dnr_ref_prodt)
         values   (pva_nom,
                   pva_descr,
                   sie_11_prodt_pkg.obten_prodt (pva_code_prodt),
                   pva_code,
                   sie_11_prodt_pkg.obten_prodt (pva_code_prodt))
      returning   seqnc
           into   vnu_seqnc;

    return vnu_seqnc;
  end creer_group_stat;

  procedure creer_stat (pnu_ref_group_stat in number,
                        pva_code in varchar2,
                        pva_nom in varchar2) is
  begin
    insert into   vd_i_sie_12_stat (ref_group_stat, code, nom)
         values   (pnu_ref_group_stat,
                   pva_code,
                   pva_nom);
  end creer_stat;

  procedure suprm_group (pnu_seqnc in number) is
  begin
    delete from   vd_i_sie_12_group_stat
          where   seqnc = pnu_seqnc;
  end suprm_group;
end sie_12_group_stat_pkg;
/

Prompt Package Body SIE_12_GROUP_UTILS_PKG;
/* Formatted on 04/12/2013 11:35:23 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_12_GROUP_UTILS_PKG" as
  function obten_code (pnu_group_utils in number)
    return varchar2 is
    pva_code                                vd_sie_12_group_utils.code%type;
  begin
    select   gu.code
      into   pva_code
      from   vd_sie_12_group_utils gu
     where   gu.seqnc = pnu_group_utils;

    return pva_code;
  exception
    when others then
      return null;
  end obten_code;

  function obten_nom (pnu_group_utils in vd_sie_12_group_utils.seqnc%type)
    return varchar2 is
    vva_nom                                 vd_sie_12_group_utils.nom%type;
  begin
    select   gu.nom
      into   vva_nom
      from   vd_sie_12_group_utils gu
     where   gu.seqnc = pnu_group_utils;

    return vva_nom;
  exception
    when others then
      return null;
  end obten_nom;

  function obten_seqnc (pva_code in varchar2,
                        pnu_prodt in number default null,
                        pnu_domn in number default null)
    return number is
    pnu_seqnc                               vd_sie_12_group_utils.seqnc%type;
  begin
    select   gu.seqnc
      into   pnu_seqnc
      from   vd_sie_12_group_utils gu
     where   gu.code = pva_code
         and (gu.ref_prodt = pnu_prodt
           or (gu.ref_prodt is null and pnu_prodt is null))
         and (gu.ref_domn = pnu_domn
           or (gu.ref_domn is null and pnu_domn is null));

    return pnu_seqnc;
  exception
    when others then
      return null;
  end obten_seqnc;

  function ajout_utils (pnu_utils in number,
                        pnu_group_utils in number,
                        pda_debut_efect in date default sysdate,
                        pda_fin_efect in date default null,
                        pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn)
    return vd_i_sie_12_lien_group_utils.seqnc%type is
    vnu_lien_group_utils                    vd_i_sie_12_lien_group_utils.seqnc%type;
  begin
    if pnu_utils is not null and pnu_group_utils is not null then
      insert into   vd_i_sie_12_lien_group_utils (ref_utils, ref_group, date_debut_efect, date_fin_efect, ref_domn)
           values   (pnu_utils,
                     pnu_group_utils,
                     pda_debut_efect,
                     pda_fin_efect,
                     pnu_domn)
        returning   seqnc
             into   vnu_lien_group_utils;
    end if;

    return vnu_lien_group_utils;
  end ajout_utils;

  procedure ajout_utils (pnu_utils in number,
                         pnu_group_utils in number,
                         pda_debut_efect in date default sysdate,
                         pda_fin_efect in date default null,
                         pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn) is
    vnu_lien_group_utils                    vd_i_sie_12_lien_group_utils.seqnc%type;
  begin
    vnu_lien_group_utils :=
      ajout_utils (pnu_utils,
                   pnu_group_utils,
                   pda_debut_efect,
                   pda_fin_efect,
                   pnu_domn);
  end ajout_utils;

  --À n'utiliser que pendant la création de domaine
  procedure ajout_group_utils_domn (pnu_group_utils_sourc in vd_i_sie_12_group_utils.seqnc%type,
                                    pnu_domn_cible in vd_i_sie_12_domn.seqnc%type) is
    cursor cur_lien_group_utils is
      select   ref_group_utils_lie,
               date_debut_efect,
               date_fin_efect
        from   vd_sie_12_lien_group_utils
       where   ref_group = pnu_group_utils_sourc;

    vnu_group_utils                         vd_i_sie_12_group_utils.seqnc%type;
  begin
    vnu_group_utils := sie_12_group_utils_seq.nextval;

    insert into   vd_i_sie_12_group_utils (seqnc, nom, descr, code, ref_domn)
      select   vnu_group_utils,
               nom,
               descr,
               code,
               pnu_domn_cible
        from   vd_i_sie_12_group_utils
       where   seqnc = pnu_group_utils_sourc;

    for rec_lgu in cur_lien_group_utils loop
      insert into   vd_i_sie_12_lien_group_utils (ref_group, date_debut_efect, date_fin_efect, ref_group_utils_lie)
           values   (vnu_group_utils,
                     rec_lgu.date_debut_efect,
                     rec_lgu.date_fin_efect,
                     rec_lgu.ref_group_utils_lie);
    end loop;
  end ajout_group_utils_domn;

  procedure termn_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                         pnu_group_utils in vd_sie_12_group_utils.seqnc%type,
                         pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn) is
    cursor cur_utils is
      select   seqnc
        from   vd_sie_12_lien_group_utils lgu
       where   lgu.ref_utils = pnu_utils
           and lgu.ref_group = pnu_group_utils
           and lgu.ref_domn = pnu_domn
           and lgu.date_fin_efect is null;
  begin
    for rec_utils in cur_utils loop
      update   vd_sie_12_lien_group_utils
         set   date_fin_efect = sysdate
       where   seqnc = rec_utils.seqnc;
    end loop;
  end termn_utils;

  procedure activ_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                         pnu_group_utils in vd_sie_12_group_utils.seqnc%type,
                         pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn) is
    cursor cur_utils is
      select   seqnc
        from   vd_sie_12_lien_group_utils lgu
       where   lgu.ref_utils = pnu_utils
           and lgu.ref_group = pnu_group_utils
           and lgu.ref_domn = pnu_domn
           and lgu.date_fin_efect is not null;
  begin
    for rec_utils in cur_utils loop
      update   vd_sie_12_lien_group_utils
         set   date_fin_efect = null
       where   seqnc = rec_utils.seqnc;
    end loop;
  end activ_utils;

  function ajout_utils_super_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                                    pda_debut_efect in date default sysdate,
                                    pda_fin_efect in date default null,
                                    pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn)
    return number is
    vnu_seqnc_lien                          vd_sie_12_lien_group_utils.seqnc%type;
    vda_fin_efect                           vd_sie_12_lien_group_utils.date_fin_efect%type;
    vnu_super_utils                         vd_sie_12_group_utils.seqnc%type
                                              default sie_12_group_utils_pkg.obten_seqnc ('SUPER_UTILS');

    cursor cur_utils is
      select     seqnc,
                 date_fin_efect
          from   vd_sie_12_lien_group_utils lgu
         where   lgu.ref_utils = pnu_utils and lgu.ref_group = vnu_super_utils and lgu.ref_domn = pnu_domn
      order by   lgu.date_debut_efect;
  begin
    open cur_utils;

    fetch cur_utils
    into vnu_seqnc_lien, vda_fin_efect;

    close cur_utils;

    if vnu_seqnc_lien is not null then
      --Si ligne déjà existante, seulement nullifier la date de fin effectivité
      if vda_fin_efect is not null then
        activ_utils (pnu_utils,
                     vnu_super_utils,
                     pnu_domn);
      end if;
    --Sinon, on ne fait rien.
    else
      vnu_seqnc_lien :=
        ajout_utils (pnu_utils,
                     vnu_super_utils,
                     pda_debut_efect,
                     pda_fin_efect,
                     pnu_domn);
    end if;

    return vnu_seqnc_lien;
  end ajout_utils_super_utils;

  procedure ajout_utils_super_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                                     pda_debut_efect in date default sysdate,
                                     pda_fin_efect in date default null,
                                     pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn) is
    vnu_seqnc_lien                          vd_sie_12_lien_group_utils.seqnc%type;
  begin
    vnu_seqnc_lien :=
      ajout_utils_super_utils (pnu_utils,
                               pda_debut_efect,
                               pda_fin_efect,
                               pnu_domn);
  end ajout_utils_super_utils;

  function ajout_utils_conxn_derv (pnu_utils in vd_sie_12_utils.seqnc%type,
                                   pda_debut_efect in date default sysdate,
                                   pda_fin_efect in date default null,
                                   pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn)
    return number is
    vnu_seqnc_lien                          vd_sie_12_lien_group_utils.seqnc%type;
    vda_fin_efect                           vd_sie_12_lien_group_utils.date_fin_efect%type;
    vnu_conxn_derv                          vd_sie_12_group_utils.seqnc%type
                                              default sie_12_group_utils_pkg.obten_seqnc (
                                                        'AUTOR_CONXN_DERV',
                                                        sie_11_prodt_pkg.obten_prodt ('AFW')
                                                      );

    cursor cur_utils is
      select     seqnc,
                 date_fin_efect
          from   vd_sie_12_lien_group_utils lgu
         where   lgu.ref_utils = pnu_utils and lgu.ref_group = vnu_conxn_derv and lgu.ref_domn = pnu_domn
      order by   lgu.date_debut_efect;
  begin
    open cur_utils;

    fetch cur_utils
    into vnu_seqnc_lien, vda_fin_efect;

    close cur_utils;

    if vnu_seqnc_lien is not null then
      --Si ligne déjà existante, seulement nullifier la date de fin effectivité
      if vda_fin_efect is not null then
        activ_utils (pnu_utils,
                     vnu_conxn_derv,
                     pnu_domn);
      end if;
    --Sinon, on ne fait rien.
    else
      vnu_seqnc_lien :=
        ajout_utils (pnu_utils,
                     vnu_conxn_derv,
                     pda_debut_efect,
                     pda_fin_efect,
                     pnu_domn);
    end if;

    return vnu_seqnc_lien;
  end ajout_utils_conxn_derv;

  procedure ajout_utils_conxn_derv (pnu_utils in vd_sie_12_utils.seqnc%type,
                                    pda_debut_efect in date default sysdate,
                                    pda_fin_efect in date default null,
                                    pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn) is
    vnu_seqnc_lien                          vd_sie_12_lien_group_utils.seqnc%type;
  begin
    vnu_seqnc_lien :=
      ajout_utils_conxn_derv (pnu_utils,
                              pda_debut_efect,
                              pda_fin_efect,
                              pnu_domn);
  end ajout_utils_conxn_derv;

  procedure termn_utils_super_utils (pnu_utils in vd_sie_12_utils.seqnc%type,
                                     pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn) is
    vnu_super_utils                         vd_sie_12_group_utils.seqnc%type
                                              default sie_12_group_utils_pkg.obten_seqnc ('SUPER_UTILS');
  begin
    termn_utils (pnu_utils,
                 vnu_super_utils,
                 pnu_domn);
  end termn_utils_super_utils;

  procedure termn_utils_conxn_derv (pnu_utils in vd_sie_12_utils.seqnc%type,
                                    pnu_domn in vd_sie_12_domn.seqnc%type default sie_12_domn_pkg.obten_domn_sesn) is
    vnu_conxn_derv                          vd_sie_12_group_utils.seqnc%type
                                              default sie_12_group_utils_pkg.obten_seqnc (
                                                        'AUTOR_CONXN_DERV',
                                                        sie_11_prodt_pkg.obten_prodt ('AFW')
                                                      );
  begin
    termn_utils (pnu_utils,
                 vnu_conxn_derv,
                 pnu_domn);
  end termn_utils_conxn_derv;
end sie_12_group_utils_pkg;
/

Prompt Package Body SIE_12_LDAP_PKG;
/* Formatted on 04/12/2013 11:35:23 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_ldap_pkg as
  function obten_servr_ldap (pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn)
    return vd_sie_12_servr_ldap%rowtype is
    cursor cur_servr_ldap (pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn) is
      select   ssl.*
        from   vd_i_sie_12_servr_ldap ssl,
               vd_i_sie_12_domn_servr_ldap sdsl
       where   ssl.seqnc = sdsl.ref_servr_ldap and sdsl.ref_domn = pnu_domn and rownum = 1;

    vre_servr_ldap                          vd_i_sie_12_servr_ldap%rowtype;
  begin
    open cur_servr_ldap (pnu_domn);

    fetch cur_servr_ldap
    into vre_servr_ldap;

    close cur_servr_ldap;

    return vre_servr_ldap;
  end obten_servr_ldap;

  function authe_apex (pva_code_utils in varchar2,
                       pva_mot_passe in varchar2)
    return boolean as
    vre_servr_ldap                          vd_i_sie_12_servr_ldap%rowtype;
    vbo_authe                               boolean default false;
  begin
    vre_servr_ldap := obten_servr_ldap ();

    -- Authentification LDAP
    vbo_authe :=
      apex_ldap.authenticate (
        pva_code_utils,
        pva_mot_passe,
        sie_12_utils_pkg.obten_parmt_authe_exter_afw (sie_12_utils_pkg.obten_utils_de_code (pva_code_utils)),
        vre_servr_ldap.adres,
        vre_servr_ldap.port
      );
    return vbo_authe;
  exception
    when no_data_found then
      ete ();
      return false;
    when others then
      ete ();
      return false;
  end authe_apex;

  function authe_dn (pva_code_utils in varchar2,
                     pva_mot_passe in varchar2)
    return boolean as
    vre_servr_ldap                          vd_i_sie_12_servr_ldap%rowtype;
    vva_parmt_authe_exter_afw               vd_i_sie_12_utils.parmt_authe_exter_afw%type;
    v_session                               dbms_ldap.session;
    v_result                                pls_integer;
  begin
    vva_parmt_authe_exter_afw :=
      sie_12_utils_pkg.obten_parmt_authe_exter_afw (sie_12_utils_pkg.obten_utils_de_code (pva_code_utils));

    if vva_parmt_authe_exter_afw is not null then
      vre_servr_ldap := obten_servr_ldap ();

      dbms_ldap.use_exception := true;

      v_session :=
        dbms_ldap.init (hostname                   => vre_servr_ldap.adres,
                        portnum                    => vre_servr_ldap.port);

      v_result :=
        dbms_ldap.simple_bind_s (ld                         => v_session,
                                 dn                         => vva_parmt_authe_exter_afw,
                                 passwd                     => pva_mot_passe);

      v_result := dbms_ldap.unbind_s (v_session);

      return true;
    else
      return false;
    end if;
  exception
    when others then
      v_result := dbms_ldap.unbind_s (v_session);
      return false;
  end authe_dn;

  function synch_utils (pva_nom in varchar2,
                        pva_prenm in varchar2,
                        pva_code in varchar2,
                        pva_courl in varchar2,
                        pva_indic_verl in varchar2 default 'N',
                        pva_indic_chang_mot_passe in varchar2 default 'O',
                        pva_indic_actif in vd_i_sie_12_utils.indic_actif%type default 'N',
                        pva_temp_dn in vd_i_sie_12_utils.parmt_authe_exter_afw%type default null,
                        pnu_domn in vd_i_sie_12_domn.seqnc%type default null)
    return vd_i_sie_12_utils.seqnc%type is
    vbo_debg                                boolean default false;
    vnu_utils                               vd_i_sie_12_utils.seqnc%type;
  begin
    vnu_utils := sie_12_utils_pkg.obten_utils_de_code (pva_code);

    if vnu_utils is not null then
      -- usager existant
      begin
        update   vd_i_sie_12_utils su
           set   su.parmt_authe_exter_afw = pva_temp_dn, su.mot_passe = null
         where   su.seqnc = vnu_utils
             and (su.parmt_authe_exter_afw <> pva_temp_dn
               or su.parmt_authe_exter_afw is null
               or su.mot_passe is not null);
      exception
        when others then
          ete ('Erreur lors de la mise à jour de l''usager ' || pva_code || '/' || pva_courl);
      end;
    else
      -- nouvel usage

      if pva_nom is null
      or pva_prenm is null
      or pva_courl is null then
        ete ('Synchronisation LDAP',
             'données obligatoires manquantes');
      else
        -- créer l'utilisateur
        begin
          vnu_utils :=
            sie_12_utils_pkg.creer_utils (pva_nom                    => pva_nom,
                                          pva_prenm                  => pva_prenm,
                                          pva_code                   => pva_code,
                                          pva_courl                  => pva_courl,
                                          pva_indic_verl             => 'N',
                                          pva_indic_chang_mot_passe  => 'N',
                                          pva_indic_actif            => 'O',
                                          pva_parmt_authe_exter_afw  => pva_temp_dn);

          --l'ajouter au domaine
          if pnu_domn is not null then
            sie_12_domn_pkg.ajout_utils (pnu_utils                  => vnu_utils,
                                         pnu_domn                   => pnu_domn,
                                         pda_debut_efect            => sysdate,
                                         pda_fin_efect              => null);
          end if;
        exception
          when others then
            vnu_utils := sie_12_utils_pkg.obten_utils_de_courl (pva_courl);

            if vnu_utils is not null then
              ete (
                   'Erreur lors de la création de l''usager '
                || pva_code
                || '/'
                || pva_courl
                || ' - un usager existe déjà pour ce courriel'
              );
            else
              ete ('Erreur lors de la création de l''usager ' || pva_code || '/' || pva_courl);
            end if;
        end;
      end if;
    end if;

    return vnu_utils;
  exception
    when others then
      ete ();
      raise;
  end synch_utils;
end sie_12_ldap_pkg;
/

Prompt Package Body SIE_12_MEMBR_STRUC_PKG;
/* Formatted on 04/12/2013 11:35:23 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_12_MEMBR_STRUC_PKG" as
  function obten_code_utils_de_seqnc (pnu_seqnc_membr_struc in number)
    return varchar2 is
    vva_code_utils                          sie_12_utils.code_utils%type;
  begin
    begin
      select   code_utils
        into   vva_code_utils
        from   vd_sie_12_utils u,
               vd_sie_12_membr_struc ms
       where   u.seqnc = ms.ref_utils and ms.seqnc = pnu_seqnc_membr_struc;
    exception
      when no_data_found then
        return null;
    end;

    return vva_code_utils;
  end;
end sie_12_membr_struc_pkg;
/

Prompt Package Body SIE_12_MENU_PKG;
/* Formatted on 04/12/2013 11:35:23 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_menu_pkg as
  function obten_item_racn (pnu_menu in number)
    return number is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_13_MENU_' || pnu_menu);
  end obten_item_racn;

  procedure defnr_item_racn (pnu_menu in number,
                             pnu_item_racn in number) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_13_MENU_' || pnu_menu,
                                     pnu_item_racn);
  end defnr_item_racn;

  function obten_menu_actif
    return number is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (sie_21_plugn_menu_pkg.kva_s_menu_actif);
  end obten_menu_actif;

  procedure defnr_menu_actif (pnu_menu in number) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (sie_21_plugn_menu_pkg.kva_s_menu_actif,
                                     pnu_menu);
  end defnr_menu_actif;
end sie_12_menu_pkg;
/

Prompt Package Body SIE_12_MOT_PASSE_PKG;
/* Formatted on 04/12/2013 11:35:23 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_12_MOT_PASSE_PKG" is
  gnu_mod_encry                  constant pls_integer
    default dbms_crypto.encrypt_aes256 + dbms_crypto.chain_cbc + dbms_crypto.pad_pkcs5 ;
  gnu_longr_cle_encry            constant pls_integer default 256 / 8;
  gra_cle_encry_base                      raw (2000)
                                            default 'D0F0F51AC7FCF834F47B6797951A8244B65809DD33ECA420D0F6446DAF9F47E8';
  gva_charc_set                  constant varchar2 (12) default 'WE8MSWIN1252';

  function encry (pra_valr in raw,
                  pra_cle in raw)
    return raw is
  begin
    return dbms_crypto.encrypt (pra_valr,
                                gnu_mod_encry,
                                substr (pra_cle,
                                        1,
                                        64)                                                                  /*pra_cle*/
                                           );
  end encry;

  function encry_mot_passe (pva_code_utils in varchar2,
                            pva_mot_passe_clair in varchar2,
                            pda_date in date)
    return raw is
    vra_cle_reel                            raw (2000);
    vva_valr_cle_reel_encry                 varchar2 (100)
                                              default    to_char (pda_date,
                                                                  'JSSSSS')
                                                      || pva_code_utils
                                                      || pva_mot_passe_clair;
  begin
    --obtenir la clé réelle d'encryption
    vra_cle_reel :=
      encry (utl_i18n.string_to_raw (vva_valr_cle_reel_encry,
                                     gva_charc_set),
             gra_cle_encry_base);
    --encrypter selon la vraie clé
    return encry (utl_i18n.string_to_raw (pva_mot_passe_clair),
                  vra_cle_reel);
  end encry_mot_passe;

  procedure defnr_mot_passe (pva_code_utils in varchar2,
                             pva_mot_passe in varchar2) is
    vva_code_utils                          sie_12_utils.code_utils%type;
    vda_date_creat                          sie_12_utils.date_creat%type;
    vra_nouv_mot_passe                      sie_12_utils.mot_passe%type;
  begin
    select       u.code_utils,
                 u.date_creat
          into   vva_code_utils,
                 vda_date_creat
          from   sie_12_utils u
         where   u.code_utils = upper (pva_code_utils)
    for update   wait 1;

    vra_nouv_mot_passe :=
      encry_mot_passe (upper (vva_code_utils),
                       pva_mot_passe,
                       vda_date_creat);

    update   sie_12_utils u
       set   u.mot_passe = vra_nouv_mot_passe
     where   u.code_utils = upper (pva_code_utils);
  end defnr_mot_passe;

  procedure defnr_mot_passe (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                             pva_mot_passe in varchar2) is
  begin
    defnr_mot_passe (sie_12_utils_pkg.obten_code_utils (pnu_utils),
                     pva_mot_passe);
  end;

  function valdr_mot_passe (pva_code_utils in varchar2,
                            pva_mot_passe in varchar2)
    return boolean is
    vra_mot_passe                           sie_12_utils.mot_passe%type;
    rec_utils                               vd_i_sie_12_utils%rowtype;
    vbo_valdt                               boolean default false;
  begin
    if pva_code_utils is not null and pva_mot_passe is not null then
      rec_utils := sie_12_utils_pkg.obten_utils (sie_12_utils_pkg.obten_utils_de_code (pva_code_utils));

      vra_mot_passe :=
        encry_mot_passe (upper (pva_code_utils),
                         pva_mot_passe,
                         rec_utils.date_creat);

      if rec_utils.mot_passe = vra_mot_passe then
        vbo_valdt := true;
      end if;
    end if;

    return vbo_valdt;
  exception
    when others then
      return false;
  end valdr_mot_passe;

  function genr_mot_passe
    return varchar2 is
    vva_mot_passe                           varchar2 (10);
    vnu_compt                               pls_integer;
    invalid_password                        exception;

    function obten_mot_passe
      return varchar2 is
    begin
      return dbms_random.string ('P',
                                 10);
    end;

    /*
     Code qui provient de DBMS_RANDOM.STRING
    */
    function obten_mot_passe2
      return varchar2
      parallel_enable is
      len                                     number default 10;
      rng                                     number default 67;
      n                                       binary_integer;
      ccs                                     varchar2 (128)
        default '!#$%*' || '0123456789' || 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' || 'abcdefghijklmnopqrstuvwxyz';

      xstr                                    varchar2 (4000) := null;
    begin
      for i in 1 .. least (len, 4000)
      loop
        /* Get random integer within specified range */
        n      := trunc (rng * dbms_random.value) + 1;
        /* Append character to string  */
        xstr   := xstr || substr (ccs, n, 1);
      end loop;

      return xstr;
    end;
  begin
    while not valdr_niv_secrt_mot_passe (vva_mot_passe) loop
      vva_mot_passe := obten_mot_passe2;
      vnu_compt := vnu_compt + 1;

      if vnu_compt = 50 then
        raise invalid_password;
      end if;
    end loop;

    return vva_mot_passe;
  exception
    when invalid_password then
      raise;
  end genr_mot_passe;

  function valdr_secrt_mot_passe (pva_mot_passe in varchar2,
                                  pva_nom in varchar2 default null,
                                  pva_prenm in varchar2 default null)
    return boolean is
    vbo_vald                                boolean default false;
    vnu_nombr_carct_mot_passe               number default length (pva_mot_passe);
    vnu_nombr_carct_prenm_nom               number default length (pva_prenm || ' ' || pva_nom);
    vva_mot_passe                           varchar2 (50) default lower (pva_mot_passe);
    vva_prenm_nom                           varchar2 (50) default lower (pva_prenm || ' ' || pva_nom);
    vnu_ascii                               number (3);
    vnu_vald_chifr                          number (1) default 0;
    vnu_vald_carct_majsc                    number (1) default 0;
    vnu_vald_carct_minsc                    number (1) default 0;
    vnu_vald_carct_symbl                    number (1) default 0;
    vbo_vald_contn_nom_prenm                boolean default true;
  begin
    /*
   Les règles appliquées concernant les mots de passe sont les suivantes :
       •    Ne pas contenir des parties du nom complet de l’utilisateur comptant plus de deux caractères successifs;
       •    Comporter au moins sept caractères;
       •    Contenir des caractères provenant de trois des quatre catégories suivantes :
           o    Caractères majuscules anglais (A à Z)
           o    Caractères minuscules anglais (a à z)
           o    Chiffres en base 10 (0 à 9)
           o    Caractères non alphabétiques (par exemple, !, $, #, %)
   */
    if vnu_nombr_carct_mot_passe >= 7 then
      for i in 1 .. vnu_nombr_carct_mot_passe loop
        vnu_ascii :=
          ascii (substr (pva_mot_passe,
                         i,
                         1));

        if vnu_vald_carct_symbl = 0 and vnu_ascii between 33 and 47 then
          vnu_vald_carct_symbl := 1;
        elsif vnu_vald_chifr = 0 and vnu_ascii between 48 and 57 then
          vnu_vald_chifr := 1;
        elsif vnu_vald_carct_majsc = 0 and vnu_ascii between 65 and 90 then
          vnu_vald_carct_majsc := 1;
        elsif vnu_vald_carct_minsc = 0 and vnu_ascii between 97 and 122 then
          vnu_vald_carct_minsc := 1;
        end if;
      end loop;

      if pva_nom is not null
      or pva_prenm is not null then
        for i in 1 .. vnu_nombr_carct_prenm_nom - 2 loop
          if instr (vva_mot_passe,
                    substr (vva_prenm_nom,
                            i,
                            3)) > 0 then
            vbo_vald_contn_nom_prenm := false;
            exit;
          end if;
        end loop;
      end if;
    end if;

    vbo_vald :=
      (vnu_vald_carct_symbl + vnu_vald_chifr + vnu_vald_carct_majsc + vnu_vald_carct_minsc) >= 3
  and vbo_vald_contn_nom_prenm;

    return vbo_vald;
  end valdr_secrt_mot_passe;

  function valdr_niv_secrt_mot_passe (pva_mot_passe in varchar2,
                                      pva_nom in varchar2 default null,
                                      pva_prenm in varchar2 default null,
                                      pnu_domn in vd_i_sie_12_domn.seqnc%type default null)
    return boolean is
    vbo_vald                                boolean default false;

    rec_domn                                vd_i_sie_12_domn%rowtype;

    function valdt_procd_authe_exter_afw (pva_nom_procd in varchar2,
                                          pva_mot_passe in varchar2,
                                          pva_nom in varchar2,
                                          pva_prenm in varchar2)
      return boolean is
      vbo_valdt_procd                         boolean default false;
      vva_progr_a_lancr                       varchar2 (4000)
        default    'begin '
                || '  sie_12_mot_passe_pkg.gbo_valdt_procd_niv_secrt := %PROCD_PERSN%(:p1, :p2, :p3); '
                || '  exception when others then ete();'
                || 'end;';
    begin
      vva_progr_a_lancr :=
        replace (vva_progr_a_lancr,
                 '%PROCD_PERSN%',
                 pva_nom_procd);

      execute immediate vva_progr_a_lancr
        using pva_mot_passe,
              pva_nom,
              pva_prenm;

      vbo_valdt_procd := gbo_valdt_procd_niv_secrt;

      gbo_valdt_procd_niv_secrt := false;

      return vbo_valdt_procd;
    exception
      when others then
        return false;
    end valdt_procd_authe_exter_afw;

    function valdt_niv_secrt (pva_mot_passe in varchar2,
                              pva_nom in varchar2,
                              pva_prenm in varchar2,
                              pre_domn in vd_i_sie_12_domn%rowtype)
      return boolean is
      vbo_vald                                boolean default false;
    begin
      --TODO::CARLO
      vbo_vald := true;
      return vbo_vald;
    end valdt_niv_secrt;
  begin
    rec_domn := sie_12_domn_pkg.obten_domn (pnu_domn);

    -- Procédure externe pour valider le niveau de sécurité du mot de passe
    if rec_domn.procd_vald_niv_secrt_mot_passe is not null then
      vbo_vald :=
        valdt_procd_authe_exter_afw (rec_domn.procd_vald_niv_secrt_mot_passe,
                                     pva_mot_passe,
                                     pva_nom,
                                     pva_prenm);
    else
      vbo_vald :=
        valdt_niv_secrt (pva_mot_passe,
                         pva_nom,
                         pva_prenm,
                         rec_domn);
    end if;

    return vbo_vald;
  end valdr_niv_secrt_mot_passe;

  procedure reint_mot_passe_par_utils (pnu_utils in number,
                                       pva_mot_passe_actue in varchar2,
                                       pva_mot_passe in varchar2,
                                       pva_confr_mot_passe in varchar2) is
  begin
    if sie_12_mot_passe_pkg.valdr_mot_passe (sie_12_utils_pkg.obten_code_utils (pnu_utils),
                                             pva_mot_passe_actue) then
      sie_12_authe_apex_pkg.reint_mot_passe (pnu_utils,
                                             pva_mot_passe,
                                             pva_confr_mot_passe,
                                             sie_12_domn_pkg.obten_domn_sesn);
    else
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000030',
                                               pva_code_prodt             => 'AFW');
    end if;
  end reint_mot_passe_par_utils;
end sie_12_mot_passe_pkg;
/

Prompt Package Body SIE_12_REQT_INTER_UTILS_PKG;
/* Formatted on 04/12/2013 11:35:23 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_reqt_inter_utils_pkg is
  --kva_prefx_scpi constant varchar2 (30) default 'REQT_';
  knu_duree_inter_vald           constant number default 1;

  function genr_ident
    return raw is
  begin
    return sys_guid ();
  end genr_ident;

  function obten_reqt_inter_utils (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils%rowtype is
    rec_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils%rowtype;
  begin
    select   riu.*
      into   rec_reqt_inter_utils
      from   vd_i_sie_12_reqt_inter_utils riu
     where   riu.seqnc = pnu_reqt_inter_utils;

    return rec_reqt_inter_utils;
  exception
    when no_data_found then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000034',
                                               pva_code_prodt             => 'AFW');
  end obten_reqt_inter_utils;

  function obten_reqt_inter_utils_ident (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type)
    return vd_i_sie_12_reqt_inter_utils%rowtype is
    rec_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils%rowtype;
  begin
    select   riu.*
      into   rec_reqt_inter_utils
      from   vd_i_sie_12_reqt_inter_utils riu
     where   riu.ident = pva_ident;

    return rec_reqt_inter_utils;
  exception
    when no_data_found then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000034',
                                               pva_code_prodt             => 'AFW');
  end obten_reqt_inter_utils_ident;

  function obten_ident (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return varchar2 is
    vra_ident                               vd_i_sie_12_reqt_inter_utils.ident%type;
  begin
    select   ident
      into   vra_ident
      from   vd_i_sie_12_reqt_inter_utils riu
     where   riu.seqnc = pnu_reqt_inter_utils;

    return to_char (vra_ident);
  end obten_ident;

  function obten_url_inter (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return varchar2 is
    vva_base_url                            varchar2 (1000);
    rec_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils%rowtype;
    vnu_aplic_authe                         vd_i_sie_11_aplic.seqnc%type;
    vnu_url_aplic_cible                     number;
    vnu_url_page_cible                      number;
  begin
    rec_reqt_inter_utils := obten_reqt_inter_utils (pnu_reqt_inter_utils);

    begin
      vva_base_url :=
        sie_11_prodt_pkg.obten_base_url (
          sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic_numr_apex (rec_reqt_inter_utils.numr_aplic_apex))
        );
    exception
      when others then
        null;
    end;

    vnu_aplic_authe :=
      sie_11_aplic_pkg.obten_aplic_authe (
        sie_11_aplic_pkg.obten_aplic_numr_apex (rec_reqt_inter_utils.numr_aplic_apex)
      );

    vnu_url_aplic_cible := sie_11_aplic_pkg.obten_numr_apex_aplic (vnu_aplic_authe);
    vnu_url_page_cible := nvl (sie_11_aplic_pkg.obten_numr_apex_page_conxn (vnu_aplic_authe), 101);
    /*
        return vva_base_url
               || sie_08_url_pkg.genr_url (
                    vnu_url_aplic_cible,
                    vnu_url_page_cible,
                    'SSPI',
                    rec_reqt_inter_utils.seqnc,
                    'SCPI',
                    kva_prefx_scpi
                    || sie_14_domn_valr_pkg.obten_code (
                         rec_reqt_inter_utils.ref_dv_type_reqt_inter),
                    'SAPI',
                    to_char (rec_reqt_inter_utils.ident),
                    'SAPC',
                    sie_14_domn_valr_pkg.obten_code (
                      rec_reqt_inter_utils.ref_dv_type_reqt_inter),
                    pva_indic_afich_valr_sesn  => 'N');
              */

    return    vva_base_url
           || sie_08_url_pkg.genr_url (vnu_url_aplic_cible,
                                       vnu_url_page_cible,
                                       'SAPC',
                                       to_char (rec_reqt_inter_utils.ident),
                                       pva_indic_afich_valr_sesn  => 'N');
  end obten_url_inter;

  function obten_url_inter_formt_html (pnu_reqt_inter_utils in vd_i_sie_12_reqt_inter_utils.seqnc%type)
    return varchar2 is
    rec_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils%rowtype;
    vva_type_reqt_inter_code                varchar2 (30);
  begin
    rec_reqt_inter_utils := obten_reqt_inter_utils (pnu_reqt_inter_utils);

    vva_type_reqt_inter_code := sie_14_domn_valr_pkg.obten_code (rec_reqt_inter_utils.ref_dv_type_reqt_inter);

    return    sie_15_htp_pkg.ouvri_bals ('a',
                                         'href',
                                         obten_url_inter (pnu_reqt_inter_utils))
           || case vva_type_reqt_inter_code
                when 'REINT_MOT_PASSE' then
                  sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SEC.000016',
                                                             'AFW')
                when 'ACTIV_COMPT_UTILS' then
                  sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SEC.000021',
                                                             'AFW')
                else
                  'Cliquer ici'
              end
           || sie_15_htp_pkg.fermr_bals ('a');
  end obten_url_inter_formt_html;

  function obten_type_reqt_inter_code (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type)
    return varchar2 is
    rec_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils%rowtype;
  begin
    rec_reqt_inter_utils := obten_reqt_inter_utils_ident (pva_ident);

    return sie_14_domn_valr_pkg.obten_code (rec_reqt_inter_utils.ref_dv_type_reqt_inter);
  end obten_type_reqt_inter_code;

  function obten_utils_reqt_inter_utils (pva_ident vd_i_sie_12_reqt_inter_utils.ident%type)
    return vd_i_sie_12_reqt_inter_utils.ref_utils%type is
    vnu_utils                               vd_i_sie_12_reqt_inter_utils.ref_utils%type;
  begin
    select   ref_utils
      into   vnu_utils
      from   vd_i_sie_12_reqt_inter_utils riu
     where   riu.ident = pva_ident
         and riu.date_debut_efect <= sysdate
         and (riu.date_fin_efect is null
           or riu.date_fin_efect > sysdate)
         and riu.date_trait is null;

    return vnu_utils;
  exception
    when no_data_found then
      --TODO::CARLO
      -- Gérer différent message selon le type de requete
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000017',
                                               pva_code_prodt             => 'AFW');
  end obten_utils_reqt_inter_utils;

  function reqt_creat_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                   pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                   pnu_numr_aplic_apex_cible in number,
                                   pnu_numr_page_apex_cible in number,
                                   pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type is
    vnu_duree_inter_vald                    number default knu_duree_inter_vald;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    vva_ident                               vd_i_sie_12_reqt_inter_utils.ident%type;
  begin
    vva_ident := genr_ident ();

    insert
         into   vd_i_sie_12_reqt_inter_utils (ident,
                                              ref_utils,
                                              ref_dv_type_reqt_inter,
                                              date_debut_efect,
                                              date_fin_efect,
                                              ref_domn,
                                              ref_prodt,
                                              numr_aplic_apex,
                                              numr_page_apex)
       values   (vva_ident,
                 pnu_utils,
                 sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REQT_INTER',
                                                   'CREAT_COMPT_UTILS',
                                                   'AFW'),
                 sysdate,
                 sysdate + vnu_duree_inter_vald,
                 pnu_domn,
                 pnu_prodt_evenm_notfb,
                 pnu_numr_aplic_apex_cible,
                 pnu_numr_page_apex_cible)
    returning   seqnc
         into   vnu_reqt_inter_utils;

    return vnu_reqt_inter_utils;
  end reqt_creat_compt_utils;

  function reqt_activ_compt_utils (
    pnu_utils in vd_i_sie_12_utils.seqnc%type,
    pnu_domn in vd_i_sie_12_domn.seqnc%type,
    pnu_numr_aplic_apex_cible in number,
    pnu_numr_page_apex_cible in number,
    pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type,
    pva_procd_persn in vd_i_sie_12_reqt_inter_utils.procd_persn_url_apres_authe%type default null
  )
    return vd_i_sie_12_reqt_inter_utils.seqnc%type is
    vnu_duree_inter_vald                    number default knu_duree_inter_vald;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    vva_ident                               vd_i_sie_12_reqt_inter_utils.ident%type;
  begin
    vva_ident := genr_ident ();

    insert
         into   vd_i_sie_12_reqt_inter_utils (ident,
                                              ref_utils,
                                              ref_dv_type_reqt_inter,
                                              date_debut_efect,
                                              date_fin_efect,
                                              ref_domn,
                                              ref_prodt,
                                              numr_aplic_apex,
                                              numr_page_apex,
                                              procd_persn_url_apres_authe)
       values   (vva_ident,
                 pnu_utils,
                 sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REQT_INTER',
                                                   'ACTIV_COMPT_UTILS',
                                                   'AFW'),
                 sysdate,
                 sysdate + vnu_duree_inter_vald,
                 pnu_domn,
                 pnu_prodt_evenm_notfb,
                 pnu_numr_aplic_apex_cible,
                 pnu_numr_page_apex_cible,
                 pva_procd_persn)
    returning   seqnc
         into   vnu_reqt_inter_utils;

    return vnu_reqt_inter_utils;
  exception
    when others then
      raise;
  end reqt_activ_compt_utils;

  function reqt_reint_mot_passe (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                 pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                 pnu_numr_aplic_apex_cible in number,
                                 pnu_numr_page_apex_cible in number,
                                 pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type is
    vnu_duree_inter_vald                    number default knu_duree_inter_vald;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    vva_ident                               vd_i_sie_12_reqt_inter_utils.ident%type;
  begin
    vva_ident := genr_ident ();

    insert
         into   vd_i_sie_12_reqt_inter_utils (ident,
                                              ref_utils,
                                              ref_dv_type_reqt_inter,
                                              date_debut_efect,
                                              date_fin_efect,
                                              ref_domn,
                                              ref_prodt,
                                              numr_aplic_apex,
                                              numr_page_apex)
       values   (vva_ident,
                 pnu_utils,
                 sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REQT_INTER',
                                                   'REINT_MOT_PASSE',
                                                   'AFW'),
                 sysdate,
                 sysdate + vnu_duree_inter_vald,
                 pnu_domn,
                 pnu_prodt_evenm_notfb,
                 pnu_numr_aplic_apex_cible,
                 pnu_numr_page_apex_cible)
    returning   seqnc
         into   vnu_reqt_inter_utils;

    return vnu_reqt_inter_utils;
  end reqt_reint_mot_passe;

  function reqt_reint_mot_passe_exter (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                       pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                       pnu_numr_aplic_apex_cible in number,
                                       pnu_numr_page_apex_cible in number,
                                       pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type is
    vnu_duree_inter_vald                    number default knu_duree_inter_vald;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    vva_ident                               vd_i_sie_12_reqt_inter_utils.ident%type;
  begin
    vva_ident := genr_ident ();

    insert
         into   vd_i_sie_12_reqt_inter_utils (ident,
                                              ref_utils,
                                              ref_dv_type_reqt_inter,
                                              date_debut_efect,
                                              date_fin_efect,
                                              ref_domn,
                                              ref_prodt,
                                              numr_aplic_apex,
                                              numr_page_apex)
       values   (vva_ident,
                 pnu_utils,
                 sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REQT_INTER',
                                                   'REINT_MOT_PASSE_EXTER',
                                                   'AFW'),
                 sysdate,
                 sysdate + vnu_duree_inter_vald,
                 pnu_domn,
                 pnu_prodt_evenm_notfb,
                 pnu_numr_aplic_apex_cible,
                 pnu_numr_page_apex_cible)
    returning   seqnc
         into   vnu_reqt_inter_utils;

    return vnu_reqt_inter_utils;
  end reqt_reint_mot_passe_exter;

  function reqt_creat_initl_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                         pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                         pnu_numr_aplic_apex_cible in number,
                                         pnu_numr_page_apex_cible in number,
                                         pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type is
    --TODO::CARLO
    -- 30 jours?
    vnu_duree_inter_vald                    number default knu_duree_inter_vald;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    vva_ident                               vd_i_sie_12_reqt_inter_utils.ident%type;
  begin
    vva_ident := genr_ident ();

    insert
         into   vd_i_sie_12_reqt_inter_utils (ident,
                                              ref_utils,
                                              ref_dv_type_reqt_inter,
                                              date_debut_efect,
                                              date_fin_efect,
                                              ref_domn,
                                              ref_prodt,
                                              numr_aplic_apex,
                                              numr_page_apex)
       values   (vva_ident,
                 pnu_utils,
                 sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REQT_INTER',
                                                   'INITL_MOT_PASSE',
                                                   'SAFP'),
                 sysdate,
                 sysdate + vnu_duree_inter_vald,
                 pnu_domn,
                 pnu_prodt_evenm_notfb,
                 pnu_numr_aplic_apex_cible,
                 pnu_numr_page_apex_cible)
    returning   seqnc
         into   vnu_reqt_inter_utils;
  end reqt_creat_initl_compt_utils;

  function reqt_obten_code_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                  pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                  pnu_numr_aplic_apex_cible in number,
                                  pnu_numr_page_apex_cible in number,
                                  pnu_prodt_evenm_notfb in vd_i_sie_11_prodt.seqnc%type)
    return vd_i_sie_12_reqt_inter_utils.seqnc%type is
    vnu_duree_inter_vald                    number default knu_duree_inter_vald;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    vra_ident                               vd_i_sie_12_reqt_inter_utils.ident%type;
  begin
    vra_ident := genr_ident;

    insert
         into   vd_i_sie_12_reqt_inter_utils (ident,
                                              ref_utils,
                                              ref_dv_type_reqt_inter,
                                              date_debut_efect,
                                              date_fin_efect,
                                              ref_domn,
                                              ref_prodt,
                                              numr_aplic_apex,
                                              numr_page_apex)
       values   (vra_ident,
                 pnu_utils,
                 sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REQT_INTER',
                                                   'OBTEN_CODE_UTILS',
                                                   'AFW'),
                 sysdate,
                 sysdate + vnu_duree_inter_vald,
                 pnu_domn,
                 pnu_prodt_evenm_notfb,
                 pnu_numr_aplic_apex_cible,
                 pnu_numr_page_apex_cible)
    returning   seqnc
         into   vnu_reqt_inter_utils;

    return vnu_reqt_inter_utils;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ (sqlerrm,
                                    'reqt_obten_code_utils');
      raise;
  end reqt_obten_code_utils;

  procedure demnd_reint_mot_passe_oubli (pva_code_utils in vd_i_sie_12_utils.code_utils%type,
                                         pva_courl in vd_i_sie_12_utils.courl%type,
                                         pva_code_domn in vd_i_sie_12_domn.code%type,
                                         pnu_numr_aplic_apex_cible in number,
                                         pnu_numr_page_apex_cible in number,
                                         pbo_indic_verl boolean default false) is
    vnu_utils_de_code                       vd_i_sie_12_utils.seqnc%type;
    vnu_utils_de_courl                      vd_i_sie_12_utils.seqnc%type;
    vnu_domn                                vd_i_sie_12_domn.seqnc%type;
    vnu_prodt_evenm_notfb                   vd_i_sie_11_prodt.seqnc%type;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    rec_utils                               vd_i_sie_12_utils%rowtype;
  begin
    vnu_utils_de_code := sie_12_utils_pkg.obten_utils_de_code (pva_code_utils);
    vnu_utils_de_courl := sie_12_utils_pkg.obten_utils_de_courl (pva_courl);

    vnu_domn := sie_12_domn_pkg.obten_seqnc_domn (pva_code_domn);
    vnu_prodt_evenm_notfb := sie_11_prodt_pkg.obten_prodt ('AFW');

    if vnu_domn is null
    or vnu_utils_de_code is null
    or vnu_utils_de_courl is null
    or vnu_utils_de_code <> vnu_utils_de_courl then
      -- Afficher un message disant que le compte ne peut être identifié
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000013',
                                               pva_code_prodt             => 'AFW');
    else
      rec_utils := sie_12_utils_pkg.obten_utils (vnu_utils_de_code);

      if rec_utils.date_expir is not null and rec_utils.date_expir <= sysdate then
        -- Afficher un message disant que le compte est expiré
        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000005',
                                                 pva_code_prodt             => 'AFW');
      elsif rec_utils.indic_verl = 'O' then
        -- Afficher un message disant que le compte est vérouillé
        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000002',
                                                 pva_code_prodt             => 'AFW');
      else
        if sie_12_domn_pkg.obten_procd_authe_exter_afw (vnu_domn) is not null and rec_utils.mot_passe is null then
          -- Authentification externe (ex.: LDAP)
          vnu_reqt_inter_utils :=
            reqt_reint_mot_passe_exter (vnu_utils_de_code,
                                        vnu_domn,
                                        pnu_numr_aplic_apex_cible,
                                        pnu_numr_page_apex_cible,
                                        vnu_prodt_evenm_notfb);

          sie_01_evenm_notfb_cu_pkg.propg_evenm_notfb ('REINT_MOT_PASSE_EXTER',
                                                       vnu_reqt_inter_utils,
                                                       'AFW',
                                                       pva_code_domn);
        else
          -- Authentification AFW
          vnu_reqt_inter_utils :=
            reqt_reint_mot_passe (vnu_utils_de_code,
                                  vnu_domn,
                                  pnu_numr_aplic_apex_cible,
                                  pnu_numr_page_apex_cible,
                                  vnu_prodt_evenm_notfb);

          sie_01_evenm_notfb_cu_pkg.propg_evenm_notfb ('REINT_MOT_PASSE',
                                                       vnu_reqt_inter_utils,
                                                       'AFW',
                                                       pva_code_domn);
        end if;

        -- Vérouiller le compte utilisateur
        if pbo_indic_verl then
          sie_12_utils_pkg.verlr_utils (vnu_utils_de_code);
        end if;

        -- Afficher un message disant qu'un courriel sera envoyé
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SEC.000014',
                                                        pva_code_prodt             => 'AFW');
      end if;
    end if;
  end demnd_reint_mot_passe_oubli;

  procedure demnd_code_utils_oubli (pva_courl in vd_i_sie_12_utils.courl%type,
                                    pva_code_domn in vd_i_sie_12_domn.code%type,
                                    pnu_numr_aplic_apex_cible in number,
                                    pnu_numr_page_apex_cible in number,
                                    pbo_indic_verl boolean default false) is
    vnu_utils_de_courl                      vd_i_sie_12_utils.seqnc%type;
    vnu_domn                                vd_i_sie_12_domn.seqnc%type;
    vnu_prodt_evenm_notfb                   vd_i_sie_11_prodt.seqnc%type;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
    rec_utils                               vd_i_sie_12_utils%rowtype;
  begin
    vnu_utils_de_courl := sie_12_utils_pkg.obten_utils_de_courl (pva_courl);
    vnu_domn := sie_12_domn_pkg.obten_seqnc_domn (pva_code_domn);
    vnu_prodt_evenm_notfb := sie_11_prodt_pkg.obten_prodt ('AFW');

    if vnu_prodt_evenm_notfb is null
    or vnu_domn is null
    or vnu_utils_de_courl is null then
      -- Afficher ERREUR: le compte ne peut être identifié
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000013',
                                               pva_code_prodt             => 'AFW');
    else
      rec_utils := sie_12_utils_pkg.obten_utils (vnu_utils_de_courl);

      if rec_utils.date_expir is not null and rec_utils.date_expir <= sysdate then
        -- Afficher ERREUR: le compte est expiré
        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000005',
                                                 pva_code_prodt             => 'AFW');
      elsif rec_utils.indic_verl = 'O' then
        -- Afficher ERREUR:  le compte est vérouillé
        sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000002',
                                                 pva_code_prodt             => 'AFW');
      else
        -- Executer la requête d'intervention
        vnu_reqt_inter_utils :=
          reqt_obten_code_utils (vnu_utils_de_courl,
                                 vnu_domn,
                                 pnu_numr_aplic_apex_cible,
                                 pnu_numr_page_apex_cible,
                                 vnu_prodt_evenm_notfb);


        sie_01_evenm_notfb_cu_pkg.propg_evenm_notfb ('OBTEN_CODE_UTILS',
                                                     vnu_reqt_inter_utils,
                                                     'AFW',
                                                     pva_code_domn);

        -- On peut vérouiller le compte
        if pbo_indic_verl then
          -- Vérouiller le compte utilisateur
          sie_12_utils_pkg.verlr_utils (vnu_utils_de_courl);
        end if;

        -- Afficher : SUCCES MESSAGE
        sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SEC.000014',
                                                        pva_code_prodt             => 'AFW');
      end if;
    end if;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ (sqlerrm,
                                    'demnd_code_utils_oubli');
      raise;
  end demnd_code_utils_oubli;

  procedure demnd_activ_compt_utils (
    pnu_utils in vd_i_sie_12_utils.seqnc%type,
    pnu_domn in vd_i_sie_12_domn.seqnc%type,
    pnu_numr_aplic_apex_cible in number,
    pnu_numr_page_apex_cible in number,
    pbo_indic_desct boolean default false,
    pva_procd_persn in vd_i_sie_12_reqt_inter_utils.procd_persn_url_apres_authe%type default null
  ) is
    vnu_prodt_evenm_notfb                   vd_i_sie_11_prodt.seqnc%type;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
  begin
    vnu_prodt_evenm_notfb := sie_11_prodt_pkg.obten_prodt ('AFW');

    if pnu_domn is null
    or pnu_utils is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000013',
                                               pva_code_prodt             => 'AFW');
    else
      vnu_reqt_inter_utils :=
        reqt_activ_compt_utils (pnu_utils,
                                pnu_domn,
                                pnu_numr_aplic_apex_cible,
                                pnu_numr_page_apex_cible,
                                vnu_prodt_evenm_notfb,
                                pva_procd_persn);

      sie_01_evenm_notfb_cu_pkg.propg_evenm_notfb ('ACTIV_COMPT_UTILS',
                                                   vnu_reqt_inter_utils,
                                                   'AFW',
                                                   sie_12_domn_pkg.obten_code_domn (pnu_domn));

      if pbo_indic_desct then
        sie_12_utils_pkg.desct_utils (pnu_utils);
      end if;
    end if;
  end demnd_activ_compt_utils;

  procedure infor_creat_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                     pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                     pnu_numr_aplic_apex_cible in number,
                                     pnu_numr_page_apex_cible in number,
                                     pbo_indic_activ_utils boolean default true) is
    vnu_prodt_evenm_notfb                   vd_i_sie_11_prodt.seqnc%type;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
  begin
    vnu_prodt_evenm_notfb := sie_11_prodt_pkg.obten_prodt ('AFW');

    if pnu_domn is null
    or pnu_utils is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000013',
                                               pva_code_prodt             => 'AFW');
    else
      vnu_reqt_inter_utils :=
        reqt_creat_compt_utils (pnu_utils,
                                pnu_domn,
                                pnu_numr_aplic_apex_cible,
                                pnu_numr_page_apex_cible,
                                vnu_prodt_evenm_notfb);

      sie_01_evenm_notfb_cu_pkg.propg_evenm_notfb ('CREAT_COMPT_UTILS',
                                                   vnu_reqt_inter_utils,
                                                   'AFW',
                                                   sie_12_domn_pkg.obten_code_domn (pnu_domn));

      if pbo_indic_activ_utils then
        sie_12_utils_pkg.activ_utils (pnu_utils);
      end if;
    end if;
  end infor_creat_compt_utils;

  procedure infor_creat_initl_compt_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                           pnu_domn in vd_i_sie_12_domn.seqnc%type,
                                           pnu_numr_aplic_apex_cible in number,
                                           pnu_numr_page_apex_cible in number,
                                           pbo_indic_activ_utils boolean default true) is
    vnu_prodt_evenm_notfb                   vd_i_sie_11_prodt.seqnc%type;
    vnu_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils.seqnc%type;
  begin
    vnu_prodt_evenm_notfb := sie_11_prodt_pkg.obten_prodt ('AFW');

    if pnu_domn is null
    or pnu_utils is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SEC.000013',
                                               pva_code_prodt             => 'AFW');
    else
      vnu_reqt_inter_utils :=
        reqt_creat_compt_utils (pnu_utils,
                                pnu_domn,
                                pnu_numr_aplic_apex_cible,
                                pnu_numr_page_apex_cible,
                                vnu_prodt_evenm_notfb);

      sie_01_evenm_notfb_cu_pkg.propg_evenm_notfb ('CREAT_INITL_COMPT_UTILS',
                                                   vnu_reqt_inter_utils,
                                                   'AFW',
                                                   sie_12_domn_pkg.obten_code_domn (pnu_domn));

      if pbo_indic_activ_utils then
        sie_12_utils_pkg.activ_utils (pnu_utils);
      end if;
    end if;
  end infor_creat_initl_compt_utils;

  procedure trait_reqt_inter_utils (pva_ident vd_i_sie_12_reqt_inter_utils.ident%type) is
  begin
    update   vd_i_sie_12_reqt_inter_utils riu
       set   riu.date_trait = sysdate
     where   riu.ident = pva_ident
         and riu.date_debut_efect <= sysdate
         and (riu.date_fin_efect is null
           or riu.date_fin_efect > sysdate)
         and riu.date_trait is null;
  end trait_reqt_inter_utils;

  procedure defnr_aplic_authe_redrc_cible (pva_ident vd_i_sie_12_reqt_inter_utils.ident%type) is
    vnu_numr_aplic_apex                     vd_i_sie_12_reqt_inter_utils.numr_aplic_apex%type;
    vnu_numr_page_apex                      vd_i_sie_12_reqt_inter_utils.numr_page_apex%type;
    vva_procd_persn                         vd_i_sie_12_reqt_inter_utils.procd_persn_url_apres_authe%type;
  begin
    select   numr_aplic_apex,
             numr_page_apex,
             procd_persn_url_apres_authe
      into   vnu_numr_aplic_apex,
             vnu_numr_page_apex,
             vva_procd_persn
      from   vd_i_sie_12_reqt_inter_utils riu
     where   riu.ident = pva_ident;

    sie_12_authe_apex_pkg.defnr_authe_redrc_cible (vnu_numr_aplic_apex,
                                                   vnu_numr_page_apex);

    if vva_procd_persn is not null then
      sie_12_authe_apex_pkg.defnr_procd_persn (vva_procd_persn);
    end if;
  end defnr_aplic_authe_redrc_cible;

  procedure trait_reqt_activ_compt_utils (pva_ident vd_i_sie_12_reqt_inter_utils.ident%type) is
    vnu_utils                               vd_i_sie_12_reqt_inter_utils.ref_utils%type;
  begin
    vnu_utils := obten_utils_reqt_inter_utils (pva_ident);

    sie_12_authe_apex_pkg.activ_utils (vnu_utils);

    trait_reqt_inter_utils (pva_ident);
  end trait_reqt_activ_compt_utils;

  procedure trait_reqt_reint_mot_passe (pva_ident in vd_i_sie_12_reqt_inter_utils.ident%type,
                                        pva_mot_passe in varchar2,
                                        pva_confr_mot_passe in varchar2) is
    vnu_utils                               vd_i_sie_12_reqt_inter_utils.ref_utils%type;
    rec_reqt_inter_utils                    vd_i_sie_12_reqt_inter_utils%rowtype;
  begin
    vnu_utils := obten_utils_reqt_inter_utils (pva_ident);

    rec_reqt_inter_utils := obten_reqt_inter_utils_ident (pva_ident);

    sie_12_authe_apex_pkg.reint_mot_passe (vnu_utils,
                                           pva_mot_passe,
                                           pva_confr_mot_passe,
                                           rec_reqt_inter_utils.ref_domn);

    trait_reqt_inter_utils (pva_ident);
  end trait_reqt_reint_mot_passe;
end sie_12_reqt_inter_utils_pkg;
/

Prompt Package Body SIE_12_SECRT_PKG;
/* Formatted on 04/12/2013 11:35:24 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_12_SECRT_PKG" as
  gbo_super_utils                         boolean default null;
  gbo_admin_prodt                         boolean default null;
  gva_code_admin                          varchar2 (23);
  gbo_code_admin_selct                    boolean default false;
  gva_nom_item                            varchar2 (30) default null;
  gva_opert_en_cours_verfc                varchar2 (30);

  type typ_rec_droit is record
  (
    indic_acces                             varchar2 (1),
    indic_creat                             varchar2 (1),
    indic_modfc                             varchar2 (1),
    indic_suprs                             varchar2 (1),
    indic_utils_creat_seulm                 varchar2 (1),
    indic_struc_group_creat_seulm           varchar2 (1)
  );

  function defnr_nom_item (pva_nom_item in varchar2)
    return boolean is
  begin
    gva_nom_item := pva_nom_item;
    return true;
  end defnr_nom_item;

  function obten_nom_item_courn
    return varchar2 is
  begin
    return gva_nom_item;
  end obten_nom_item_courn;

  function verif_presn_super_utils
    return boolean is
  begin
    if gbo_super_utils is null then
      gbo_super_utils :=
        verfr_presn_utils_group ('SUPER_UTILS',
                                 true);
    end if;

    return gbo_super_utils;
  end verif_presn_super_utils;

  function obten_group_admin_sesn
    return varchar2 is
  begin
    if not gbo_code_admin_selct then
      gbo_code_admin_selct := true;

      select   gu.code
        into   gva_code_admin
        from   vd_sie_11_prodt p,
               vd_sie_12_group_utils gu
       where   p.seqnc = sie_11_prodt_pkg.obten_prodt_sesn () and p.ref_group_utils_admin = gu.seqnc;
    end if;

    return gva_code_admin;
  exception
    when no_data_found then
      return null;
  end obten_group_admin_sesn;

  function verif_presn_group_admin (pva_group in varchar2)
    return boolean is
    vva_ignor                               varchar2 (1);
  begin
    if pva_group is null then
      if gbo_admin_prodt is null then
        gbo_admin_prodt := verfr_presn_utils_group (obten_group_admin_sesn ());
      end if;

      return gbo_admin_prodt;
    else
      begin
        select   indic_ignor_group_admin
          into   vva_ignor
          from   vd_sie_12_group_utils gu
         where   gu.code = pva_group and gu.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn ();

        if vva_ignor = 'O' then
          return false;
        else
          return verfr_presn_utils_group (obten_group_admin_sesn (),
                                          true);
        end if;
      exception
        when no_data_found then
          return verfr_presn_utils_group (obten_group_admin_sesn (),
                                          true);
      end;
    end if;
  end verif_presn_group_admin;

  function verfr_presn_utils_group (pva_group in varchar2,
                                    pbo_ignor_super in boolean default false,
                                    pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct ())
    return boolean is
    vnu_utils                               number (10) default pnu_utils;
    vnu_presn_utils                         pls_integer default 0;
    vnu_group_lie                           number (10);

    --obtenir la hierarchie de groupes
    cursor cur_group_lies (pva_group_initl in varchar2) is
      select       distinct (ref_group) group_lie
            from   vd_sie_12_lien_group_utils lgu,
                   (select   seqnc
                      from   vd_sie_12_group_utils
                     where   code = pva_group_initl) group_initl
      connect by   lgu.ref_group_utils_lie = prior lgu.ref_group
               and lgu.date_debut_efect <= sysdate
               and (lgu.date_fin_efect >= sysdate
                 or lgu.date_fin_efect is null)
               and (lgu.ref_domn = sie_12_domn_pkg.obten_domn_sesn
                 or sie_12_domn_pkg.obten_domn_sesn is null)                                              -- AJOUT_CONAL
      start with   lgu.ref_group_utils_lie = group_initl.seqnc
               and lgu.ref_utils is null
               and lgu.date_debut_efect <= sysdate
               and (lgu.date_fin_efect >= sysdate
                 or lgu.date_fin_efect is null);

    --Verifier la presence dans le groupe
    cursor cur_presn_group (pnu_group in number) is
      select   1
        from   vd_sie_12_group_utils gu,
               vd_sie_12_lien_group_utils lgu
       where   lgu.ref_utils = vnu_utils
           and lgu.ref_group = gu.seqnc
           and gu.seqnc = pnu_group
           and (lgu.ref_domn = sie_12_domn_pkg.obten_domn_sesn
             or sie_12_domn_pkg.obten_domn_sesn is null)                                                  -- AJOUT_CONAL
           and lgu.date_debut_efect <= sysdate
           and (lgu.date_fin_efect >= sysdate
             or lgu.date_fin_efect is null)
           and rownum = 1;

    vva_group_admin                         varchar2 (23);
  begin
    if not pbo_ignor_super then
      if verif_presn_super_utils then
        return true;
      end if;

      if pva_group != 'SUPER_UTILS' then
        vva_group_admin := obten_group_admin_sesn ();

        if vva_group_admin is not null then
          if pva_group != vva_group_admin then
            if verif_presn_group_admin (pva_group) then
              return true;
            end if;
          end if;
        end if;
      end if;
    end if;

    begin
      select   1
        into   vnu_presn_utils
        from   vd_sie_12_group_utils gu,
               vd_sie_12_lien_group_utils lgu
       where   lgu.ref_utils = vnu_utils
           and lgu.ref_group = gu.seqnc
           and gu.code = pva_group
           and (lgu.ref_domn = sie_12_domn_pkg.obten_domn_sesn
             or sie_12_domn_pkg.obten_domn_sesn is null)                                                  -- AJOUT_CONAL
           and lgu.date_debut_efect <= sysdate
           and (lgu.date_fin_efect >= sysdate
             or lgu.date_fin_efect is null)
           and rownum = 1;
    exception
      when no_data_found then
        null;
    end;

    if vnu_presn_utils != 1 then
      --verifier dans les groupes lies si present
      for rec_group_lie in cur_group_lies (pva_group) loop
        open cur_presn_group (rec_group_lie.group_lie);

        fetch cur_presn_group
        into vnu_presn_utils;

        close cur_presn_group;

        if vnu_presn_utils = 1 then
          exit;
        end if;
      end loop;
    end if;

    return vnu_presn_utils = 1;
  exception
    when others then
      return false;
  end verfr_presn_utils_group;

  function verfr_presn_utils_group_numbr (pva_group in varchar2,
                                          pbo_ignor_super in boolean default false,
                                          pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct ())
    return number
    deterministic is
  begin
    if verfr_presn_utils_group (pva_group,
                                pbo_ignor_super,
                                pnu_utils) = true then
      return 1;
    else
      return 0;
    end if;
  end verfr_presn_utils_group_numbr;

  function verfc_droit_acces (pva_code_struc_aplic in varchar2,
                              pbo_indic_acces in boolean default null,
                              pbo_indic_creat in boolean default null,
                              pbo_indic_modfc in boolean default null,
                              pbo_indic_suprs in boolean default null,
                              pnu_seqnc_membr_struc_lie in number,
                              pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn,
                              pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return boolean is
    type typ_acces is record
    (
      valr_parmt                              boolean,
      valr_defnt_acces                        pls_integer
    );

    type typ_tab_acces is table of typ_acces
                            index by varchar2 (5);

    var_type_acces                          typ_tab_acces;
    vbo_acces_courn                         boolean default false;
    vnu_utils_sesn                          number (10) default pnu_utils;
    vnu_seqnc_struc_admin                   number (10);
    vnu_presn                               pls_integer;
    vva_type_acces_courn                    varchar2 (5) default 'ACCES';
    vnu_utils_membr_struc                   number (10);

    cursor cur_utils_lie is
      select   1
        from   vd_i_sie_12_membr_struc ms
       where   ms.ref_utils = vnu_utils_sesn and ms.seqnc = pnu_seqnc_membr_struc_lie and rownum < 2;

    cursor cur_membr_meme_struc is
      select   1
        from   vd_i_sie_12_membr_struc ms
       where   ms.ref_utils = vnu_utils_sesn and ms.ref_struc_admin = vnu_seqnc_struc_admin and rownum = 1;

    cursor cur_membr_struc_globl is
      select   1
        from   vd_i_sie_12_membr_struc ms,
               (select       ls.ref_struc_admin
                      from   vd_i_sie_12_lien_struc ls
                connect by   prior ls.ref_struc_admin = ls.ref_struc_lie
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)
                start with   ls.ref_struc_admin = vnu_seqnc_struc_admin
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)
                union all
                select       ls.ref_struc_lie
                      from   vd_i_sie_12_lien_struc ls
                connect by   ls.ref_struc_admin = prior ls.ref_struc_lie
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)
                start with   ls.ref_struc_admin = vnu_seqnc_struc_admin
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)) hierc
       where   hierc.ref_struc_admin = ms.ref_struc_admin and ms.ref_utils = vnu_utils_sesn and rownum = 1;

    cursor cur_membr_struc_supr is
      select   1
        from   vd_i_sie_12_membr_struc ms,
               (select       ls.ref_struc_admin
                      from   vd_i_sie_12_lien_struc ls
                connect by   prior ls.ref_struc_admin = ls.ref_struc_lie
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)
                start with   ls.ref_struc_admin in (select   distinct (ms.ref_struc_admin)
                                                      from   vd_i_sie_12_membr_struc ms
                                                     where   ms.ref_utils = vnu_utils_sesn
                                                         and ms.date_debut_efect <= sysdate
                                                         and (ms.date_fin_efect >= sysdate
                                                           or ms.date_fin_efect is null))
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)) hierc
       where   hierc.ref_struc_admin = ms.ref_struc_admin
           and ms.ref_utils = vnu_utils_membr_struc
           and rownum = 1
           and ms.date_debut_efect <= sysdate
           and (ms.date_fin_efect >= sysdate
             or ms.date_fin_efect is null);

    cursor cur_membr_struc_infr is
      select   1
        from   vd_i_sie_12_membr_struc ms,
               (select       ls.ref_struc_lie ref_struc_admin
                      from   vd_i_sie_12_lien_struc ls
                connect by   ls.ref_struc_admin = prior ls.ref_struc_lie
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)
                start with   ls.ref_struc_admin = (select   distinct (ms.ref_struc_admin)
                                                     from   vd_i_sie_12_membr_struc ms
                                                    where   ms.ref_utils = vnu_utils_sesn
                                                        and ms.date_debut_efect <= sysdate
                                                        and (ms.date_fin_efect >= sysdate
                                                          or ms.date_fin_efect is null))
                         and ls.date_debut_efect <= sysdate
                         and (ls.date_fin_efect >= sysdate
                           or ls.date_fin_efect is null)
                union all
                (select   vnu_seqnc_struc_admin
                   from   dual)) hierc
       where   hierc.ref_struc_admin = ms.ref_struc_admin
           and ms.ref_utils = vnu_utils_membr_struc
           and rownum = 1
           and ms.date_debut_efect <= sysdate
           and (ms.date_fin_efect >= sysdate
             or ms.date_fin_efect is null);

    cursor cur_defnt_acces (vva_defnt_access in varchar2) is
      select   indic_acces,
               indic_creat,
               indic_modfc,
               indic_suprs
        from   vd_i_sie_12_defnt_acces
       where   ref_struc_aplic = (select   seqnc
                                    from   vd_i_sie_12_struc_aplic
                                   where   code = pva_code_struc_aplic and ref_prodt = pnu_prodt);

    cursor cur_acces_struc_infr_supr (pva_type_acces_en_cours in varchar2) is
      select   type_acces
        from   (select   distinct
                         (decode (vva_type_acces_courn,
                                  'ACCES', indic_acces,
                                  'CREAT', indic_creat,
                                  'MODFC', indic_modfc,
                                  'SUPRS', indic_suprs))
                           type_acces
                  from   vd_i_sie_12_defnt_acces da
                 where   exists
                           (select   1
                              from   vd_i_sie_12_group_utils gu,
                                     vd_i_sie_12_lien_group_utils lgu
                             where   gu.seqnc = da.ref_group_utils
                                 and gu.seqnc = lgu.ref_group
                                 and lgu.ref_utils = vnu_utils_sesn
                                 and (lgu.ref_domn = sie_12_domn_pkg.obten_domn_sesn
                                   or sie_12_domn_pkg.obten_domn_sesn is null)                            -- AJOUT_CONAL
                                 and lgu.date_debut_efect <= sysdate
                                 and (lgu.date_fin_efect >= sysdate
                                   or lgu.date_fin_efect is null))
                     and da.ref_struc_aplic =
                           (select   tlpa.seqnc
                              from   vd_i_sie_12_struc_aplic tlpa
                             where   tlpa.code = pva_code_struc_aplic and tlpa.ref_prodt = pnu_prodt))
       where   type_acces in ('ACSIN', 'ACSSU');

    procedure alimt_seqnc_struc is
    begin
      select   ms.ref_struc_admin
        into   vnu_seqnc_struc_admin
        from   vd_i_sie_12_membr_struc ms
       where   ms.seqnc = pnu_seqnc_membr_struc_lie;
    end alimt_seqnc_struc;

    procedure alimt_seqnc_utils_membr_struc is
    begin
      select   ref_utils
        into   vnu_utils_membr_struc
        from   vd_i_sie_12_membr_struc ms
       where   ms.seqnc = pnu_seqnc_membr_struc_lie;
    end alimt_seqnc_utils_membr_struc;
  begin
    --obtenir l'enregistrement de definition d'acces si l'utilisateur fait partie de la hierarchie
    --Initialiser par defaut

    if verif_presn_super_utils then
      gbo_super_utils := true;
      return true;
    end if;

    --Vérifier l'activation de la struc aplic dans le domaine via les fonctions
    if not sie_12_fonct_pkg.verif_activ_fonct_domn (pva_code_struc_aplic) then
      return false;
    end if;

    if verif_presn_group_admin (null) then
      return true;
    end if;

    --Obtenir la rangee de securite
    begin
      vbo_acces_courn := true;

      select   nvl (
                 max (
                   decode (indic_acces,
                           'REFS', 1,
                           'ACUCS', 2,
                           'ACSTI', 3,
                           'ACSIN', 4,
                           'ACSSU', 4,
                           'ACSTG', 5,
                           'ACORD', 6)
                 ),
                 0
               )
                 type_acces,
               nvl (
                 max (
                   decode (indic_creat,
                           'REFS', 1,
                           'ACUCS', 2,
                           'ACSTI', 3,
                           'ACSIN', 4,
                           'ACSSU', 4,
                           'ACSTG', 5,
                           'ACORD', 6)
                 ),
                 0
               )
                 type_creat,
               nvl (
                 max (
                   decode (indic_modfc,
                           'REFS', 1,
                           'ACUCS', 2,
                           'ACSTI', 3,
                           'ACSIN', 4,
                           'ACSSU', 4,
                           'ACSTG', 5,
                           'ACORD', 6)
                 ),
                 0
               )
                 type_modfc,
               nvl (
                 max (
                   decode (indic_suprs,
                           'REFS', 1,
                           'ACUCS', 2,
                           'ACSTI', 3,
                           'ACSIN', 4,
                           'ACSSU', 4,
                           'ACSTG', 5,
                           'ACORD', 6)
                 ),
                 0
               )
                 type_suprs
        into   var_type_acces ('ACCES').valr_defnt_acces,
               var_type_acces ('CREAT').valr_defnt_acces,
               var_type_acces ('MODFC').valr_defnt_acces,
               var_type_acces ('SUPRS').valr_defnt_acces
        from   vd_i_sie_12_defnt_acces da
       where   exists
                 (select   1 -- AJOUT_CONAL --CONAL, pas trop certain,  Ressemble bcp au select de la vue VS_GROUP_LIE_UTILS_CONCT
                    from   (select       distinct (ref_group_utils_lie) seqnc_group
                                  from   vd_sie_12_lien_group_utils lgu
                            connect by   prior lgu.ref_group_utils_lie = lgu.ref_group
                                     and ref_utils is null
                                     and lgu.date_debut_efect <= sysdate
                                     and (lgu.date_fin_efect >= sysdate
                                       or lgu.date_fin_efect is null)
                            start with   lgu.ref_group in (select   distinct ref_group
                                                             from   vd_sie_12_lien_group_utils lgu2
                                                            where   lgu2.ref_utils = vnu_utils_sesn
                                                                and lgu2.date_debut_efect <= sysdate
                                                                and (lgu2.date_fin_efect >= sysdate
                                                                  or lgu2.date_fin_efect is null))
                                     and lgu.ref_utils is null
                                     and lgu.date_debut_efect <= sysdate
                                     and (lgu.date_fin_efect >= sysdate
                                       or lgu.date_fin_efect is null)
                            union
                            select   distinct ref_group
                              from   vd_sie_12_lien_group_utils lgu2
                             where   lgu2.ref_utils = vnu_utils_sesn
                                 and lgu2.date_debut_efect <= sysdate
                                 and (lgu2.date_fin_efect >= sysdate
                                   or lgu2.date_fin_efect is null)) gu
                   where   gu.seqnc_group = da.ref_group_utils)
           and da.ref_struc_aplic = (select   tlpa.seqnc
                                       from   vd_sie_12_struc_aplic tlpa
                                      where   tlpa.code = pva_code_struc_aplic and tlpa.ref_prodt = pnu_prodt);

      var_type_acces ('ACCES').valr_parmt := pbo_indic_acces;
      var_type_acces ('CREAT').valr_parmt := pbo_indic_creat;
      var_type_acces ('MODFC').valr_parmt := pbo_indic_modfc;
      var_type_acces ('SUPRS').valr_parmt := pbo_indic_suprs;
    exception
      when others then
        vbo_acces_courn := false;
    end;

    while vbo_acces_courn loop
      --verifier les acces selon cette rangee
      if var_type_acces (vva_type_acces_courn).valr_parmt and vbo_acces_courn then
        vbo_acces_courn := var_type_acces (vva_type_acces_courn).valr_defnt_acces > 1;

        if vbo_acces_courn then
          if var_type_acces (vva_type_acces_courn).valr_defnt_acces = 2 then                                   --'ACUCS'
            --Acces si utilisateur creation seulement
            --ok si le membre de structure recu en parametre correspond a l'utilisateur en session
            open cur_utils_lie;

            fetch cur_utils_lie
            into vnu_presn;

            close cur_utils_lie;

            vbo_acces_courn := nvl (vnu_presn, 0) = 1;
          elsif var_type_acces (vva_type_acces_courn).valr_defnt_acces = 3 then                                --'ACSTI'
            --Acces si structure immediate
            --ok si l'utilisateur recu en param est dans la meme structure immediate
            if pnu_seqnc_membr_struc_lie is null then
              return false;
            end if;

            --determiner si presence dans la structure
            alimt_seqnc_struc;

            open cur_membr_meme_struc;

            fetch cur_membr_meme_struc
            into vnu_presn;

            close cur_membr_meme_struc;

            vbo_acces_courn := nvl (vnu_presn, 0) = 1;
          elsif var_type_acces (vva_type_acces_courn).valr_defnt_acces = 4 then                           --ACSIN, ACSSU
            if pnu_seqnc_membr_struc_lie is null then
              return false;
            end if;

            alimt_seqnc_struc;

            --Obtenir les elements
            for rec_acces_struc_infr_supr in cur_acces_struc_infr_supr (vva_type_acces_courn) loop
              alimt_seqnc_utils_membr_struc;

              if rec_acces_struc_infr_supr.type_acces = 'ACSIN' then
                open cur_membr_struc_infr;

                fetch cur_membr_struc_infr
                into vnu_presn;

                close cur_membr_struc_infr;
              elsif rec_acces_struc_infr_supr.type_acces = 'ACSSU' then
                open cur_membr_struc_supr;

                fetch cur_membr_struc_supr
                into vnu_presn;

                close cur_membr_struc_supr;
              end if;

              vbo_acces_courn := nvl (vnu_presn, 0) = 1;
              exit when not (vbo_acces_courn);
            end loop;
          elsif var_type_acces (vva_type_acces_courn).valr_defnt_acces = 5 then                                --globale
            --Acces si structure globale
            --ok si l'utilisateur recu en param est dans la meme structure globale
            if pnu_seqnc_membr_struc_lie is null then
              return false;
            end if;

            --determiner si presence dans la structure globale
            alimt_seqnc_struc;

            open cur_membr_struc_globl;

            fetch cur_membr_struc_globl
            into vnu_presn;

            close cur_membr_struc_globl;

            vbo_acces_courn := nvl (vnu_presn, 0) = 1;
          elsif var_type_acces (vva_type_acces_courn).valr_defnt_acces = 6 then                                  --ACORD
            null;
          end if;
        end if;
      end if;

      vva_type_acces_courn := var_type_acces.next (vva_type_acces_courn);
      exit when vva_type_acces_courn is null;
    end loop;

    return vbo_acces_courn;
  end verfc_droit_acces;

  function verfc_droit_acces_numrq (pva_code_struc_aplic in varchar2,
                                    pva_indic_acces in varchar2 default null,
                                    pva_indic_creat in varchar2 default null,
                                    pva_indic_modfc in varchar2 default null,
                                    pva_indic_suprs in varchar2 default null,
                                    pnu_seqnc_membr_struc_lie in number default null,
                                    pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn,
                                    pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return number is
  begin
    if verfc_droit_acces (pva_code_struc_aplic,
                          pva_indic_acces = 'O',
                          pva_indic_creat = 'O',
                          pva_indic_modfc = 'O',
                          pva_indic_suprs = 'O',
                          pnu_seqnc_membr_struc_lie,
                          pnu_prodt,
                          pnu_utils) then
      return 1;
    else
      return 0;
    end if;
  end verfc_droit_acces_numrq;

  function verfc_droit_acces_schem_apex (pbo_indic_acces in boolean default null,
                                         pbo_indic_creat in boolean default null,
                                         pbo_indic_modfc in boolean default null,
                                         pbo_indic_suprs in boolean default null)
    return boolean is
    vva_code_struc_aplic                    vd_i_sie_12_struc_aplic.code%type;
  begin
    if verif_presn_super_utils then
      return true;
    end if;

    if vva_code_struc_aplic is null then
      select   sa.code
        into   vva_code_struc_aplic
        from   vd_i_sie_13_page pag,
               vd_i_sie_11_aplic ap,
               vd_i_sie_12_struc_aplic sa,
               vd_i_sie_11_prodt pro
       where   sa.seqnc = pag.ref_struc_aplic
           and pag.seqnc = sie_13_page_pkg.obten_page_sesn
           and pag.ref_aplic = ap.seqnc
           and ap.ref_prodt = pro.seqnc
           and pro.seqnc = sie_11_prodt_pkg.obten_prodt_sesn;
    end if;

    return verfc_droit_acces (vva_code_struc_aplic,
                              pbo_indic_acces,
                              pbo_indic_creat,
                              pbo_indic_modfc,
                              pbo_indic_suprs,
                              sie_07_util_pkg.v ('P' || sie_07_util_pkg.nv ('APP_PAGE_ID') || '_REF_MEMBR_STRUC'));
  exception
    when others then
      --TODO::CARLO
      /*sie_03_journ_pkg.ecrir_journ (
                    'Erreur dans l''evaluation des autorisation apex');*/
      return false;
  end verfc_droit_acces_schem_apex;

  function verf_presn_opert_item (pnu_utils in number,
                                  pva_item in varchar2)
    return boolean is
    vnu_page                                number default sie_07_util_pkg.nv ('APP_PAGE_ID');
    vnu_app                                 number default sie_07_util_pkg.nv ('APP_ID');
    vnu_presn                               number (1);
  begin
    if verif_presn_super_utils then
      return true;
    end if;

    select   count (1)
      into   vnu_presn
      from   vd_sie_12_defnt_acces da,
             vd_sie_13_page_item pi,
             vd_sie_13_page pa,
             vd_sie_11_aplic ap,
             (select       distinct (ref_group) seqnc_group   -- AJOUT_CONAL  --CONAL MEME CHOSE ICI (Réutiliser la vue)
                    from   vd_i_sie_12_lien_group_utils lgu
              connect by   lgu.ref_group_utils_lie = prior lgu.ref_group
                       and (level != 1
                         or (level = 1 and ref_utils is null))
                       and lgu.date_debut_efect <= sysdate
                       and (lgu.date_fin_efect >= sysdate
                         or lgu.date_fin_efect is null)
              start with   lgu.ref_group_utils_lie in (select   distinct ref_group
                                                         from   vd_i_sie_12_lien_group_utils lgu2
                                                        where   lgu2.ref_utils = pnu_utils
                                                            and lgu2.date_debut_efect <= sysdate
                                                            and (lgu2.date_fin_efect >= sysdate
                                                              or lgu2.date_fin_efect is null))
                       and lgu.ref_utils is null
                       and lgu.date_debut_efect <= sysdate
                       and (lgu.date_fin_efect >= sysdate
                         or lgu.date_fin_efect is null)
              union
              select   distinct ref_group
                from   vd_i_sie_12_lien_group_utils lgu2
               where   lgu2.ref_utils = pnu_utils
                   and lgu2.date_debut_efect <= sysdate
                   and (lgu2.date_fin_efect >= sysdate
                     or lgu2.date_fin_efect is null)) gu
     where   ap.numr_aplic_apex = vnu_app
         and ap.seqnc = pa.ref_aplic
         and pa.numr_apex = vnu_page
         and pa.seqnc = pi.ref_page
         and pi.ref_opert = da.ref_opert
         and da.ref_group_utils = gu.seqnc_group
         and da.indic_acces = 'ACORD'
         and pi.nom_apex = pva_item
         and rownum = 1;

    return vnu_presn = 1;
  end verf_presn_opert_item;

  function verfr_presn_opert_utils (pva_code_opert in varchar2)
    return boolean is
    vnu_presn                               number (1);
  begin
    if verif_presn_super_utils then
      return true;
    end if;

    defnr_opert_en_cours_verfc (pva_code_opert);

    select   count (1)
      into   vnu_presn
      from   vs_group_lie_utils_conct group_utils
     where   rownum = 1
         and group_utils.seqnc_group = any (select   group_opert.seqnc_group
                                              from   vs_group_lie_opert_verfc group_opert);

    return vnu_presn = 1;
  end verfr_presn_opert_utils;

  function verif_si_conct
    return boolean is
  begin
    if sie_12_utils_pkg.obten_usagr_conct () is not null and upper (sie_07_util_pkg.v ('APP_USER')) != 'NOBODY' then
      return true;
    else
      return false;
    end if;
  exception
    when others then
      return false;
  end verif_si_conct;

  function verif_acces_liste_navgt (pnu_sie_13_elemn_liste_navgt in number)
    return boolean is
    vva_code                                varchar2 (23);
  begin
    select   max (sa.code)
      into   vva_code
      from   (select   to_number (aa.do_substitutions (ln.page)) numr_apex,
                       to_number (aa.do_substitutions (ln.aplic)) numr_aplic_apex,
                       ap.ref_prodt
                from   vd_sie_13_liste_navgt ln,
                       vd_sie_13_page p1,
                       vd_sie_11_aplic ap
               where   ln.seqnc = pnu_sie_13_elemn_liste_navgt and ln.ref_page = p1.seqnc and ap.seqnc = p1.ref_aplic) cible,
             vd_sie_12_struc_aplic sa,
             vd_sie_13_page p
     where   cible.ref_prodt = sa.ref_prodt
         and cible.numr_apex = p.numr_apex
         and cible.numr_aplic_apex = p.app_id_formt
         and sa.seqnc = p.ref_struc_aplic;

    if vva_code is not null then
      return verfc_droit_acces (vva_code,
                                true,
                                null,
                                null,
                                null,
                                null);
    else
      return true;
    end if;
  exception
    when others then
      return false;
  end verif_acces_liste_navgt;

  function verif_apart_group_non_conct (pva_group in varchar2,
                                        pva_utils in varchar2,
                                        pva_resdr_sous_group in varchar2 default 'N')
    return boolean is
    vnu_presn                               pls_integer;
  begin
    select   count (1)
      into   vnu_presn
      from   vd_i_sie_12_utils u,
             vd_i_sie_12_group_utils gu,
             vd_i_sie_12_lien_group_utils lgu
     where   lgu.date_debut_efect <= sysdate
         and (lgu.date_fin_efect >= sysdate
           or lgu.date_fin_efect is null)
         and lgu.ref_utils = u.seqnc
         and (lgu.ref_domn = sie_12_domn_pkg.obten_domn_sesn
           or sie_12_domn_pkg.obten_domn_sesn is null)                                                    -- AJOUT_CONAL
         and lgu.ref_group = gu.seqnc
         and gu.code = pva_group
         and u.code_utils = upper (pva_utils)
         and rownum = 1;

    return vnu_presn = 1;
  end;

  function verif_admin_prodt
    return number is
    vva_group_admin                         varchar2 (23);
  begin
    begin
      select   gu.code
        into   vva_group_admin
        from   vd_sie_11_prodt pr,
               vd_sie_12_group_utils gu
       where   pr.seqnc = sie_11_prodt_pkg.obten_prodt_sesn () and pr.ref_group_utils_admin = gu.seqnc;

      return verfr_presn_utils_group_numbr (vva_group_admin);
    exception
      when no_data_found then
        return 0;
    end;
  end verif_admin_prodt;

  function obten_opert_en_cours_verfc
    return varchar2 is
  begin
    return gva_opert_en_cours_verfc;
  end obten_opert_en_cours_verfc;

  procedure defnr_opert_en_cours_verfc (pva_opert in varchar2) is
  begin
    gva_opert_en_cours_verfc := pva_opert;
  end defnr_opert_en_cours_verfc;
end sie_12_secrt_pkg;
/

Prompt Package Body SIE_12_SESN_PKG;
/* Formatted on 04/12/2013 11:35:24 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_sesn_pkg is
  function obten_sesn
    return number is
  begin
    return sie_07_util_pkg.nv ('SESSION');
  end obten_sesn;
end;
/

Prompt Package Body SIE_12_STAT_PKG;
/* Formatted on 04/12/2013 11:35:24 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_12_STAT_PKG" as
  function obten_stat_group (pva_code_group in varchar2,
                             pva_code_stat in varchar2)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_seqnc                               number;
  begin
    select   s.seqnc
      into   vnu_seqnc
      from   vd_i_sie_12_stat s,
             vd_i_sie_12_group_stat gs
     where   s.ref_group_stat = gs.seqnc and gs.code = pva_code_group and s.code = pva_code_stat;

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_stat_group;

  function obten_stat (pva_code_struc_aplic in varchar2,
                       pva_code_stat in varchar2,
                       pva_code_prodt in varchar2 default null)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_seqnc                               number;
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_12_stat
     where   ref_struc_aplic_formt = pva_code_struc_aplic
         and code = pva_code_stat
         and ref_struc_aplic =
               (select   seqnc
                  from   vd_sie_12_struc_aplic
                 where   code = pva_code_struc_aplic
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn));

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_stat;

  function obten_stat_group_stat (pva_code_group_stat in varchar2,
                                  pva_code_stat in varchar2,
                                  pva_code_prodt in varchar2 default null)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_seqnc                               number;
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_12_stat
     where   ref_group_stat_formt = pva_code_group_stat
         and code = pva_code_stat
         and ref_group_stat =
               (select   seqnc
                  from   vd_i_sie_12_group_stat
                 where   code = pva_code_group_stat
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn));

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_stat_group_stat;

  function obten_code_stat (pnu_seqnc_stat in number)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_code_stat                           varchar2 (20);
  begin
    select   code
      into   vva_code_stat
      from   vd_sie_12_stat
     where   seqnc = pnu_seqnc_stat;

    return vva_code_stat;
  exception
    when no_data_found then
      return null;
  end;

  function obten_stat_initl_struc_aplic (pva_code_struc_aplic in varchar2,
                                         pva_code_prodt in varchar2 default null)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O'
         and s.ref_struc_aplic =
               (select   seqnc
                  from   vd_sie_12_struc_aplic sa
                 where   sa.code = pva_code_struc_aplic
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn));

    return vnu_seqnc;
  end obten_stat_initl_struc_aplic;

  function obten_stat_initl_struc_aplic (pnu_struc_aplic in number)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O' and s.ref_struc_aplic = pnu_struc_aplic;

    return vnu_seqnc;
  end obten_stat_initl_struc_aplic;

  function obten_stat_initl_group_stat (pva_code_group_stat in varchar2,
                                        pva_code_prodt in varchar2 default null)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O'
         and s.ref_group_stat =
               (select   seqnc
                  from   vd_sie_12_group_stat gs
                 where   gs.code = pva_code_group_stat
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn));

    return vnu_seqnc;
  end obten_stat_initl_group_stat;

  function obten_stat_initl_group_stat (pnu_group_stat in number)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O' and s.ref_group_stat = pnu_group_stat;

    return vnu_seqnc;
  end obten_stat_initl_group_stat;

  function obten_code_stat_initl_struc_ap (pva_code_struc_aplic in varchar2,
                                           pva_code_prodt in varchar2 default null)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_seqnc                               varchar2 (23);
  begin
    select   code
      into   vva_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O'
         and s.ref_struc_aplic =
               (select   seqnc
                  from   vd_sie_12_struc_aplic sa
                 where   sa.code = pva_code_struc_aplic
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn ()));

    return vva_seqnc;
  end obten_code_stat_initl_struc_ap;

  function obten_code_stat_initl_struc_ap (pnu_struc_aplic in number)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_seqnc                               varchar2 (23);
  begin
    select   code
      into   vva_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O' and s.ref_struc_aplic = pnu_struc_aplic;

    return vva_seqnc;
  end obten_code_stat_initl_struc_ap;

  function obten_code_stat_initl_group_st (pva_code_group_stat in varchar2,
                                           pva_code_prodt in varchar2 default null)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_seqnc                               varchar2 (23);
  begin
    select   code
      into   vva_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O'
         and s.ref_group_stat =
               (select   seqnc
                  from   vd_sie_12_group_stat gs
                 where   gs.code = pva_code_group_stat
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn ()));

    return vva_seqnc;
  end obten_code_stat_initl_group_st;

  function obten_code_stat_initl_group_st (pnu_group_stat in number)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_seqnc                               varchar2 (23);
  begin
    select   code
      into   vva_seqnc
      from   vd_sie_12_stat s
     where   s.indic_initl = 'O' and s.ref_group_stat = pnu_group_stat;

    return vva_seqnc;
  end obten_code_stat_initl_group_st;

  function obten_stat_formt (pva_code_stat in varchar2,
                             pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_stat                                vd_sie_12_stat.code%type;
  begin
    if pva_code_stat is not null then
      select   nom
        into   vva_stat
        from   vd_sie_12_stat
       where   code = pva_code_stat
           and ref_struc_aplic = (select   seqnc
                                    from   vd_sie_12_struc_aplic
                                   where   ref_prodt = pnu_prodt);
    end if;

    return vva_stat;
  end obten_stat_formt;

  function obten_stat_formt (pnu_seqnc in number)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_stat                                vd_sie_12_stat.nom%type;
  begin
    if pnu_seqnc is not null then
      select   nom
        into   vva_stat
        from   vd_sie_12_stat
       where   seqnc = pnu_seqnc;
    end if;

    return vva_stat;
  end obten_stat_formt;

  function valdr_evolt_stat (pnu_stat_ancie in number,
                             pnu_stat_nouv in number)
    return boolean
    result_cache relies_on (sie_12_stat) is
    vnu_exist                               number;
  begin
    --Si la variable est settee, on valide a partir de la liste de disponibilite du code
    --et non de l'interface
    if gbo_indic_evolt_stat_code then
      select   1
        into   vnu_exist
        from   vd_sie_12_evolt_stat
       where   ref_stat = pnu_stat_ancie and ref_stat_evolt = pnu_stat_nouv and indic_code = 'O';
    else
      select   1
        into   vnu_exist
        from   vd_sie_12_evolt_stat
       where   ref_stat = pnu_stat_ancie and ref_stat_evolt = pnu_stat_nouv and indic_code = 'N';
    end if;

    return true;
  exception
    when no_data_found then
      return false;
  end;

  function difrn_ordre (pnu_ref_stat_1 in number,
                        pnu_ref_stat_2 in number)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_diff                                number;
  begin
    -- Signification de la valeur retournee:
    -- Negatif: Le premier statut vient avant le second
    -- Zero   : Les statuts ont le meme ordre (meme statut ou non)
    -- Positif: Le premier statut vient apres le second
    -- Null   : L'un des statut specifie est null ou n'existe pas
    select   (select   ordre
                from   vd_sie_12_stat
               where   seqnc = pnu_ref_stat_1) -
             (select   ordre
                from   vd_sie_12_stat
               where   seqnc = pnu_ref_stat_2)
      into   vnu_diff
      from   dual;

    return vnu_diff;
  end;

  function obten_liste_formt (pnu_stat in number,
                              pva_code in varchar2)
    return varchar2
    result_cache relies_on (sie_12_stat) is
    vva_retr                                varchar2 (200);

    cursor cur_code is
      select     s.nom
          from   vd_sie_12_evolt_stat es,
                 vd_sie_12_stat s
         where   es.ref_stat = pnu_stat and s.seqnc = es.ref_stat_evolt and indic_code = pva_code
      order by   s.ordre;
  begin
    for rec_code in cur_code loop
      vva_retr := vva_retr || ', ' || rec_code.nom;
    end loop;

    return substr (vva_retr,
                   3);
  end obten_liste_formt;

  function obten_postn_reltv (pva_struc_aplic in varchar2,
                              pva_code_stat_base in varchar2,
                              pva_code_stat_cible in varchar2,
                              pva_code_prodt in varchar2 default null)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_ordre_base                          number (10);
    vnu_ordre_cible                         number (10);
  begin
    select   max (decode (code, pva_code_stat_base, ordre, null)),
             max (decode (code, pva_code_stat_cible, ordre, null))
      into   vnu_ordre_base,
             vnu_ordre_cible
      from   vd_sie_12_stat s
     where   s.ref_struc_aplic_formt = pva_struc_aplic
         and code in (pva_code_stat_base, pva_code_stat_cible)
         and s.ref_struc_aplic =
               (select   seqnc
                  from   vd_sie_12_struc_aplic
                 where   code = pva_struc_aplic
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn));

    if vnu_ordre_base is null
    or vnu_ordre_cible is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('STA.000002',
                                               pva_code_prodt             => 'AFW');
    end if;

    return vnu_ordre_base - vnu_ordre_cible;
  end obten_postn_reltv;

  function obten_postn_reltv (pva_struc_aplic in varchar2,
                              pnu_code_stat_base in number,
                              pnu_code_stat_cible in number)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_ordre_base                          number (10);
    vnu_ordre_cible                         number (10);
  begin
    select   max (decode (seqnc, pnu_code_stat_base, ordre, null)),
             max (decode (seqnc, pnu_code_stat_cible, ordre, null))
      into   vnu_ordre_base,
             vnu_ordre_cible
      from   vd_sie_12_stat s
     where   s.ref_struc_aplic_formt = pva_struc_aplic and seqnc in (pnu_code_stat_base, pnu_code_stat_cible);

    if vnu_ordre_base is null
    or vnu_ordre_cible is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('STA.000002',
                                               pva_code_prodt             => 'AFW');
    end if;

    return vnu_ordre_base - vnu_ordre_cible;
  end obten_postn_reltv;

  function obten_postn_reltv_group_stat (pva_group_stat in varchar2,
                                         pva_code_stat_base in varchar2,
                                         pva_code_stat_cible in varchar2,
                                         pva_code_prodt in varchar2 default null)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_ordre_base                          number (10);
    vnu_ordre_cible                         number (10);
  begin
    select   max (decode (code, pva_code_stat_base, ordre, null)),
             max (decode (code, pva_code_stat_cible, ordre, null))
      into   vnu_ordre_base,
             vnu_ordre_cible
      from   vd_sie_12_stat s
     where   s.ref_group_stat_formt = pva_group_stat
         and code in (pva_code_stat_base, pva_code_stat_cible)
         and s.ref_group_stat =
               (select   seqnc
                  from   vd_sie_12_group_stat
                 where   code = pva_group_stat
                     and ref_prodt =
                           nvl (sie_11_prodt_pkg.obten_prodt (pva_code_prodt), sie_11_prodt_pkg.obten_prodt_sesn));

    if vnu_ordre_base is null
    or vnu_ordre_cible is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('STA.000002',
                                               pva_code_prodt             => 'AFW');
    end if;

    return vnu_ordre_base - vnu_ordre_cible;
  end obten_postn_reltv_group_stat;

  function obten_postn_reltv_group_stat (pva_group_stat in varchar2,
                                         pnu_code_stat_base in number,
                                         pnu_code_stat_cible in number)
    return number
    result_cache relies_on (sie_12_stat) is
    vnu_ordre_base                          number (10);
    vnu_ordre_cible                         number (10);
  begin
    select   max (decode (seqnc, pnu_code_stat_base, ordre, null)),
             max (decode (seqnc, pnu_code_stat_cible, ordre, null))
      into   vnu_ordre_base,
             vnu_ordre_cible
      from   vd_sie_12_stat s
     where   s.ref_group_stat_formt = pva_group_stat and seqnc in (pnu_code_stat_base, pnu_code_stat_cible);

    if vnu_ordre_base is null
    or vnu_ordre_cible is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('STA.000002',
                                               pva_code_prodt             => 'AFW');
    end if;

    return vnu_ordre_base - vnu_ordre_cible;
  end obten_postn_reltv_group_stat;

  procedure creer_stat (pnu_ref_struc_aplic in number,
                        pva_code in varchar2,
                        pva_nom in varchar2) is
  begin
    insert into   vd_sie_12_stat (ref_struc_aplic, code, nom)
         values   (pnu_ref_struc_aplic,
                   pva_code,
                   pva_nom);
  end creer_stat;

  procedure creer_stat_group_stat (pnu_group_stat in number,
                                   pva_code in varchar2,
                                   pva_nom in varchar2,
                                   pva_descr in varchar2) is
    vnu_seqnc                               number (10);
  begin
    vnu_seqnc :=
      creer_stat_group_stat (pnu_group_stat,
                             pva_code,
                             pva_nom,
                             pva_descr);
  end creer_stat_group_stat;

  function creer_stat_group_stat (pnu_group_stat in number,
                                  pva_code in varchar2,
                                  pva_nom in varchar2,
                                  pva_descr in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    insert into   vd_sie_12_stat (ref_group_stat, code, nom, descr)
         values   (pnu_group_stat,
                   pva_code,
                   pva_nom,
                   pva_descr)
      returning   seqnc
           into   vnu_seqnc;

    return vnu_seqnc;
  end creer_stat_group_stat;

  procedure maj_stat_group_stat (pnu_stat in number,
                                 pva_code in varchar2,
                                 pva_nom in varchar2,
                                 pva_descr in varchar2) is
  begin
    update   vd_sie_12_stat
       set   code = pva_code, nom = pva_nom, descr = pva_descr
     where   seqnc = pnu_stat;
  end maj_stat_group_stat;

  procedure suprm_stat_group_stat (pnu_stat in number) is
  begin
    delete from   vd_sie_12_stat
          where   seqnc = pnu_stat;
  end suprm_stat_group_stat;
end sie_12_stat_pkg;
/

Prompt Package Body SIE_12_STRUC_APLIC_CU_PKG;
/* Formatted on 04/12/2013 11:35:25 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_struc_aplic_cu_pkg as
  function exect_sql_reslt_elemn_varch (pva_sql in varchar2,
                                        pnu_cle_initl in number)
    return varchar2 is
  begin
    gva_valr_formt := null;

    execute immediate pva_sql                                     into   gva_valr_formt using pnu_cle_initl;

    return gva_valr_formt;
  exception
    when no_data_found then
      return null;
    when others then
      op (pva_sql);
      raise;
  end exect_sql_reslt_elemn_varch;

  function resdr_elemn (pnu_struc_aplic in number,
                        pnu_seqnc_struc_aplic number,
                        pva_chemn_reslt in varchar2,
                        pva_formt in varchar2 default null)
    return varchar2 is
    type typ_rec_ocurn_table_reslt is record
    (
      nom_reslt_formt                         varchar2 (100),
      nom_table                               varchar2 (30),
      nom_alias                               varchar2 (1),
      code_struc_aplic                        varchar2 (23),
      nom_coln                                varchar2 (30),
      cle_primr                               varchar2 (30)
    );

    type type_tab_rec_ocurn_tabl_reslt is table of typ_rec_ocurn_table_reslt
                                            index by pls_integer;

    vta_reslt                               type_tab_rec_ocurn_tabl_reslt;
    vva_code_struc_aplic                    varchar2 (30);
    vva_coln_select                         varchar2 (30);
    vva_coln                                varchar2 (30);
    vva_valr_chemn_travl                    varchar2 (2000);
    vnu_dernr_point                         pls_integer;
    vnu_debut_croch                         pls_integer;
    vnu_prodt                               number (10);
    vva_sql                                 varchar2 (32767);
    vva_struc_acces_don                     varchar2 (30);
    vnu_i                                   pls_integer;
    vnu_fk                                  pls_integer;
  begin
    vnu_dernr_point :=
      instr (pva_chemn_reslt,
             '.',
             -1);

    if vnu_dernr_point = 0 then
      --On demeure sur la même structure applicative donc facile
      vva_sql := 'select ' || pva_chemn_reslt || chr (10);

      select   sa.nom_struc_acces_don,
               asa.nom_coln
        into   vva_struc_acces_don,
               vva_coln
        from   vd_sie_12_struc_aplic sa,
               vd_sie_12_atrib_struc_aplic asa
       where   sa.seqnc = pnu_struc_aplic
           and asa.ref_struc_aplic = sa.seqnc
           and asa.ref_dv_natr_infor_code = 'CLE_PRIMR';

      vva_sql := vva_sql || 'from ' || vva_struc_acces_don || chr (10);

      vva_sql := vva_sql || 'where ' || vva_coln || ' = :cle' || chr (10);
    else
      vva_coln_select :=
        substr (pva_chemn_reslt,
                vnu_dernr_point + 1);
      vva_valr_chemn_travl :=
        substr (pva_chemn_reslt,
                1,
                vnu_dernr_point - 1);

      vnu_dernr_point :=
        instr (vva_valr_chemn_travl,
               '.',
               -1);

      while vnu_dernr_point != 0 loop
        vta_reslt (-1 - vta_reslt.count).nom_reslt_formt :=
          substr (vva_valr_chemn_travl,
                  vnu_dernr_point + 1);
        vva_valr_chemn_travl :=
          substr (vva_valr_chemn_travl,
                  1,
                  vnu_dernr_point - 1);
        vnu_dernr_point :=
          instr (vva_valr_chemn_travl,
                 '.',
                 -1);
      end loop;

      --traiter les dernier
      vta_reslt (-1 - vta_reslt.count ()).nom_reslt_formt := vva_valr_chemn_travl;

      --Décortiquer les occurences
      for i in vta_reslt.first () .. vta_reslt.last () loop
        vnu_debut_croch :=
          instr (vta_reslt (i).nom_reslt_formt,
                 '[');
        vta_reslt (i).code_struc_aplic :=
          substr (vta_reslt (i).nom_reslt_formt,
                  1,
                  vnu_debut_croch - 1);
        vta_reslt (i).nom_coln :=
          substr (vta_reslt (i).nom_reslt_formt,
                  vnu_debut_croch + 1);
        vta_reslt (i).nom_coln :=
          substr (vta_reslt (i).nom_coln,
                  1,
                  length (vta_reslt (i).nom_coln) - 1);
      end loop;

      --trouver le produit lié à la première structure et chercher une structure pour ce produit
      select   ref_prodt
        into   vnu_prodt
        from   vd_sie_12_struc_aplic
       where   seqnc = pnu_struc_aplic;

      vva_coln := vta_reslt (vta_reslt.last ()).nom_coln;
      vva_code_struc_aplic := vta_reslt (vta_reslt.last ()).code_struc_aplic;

      --Exécuter si la dernière colonne est une FK seulement
      vnu_i := vta_reslt.last;

      if vnu_i is not null then
        select   count (1)
          into   vnu_fk
          from   vd_sie_12_struc_aplic sa,
                 vd_sie_12_atrib_struc_aplic asa
         where   sa.code = vta_reslt (vnu_i).code_struc_aplic
             and asa.nom_coln = vta_reslt (vnu_i).nom_coln
             and sa.seqnc = asa.ref_struc_aplic
             and sa.ref_prodt = vnu_prodt
             and asa.ref_dv_natr_infor_code = 'CLE_ETRAN'
             and rownum = 1;
      end if;

      if vnu_fk = 1 then
        select   sac.code,
                 asac.nom_coln
          into   vta_reslt (vta_reslt.last + 1).code_struc_aplic,
                 vta_reslt (vta_reslt.last + 1).nom_coln
          from   vd_sie_12_struc_aplic sac,
                 vd_sie_12_struc_aplic sas,
                 vd_sie_12_atrib_struc_aplic asas,
                 vd_sie_12_atrib_struc_aplic asac
         where   sas.ref_prodt = vnu_prodt
             and sas.code = vva_code_struc_aplic
             and sas.seqnc = asas.ref_struc_aplic
             and asas.nom_coln = vva_coln
             and asas.ref_atrib_struc_aplic = asac.seqnc
             and asac.ref_struc_aplic = sac.seqnc;
      end if;

      --Alimenter les alias de tables et le nom des tables et les clés primaires
      begin
        for i in vta_reslt.first () .. vta_reslt.last () loop
          vva_code_struc_aplic := vta_reslt (i).code_struc_aplic;

          select   nom_struc_acces_don
            into   vta_reslt (i).nom_table
            from   vd_sie_12_struc_aplic
           where   ref_prodt = vnu_prodt and code = vva_code_struc_aplic;

          vta_reslt (i).nom_alias := chr (i * -1 + 65);

          select   nom_coln
            into   vta_reslt (i).cle_primr
            from   vd_sie_12_atrib_struc_aplic asa,
                   vd_sie_12_struc_aplic sa
           where   asa.ref_struc_aplic = sa.seqnc
               and sa.code = vva_code_struc_aplic
               and sa.ref_prodt = vnu_prodt
               and ref_dv_natr_infor_code = 'CLE_PRIMR';
        end loop;
      exception
        when others then
          sie_03_journ_pkg.ecrir_journ ('Alimenter alias');
          raise;
      end;

      vva_sql := 'select ' || vta_reslt (vta_reslt.last ()).nom_alias || '.' || vva_coln_select || chr (10);
      vva_sql := vva_sql || 'from ';

      for i in vta_reslt.first () .. vta_reslt.last () loop
        vva_sql := vva_sql || vta_reslt (i).nom_table || ' ' || vta_reslt (i).nom_alias || ', ' || chr (10);
      end loop;

      vva_sql :=
           substr (vva_sql,
                   1,
                   length (vva_sql) - 3)
        || chr (10)
        || 'where '
        || vta_reslt (vta_reslt.first ()).nom_alias
        || '.'
        || vta_reslt (vta_reslt.first ()).cle_primr
        || ' = :cle'
        || chr (10);

      if vta_reslt.count () > 1 then
        vva_sql :=
             vva_sql
          || 'and '
          || vta_reslt (vta_reslt.first ()).nom_alias
          || '.'
          || vta_reslt (vta_reslt.first ()).nom_coln
          || ' = ';

        for i in vta_reslt.first () + 1 .. vta_reslt.last () loop
          vva_sql := vva_sql || vta_reslt (i).nom_alias || '.' || vta_reslt (i).cle_primr;

          if i < vta_reslt.last () then
            vva_sql :=
              vva_sql || chr (10) || 'and ' || vta_reslt (i).nom_alias || '.' || vta_reslt (i).nom_coln || ' = ';
          end if;
        end loop;
      end if;
    end if;

    if vva_sql is not null then
      return exect_sql_reslt_elemn_varch (vva_sql,
                                          pnu_seqnc_struc_aplic);
    end if;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ ('resdr_elemn');
      raise;
  end resdr_elemn;

  function obten_valr_formt (pnu_struc_aplic in number,
                             pnu_seqnc_struc_aplic in number,
                             pnu_elemn_desr in number default kva_elemn_titre)
    return varchar2 is
    vva_fonct                               varchar2 (4000);
    vva_nom_coln                            varchar2 (50);
    vva_nom_struc_acces                     varchar2 (50);
    vva_valr_formt                          varchar2 (4000);
  begin
    select   nom_coln
      into   vva_nom_coln
      from   vd_sie_12_atrib_struc_aplic
     where   ref_dv_natr_infor = sie_14_domn_valr_pkg.obten_seqnc (
                                   'NATR_INFOR_STRUC_APLIC',
                                   decode (pnu_elemn_desr,
                                           kva_elemn_titre, 'NOM_FORMT',
                                           kva_elemn_titre_court, 'TITRE_COURT',
                                           kva_elemn_descr, 'DESCR_LONG'),
                                   'AFW'
                                 )
         and ref_struc_aplic = pnu_struc_aplic;

    select   nom_struc_acces_don
      into   vva_nom_struc_acces
      from   vd_sie_12_struc_aplic
     where   seqnc = pnu_struc_aplic;

    execute immediate
      'select ' || vva_nom_coln || ' from ' || vva_nom_struc_acces || ' where seqnc = ' || pnu_seqnc_struc_aplic || ' '
                                          into   vva_valr_formt;

    return vva_valr_formt;
  exception
    when others then
      return null;
  end obten_valr_formt;

  function obten_valr_atrib_formt (pnu_seqnc_atrib in number,
                                   pnu_seqnc_struc_aplic in number,
                                   pva_formt in varchar2 default null)
    return varchar2 is
    vva_fonct                               varchar2 (4000);
    vva_nom_coln                            varchar2 (50);
    vva_nom_struc_acces                     varchar2 (50);
    vva_valr_formt                          varchar2 (4000);
  begin
    select   nom_coln
      into   vva_nom_coln
      from   vd_sie_12_atrib_struc_aplic
     where   seqnc = pnu_seqnc_atrib;

    select   nom_struc_acces_don
      into   vva_nom_struc_acces
      from   vd_sie_12_struc_aplic
     where   seqnc = (select   ref_struc_aplic
                        from   vd_sie_12_atrib_struc_aplic
                       where   seqnc = pnu_seqnc_atrib);

    execute immediate
         'select '
      || case pva_formt when null then 'to_char(' || vva_nom_coln || ', ' || pva_formt || ')' else vva_nom_coln end
      || ' from '
      || vva_nom_struc_acces
      || ' where seqnc = '
      || pnu_seqnc_struc_aplic
      || ' '
                                          into   vva_valr_formt;

    return vva_valr_formt;
  exception
    when others then
      return null;
  end obten_valr_atrib_formt;
end sie_12_struc_aplic_cu_pkg;
/

Prompt Package Body SIE_12_STRUC_APLIC_PKG;
/* Formatted on 04/12/2013 11:35:25 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_12_STRUC_APLIC_PKG" as
  function obten_struc_aplic_formt (pnu_seqnc_struc in number)
    return varchar2 is
    vva_struc_aplic_formt                   vd_i_sie_12_struc_aplic.nom%type;
  begin
    select   sa.nom
      into   vva_struc_aplic_formt
      from   vd_i_sie_12_struc_aplic sa
     where   sa.seqnc = pnu_seqnc_struc;

    return vva_struc_aplic_formt;
  exception
    when others then
      return null;
  end obten_struc_aplic_formt;

  function obten_struc_aplic_formt (pva_code_struc in varchar2,
                                    pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2 is
    vva_struc_aplic_formt                   vd_i_sie_12_struc_aplic.nom%type;
  begin
    select   sa.nom
      into   vva_struc_aplic_formt
      from   vd_i_sie_12_struc_aplic sa
     where   sa.code = pva_code_struc and ref_prodt = pnu_prodt;

    return vva_struc_aplic_formt;
  exception
    when others then
      return null;
  end obten_struc_aplic_formt;

  procedure obten_struc_aplic_formt (pva_code_struc in varchar2,
                                     pva_adjec_demns   out varchar2,
                                     pva_struc_aplic_formt   out varchar2) is
  begin
    select   (select   adjec_demns
                from   vd_i_sie_12_struc_aplic_lang sal
               where   sal.ref_struc_aplic = sa.seqnc and sal.ref_lang = sie_07_util_pkg.obten_lang_sesn)
               adjec_demns,
             sa.nom
      into   pva_adjec_demns,
             pva_struc_aplic_formt
      from   vd_i_sie_12_struc_aplic sa
     where   sa.code = pva_code_struc and sa.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn;
  exception
    when others then
      null;
  end obten_struc_aplic_formt;

  function obten_code (pnu_seqnc in number)
    return varchar2 is
    vva_code                                varchar2 (23);
  begin
    select   code
      into   vva_code
      from   sie_12_struc_aplic sa
     where   sa.seqnc = pnu_seqnc;

    return vva_code;
  exception
    when others then
      return null;
  end obten_code;

  function obten_seqnc (pva_code in varchar2,
                        pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return number is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   sie_12_struc_aplic sa
     where   sa.code = pva_code
         and (sa.ref_prodt = pnu_prodt and pnu_prodt is not null
           or pnu_prodt is null);

    return vnu_seqnc;
  exception
    when others then
      return null;
  end obten_seqnc;

  /*function obten_valr_formt (pnu_struc_aplic in number,
                             pnu_seqnc_struc_aplic in number,
                             pnu_elemn_desr in number default kva_elemn_titre)
    return varchar2 is
    vva_fonct                               varchar2 (4000);
    vva_nom_coln                            varchar2 (50);
    vva_nom_struc_acces                     varchar2 (50);
    vva_valr_formt                          varchar2 (4000);
    vva_schem                               varchar2 (50);
  begin
    /*select nom_packg || '.'
           || decode (pnu_elemn_desr,
                      kva_elemn_titre, nom_fonct_valr_formt,
                      kva_elemn_titre_court, nom_fonct_valr_court_formt,
                      kva_elemn_descr, nom_fonct_descr_formt)
      into vva_fonct
      from vd_i_sie_12_struc_aplic sa
     where sa.seqnc = pnu_struc_aplic;
    if vva_fonct is not null
       and pnu_seqnc_struc_aplic is not null then
      execute immediate
           'begin sie_12_struc_aplic_pkg.gva_valr_formt := '
        || vva_fonct
        || '('
        || pnu_seqnc_struc_aplic
        || '); end;';
    end if;*/

  /*    select nom_coln
                  into vva_nom_coln
        from vd_i_sie_12_atrib_struc_aplic
       where ref_dv_natr_infor = sie_14_domn_valr_pkg.obten_seqnc (
                                   'NATR_INFOR_STRUC_APLIC',
                                   decode (pnu_elemn_desr,
                                           kva_elemn_titre, 'NOM_FORMT',
                                           kva_elemn_titre_court, 'TITRE_COURT',
                                           kva_elemn_descr, 'DESCR_LONG'),
                                   'SAFP')
             and ref_struc_aplic = pnu_struc_aplic;
      select nom_struc_acces_don
        into vva_nom_struc_acces
        from vd_i_sie_12_struc_aplic
       where seqnc = pnu_struc_aplic;
      select sie_11_prodt_pkg.obten_schem ( (select ref_prodt
                                               from vd_i_sie_12_struc_aplic
                                              where seqnc = pnu_struc_aplic))
        into vva_schem
        from dual;
      execute immediate
        'select ' ||
        vva_nom_coln ||
        ' from ' ||
        vva_schem ||
        '.' ||
        vva_nom_struc_acces ||
        ' where seqnc = ' ||
        pnu_seqnc_struc_aplic ||
        ' '
                                            into vva_valr_formt;
      return vva_valr_formt;
    --return sie_12_struc_aplic_pkg.gva_valr_formt;
    exception
      when others then
        return null;
    end obten_valr_formt;*/

  procedure creer_group (pnu_ref_struc_aplic in vd_i_sie_12_struc_aplic.seqnc%type) is
    cursor cur_struc_aplic (pnu_ref_struc_aplic in vd_i_sie_12_struc_aplic.seqnc%type) is
      select   *
        from   vd_i_sie_12_struc_aplic
       where   seqnc = pnu_ref_struc_aplic
            or pnu_ref_struc_aplic is null;

    --TODO::CARLO
    -- Vérifier si on doit enlever le IS NULL

    vre_struc_aplic                         vd_i_sie_12_struc_aplic%rowtype;

    procedure creer_group_type_acces (pva_code_type in varchar2,
                                      pva_nom_type in varchar2,
                                      pva_descr_type in varchar2,
                                      pva_indic_acces in varchar2,
                                      pva_indic_modfc in varchar2,
                                      pva_indic_suprs in varchar2,
                                      pva_indic_creat in varchar2,
                                      pre_struc_aplic in vd_i_sie_12_struc_aplic%rowtype) is
      vnu_ref_group_utils                     number;
    begin
      --begin
      -- Creer le groupe
      insert into   vd_i_sie_12_group_utils (code, nom, descr, ref_prodt)
           values   (substr (pva_code_type || '_' || pre_struc_aplic.code,
                             1,
                             23),
                     substr (pva_nom_type || ': ' || pre_struc_aplic.nom,
                             1,
                             100),
                     substr (pva_descr_type || ': ' || pre_struc_aplic.nom,
                             1,
                             400),
                     pre_struc_aplic.ref_prodt)
        returning   seqnc
             into   vnu_ref_group_utils;

      /*exception
                                                                        -- TODO:TRESE - Enlever apres la creation initiale des groupes pour les SA existantes
      when dup_val_on_index then
        select seqnc
          into vnu_ref_group_utils
          from vd_i_sie_12_group_utils
         where code = pva_code_type || '_' || pre_struc_aplic.code;
      end;*/

      -- Donner les droits
      insert
        into   vd_i_sie_12_defnt_acces (ref_group_utils,
                                        ref_struc_aplic,
                                        indic_acces,
                                        indic_modfc,
                                        indic_suprs,
                                        indic_creat)
      values   (vnu_ref_group_utils,
                pre_struc_aplic.seqnc,
                pva_indic_acces,
                pva_indic_modfc,
                pva_indic_suprs,
                pva_indic_creat);
    end creer_group_type_acces;
  begin
    for vre_struc_aplic in cur_struc_aplic (pnu_ref_struc_aplic) loop
      creer_group_type_acces ('ACCES',
                              'Accès en lecture seule à',
                              'Permet d''accéder en lecture aux pages liées à la structure applicative',
                              'ACORD',
                              'REFS',
                              'REFS',
                              'REFS',
                              vre_struc_aplic);

      creer_group_type_acces (
        'MODFC',
        'Accès en mise à jour à',
        'Permet la mise à jour (création et modification) des pages liées à la structure applicative',
        'ACORD',
        'ACORD',
        'REFS',
        'ACORD',
        vre_struc_aplic
      );

      creer_group_type_acces (
        'CONTR',
        'Accès total à',
        'Permet toutes les opérations (création, modification, suppression) sur les pages liées à la structure applicative',
        'ACORD',
        'ACORD',
        'ACORD',
        'ACORD',
        vre_struc_aplic
      );
    end loop;
  end creer_group;

  procedure creer_struc (pva_code in varchar2,
                         pva_nom in varchar2,
                         pva_descr in varchar2,
                         pva_code_prodt in varchar2) is
    vnu_seqnc                               number (10);
  begin
    vnu_seqnc :=
      creer_struc (pva_code,
                   pva_nom,
                   pva_descr,
                   pva_code_prodt);
  end creer_struc;

  function creer_struc (pva_code in varchar2,
                        pva_nom in varchar2,
                        pva_descr in varchar2,
                        pva_code_prodt in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    insert into   vd_i_sie_12_struc_aplic (nom, descr, ref_prodt, code)
         values   (pva_nom,
                   pva_descr,
                   sie_11_prodt_pkg.obten_prodt (pva_code_prodt),
                   pva_code)
      returning   seqnc
           into   vnu_seqnc;

    return vnu_seqnc;
  end creer_struc;

  procedure suprm_struc (pnu_seqnc in number) is
  begin
    delete from   vd_i_sie_12_struc_aplic
          where   seqnc = pnu_seqnc;
  end suprm_struc;

  procedure modfr_struc (pnu_seqnc in number,
                         pva_code in varchar2,
                         pva_nom in varchar2,
                         pva_descr in varchar2) is
  begin
    update   vd_i_sie_12_struc_aplic
       set   code = pva_code, nom = pva_nom, descr = pva_descr
     where   seqnc = pnu_seqnc;
  end modfr_struc;

  function obten_url_acces (pnu_seqnc_struc in number,
                            pnu_sspc in number,
                            pva_sapc in varchar2 default null,
                            pva_scpc in varchar2 default null,      --Param à enlever plus tard, il est maintenant forcé
                            pnu_sspi in number default null,
                            pva_sapi in varchar2 default null,
                            pva_scpi in varchar2 default null,
                            pnu_snpi in number default null,
                            pva_reint_sidf in varchar2 default 'N',
                            pva_valr_sess in varchar2 default null,
                            pva_valr_sidf in varchar2 default null)
    return varchar2 is
    vnu_numr_aplic_apex                     number;
    vnu_numr_page_apex                      number;
    vnu_sidf                                number;
    vva_sidf                                varchar2 (10);
    vva_url                                 varchar2 (4000);
    vva_scpc_force                          vd_i_sie_12_struc_aplic.code%type;
    vva_mode_debg                           varchar2 (3) default sie_07_util_pkg.v ('DEBUG');
  begin
    -- Obtenir l'application et la page cible
    select   pr.numr_aplic_apex,
             p.numr_apex,
             sa.code
      into   vnu_numr_aplic_apex,
             vnu_numr_page_apex,
             vva_scpc_force
      from   vd_i_sie_11_aplic pr,
             vd_i_sie_13_page p,
             vd_i_sie_12_struc_aplic sa
     where   pr.seqnc = p.ref_aplic and p.seqnc = sa.ref_page_forml and sa.seqnc = pnu_seqnc_struc;

    if pva_reint_sidf = 'O' then
      vnu_sidf := null;
    else
      vva_sidf := pva_valr_sidf;
    end if;

    vva_url :=
      sie_08_url_pkg.genr_url_en_contx (pnu_numr_aplic             => vnu_numr_aplic_apex,
                                        pnu_numr_page              => vnu_numr_page_apex,
                                        pva_sesn                   => pva_valr_sess,
                                        pva_sidf                   => pva_valr_sidf,
                                        pnu_sspc                   => pnu_sspc,
                                        pva_sapc                   => pva_sapc,
                                        pva_scpc                   => vva_scpc_force,
                                        pnu_sspi                   => pnu_sspi,
                                        pva_sapi                   => pva_sapi,
                                        pva_scpi                   => pva_scpi,
                                        pnu_snpi                   => pnu_snpi,
                                        pva_mode_debg              => vva_mode_debg);

    return vva_url;
  exception
    when others then
      return null;
  end obten_url_acces;

  function obten_url_liste (pnu_seqnc_struc in number,
                            pva_sapc in varchar2 default null,
                            pva_scpc in varchar2 default null,
                            pnu_sspi in number default null,
                            pva_sapi in varchar2 default null,
                            pva_scpi in varchar2 default null,
                            pnu_snpi in number default null,
                            pva_reint_sidf in varchar2 default 'N',
                            pva_valr_sess in varchar2 default null,
                            pva_valr_sidf in varchar2 default null)
    return varchar2 is
    vnu_numr_aplic_apex                     number;
    vnu_numr_page_apex                      number;
    vnu_sidf                                number;
    vva_scpc_force                          vd_i_sie_12_struc_aplic.code%type;
    vva_url                                 varchar2 (4000);
    vva_mode_debg                           varchar2 (3) default sie_07_util_pkg.v ('DEBUG');
  begin
    -- Obtenir l'application et la page cible
    select   pr.numr_aplic_apex,
             p.numr_apex,
             sa.code
      into   vnu_numr_aplic_apex,
             vnu_numr_page_apex,
             vva_scpc_force
      from   vd_i_sie_11_aplic pr,
             vd_i_sie_13_page p,
             vd_i_sie_12_struc_aplic sa
     where   pr.seqnc = p.ref_aplic and p.seqnc = sa.ref_page_liste and sa.seqnc = pnu_seqnc_struc;

    if pva_reint_sidf = 'O' then
      vnu_sidf := null;
    else
      vnu_sidf := pva_valr_sidf;
    end if;

    vva_url :=
      sie_08_url_pkg.genr_url_en_contx (pnu_numr_aplic             => vnu_numr_aplic_apex,
                                        pnu_numr_page              => vnu_numr_page_apex,
                                        pva_sesn                   => pva_valr_sess,
                                        pva_sidf                   => pva_valr_sidf,
                                        pnu_sspc                   => null,
                                        pva_sapc                   => pva_sapc,
                                        pva_scpc                   => vva_scpc_force,
                                        pnu_sspi                   => pnu_sspi,
                                        pva_sapi                   => pva_sapi,
                                        pva_scpi                   => pva_scpi,
                                        pnu_snpi                   => pnu_snpi,
                                        pva_mode_debg              => vva_mode_debg);

    return vva_url;
  exception
    when others then
      return null;
  end obten_url_liste;

  procedure maj_atrib_struc_aplic (pnu_struc_aplic in vd_i_sie_12_struc_aplic.seqnc%type) is
    vva_nom_struc_acces_don                 varchar2 (30);
  begin
    update   vd_i_sie_12_atrib_struc_aplic asa
       set   asa.indic_valid = 'N'
     where   ref_struc_aplic = pnu_struc_aplic;

    select   nom_struc_acces_don
      into   vva_nom_struc_acces_don
      from   vd_i_sie_12_struc_aplic
     where   seqnc = pnu_struc_aplic;

    if (vva_nom_struc_acces_don is not null) then
      --CONAL:: Ancien merge, bogue sur la partie du bas.  ie, allait chercher le schéma SIPI_AFW
      /*merge into vd_i_sie_12_atrib_struc_aplic asa
                                         using (select column_name
                    from all_tab_columns
                   where table_name = vva_nom_struc_acces_don
                         and (owner in
                                (select aa.owner
                                   from apex_aplic aa, vd_i_sie_11_prodt p
                                  where aa.id = p.numr_aplic_apex
                                        and p.ref_systm =
                                              (select ref_systm
                                                 from vd_sie_11_prodt
                                                where seqnc =
                                                        (select ref_prodt
                                                           from vd_i_sie_12_struc_aplic
                                                          where seqnc =
                                                                  pnu_struc_aplic)))
                              or owner in
                                   (select aa.owner
                                      from apex_aplic aa, vd_i_sie_11_prodt p
                                     where 'AFW' =
                                             (select s.code
                                                from vd_i_sie_11_systm s,
                                                     vd_i_sie_11_prodt p,
                                                     vd_i_sie_12_struc_aplic sa
                                               where s.seqnc = p.ref_systm
                                                     and p.seqnc =
                                                           sa.ref_prodt
                                                     and sa.seqnc =
                                                           pnu_struc_aplic)))) atc
              on (asa.nom_coln = atc.column_name
                  and asa.ref_struc_aplic = pnu_struc_aplic)
      when matched then
        update set indic_valid   = 'O'
      when not matched then
        insert     (nom_coln,                                     --nom_fonct,
                             ref_struc_aplic)
            values (atc.column_name,                        --atc.column_name,
                                    pnu_struc_aplic);*/

      merge into   vd_i_sie_12_atrib_struc_aplic asa
           using   (select   column_name
                      from   all_tab_columns
                     where   table_name = vva_nom_struc_acces_don
                         and (owner in (select   aa.owner
                                          from   apex_aplic aa,
                                                 vd_i_sie_11_aplic p
                                         where   aa.id = p.numr_aplic_apex
                                             and p.ref_prodt = (select   ref_prodt
                                                                  from   vd_i_sie_12_struc_aplic
                                                                 where   seqnc = pnu_struc_aplic))
                           or owner in
                                (select   aa.owner
                                   from   apex_aplic aa,
                                          vd_i_sie_11_prodt p,
                                          vd_i_sie_11_aplic ap,
                                          vd_i_sie_12_struc_aplic sa
                                  where   'AFW' = p.code
                                      and p.seqnc = sa.ref_prodt
                                      and sa.seqnc = pnu_struc_aplic
                                      and p.seqnc = ap.ref_prodt
                                      and aa.id = ap.numr_aplic_apex))) atc
              on   (asa.nom_coln = atc.column_name and asa.ref_struc_aplic = pnu_struc_aplic)
      when matched then
        update set indic_valid = 'O'
      when not matched then
        insert       (nom_coln,                                                                             --nom_fonct,
                               ref_struc_aplic)
            values   (atc.column_name,                                                                --atc.column_name,
                      pnu_struc_aplic);
    end if;
  end;

  procedure verfr_presn_tradc (pnu_struc_aplic number) is
    vnu_nombr_tradc                         number;
  begin
    select   count (1)
      into   vnu_nombr_tradc
      from   vd_sie_12_struc_aplic_lang
     where   ref_struc_aplic = pnu_struc_aplic;

    if (vnu_nombr_tradc = 0) then
      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SAF.000044',
                                                      pva_code_prodt             => 'AFW');
    end if;
  end;

  function obten_atrib_struc_aplic (pva_prodt in vd_sie_11_prodt.code%type,
                                    pva_code_struc_aplic in vd_sie_12_struc_aplic.code%type,
                                    pva_nom_coln_atrib in vd_sie_12_atrib_struc_aplic.nom_coln%type)
    return vd_sie_12_atrib_struc_aplic.seqnc%type is
    vnu_seqnc                               vd_sie_12_atrib_struc_aplic.seqnc%type;
  begin
    select   asa.seqnc
      into   vnu_seqnc
      from   vd_sie_11_prodt p,
             vd_sie_12_struc_aplic sa,
             vd_sie_12_atrib_struc_aplic asa
     where   p.code = pva_prodt
         and p.seqnc = sa.ref_prodt
         and sa.code = pva_code_struc_aplic
         and sa.seqnc = asa.ref_struc_aplic
         and asa.nom_coln = pva_nom_coln_atrib;

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_atrib_struc_aplic;

  function obten_nom_coln_atrib (pnu_seqnc in vd_sie_12_atrib_struc_aplic.nom_coln%type)
    return vd_sie_12_atrib_struc_aplic.nom_coln%type is
    vva_nom_coln                            vd_sie_12_atrib_struc_aplic.nom_coln%type;
  begin
    select   nom_coln
      into   vva_nom_coln
      from   vd_sie_12_atrib_struc_aplic
     where   seqnc = pnu_seqnc;

    return vva_nom_coln;
  end obten_nom_coln_atrib;
end sie_12_struc_aplic_pkg;
/

Prompt Package Body SIE_12_UTILS_PKG;
/* Formatted on 04/12/2013 11:35:25 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_12_utils_pkg as
  procedure init is
  begin
    -- Ne sert qu'a lancer le bloc PL d'initialisation du package
    null;
  end;

  function obten_code_usagr_conct (pva_indic_forcr_apex in varchar2 default 'N')
    return varchar2 is
  begin
    return sie_07_util_pkg.v ('APP_USER',
                              pva_indic_forcr_apex);
  exception
    when others then
      return null;
  end obten_code_usagr_conct;

  function obten_usagr_conct (pva_indic_forcr_apex in varchar2 default 'N')
    return number is
    vnu_seqnc_utils                         number (10);
  begin
    select   ut.seqnc
      into   vnu_seqnc_utils
      from   vd_i_sie_12_utils ut
     where   ut.code_utils = sie_07_util_pkg.v ('APP_USER',
                                                pva_indic_forcr_apex);

    return vnu_seqnc_utils;
  exception
    when others then
      return null;
  end obten_usagr_conct;

  function obten_nom_formt_de_code_utils (pva_code_utils in varchar2,
                                          pva_indic_conxn_pour in varchar2 default 'O',
                                          pva_indic_code in varchar2 default 'N')
    return varchar2 is
    vva_liste_code                          varchar2 (61);
    vva_nom                                 varchar2 (200);
    vva_code                                varchar2 (30);
    vva_nom_pour                            varchar2 (200);
    vva_code_pour                           varchar2 (30);
  begin
    --exemple: CARLO@CONAL:SIE@SIE

    if instr (pva_code_utils,
              ':') > 0 then
      vva_liste_code :=
        substr (pva_code_utils,
                1,
                instr (pva_code_utils,
                       ':') -
                1);
    else
      vva_liste_code := pva_code_utils;
    end if;

    if instr (vva_liste_code,
              '@') > 0 then
      vva_code :=
        substr (vva_liste_code,
                1,
                instr (vva_liste_code,
                       '@') -
                1);
      vva_code_pour :=
        substr (vva_liste_code,
                instr (vva_liste_code,
                       '@') +
                1);
    else
      vva_code := vva_liste_code;
    end if;

    select   ut.nom || ', ' || ut.prenm
      into   vva_nom
      from   vd_i_sie_12_utils ut
     where   ut.code_utils = vva_code;

    if pva_indic_conxn_pour = 'O' and vva_code_pour is not null then
      select   ut.nom || ', ' || ut.prenm
        into   vva_nom_pour
        from   vd_i_sie_12_utils ut
       where   ut.code_utils = vva_code_pour;
    end if;

    return    case pva_indic_code when 'O' then '(' || vva_code || ') ' else null end
           || vva_nom
           || case
                when pva_indic_conxn_pour = 'O' and vva_code_pour is not null then
                     ' pour '
                  || case pva_indic_code when 'O' then '(' || vva_code_pour || ') ' else null end
                  || vva_nom_pour
                else
                  null
              end;
  exception
    when others then
      return pva_code_utils;
  end obten_nom_formt_de_code_utils;

  procedure genr_audits (pva_code_audits in varchar2) is
  begin
    sie_15_htp_pkg.ecrir (
      obten_nom_formt_de_code_utils (
        sie_07_util_pkg.v ('P' || sie_13_page_pkg.obten_numr_apex_page || '_' || upper (pva_code_audits))
      ),
      false
    );
  end genr_audits;

  function obten_nom_formt (pnu_utils in number)
    return varchar2 is
    vva_nom                                 varchar2 (200);
    vnu_ref_emplo                           number (10);
  begin
    select   ut.prenm || ' ' || ut.nom
      into   vva_nom
      from   vd_i_sie_12_utils ut
     where   ut.seqnc = pnu_utils;

    return vva_nom;
  exception
    when no_data_found then
      return null;
  end obten_nom_formt;

  function obten_nom_formt_de_utils (pnu_utils in number)
    return varchar2 is
    vva_nom                                 varchar2 (200);
    vnu_ref_emplo                           number (10);
  begin
    select   ut.nom || ', ' || ut.prenm
      into   vva_nom
      from   vd_i_sie_12_utils ut
     where   ut.seqnc = pnu_utils;

    return vva_nom;
  exception
    when no_data_found then
      return null;
  end obten_nom_formt_de_utils;

  function verfr_usagr_vald (pva_code_utils in varchar2)
    return boolean is
    vva_indic_presn                         varchar2 (1) default 'N';
    vbo_vald                                boolean default false;
  begin
    select   'O'
      into   vva_indic_presn
      from   vd_i_sie_12_utils ut
     where   indic_verl = 'N'
         and (date_expir is null
           or date_expir >= sysdate)
         and ut.code_utils = upper (pva_code_utils);

    if vva_indic_presn = 'O' then
      vbo_vald := true;
    end if;

    return vbo_vald;
  exception
    when no_data_found then
      return false;
  end verfr_usagr_vald;


  function obten_utils_de_code (pva_code in varchar2)
    return number is
    vnu_utils                               number (10);
    vva_code                                varchar2 (30);
  begin
    if instr (pva_code,
              '@') > 0 then
      vva_code :=
        substr (pva_code,
                instr (pva_code,
                       '@') +
                1);
    else
      vva_code := pva_code;
    end if;

    select   seqnc
      into   vnu_utils
      from   vd_i_sie_12_utils u
     where   u.code_utils = upper (vva_code);

    return vnu_utils;
  exception
    when others then
      return null;
  end obten_utils_de_code;

  function obten_utils_de_courl (pva_courl in varchar2)
    return number is
    vnu_utils                               number (10);
  begin
    select   seqnc
      into   vnu_utils
      from   vd_i_sie_12_utils u
     where   upper (u.courl) = upper (pva_courl);

    return vnu_utils;
  exception
    when others then
      return null;
  end obten_utils_de_courl;

  function obten_utils_de_code_base_don (pva_code_base_don in varchar2)
    return number is
    vnu_utils                               number (10);
  begin
    select   seqnc
      into   vnu_utils
      from   vd_i_sie_12_utils u
     where   upper (u.code_utils_base_don) = upper (pva_code_base_don);

    return vnu_utils;
  exception
    when others then
      return null;
  end obten_utils_de_code_base_don;

  function obten_cle_encry_utils_conct
    return raw is
    vva_date_creat                          varchar2 (200);
  begin
    select      ora_hash (to_number (to_char (date_creat,
                                              'ddmmyy')) +
                          seqnc,
                          seqnc)
             || ora_hash (seqnc,
                          to_number (to_char (date_creat,
                                              'ddmmyy')))
             || seqnc
             || ora_hash (utils_creat)
             || to_char (date_creat,
                         'mmmmyydmmyymmddyyyymmddyydmmyydmmdd')
      into   vva_date_creat
      from   vd_sie_12_utils u
     where   u.seqnc = sie_12_utils_pkg.obten_usagr_conct ('O');

    return hextoraw (substr (vva_date_creat,
                             1,
                             32));
  end obten_cle_encry_utils_conct;

  function obten_code_utils (pnu_seqnc in number)
    return varchar2 is
    vva_code_utils                          vd_sie_12_utils.code_utils%type;
  begin
    select   code_utils
      into   vva_code_utils
      from   vd_sie_12_utils
     where   seqnc = pnu_seqnc;

    return vva_code_utils;
  exception
    when others then
      return null;
  end obten_code_utils;

  function creer_utils (pva_nom in varchar2,
                        pva_prenm in varchar2,
                        pva_code in varchar2,
                        pva_courl in varchar2,
                        pva_indic_verl in varchar2 default 'N',
                        pva_indic_chang_mot_passe in varchar2 default 'O',
                        pva_indic_actif in vd_i_sie_12_utils.indic_actif%type default 'N',
                        pva_parmt_authe_exter_afw in vd_i_sie_12_utils.parmt_authe_exter_afw%type default null)
    return number is
    vnu_seqnc                               number (10);
  begin
    insert
         into   vd_i_sie_12_utils (nom,
                                   prenm,
                                   code_utils,
                                   courl,
                                   indic_verl,
                                   indic_chang_mot_passe,
                                   indic_actif,
                                   parmt_authe_exter_afw)
       values   (pva_nom,
                 pva_prenm,
                 pva_code,
                 pva_courl,
                 pva_indic_verl,
                 pva_indic_chang_mot_passe,
                 pva_indic_actif,
                 pva_parmt_authe_exter_afw)
    returning   seqnc
         into   vnu_seqnc;

    return vnu_seqnc;
  end creer_utils;

  function obten_courl_utils (pnu_utils in number)
    return varchar2 is
    vva_courl                               vd_sie_12_utils.courl%type;
  begin
    select   u.courl
      into   vva_courl
      from   vd_sie_12_utils u
     where   u.seqnc = pnu_utils;

    return vva_courl;
  exception
    when others then
      return null;
  end obten_courl_utils;

  /*
            CONAL : Cette fonction est rendue obselete puisque laccès aux applications est maintenant en drilldown.
            Autrement, elle servait conserver la dernière application choisie par l'utilisateur.
            Peut-être trouver une nouvelle façon de la réutiliser ?
  */
  function obten_dernr_aplic (pnu_utils in number)
    return varchar2 is
    vva_prodt                               vd_i_sie_12_utils.dernr_prodt_acces%type;
  begin
    select   dernr_prodt_acces
      into   vva_prodt
      from   vd_i_sie_12_utils
     where   seqnc = pnu_utils;

    return vva_prodt;
  end obten_dernr_aplic;

  /*
        CONAL : Cette fonction est rendue obselete puisque laccès aux applications est maintenant en drilldown.
            Autrement, elle servait conserver la dernière application choisie par l'utilisateur.
            Peut-être trouver une nouvelle façon de la réutiliser ?
  */
  procedure updat_dernr_aplic (pnu_utils in number,
                               pva_nouv_prodt in varchar2) is
  begin
    update   vd_i_sie_12_utils
       set   dernr_prodt_acces = pva_nouv_prodt
     where   seqnc = pnu_utils;
  end updat_dernr_aplic;

  function obten_dernr_domn (pnu_utils in number)
    return varchar2 is
    vva_domn                                vd_i_sie_12_domn.code%type;
  begin
    select   dernr_domn_acces
      into   vva_domn
      from   vd_i_sie_12_utils
     where   seqnc = pnu_utils;

    return vva_domn;
  end obten_dernr_domn;

  procedure updat_dernr_domn (pnu_utils in number,
                              pva_nouv_domn in varchar2) is
  begin
    update   vd_i_sie_12_utils
       set   dernr_domn_acces = upper (pva_nouv_domn)
     where   seqnc = pnu_utils;
  end updat_dernr_domn;

  function genr_code_utils (pva_nom in vd_i_sie_12_utils.nom%type,
                            pva_prenm in vd_i_sie_12_utils.prenm%type)
    return vd_i_sie_12_utils.code_utils%type is
    vva_code_utils                          vd_i_sie_12_utils.code_utils%type;
    vnu_exist                               number;
    vnu_numr_incre                          number;

    cursor cur_utils (pva_code_utils in varchar2) is
      select     code_utils
          from   vd_i_sie_12_utils
         where   instr (code_utils,
                        pva_code_utils) = 1
      order by   to_number (substr (code_utils,
                                    length (pva_code_utils) + 1)) desc nulls last;

    rec_utils                               cur_utils%rowtype;
  begin
    vva_code_utils :=
      upper (   substr (pva_nom,
                        1,
                        3)
             || substr (pva_prenm,
                        1,
                        2));

    --Remplacer les caractères spéciaux
    vva_code_utils :=
      translate (vva_code_utils,
                 'àèìòùáéíóúýâêîôûäëïöüÿçñÀÈÌÒÙÁÉÍÓÚÝÂÊÎÔÛÄËÏÖÜÇÑ',
                 'aeiouaeiouyaeiouaeiouycnaeiouaeiouyaeiouaeioucn');
    vva_code_utils :=
      sie_07_util_pkg.multi_replc (vva_code_utils,
                                   'œ',
                                   'oe',
                                   'Œ',
                                   'OE');

    -- mettre en majuscules
    vva_code_utils := upper (vva_code_utils);

    open cur_utils (vva_code_utils);

    fetch cur_utils
    into rec_utils;

    if cur_utils%found then
      vnu_numr_incre :=
        to_number (nvl (substr (rec_utils.code_utils,
                                length (vva_code_utils) + 1),
                        1)) +
        1;
      vva_code_utils := vva_code_utils || vnu_numr_incre;
    end if;

    close cur_utils;

    return vva_code_utils;
  end genr_code_utils;

  procedure defnr_item_aplic_apex is
  begin
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_12_UTILS_CODE',
                                     obten_code_usagr_conct);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_12_UTILS',
                                     obten_usagr_conct);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_12_UTILS_NOM_FORMT',
                                     obten_nom_formt_de_utils (obten_usagr_conct));
  exception
    when others then
      raise;
  end defnr_item_aplic_apex;

  procedure modfr_nom_prenm_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                                   pva_nom in vd_i_sie_12_utils.nom%type,
                                   pva_prenm in vd_i_sie_12_utils.prenm%type) is
  begin
    update   vd_i_sie_12_utils
       set   nom = pva_nom, prenm = pva_prenm
     where   seqnc = pnu_utils;
  end modfr_nom_prenm_utils;

  procedure modfr_courl_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type,
                               pva_courl in vd_i_sie_12_utils.courl%type) is
  begin
    update   vd_i_sie_12_utils
       set   courl = pva_courl
     where   seqnc = pnu_utils;
  end modfr_courl_utils;

  function obten_audit_usagr_conct
    return varchar2 is
    vva_audit_usagr_conct                   varchar2 (4000);
  begin
    if gva_code_utils_pour is not null and gva_code_domn_pour is not null then
      vva_audit_usagr_conct :=
        gva_code_utils || '@' || gva_code_utils_pour || ':' || gva_code_domn || '@' || gva_code_domn_pour;
    else
      vva_audit_usagr_conct :=
        obten_code_usagr_conct || case when gva_code_domn is not null then ':' || gva_code_domn else null end;
    end if;

    return vva_audit_usagr_conct;
  end obten_audit_usagr_conct;

  function obten_usagr_conct_sql (pva_code_utils in varchar2)
    return number
    result_cache relies_on (sie_12_utils) is
    vnu_seqnc_utils                         number (10);
  begin
    select   ut.seqnc
      into   vnu_seqnc_utils
      from   vd_i_sie_12_utils ut
     where   ut.code_utils = pva_code_utils;

    return vnu_seqnc_utils;
  exception
    when others then
      return null;
  end obten_usagr_conct_sql;

  function obten_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return vd_i_sie_12_utils%rowtype is
    rec_utils                               vd_i_sie_12_utils%rowtype;
  begin
    select   *
      into   rec_utils
      from   vd_i_sie_12_utils
     where   seqnc = pnu_utils;

    return rec_utils;
  end obten_utils;

  procedure verlr_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type) is
  begin
    update   vd_i_sie_12_utils
       set   indic_verl = 'O'
     where   seqnc = pnu_utils;
  end verlr_utils;

  procedure devrl_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type) is
  begin
    update   vd_i_sie_12_utils
       set   indic_verl = 'N'
     where   seqnc = pnu_utils;
  end devrl_utils;

  procedure activ_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type) is
  begin
    update   vd_i_sie_12_utils
       set   indic_actif = 'O'
     where   seqnc = pnu_utils;
  end activ_utils;

  procedure desct_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type) is
  begin
    update   vd_i_sie_12_utils
       set   indic_actif = 'N'
     where   seqnc = pnu_utils;
  end desct_utils;

  function valdr_formt_code_utils (pva_code_utils in vd_i_sie_12_utils.code_utils%type)
    return boolean is
  begin
    return regexp_like (pva_code_utils,
                        '^[[:alnum:]]+(_[[:alnum:]]+)*$');
  end valdr_formt_code_utils;

  function valdr_formt_courl_utils (pva_courl in vd_i_sie_12_utils.courl%type)
    return boolean is
  begin
    return regexp_like (pva_courl,
                        '^[[:alnum:]]+((_|\.|\-|)[[:alnum:]]+)*@[[:alnum:]]+(\-|[[:alnum:]]+)*(\.[[:alnum:]]+){1,2}$');
  end valdr_formt_courl_utils;

  function verfc_apart_super_utils (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return boolean is
    vbo_reslt                               boolean default false;

    cursor cur_super_utils is
      select   1
        from   vd_sie_12_lien_group_utils lgu,
               vd_sie_12_group_utils gu
       where   lgu.ref_group = gu.seqnc
           and gu.code = 'SUPER_UTILS'
           and lgu.ref_utils = pnu_utils
           and lgu.ref_domn = sie_12_domn_pkg.obten_domn_sesn
           and lgu.date_debut_efect <= sysdate
           and (lgu.date_fin_efect >= sysdate
             or lgu.date_fin_efect is null)
           and rownum = 1;
  begin
    for rec_su in cur_super_utils loop
      vbo_reslt := true;
    end loop;

    return vbo_reslt;
  end verfc_apart_super_utils;

  function verfc_apart_autor_conxn_derv (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return boolean is
    vbo_reslt                               boolean default false;

    cursor cur_autor_conxn_derv is
      select   1
        from   vd_sie_12_lien_group_utils lgu,
               vd_sie_12_group_utils gu
       where   lgu.ref_group = gu.seqnc
           and gu.code = 'AUTOR_CONXN_DERV'
           and gu.ref_prodt = sie_11_prodt_pkg.obten_prodt ('AFW')
           and lgu.ref_utils = pnu_utils
           and lgu.ref_domn = sie_12_domn_pkg.obten_domn_sesn
           and lgu.date_debut_efect <= sysdate
           and (lgu.date_fin_efect >= sysdate
             or lgu.date_fin_efect is null)
           and rownum = 1;
  begin
    for rec_acd in cur_autor_conxn_derv loop
      vbo_reslt := true;
    end loop;

    return vbo_reslt;
  end verfc_apart_autor_conxn_derv;

  function obten_parmt_authe_exter_afw (pnu_utils in vd_i_sie_12_utils.seqnc%type)
    return vd_i_sie_12_utils.parmt_authe_exter_afw%type is
    vva_parmt_authe_exter_afw               vd_i_sie_12_utils.parmt_authe_exter_afw%type;
  begin
    select   su.parmt_authe_exter_afw
      into   vva_parmt_authe_exter_afw
      from   vd_sie_12_utils su
     where   su.seqnc = pnu_utils;

    return vva_parmt_authe_exter_afw;
  exception
    when others then
      return null;
  end obten_parmt_authe_exter_afw;
begin
  gva_code_utils := sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_UTILS');
  gva_code_utils_pour := sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_UTILS_POUR');
  gva_code_domn := sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN');
  gva_code_domn_pour := sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_DOMN_POUR');
end sie_12_utils_pkg;
/

Prompt Package Body SIE_13_CONDT_PILTB_PKG;
/* Formatted on 04/12/2013 11:35:26 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_CONDT_PILTB_PKG" as
  gva_en_modfc                            varchar2 (1);
  gva_en_creat                            varchar2 (1);
  gva_cas_err_vrai                        varchar2 (1999);
  gva_condt_creat                constant varchar2 (1000) default 'SIE_07_UTIL_PKG.NV(''P%PAGE%_SEQNC'') IS NOT NULL';
  gnu_page_courn                          number (10);
  gnu_seqnc_page_courn                    number (10);
  gva_cachr_tous_boutn                    varchar2 (1);
  gva_lectr_seule_tout                    varchar2 (1);

  function obten_indic_lectr_seul_cas (pva_code_cas in varchar2)
    return varchar2 is
    cursor cur_condt_piltb is
      select   1
        from   table (sie_07_util_pkg.strin_to_table_nu (gva_cas_err_vrai)) cls_vrai,
               vd_sie_13_condt_piltb cp
       where   cp.ref_page = gnu_seqnc_page_courn
           and cp.condt is not null
           and cp.code = pva_code_cas
           and cp.seqnc = cls_vrai.column_value
           and rownum = 1;
  begin
    for rec_condt_piltb in cur_condt_piltb loop
      return 'O';
    end loop;

    return 'N';
  end obten_indic_lectr_seul_cas;

  function obten_lectr_seul_cas (pva_code_cas in varchar2)
    return boolean is
  begin
    return obten_indic_lectr_seul_cas (pva_code_cas) = 'O';
  end obten_lectr_seul_cas;

  function verfr_condt_retn (pva_code_condt in varchar2)
    return boolean is
  begin
    return obten_indic_lectr_seul_cas (pva_code_condt) = 'O';
  end verfr_condt_retn;

  function verfr_condt_retn_va (pva_code_condt in varchar2)
    return varchar2 is
  begin
    return obten_indic_lectr_seul_cas (pva_code_condt);
  end verfr_condt_retn_va;

  function obten_indic_lectr_seul
    return varchar2 is
  begin
    if gva_cas_err_vrai is not null then
      return 'O';
    else
      return 'N';
    end if;
  end obten_indic_lectr_seul;

  function obten_lectr_seul
    return boolean is
  begin
    return gva_cas_err_vrai is not null;
  end obten_lectr_seul;

  function obten_lectr_seul (pva_nom_item in varchar2)
    return boolean is
    vnu_exist                               pls_integer default 0;
  begin
    if gva_cas_err_vrai is not null then
      select   count (1)
        into   vnu_exist
        from   table (sie_07_util_pkg.strin_to_table_nu (gva_cas_err_vrai)) cls_vrai,
               vd_sie_13_page_item pi,
               vd_sie_13_lien_condt_piltb lcp
       where   lcp.ref_page_item = pi.seqnc
           and pi.ref_page = gnu_seqnc_page_courn
           and pi.nom_apex = pva_nom_item
           and lcp.ref_page_item = pi.seqnc
           and lcp.indic_lectr_seul = 'O'
           and lcp.ref_condt_piltb = cls_vrai.column_value
           and rownum = 1;
    end if;

    if vnu_exist = 0 then
      sie_07_util_pkg.ajout_info_debug ('SIE_13 - L''item est affiché ');
    else
      sie_07_util_pkg.ajout_info_debug ('SIE_13 - L''item "' || pva_nom_item || '" est en lecture seule ');
    end if;

    return vnu_exist != 0;
  end obten_lectr_seul;

  function obten_afich (pva_nom_item in varchar2)
    return boolean is
    vnu_exist                               pls_integer default 0;
  begin
    if gva_cas_err_vrai is not null then
      select   count (1)
        into   vnu_exist
        from   table (sie_07_util_pkg.strin_to_table_nu (gva_cas_err_vrai)) cls_vrai,
               vd_sie_13_page_item pi,
               vd_sie_13_lien_condt_piltb lcp
       where   lcp.ref_page_item = pi.seqnc
           and pi.ref_page = gnu_seqnc_page_courn
           and pi.nom_apex = pva_nom_item
           and lcp.ref_page_item = pi.seqnc
           and lcp.indic_afich = 'N'
           and lcp.ref_condt_piltb = cls_vrai.column_value
           and rownum = 1;
    end if;

    if vnu_exist = 0 then
      sie_07_util_pkg.ajout_info_debug ('SIE_13 - L''item est affiché ');
    else
      sie_07_util_pkg.ajout_info_debug ('SIE_13 - L''item "' || pva_nom_item || '" n''EST PAS affiché ');
    end if;

    return vnu_exist = 0;
  end obten_afich;

  function obten_lectr_seul_va (pva_nom_item in varchar2)
    return varchar2 is
  begin
    if obten_lectr_seul (pva_nom_item) then
      return 'O';
    else
      return 'N';
    end if;
  end obten_lectr_seul_va;

  function obten_afich_va (pva_nom_item in varchar2)
    return varchar2 is
  begin
    if obten_afich (pva_nom_item) then
      return 'O';
    else
      return 'N';
    end if;
  end obten_afich_va;

  procedure lectr_seule_tout is
  begin
    gva_lectr_seule_tout := 'O';
    gnu_page_courn := sie_07_util_pkg.nv ('APP_PAGE_ID');
  end lectr_seule_tout;

  procedure cachr_tous_boutn is
  begin
    gva_cachr_tous_boutn := 'O';
    gnu_page_courn := sie_07_util_pkg.nv ('APP_PAGE_ID');
  end cachr_tous_boutn;

  procedure defn_contx_exect_page is
    vva_contn_formt                         varchar2 (1999)
                                              default replace (gva_condt_creat,
                                                               '%PAGE%',
                                                               sie_07_util_pkg.nv ('APP_PAGE_ID'));
    vva_condt_subst                         varchar2 (4000);

    cursor cur_condt_piltb (pnu_seqnc_page in number) is
      select   cp.seqnc,
               cp.condt,
               cp.nom
        from   vd_sie_13_condt_piltb cp
       where   cp.ref_page = pnu_seqnc_page and cp.condt is not null;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE_13 - Définir le contexte de page');
    gva_cas_err_vrai := null;

    if gnu_page_courn != sie_07_util_pkg.nv ('APP_PAGE_ID')
    or gnu_page_courn is null then
      gva_cachr_tous_boutn := 'N';
      gva_lectr_seule_tout := 'N';
      gnu_page_courn := sie_07_util_pkg.nv ('APP_PAGE_ID');
    end if;

    select   pa.seqnc
      into   gnu_seqnc_page_courn
      from   vd_sie_13_page pa
     where   pa.ref_aplic = sie_11_aplic_pkg.obten_aplic_sesn () and pa.numr_apex = gnu_page_courn;

    for rec_condt_piltb in cur_condt_piltb (gnu_seqnc_page_courn) loop
      vva_condt_subst := aa.do_substitutions (rec_condt_piltb.condt);

      if sie_05_forml_noyau_pkg.resdr_condt_simple_booln (vva_condt_subst) then
        if gva_cas_err_vrai is null then
          gva_cas_err_vrai := rec_condt_piltb.seqnc;
        else
          gva_cas_err_vrai := gva_cas_err_vrai || ':' || rec_condt_piltb.seqnc;
        end if;

        sie_07_util_pkg.ajout_info_debug (
          'SIE_13 - Conditions "' || rec_condt_piltb.nom || '" RETENUE dans l''évaluation'
        );
      else
        sie_07_util_pkg.ajout_info_debug (
          'SIE_13 - Conditions "' || rec_condt_piltb.nom || '" non retenue dans l''évaluation'
        );
      end if;
    end loop;

    if sie_05_forml_noyau_pkg.resdr_condt_simple_booln (vva_contn_formt) then
      gva_en_creat := 'O';
      gva_en_modfc := 'N';
    else
      gva_en_creat := 'N';
      gva_en_modfc := 'N';
    end if;
  exception
    when others then
      null;
  end defn_contx_exect_page;

  procedure ajout_lien_cas_lectr (pnu_seqnc_cas in number,
                                  pnu_page in number) is
  begin
    insert into   vd_i_sie_13_lien_condt_piltb (ref_page_item, ref_condt_piltb, indic_lectr_seul)
      select   pi.seqnc,
               pnu_seqnc_cas,
               'N'
        from   vd_i_sie_13_page_item pi
       where   pi.ref_page = pnu_page and pi.type_item = 'ITEM';
  end ajout_lien_cas_lectr;

  procedure ajout_lien_cas_lectr_item (pnu_item in number,
                                       pnu_page in number,
                                       pnu_aplic in number default sie_04_contx_pkg.obten_seqnc_contx ('APLIC')) is
  begin
    insert into   vd_i_sie_13_lien_condt_piltb (ref_page_item, ref_condt_piltb, indic_lectr_seul, dnr_ref_aplic)
      select   pnu_item,
               cp.seqnc,
               'N',
               pnu_aplic
        from   vd_sie_13_condt_piltb cp
       where   cp.ref_page = pnu_page;
  end ajout_lien_cas_lectr_item;
end sie_13_condt_piltb_pkg;
/

Prompt Package Body SIE_13_MENU_PKG;
/* Formatted on 04/12/2013 11:35:26 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_13_menu_pkg as
  function obten_url_cible (pnu_item_menu in number /*,
                                                                             pnu_item_parnt in number default null*/
                                                   )
    return varchar2 is
    vnu_dv_valr_url                         number (10);
    vva_forml_valr_url                      varchar2 (4000);
    vnu_numr_aplic                          number;
    vnu_numr_page                           number;
    vva_efacr_cache                         varchar2 (1000);
    vnu_dv_valr_reqst                       number (10);
    vva_forml_valr_reqst                    varchar2 (4000);
    vva_indic_reint_pagnt                   varchar2 (1);
    vva_indic_reint_page_ir                 varchar2 (1);
    vva_indic_clear_page_ir                 varchar2 (1);
    vva_indic_soums_page                    varchar2 (1);
    vva_indic_reint_navgt                   varchar2 (1);
    vnu_dv_valr_scpc                        number (10);
    vva_forml_valr_scpc                     varchar2 (4000);
    vnu_dv_valr_sspc                        number (10);
    vva_forml_valr_sspc                     varchar2 (4000);
    vnu_dv_valr_sapc                        number (10);
    vva_forml_valr_sapc                     varchar2 (4000);
    vnu_dv_valr_scpi                        number (10);
    vva_forml_valr_scpi                     varchar2 (4000);
    vnu_dv_valr_sspi                        number (10);
    vva_forml_valr_sspi                     varchar2 (4000);
    vnu_dv_valr_sapi                        number (10);
    vva_forml_valr_sapi                     varchar2 (4000);
    vnu_dv_valr_snpi                        number (10);
    vva_forml_valr_snpi                     varchar2 (4000);
    vva_indic_gerer_sidf                    vd_i_sie_13_item_menu.indic_gerer_sidf%type;
    vnu_valr_sidf                           number;
    vva_url                                 varchar2 (4000);

    type typ_rec_page is record (numr_page_apex number);

    type typ_tab_page is table of typ_rec_page
                           index by pls_integer;

    gta_page                                typ_tab_page;

    /* TODO:ALEX, à compléter selon le traitement */
    procedure trait_type_insta (pnu_dv_valr_insta in number,
                                pva_valr_insta in out varchar2) is
      vva_code_dv_valr_insta                  varchar2 (23);
    begin
      vva_code_dv_valr_insta := sie_14_domn_valr_pkg.obten_code (pnu_dv_valr_insta);

      case vva_code_dv_valr_insta
        when 'ITEM' then
          pva_valr_insta := sie_07_util_pkg.v (pva_valr_insta);
        when 'PL/SQL' then
          pva_valr_insta := sie_07_util_pkg.obten_reslt_expre_plsql (pva_valr_insta);
        else
          pva_valr_insta := pva_valr_insta;
      end case;
    end trait_type_insta;

    procedure alimn_tabl_page (pva_efacr_cache in varchar2) is
      vva_efacr_cache                         varchar2 (1000) default pva_efacr_cache;
      vva_seprt_page                          varchar2 (1) default ':';
      vnu_postn                               pls_integer;
      i                                       pls_integer;
    begin
      i := gta_page.count ();
      vnu_postn :=
        instr (vva_efacr_cache,
               vva_seprt_page);

      if vnu_postn = 0 then
        gta_page (i).numr_page_apex := to_number (vva_efacr_cache);
      else
        gta_page (i).numr_page_apex :=
          to_number (substr (vva_efacr_cache,
                             1,
                             vnu_postn - 1));
        vva_efacr_cache :=
          substr (vva_efacr_cache,
                  vnu_postn + 1);

        while vnu_postn != 0 loop
          i := gta_page.count ();
          vnu_postn :=
            instr (vva_efacr_cache,
                   vva_seprt_page);

          if vnu_postn = 0 then
            gta_page (i).numr_page_apex := to_number (vva_efacr_cache);
          else
            gta_page (i).numr_page_apex :=
              to_number (substr (vva_efacr_cache,
                                 1,
                                 vnu_postn - 1));
          end if;

          vva_efacr_cache :=
            substr (vva_efacr_cache,
                    vnu_postn + 1);
        end loop;
      end if;
    end alimn_tabl_page;
  begin
    select   ref_dv_valr_url,
             forml_valr_url,
             ref_page_numr_apex,
             ref_prodt_numr_apex_menu,
             efacr_cache,
             ref_dv_valr_reqst,
             forml_valr_reqst,
             indic_reint_pagnt,
             indic_reint_page_ir,
             indic_clear_page_ir,
             indic_soums_page,
             indic_reint_navgt,
             ref_dv_valr_scpc,
             forml_valr_scpc,
             ref_dv_valr_sspc,
             forml_valr_sspc,
             ref_dv_valr_sapc,
             forml_valr_sapc,
             ref_dv_valr_scpi,
             forml_valr_scpi,
             ref_dv_valr_sspi,
             forml_valr_sspi,
             ref_dv_valr_sapi,
             forml_valr_sapi,
             ref_dv_valr_snpi,
             forml_valr_snpi,
             indic_gerer_sidf
      into   vnu_dv_valr_url,
             vva_forml_valr_url,
             vnu_numr_page,
             vnu_numr_aplic,
             vva_efacr_cache,
             vnu_dv_valr_reqst,
             vva_forml_valr_reqst,
             vva_indic_reint_pagnt,
             vva_indic_reint_page_ir,
             vva_indic_clear_page_ir,
             vva_indic_soums_page,
             vva_indic_reint_navgt,
             vnu_dv_valr_scpc,
             vva_forml_valr_scpc,
             vnu_dv_valr_sspc,
             vva_forml_valr_sspc,
             vnu_dv_valr_sapc,
             vva_forml_valr_sapc,
             vnu_dv_valr_scpi,
             vva_forml_valr_scpi,
             vnu_dv_valr_sspi,
             vva_forml_valr_sspi,
             vnu_dv_valr_sapi,
             vva_forml_valr_sapi,
             vnu_dv_valr_snpi,
             vva_forml_valr_snpi,
             vva_indic_gerer_sidf
      from   vd_sie_13_item_menu
     where   seqnc = pnu_item_menu;

    if vva_forml_valr_url is null and vnu_numr_page is null then
      return null;
    end if;

    --Effacer la cache, réinit la navgt, soums_page
    if vva_efacr_cache is not null then
      --Alimenter le tableau
      alimn_tabl_page (vva_efacr_cache);

      for i in gta_page.first .. gta_page.last loop
        apex_util.clear_page_cache (gta_page (i).numr_page_apex);
      end loop;
    end if;

    if vva_indic_reint_page_ir = 'O' then
      apex_util.ir_reset (vnu_numr_page);
    end if;

    if vva_indic_clear_page_ir = 'O' then
      apex_util.ir_clear (vnu_numr_page);
    end if;

    if vva_indic_reint_pagnt = 'O' then
      apex_util.clear_page_cache (vnu_numr_page);
    end if;

    if vva_indic_soums_page = 'O' then
      if vva_forml_valr_reqst is not null then
        vva_forml_valr_reqst := vva_forml_valr_reqst || ',BRANCH_TO_PAGE_ACCEPT';
      else
        vva_forml_valr_reqst := 'BRANCH_TO_PAGE_ACCEPT';
      end if;
    end if;

    --Traiter les valeurs saf items
    --SIDF seulement
    if vva_indic_gerer_sidf = 'O' then
      vnu_valr_sidf := sie_07_util_pkg.nv ('SIDF');
    else
      vnu_valr_sidf := null;
    end if;

    trait_type_insta (vnu_dv_valr_url,
                      vva_forml_valr_url);
    trait_type_insta (vnu_dv_valr_scpc,
                      vva_forml_valr_scpc);
    trait_type_insta (vnu_dv_valr_sspc,
                      vva_forml_valr_sspc);
    trait_type_insta (vnu_dv_valr_sapc,
                      vva_forml_valr_sapc);
    trait_type_insta (vnu_dv_valr_scpi,
                      vva_forml_valr_scpi);
    trait_type_insta (vnu_dv_valr_sspi,
                      vva_forml_valr_sspi);
    trait_type_insta (vnu_dv_valr_sapi,
                      vva_forml_valr_sapi);
    trait_type_insta (vnu_dv_valr_snpi,
                      vva_forml_valr_snpi);

    vva_url :=
      nvl (vva_forml_valr_url,
           sie_08_url_pkg.genr_url (
             vnu_numr_aplic,
             vnu_numr_page,
             pva_nom_varbl_1            => 'SIDF',
             pva_valr_varbl_1           => vnu_valr_sidf,
             pva_nom_varbl_2            => case when vnu_dv_valr_scpc is not null then 'SCPC' else null end,
             pva_valr_varbl_2           => vva_forml_valr_scpc,
             pva_nom_varbl_3            => case when vnu_dv_valr_sspc is not null then 'SSPC' else null end,
             pva_valr_varbl_3           => vva_forml_valr_sspc,
             pva_nom_varbl_4            => case when vnu_dv_valr_sapc is not null then 'SAPC' else null end,
             pva_valr_varbl_4           => vva_forml_valr_sapc,
             pva_nom_varbl_5            => case when vnu_dv_valr_scpi is not null then 'SCPI' else null end,
             pva_valr_varbl_5           => vva_forml_valr_scpi,
             pva_nom_varbl_6            => case when vnu_dv_valr_sspi is not null then 'SSPI' else null end,
             pva_valr_varbl_6           => vva_forml_valr_sspi,
             pva_nom_varbl_7            => case when vnu_dv_valr_sapi is not null then 'SAPI' else null end,
             pva_valr_varbl_7           => vva_forml_valr_sapi,
             pva_nom_varbl_8            => case when vnu_dv_valr_snpi is not null then 'SNPI' else null end,
             pva_valr_varbl_8           => vva_forml_valr_snpi,
             /* pva_nom_varbl_9   => case
                                                when pnu_item_parnt is not null then
                                      'SADA'
                                    else
                                      null
                                   end,
              pva_valr_varbl_9  => pnu_item_parnt,*/
             pva_optio_reqst            => vva_forml_valr_reqst
           ));

    return nvl (vva_url, '#');
  end obten_url_cible;

  function obten_url_cible_js (pnu_item_menu in number,
                               pnu_item_racn in number default null)
    -- À utiliser que dans un menu avec un query dynamic (List dynamique)
    return varchar2 is
  begin
    return    'javascript:afw.sie_21.actio_dynmq.sie_13_menu_redrc.redrc('
           || pnu_item_racn
           || ','''
           || obten_url_cible (pnu_item_menu)
           || ''')';
  end obten_url_cible_js;

  function valdt_noeud_actif (pnu_item_menu in number,
                              pnu_menu in number)
    return varchar2 is
  begin
    if sie_12_menu_pkg.obten_item_racn (pnu_menu) = pnu_item_menu then
      return 'YES';
    else
      return 'NO';
    end if;
  end valdt_noeud_actif;

  function verfr_droit_acces (pnu_item_menu in number)
    return number is
    vva_code_struc_aplic                    varchar2 (23);
  begin
    begin
      select   sa.code
        into   vva_code_struc_aplic
        from   vd_i_sie_13_item_menu im,
               vd_i_sie_12_struc_aplic sa
       where   im.seqnc = pnu_item_menu and im.ref_struc_aplic is not null and sa.seqnc = im.ref_struc_aplic;
    exception
      when no_data_found then
        null;
    end;

    --Structure sur item non-trouvée, utiliser celle de la page cible
    if vva_code_struc_aplic is null then
      select   sa.code
        into   vva_code_struc_aplic
        from   vd_sie_13_item_menu im,
               vd_i_sie_12_struc_aplic sa
       where   im.seqnc = pnu_item_menu and sa.seqnc = im.ref_page_struc_aplic;
    end if;

    return sie_12_secrt_pkg.verfc_droit_acces_numrq (vva_code_struc_aplic,
                                                     'O',
                                                     null,
                                                     null,
                                                     null,
                                                     null);
  exception
    when no_data_found then
      return 1;
  end verfr_droit_acces;

  function verfr_enfan_exist (pnu_item_menu in number)
    return boolean is
    vnu_void                                number (1);
  begin
    select   1
      into   vnu_void
      from   vd_i_sie_13_item_menu
     where   ref_item_menu = pnu_item_menu;

    return true;
  exception
    when no_data_found then
      return false;
    when too_many_rows then
      return true;
  end verfr_enfan_exist;

  function obten_libl (pnu_item_menu in number)
    return varchar2 is
    vva_valr_insta_code                     varchar2 (23);
    vva_forml_libl                          varchar2 (4000);
    vva_libl                                varchar2 (200);
  begin
    select   forml_libl,
             sie_14_domn_valr_pkg.obten_code (ref_dv_valr_insta_libl)
      into   vva_forml_libl,
             vva_valr_insta_code
      from   vd_i_sie_13_item_menu
     where   seqnc = pnu_item_menu;


    --TODO:ALEX, ajouter par préférence
    case vva_valr_insta_code
      when 'ITEM' then
        vva_libl := sie_07_util_pkg.v (vva_forml_libl);
      when 'PL/SQL' then
        vva_libl := sie_07_util_pkg.obten_reslt_expre_plsql (vva_forml_libl);
      else
        vva_libl := vva_forml_libl;
    end case;

    return vva_libl;
  end obten_libl;

  function trait_condt_afich (pnu_item_menu in number)
    return boolean is
    vbo_reslt                               boolean default true;
    vva_forml_condt_afich                   vd_sie_13_item_menu.forml_condt_afich%type;
  begin
    select   forml_condt_afich
      into   vva_forml_condt_afich
      from   vd_sie_13_item_menu
     where   seqnc = pnu_item_menu;

    --TODO CONAL, prochainement, gérer les différentes possibilités de "Condition Display" comme apex le fait
    --avec deux champs d'expressions et un type d'expression à traiter (DV)
    --Pour l'instant, seulement gérer du pl/sql
    if vva_forml_condt_afich is not null then
      vbo_reslt := sie_07_util_pkg.obten_reslt_expre_plsql_bool (vva_forml_condt_afich);
    end if;

    return vbo_reslt;
  end trait_condt_afich;

  function trait_condt_afich_numbr (pnu_item_menu in number)
    return number is
    vnu_numbr                               pls_integer;
  begin
    if trait_condt_afich (pnu_item_menu) then
      vnu_numbr := 1;
    else
      vnu_numbr := 0;
    end if;

    return vnu_numbr;
  end trait_condt_afich_numbr;

  function obten_menu_sesn (pva_code_menu in varchar2,
                            pva_mode in varchar2 default 'PRODT')
    return number is
    vnu_seqnc                               number (10);
  begin
    select   m.seqnc
      into   vnu_seqnc
      from   vd_i_sie_13_menu m
     where   m.code = pva_code_menu and pva_mode = 'PRODT' and m.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn;

    return vnu_seqnc;
  end obten_menu_sesn;

  function obten_menu_part_item_menu (pnu_item_menu in number)
    return number is
    vnu_seqnc                               number (10);
  begin
    select   im.ref_menu
      into   vnu_seqnc
      from   vd_i_sie_13_item_menu im
     where   seqnc = pnu_item_menu;

    return vnu_seqnc;
  end obten_menu_part_item_menu;

  function obten_resrc_aditn (pnu_menu in number)
    return varchar2 is
    vva_resrc_aditn                         varchar2 (4000);
  begin
    select   resrc_aditn
      into   vva_resrc_aditn
      from   sie_13_menu
     where   seqnc = pnu_menu;
  end obten_resrc_aditn;
end sie_13_menu_pkg;
/

Prompt Package Body SIE_13_MIME_TYPE_PKG;
/* Formatted on 04/12/2013 11:35:26 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_13_mime_type_pkg as
  function obten_icon (pnu_mime_type in number,
                       pva_indic_chemn_compl in varchar2 default 'O')
    return varchar2 is
    vva_icon                                varchar2 (100);
  begin
    select   case when pva_indic_chemn_compl = 'O' then '/res/sie/' || nom_icon else nom_icon end
      into   vva_icon
      from   vd_sie_13_mime_type mt,
             vd_sie_13_type_fichr tf
     where   tf.seqnc = mt.ref_type_fichr and mt.seqnc = pnu_mime_type;

    return vva_icon;
  exception
    when no_data_found then
      return null;
  end obten_icon;

  function obten_seqnc (pva_nom_fichr in varchar2)
    return number is
    vnu_seqnc                               number (10);
    vva_ext                                 varchar2 (10);
  begin
    if instr (pva_nom_fichr,
              '.') > 1 then
      vva_ext :=
        substr (pva_nom_fichr,
                instr (pva_nom_fichr,
                       '.',
                       -1));
    end if;

    select   seqnc
      into   vnu_seqnc
      from   (select   seqnc,
                       rank () over (order by ordre_choix) rg
                from   vd_sie_13_mime_type mt
               where   mt.ext = vva_ext)
     where   rg = 1;

    return vnu_seqnc;
  exception
    when no_data_found or too_many_rows then
      return null;
  end obten_seqnc;

  function obten_seqnc (pva_mime_type in varchar2,
                        pva_nom_fichr in varchar2)
    return number is
    vnu_seqnc                               number (10);
    vva_ext                                 varchar2 (10);
  begin
    if instr (pva_nom_fichr,
              '.') > 1 then
      vva_ext :=
        substr (pva_nom_fichr,
                instr (pva_nom_fichr,
                       '.',
                       -1));
    end if;

    select   seqnc
      into   vnu_seqnc
      from   (select   seqnc,
                       rank () over (order by ordre_choix) rg
                from   vd_sie_13_mime_type mt
               where   mt.mime_type = pva_mime_type
                   and (mt.ext = vva_ext
                     or vva_ext is null))
     where   rg = 1;

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_seqnc;

  function obten_type_fichr (pnu_mime_type in number)
    return number is
    vnu_type_fichr                          number (10);
  begin
    select   ref_type_fichr
      into   vnu_type_fichr
      from   vd_i_sie_13_mime_type
     where   seqnc = pnu_mime_type;

    return vnu_type_fichr;
  end obten_type_fichr;
end sie_13_mime_type_pkg;
/

Prompt Package Body SIE_13_NAVGT_NOYAU_PKG;
/* Formatted on 04/12/2013 11:35:26 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_NAVGT_NOYAU_PKG" as
  cursor cur_item_rechr (pnu_ref_page in number,
                         pva_schem in varchar2,
                         pva_table in varchar2,
                         pva_inclu_non_rechr in varchar2 default 'N') is
    select   aip.source nom_coln,
             aip.name nom_item,
             null type_don,
             aip.format_mask formt,
             sie_07_util_pkg.v (aip.name) valr_rechr,
             pi.indic_rechr
      from   vd_i_sie_13_page_item pi,
             apex_item_page aip
     where   pi.ref_page = pnu_ref_page
         and (pva_inclu_non_rechr = 'O'
           or pi.indic_rechr = 'O')
         and aip.id = pi.id_apex;


  function obten_item_rechr (pnu_ref_page in number,
                             pva_schem in varchar2,
                             pva_table in varchar2,
                             pva_inclu_non_rechr in varchar2 default 'N')
    return typ_arr_item_rechr is
    var_item_rechr                          typ_arr_item_rechr;
  begin
    open cur_item_rechr (pnu_ref_page,
                         pva_schem,
                         pva_table,
                         pva_inclu_non_rechr);

    fetch cur_item_rechr
    bulk collect into var_item_rechr;

    close cur_item_rechr;

    return var_item_rechr;
  end;

  function obten_sql (pnu_navgt in number)
    return varchar2 is
    vva_sql                                 varchar2 (32767);
  begin
    select   enonc_sql
      into   vva_sql
      from   vd_sie_13_navgt
     where   seqnc = pnu_navgt;

    vva_sql :=
      replace (vva_sql,
               '"#OWNER#".',
               null);

    return vva_sql;
  exception
    when no_data_found then
      return null;
  end;

  function obten_indic_extra_total (pnu_page in number)
    return varchar2 is
    vva_indic_extra_total                   vd_i_sie_12_struc_aplic.indic_extra_tout%type;
  begin
    select   indic_extra_tout
      into   vva_indic_extra_total
      from   vd_i_sie_12_struc_aplic sa
     where   sa.seqnc = sie_13_page_pkg.obten_struc_aplic (pnu_page);

    return vva_indic_extra_total;
  exception
    when no_data_found then
      return null;
  end;

  function obten_tail_tabl_extra (pnu_page in number)
    return number is
    vnu_tail_tabl_extra                     vd_i_sie_12_struc_aplic.tail_tabl_extra%type;
  begin
    select   nvl (tail_tabl_extra, 0)
      into   vnu_tail_tabl_extra
      from   vd_i_sie_12_struc_aplic sa
     where   sa.seqnc = sie_13_page_pkg.obten_struc_aplic (pnu_page);

    return vnu_tail_tabl_extra;
  exception
    when no_data_found then
      return null;
  end;

  function obten_indic_extra_total_prodt (pnu_prodt in number)
    return varchar2 is
    vva_indic_extra_total                   vd_i_sie_11_prodt.indic_extra_tout%type;
  begin
    select   indic_extra_tout
      into   vva_indic_extra_total
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_indic_extra_total;
  exception
    when no_data_found then
      return null;
  end;

  function obten_tail_tabl_extra_prodt (pnu_prodt in number)
    return number is
    vnu_tail_tabl_extra                     vd_i_sie_11_prodt.tail_tabl_extra%type;
  begin
    select   nvl (tail_tabl_extra, 0)
      into   vnu_tail_tabl_extra
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vnu_tail_tabl_extra;
  exception
    when no_data_found then
      return null;
  end;

  procedure suprm_navgt_courn is
  begin
    delete   vd_sie_13_navgt;
  end;

  function creer_navgt (pva_indic_extra_total in varchar2,
                        pva_indic_extra_termn in varchar2,
                        pnu_nombr_rang_extra in number,
                        pva_selct in varchar2,
                        pnu_tail_tabl_extra in number,
                        pnu_rpts_id in number,
                        pnu_ref_ir in number)
    return number is
    vnu_navgt                               number;
  begin
    -- Supprimer la navigation courante au cas où une existe déjà
    suprm_navgt_courn ();

    insert
         into   vd_sie_13_navgt (ref_fil_arian,
                                 indic_extra_total,
                                 indic_extra_termn,
                                 nombr_rang_extra,
                                 enonc_sql,
                                 tail_tabl_extra,
                                 apex_repts_id,
                                 ref_raprt_inter)
       values   (sie_04_fil_arian_pkg.obten_fa_courn (),
                 pva_indic_extra_total,
                 pva_indic_extra_termn,
                 pnu_nombr_rang_extra,
                 pva_selct,
                 pnu_tail_tabl_extra,
                 pnu_rpts_id,
                 pnu_ref_ir)
    returning   seqnc
         into   vnu_navgt;

    return vnu_navgt;
  exception
    when others then
      sie_01_err_apex_pkg.ajout_mesg_infor_sesn_code ('SAF.000031',
                                                      pva_code_prodt             => 'AFW');
      sie_03_journ_pkg.ecrir_journ (null,
                                    null,
                                    'SEM_ANOML_N1',
                                    false);
      return null;
  end;

  function obten_navgt_courn (pnu_navgt out number,
                              pva_indic_extra_total out varchar2,
                              pva_indic_extra_termn out varchar2,
                              pnu_nombr_rang_extra out number,
                              pnu_tail_tabl_extra out number,
                              pnu_rpts_id out number,
                              pnu_ref_ir out number)
    return boolean is
  begin
    select   seqnc,
             indic_extra_total,
             indic_extra_termn,
             nombr_rang_extra,
             tail_tabl_extra,
             apex_repts_id,
             ref_raprt_inter
      into   pnu_navgt,
             pva_indic_extra_total,
             pva_indic_extra_termn,
             pnu_nombr_rang_extra,
             pnu_tail_tabl_extra,
             pnu_rpts_id,
             pnu_ref_ir
      from   vd_sie_13_navgt;

    return true;
  exception
    when no_data_found then
      return false;
  end;


  procedure maj_navgt (pnu_navgt in number,
                       pva_indic_extra_total in varchar2,
                       pva_indic_extra_termn in varchar2,
                       pnu_nombr_rang_extra in number,
                       pnu_rpts_id in number,
                       pnu_ref_ir in number) is
  begin
    update   vd_sie_13_navgt
       set   indic_extra_total = pva_indic_extra_total,
             indic_extra_termn = pva_indic_extra_termn,
             nombr_rang_extra = pnu_nombr_rang_extra,
             apex_repts_id = pnu_rpts_id,
             ref_raprt_inter = pnu_ref_ir
     where   seqnc = pnu_navgt;
  end;

  procedure ajout_elemn_navgt (pnu_navgt in number,
                               pnu_numr_elemn in number,
                               pnu_sspc in number,
                               pva_indic_courn in varchar2) is
  begin
    insert into   sie_13_navgt_elemn (numr_elemn, indic_courn, seqnc_elemn, ref_navgt)
         values   (pnu_numr_elemn,
                   pva_indic_courn,
                   pnu_sspc,
                   pnu_navgt);
  end;

  procedure defnr_elemn_courn_sspc (pnu_sspc in number) is
  begin
    -- Enlever l'indicateur courant de l'élément courant actuel
    update   vd_sie_13_navgt_elemn
       set   indic_courn = 'N'
     where   indic_courn = 'O';

    -- Définir le nouveau
    update   vd_sie_13_navgt_elemn
       set   indic_courn = 'O'
     where   seqnc_elemn = pnu_sspc;
  end;

  function obten_sspc_numr_elemn (pva_indic_extra_termn in varchar2,
                                  pnu_numr in number,
                                  pnu_numr_elemn   out number)
    return number is
    vnu_seqnc                               number;
    vnu_numr_elemn                          number;
  begin
    if pnu_numr > 0 then
      vnu_numr_elemn := pnu_numr;

      select   seqnc_elemn
        into   vnu_seqnc
        from   vd_sie_13_navgt_elemn ne
       where   ne.numr_elemn = pnu_numr;
    elsif pva_indic_extra_termn = 'O' then
      select   seqnc_elemn,
               numr_elemn
        into   vnu_seqnc,
               vnu_numr_elemn
        from   vd_sie_13_navgt_elemn ne
       where   ne.numr_elemn = (select   max (ne2.numr_elemn)
                                  from   vd_sie_13_navgt_elemn ne2) +
                               1 +
                               pnu_numr;
    end if;

    pnu_numr_elemn := vnu_numr_elemn;

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end;

  function obten_sspc_numr_elemn (pva_indic_extra_termn in varchar2,
                                  pnu_numr in number)
    return number is
    vnu_numr_elemn                          number;
  begin
    return obten_sspc_numr_elemn (pva_indic_extra_termn,
                                  pnu_numr,
                                  vnu_numr_elemn);
  end;

  function obten_numr_elemn_sspc (pnu_sspc in number)
    return number is
    vnu_numr_elemn                          number;
  begin
    select   ne.numr_elemn
      into   vnu_numr_elemn
      from   vd_sie_13_navgt_elemn ne
     where   ne.seqnc_elemn = pnu_sspc;

    return vnu_numr_elemn;
  exception
    when no_data_found then
      return null;
  end;
end;
/

Prompt Package Body SIE_13_NAVGT_PKG;
/* Formatted on 04/12/2013 11:35:27 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_NAVGT_PKG" as
  exc_err_extra                           exception;
  gva_indic_extra_total                   varchar2 (2);
  gva_indic_extra_termn                   varchar2 (1);
  gnu_tail_tabl_extra                     number (10);
  gnu_nombr_rang_extra                    number (10);
  gnu_navgt                               number (10);
  gnu_numr_elemn                          number (10);
  gnu_numr_elemn_rechr                    number (10);
  gnu_sspc                                number (10) default sie_07_util_pkg.nv ('A_SIE_04_SEQNC_CONTX');
  gnu_ref_ir                              number (10);
  gnu_rpts_id                             number;
  gva_sql                                 varchar2 (32767);
  gva_filtr_persn                         varchar2 (32767);
  gbo_rempl_filtr_auto                    boolean default false;
  gbo_mode_rechr                          boolean default false;

  function obten_type_don_coln (pva_schem in varchar2,
                                pva_table in varchar2,
                                pva_coln in varchar2)
    return varchar2 is
    vva_type_don                            all_tab_cols.data_type%type;
  begin
    select   data_type
      into   vva_type_don
      from   all_tab_cols
     where   owner = nvl (pva_schem,
                          sys_context ('USERENV',
                                       'CURRENT_SCHEMA'))
         and table_name = upper (pva_table)
         and column_name = pva_coln;

    return vva_type_don;
  exception
    when no_data_found then
      return null;
  end;

  procedure defnr_varbl_sie_04 is
    vva_nom_item_seqnc                      varchar2 (30)
                                              default 'P' || to_char (sie_08_url_pkg.knu_app_page_id) || '_SEQNC';
    vnu_seqnc_actue                         number default sie_07_util_pkg.nv ('A_SIE_04_SEQNC_CONTX');
  begin
    if nvl (vnu_seqnc_actue, 0) <> nvl (gnu_sspc, 0) then
      -- Definir l'item de sequence avec la valeur du contexte
      sie_07_util_pkg.defnr_etat_sessn (vva_nom_item_seqnc,
                                        gnu_sspc);

      sie_07_util_pkg.defnr_etat_sessn ('A_SIE_04_SEQNC_CONTX',
                                        gnu_sspc);

      sie_04_contx_pkg.maj_seqnc_contx ();
    end if;
  end defnr_varbl_sie_04;

  function obten_rang
    return typ_tab_navgt_elemt
    pipelined is
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_cursr                               number;
    vre_rang                                typ_rec_elemn;
    vnu_i                                   pls_integer default 1;
    vbo_doit_sortr                          boolean default gnu_nombr_rang_extra > 0;
    vbo_exit_progr                          boolean default false;
  begin
    if gva_sql is not null then
      begin
        vnu_cursr :=
          sie_07_sql_pkg.ouvri_selct (gnu_ref_ir,
                                      gnu_rpts_id,
                                      gva_sql,
                                      var_infor_coln,
                                      chr (10));
      exception
        when others then
          sie_03_journ_pkg.ecrir_journ (gva_sql,
                                        null,
                                        'SAF_N1',
                                        false);
          raise exc_err_extra;
      end;

      if var_infor_coln.first () is not null then
        -- Extraire la valeur de la séquence pour chaque rangée
        vre_rang.indic_courn := 'N';

        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          vre_rang.seqnc := var_infor_coln (1).nu_valr_numbr;

          if vnu_i > gnu_nombr_rang_extra then
            vre_rang.rn := vnu_i;

            if vre_rang.seqnc = gnu_sspc
            or vnu_i = gnu_numr_elemn_rechr then
              vre_rang.indic_courn := 'O';
              pipe row (vre_rang);
              vre_rang.indic_courn := 'N';
              gnu_numr_elemn := vnu_i;
              vbo_doit_sortr := true;
            else
              pipe row (vre_rang);
            end if;

            if vbo_doit_sortr then
              if gnu_tail_tabl_extra != 0 then
                --if vnu_i / gnu_tail_tabl_extra = floor(vnu_i / gnu_tail_tabl_extra) then
                if mod (vnu_i,
                        gnu_tail_tabl_extra) = 0 then
                  vbo_exit_progr := true;
                  exit;
                end if;
              end if;
            end if;
          end if;

          vnu_i := vnu_i + 1;
        end loop;

        if not (vbo_exit_progr) then
          gva_indic_extra_termn := 'O';
        end if;
      end if;

      -- Fermer le curseur
      sie_07_sql_pkg.fermr_selct (vnu_cursr);
    end if;
  end obten_rang;

  function obten_tout_rang
    return typ_tab_navgt_elemt
    pipelined is
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_cursr                               number;
    vre_rang                                typ_rec_elemn;
    vnu_i                                   pls_integer default 1;
  begin
    if gva_sql is not null then
      begin
        vnu_cursr :=
          sie_07_sql_pkg.ouvri_selct (gnu_ref_ir,
                                      gnu_rpts_id,
                                      gva_sql,
                                      var_infor_coln,
                                      chr (10));
      exception
        when others then
          sie_03_journ_pkg.ecrir_journ (gva_sql,
                                        null,
                                        'SAF_N1',
                                        false);
          raise exc_err_extra;
      end;

      if var_infor_coln.first () is not null then
        -- Extraire la valeur de la séquence pour chaque rangée
        vre_rang.indic_courn := 'N';

        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          vre_rang.seqnc := var_infor_coln (1).nu_valr_numbr;

          if vnu_i > gnu_nombr_rang_extra then
            vre_rang.rn := vnu_i;

            if vre_rang.seqnc = gnu_sspc
            or vnu_i = gnu_numr_elemn_rechr then
              gnu_numr_elemn := vnu_i;
              vre_rang.indic_courn := 'O';
              pipe row (vre_rang);
              vre_rang.indic_courn := 'N';
            else
              pipe row (vre_rang);
            end if;
          end if;

          vnu_i := vnu_i + 1;
        end loop;
      end if;

      gva_indic_extra_termn := 'O';
      -- Fermer le curseur
      sie_07_sql_pkg.fermr_selct (vnu_cursr);
    end if;
  end obten_tout_rang;

  procedure extra_proch_enreg is
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Navgt - Début de l''extraction des enregistrements');

    if gva_indic_extra_termn = 'N' then
      gva_sql := sie_13_navgt_noyau_pkg.obten_sql (gnu_navgt);

      if gnu_ref_ir is not null then
        sie_04_contx_pkg.synch_varbl (1);
      end if;

      if gva_indic_extra_total = 'O'
      or gnu_numr_elemn_rechr < 0 then
        /*insert into sie_13_navgt_elemn (numr_elemn,
                                                          indic_courn,
                                        seqnc_elemn,
                                        ref_navgt)
          select   rn,
                   indic_courn,
                   seqnc,
                   gnu_navgt
            from   table (sie_13_navgt_pkg.obten_tout_rang ());
        gnu_nombr_rang_extra := gnu_nombr_rang_extra + sql%rowcount;
        */

        for rec_elemn_navgt in (select   rn,
                                         seqnc,
                                         indic_courn
                                  from   table (sie_13_navgt_pkg.obten_tout_rang ())) loop
          sie_13_navgt_noyau_pkg.ajout_elemn_navgt (gnu_navgt,
                                                    rec_elemn_navgt.rn,
                                                    rec_elemn_navgt.seqnc,
                                                    rec_elemn_navgt.indic_courn);
          gnu_nombr_rang_extra := gnu_nombr_rang_extra + 1;
        end loop;
      else
        /*insert into sie_13_navgt_elemn (numr_elemn,
                                                                indic_courn,
                                        seqnc_elemn,
                                        ref_navgt)
          select   rn,
                   indic_courn,
                   seqnc,
                   gnu_navgt
            from   table (sie_13_navgt_pkg.obten_rang ());
        gnu_nombr_rang_extra := gnu_nombr_rang_extra + sql%rowcount;
        */

        for rec_elemn_navgt in (select   rn,
                                         seqnc,
                                         indic_courn
                                  from   table (sie_13_navgt_pkg.obten_rang ())) loop
          sie_13_navgt_noyau_pkg.ajout_elemn_navgt (gnu_navgt,
                                                    rec_elemn_navgt.rn,
                                                    rec_elemn_navgt.seqnc,
                                                    rec_elemn_navgt.indic_courn);
          gnu_nombr_rang_extra := gnu_nombr_rang_extra + 1;
        end loop;
      end if;

      if gnu_ref_ir is not null then
        sie_04_contx_pkg.synch_varbl ();
      end if;
    else
      sie_07_util_pkg.ajout_info_debug ('SIE 13 Navgt - Aucun enregistrements à extraire');
    end if;

    sie_07_util_pkg.ajout_info_debug ('SIE 13 Navgt - Fin de l''extraction des enregistrements');
  exception
    when others then
      sie_04_contx_pkg.synch_varbl ();
  end extra_proch_enreg;

  procedure creer_contx_navgt (pva_selct in varchar2,
                               pnu_ref_page in number default null) is
    vnu_page                                number default pnu_ref_page;
    vnu_prodt                               number;
  begin
    if vnu_page is null then
      vnu_page := sie_13_page_pkg.obten_page_sesn ();
    end if;

    --Déterminer les valeurs de pilotage pour l'extraction
    begin
      gva_indic_extra_total := sie_13_navgt_noyau_pkg.obten_indic_extra_total (vnu_page);
      gnu_tail_tabl_extra := sie_13_navgt_noyau_pkg.obten_tail_tabl_extra (vnu_page);

      if gva_indic_extra_total = 'O' then
        gnu_tail_tabl_extra := 10;
      end if;
    exception
      when no_data_found then
        null;
    end;

    if gva_indic_extra_total = 'HE'
    or gva_indic_extra_total is null then
      --L'obtenir à partir de l'application
      vnu_prodt := sie_11_prodt_pkg.obten_prodt_sesn ();

      gva_indic_extra_total := sie_13_navgt_noyau_pkg.obten_indic_extra_total_prodt (vnu_prodt);
      gnu_tail_tabl_extra := sie_13_navgt_noyau_pkg.obten_tail_tabl_extra_prodt (vnu_prodt);
    end if;

    gnu_nombr_rang_extra := 0;
    gva_indic_extra_termn := 'N';

    gnu_navgt :=
      sie_13_navgt_noyau_pkg.creer_navgt (gva_indic_extra_total,
                                          gva_indic_extra_termn,
                                          gnu_nombr_rang_extra,
                                          pva_selct,
                                          gnu_tail_tabl_extra,
                                          gnu_rpts_id,
                                          gnu_ref_ir);
  end creer_contx_navgt;

  procedure creer_contx_navgt_ir is
    vva_selct                               varchar2 (32767);
    vnu_aplic_avant                         number default sie_07_util_pkg.nv ('A_SIE_04_SOURC_NUMR_APLIC');
    vnu_page_avant                          number default sie_07_util_pkg.nv ('A_SIE_04_SOURC_NUMR_PAGE');
    vnu_page                                number;
  begin
    --On peut créer si on arrive d'une page avec un état interactif
    gnu_ref_ir :=
      sie_13_raprt_inter_pkg.obten_ir_page (vnu_page_avant,
                                            null,
                                            vnu_aplic_avant);

    if gnu_ref_ir is not null then
      sie_07_util_pkg.ajout_info_debug ('SIE 13 Navgt - Création d''un contexte de navigation');

      gnu_rpts_id :=
        sie_13_raprt_inter_pkg.obten_repts_courn (vnu_page_avant,
                                                  null,
                                                  vnu_aplic_avant);


      vva_selct :=
        sie_13_raprt_inter_pkg.obten_selct_rpts (gnu_rpts_id,
                                                 true,
                                                 'SEQNC');

      if vva_selct is not null then
        creer_contx_navgt (vva_selct);
      end if;
    end if;
  end creer_contx_navgt_ir;

  procedure maj_contx_exect_selon_modfc is
  begin
    sie_13_navgt_noyau_pkg.maj_navgt (gnu_navgt,
                                      gva_indic_extra_total,
                                      gva_indic_extra_termn,
                                      gnu_nombr_rang_extra,
                                      gnu_rpts_id,
                                      gnu_ref_ir);

    sie_13_navgt_noyau_pkg.defnr_elemn_courn_sspc (gnu_sspc);
  end maj_contx_exect_selon_modfc;

  function obten_sspc_numr_elemn (pnu_numr in number,
                                  pbo_defnr_numr_elemn in boolean default false)
    return number is
    vnu_seqnc                               number;
  begin
    if pbo_defnr_numr_elemn then
      vnu_seqnc :=
        sie_13_navgt_noyau_pkg.obten_sspc_numr_elemn (gva_indic_extra_termn,
                                                      pnu_numr,
                                                      gnu_numr_elemn);
    else
      vnu_seqnc :=
        sie_13_navgt_noyau_pkg.obten_sspc_numr_elemn (gva_indic_extra_termn,
                                                      pnu_numr);
    end if;

    return vnu_seqnc;
  end;

  procedure alimn_contx_exect is
  begin
    -- Ne continuer que si on a un sspc ou qu'on a demandé un numéro d'élément
    if gnu_sspc is not null
    or gnu_numr_elemn_rechr is not null then
      gnu_numr_elemn := null;

      --déterminer si le contexte de navigation existe déjà
      if gnu_navgt is null then
        if not sie_13_navgt_noyau_pkg.obten_navgt_courn (gnu_navgt,
                                                         gva_indic_extra_total,
                                                         gva_indic_extra_termn,
                                                         gnu_nombr_rang_extra,
                                                         gnu_tail_tabl_extra,
                                                         gnu_rpts_id,
                                                         gnu_ref_ir) then
          sie_13_navgt_noyau_pkg.suprm_navgt_courn ();
        end if;
      end if;

      if gnu_navgt is null then
        creer_contx_navgt_ir ();
      end if;

      if gnu_navgt is not null then
        --Déterminer si besoin d'extraire
        begin
          if gnu_numr_elemn_rechr is not null then
            gnu_sspc := obten_sspc_numr_elemn (gnu_numr_elemn_rechr);

            if gnu_sspc is null then
              -- Éviter un select pour rien
              raise no_data_found;
            end if;
          end if;

          gnu_numr_elemn := sie_13_navgt_noyau_pkg.obten_numr_elemn_sspc (gnu_sspc);

          if gnu_numr_elemn is null then
            raise no_data_found;
          end if;
        exception
          when no_data_found then
            extra_proch_enreg ();
        end;

        --Déterminer si besoin d'extraire encore plus
        if gnu_numr_elemn is not null and gnu_numr_elemn >= gnu_nombr_rang_extra then
          extra_proch_enreg ();
        end if;

        -- Déterminer le sspc si on ne l'a pas encore trouvé
        if gnu_numr_elemn_rechr is not null and gnu_sspc is null then
          gnu_sspc :=
            obten_sspc_numr_elemn (gnu_numr_elemn_rechr,
                                   true);
        end if;

        if gnu_sspc is null
        or gnu_numr_elemn is null then
          -- On ne trouve pas l'élément demandé
          gnu_navgt := null;
        else
          defnr_varbl_sie_04 ();

          maj_contx_exect_selon_modfc;
        end if;
      end if;
    else
      sie_13_navgt_noyau_pkg.suprm_navgt_courn ();
    end if;
  end alimn_contx_exect;

  function obten_sspc (pnu_ofset in number default 1,
                       pbo_enreg_limt in boolean default false)
    return number is
    vnu_seqnc                               number (10);
  begin
    -- cause probleme en mode debug car insere du code HTML dans du code javascript
    --sie_07_util_pkg.ajout_info_debug ('SIE 13 Navgt - Obtention du prochain sspc');

    if pnu_ofset = 0 then
      return gnu_sspc;
    else
      if not pbo_enreg_limt then
        -- enregistrement précédent
        -- enregistrement suivant
        vnu_seqnc := obten_sspc_numr_elemn (gnu_numr_elemn + pnu_ofset);
      else
        -- premier enregistrement
        -- dernier enregistrement
        if pnu_ofset < 0 then
          vnu_seqnc := obten_sspc_numr_elemn (1);
        else
          if gva_indic_extra_termn = 'N' then
            vnu_seqnc := null;
          else
            vnu_seqnc := obten_sspc_numr_elemn (-1);
          end if;
        end if;
      end if;

      return vnu_seqnc;
    end if;
  end obten_sspc;

  function obten_valr_formt (pnu_seqnc_elemn in number)
    return varchar2 is
    vva_valr_formt                          varchar2 (200);
    vnu_struc_aplic                         number (10);
  begin
    if pnu_seqnc_elemn is null then
      return 'Dernier enregistrement';
    end if;

    vnu_struc_aplic := sie_13_page_pkg.obten_struc_aplic (sie_13_page_pkg.obten_page_sesn ());

    if vnu_struc_aplic is not null then
      vva_valr_formt :=
        sie_12_struc_aplic_cu_pkg.obten_valr_formt (vnu_struc_aplic,
                                                    pnu_seqnc_elemn);
    end if;

    return vva_valr_formt;
  end obten_valr_formt;

  function obten_url_seqnc (pnu_seqnc in number)
    return varchar2 is
  begin
    return sie_04_contx_pkg.genr_url_en_contx (sie_08_url_pkg.knu_app_page_id,
                                               pnu_seqnc);
  end;

  function obten_url_suivn
    return varchar2 is
  begin
    return obten_url_seqnc (obten_sspc ());
  end obten_url_suivn;

  function obten_url_precd
    return varchar2 is
  begin
    return obten_url_seqnc (obten_sspc (-1));
  end obten_url_precd;

  function obten_url_dernr (pva_indic_extra_termn in varchar2)
    return varchar2 is
    vva_url                                 varchar2 (4000);
  begin
    if gva_indic_extra_termn = 'O' then
      return obten_url_seqnc (obten_sspc (1,
                                          true));
    else
      return sie_04_contx_pkg.genr_url_en_contx (sie_08_url_pkg.knu_app_page_id,
                                                 null,
                                                 'XDE');
    end if;
  end obten_url_dernr;

  function obten_url_premr
    return varchar2 is
    vva_url                                 varchar2 (4000);
  begin
    return obten_url_seqnc (obten_sspc (-1,
                                        true));
  end obten_url_premr;

  procedure initl_navgt (pva_sql in varchar2 default null) is
  begin
    null;
  end initl_navgt;

  procedure defnr_varbl_sesn is
    vva_selct_liste                         varchar2 (32000);
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Navgt - Définition des variables de session');

    if gnu_navgt is not null and gnu_numr_elemn is not null then
      vva_selct_liste := '<select onchange="location.href=this.options[selectedIndex].value;">';

      for i in greatest(gnu_numr_elemn - nvl(gnu_tail_tabl_extra,10), 1)
                                    .. least(gnu_numr_elemn + nvl(gnu_tail_tabl_extra,10), gnu_nombr_rang_extra)
      loop
        vva_selct_liste :=  vva_selct_liste ||
                            '<option value="' ||
                            obten_url_seqnc (obten_sspc_numr_elemn (i)) ||
                            '"' ||
                            case
                              when i = gnu_numr_elemn then ' selected'
                              else null
                            end ||
                            '>' || i || '</option>';
      end loop;
      vva_selct_liste := vva_selct_liste || '</select>';

      if gva_indic_extra_termn = 'N' then
        sie_07_util_pkg.defnr_etat_sessn ('A_SIE_13_PAGNT_NAVGT',
                                          vva_selct_liste || ' / ' || gnu_nombr_rang_extra || ' (...)');
      else
        sie_07_util_pkg.defnr_etat_sessn ('A_SIE_13_PAGNT_NAVGT',
                                          vva_selct_liste || ' / ' || gnu_nombr_rang_extra);
      end if;
    else
      sie_07_util_pkg.defnr_etat_sessn ('A_SIE_13_PAGNT_NAVGT',
                                        null);
    end if;
  end defnr_varbl_sesn;

  procedure defnr_contx_navgt is
    vva_navgt                               varchar2 (1);
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Navgt - Définir le contexte de navigation');

    select   p.indic_prise_charg_sie13_navgt
      into   vva_navgt
      from   vd_sie_13_page p
     where   p.seqnc = sie_13_page_pkg.obten_page_sesn ();

    if vva_navgt = 'O' and sie_21_plugn_navgt_enreg_pkg.valdr_plugn_activ then
      if gnu_numr_elemn_rechr = -1 then
        sie_07_util_pkg.ajout_info_debug ('Naviguer vers le dernier enregistrement');
      end if;

      alimn_contx_exect ();

      defnr_varbl_sesn ();
    end if;
  exception
    when exc_err_extra then
      sie_03_journ_pkg.ecrir_journ (gva_sql,
                                    null,
                                    'SAF_N1',
                                    false);
      sie_19_fonct_pkg.desct_fonct ('NAVGT_PREMR_ENREG');
      sie_19_fonct_pkg.desct_fonct ('NAVGT_ENREG_SUIVN');
      sie_19_fonct_pkg.desct_fonct ('NAVGT_ENREG_PRECD');
      sie_19_fonct_pkg.desct_fonct ('NAVGT_DERNR_ENREG');
    when others then
      sie_03_journ_pkg.ecrir_journ (gva_sql,
                                    null,
                                    'SAF_N1',
                                    false);
      sie_19_fonct_pkg.desct_fonct ('NAVGT_PREMR_ENREG');
      sie_19_fonct_pkg.desct_fonct ('NAVGT_ENREG_SUIVN');
      sie_19_fonct_pkg.desct_fonct ('NAVGT_ENREG_PRECD');
      sie_19_fonct_pkg.desct_fonct ('NAVGT_DERNR_ENREG');
  end defnr_contx_navgt;

  function obten_numr_courn
    return number is
  begin
    return gnu_numr_elemn;
  end obten_numr_courn;

  procedure obten_premr_enreg is
  begin
    gnu_numr_elemn_rechr := 1;
  end obten_premr_enreg;

  procedure obten_dernr_enreg is
  begin
    gnu_numr_elemn_rechr := -1;
  end obten_dernr_enreg;

  function verfr_presn_navgt
    return boolean is
  begin
    return gnu_navgt is not null;
  end;

  function formt_filtr_varch (pva_coln in varchar2,
                              pva_valr in varchar2)
    return varchar2 is
    vva_valr                                varchar2 (32000) default pva_valr;
    vva_opert                               varchar2 (10) default '=';
    vbo_opert_like                          boolean default false;
  begin
    begin
      --Extraire l'opérateur si un est précisé
      if substr (vva_valr,
                 1,
                 2) in ('<=', '>=', '<>', '!=', '^=') then
        vva_opert :=
          substr (vva_valr,
                  1,
                  2);
        vva_valr :=
          substr (vva_valr,
                  3);
      elsif substr (vva_valr,
                    1,
                    1) in ('=', '<', '>', '!', '#') then
        vva_opert :=
          substr (vva_valr,
                  1,
                  1);
        vva_valr :=
          substr (vva_valr,
                  2);
      else
        --Traiter comme un "like"
        vva_opert := ' like ';
        vbo_opert_like := true;

        --Ajouter des % chaque côté s'il n'y en a pas déjà au moins 1
        if instr (vva_valr,
                  '%') = 0 then
          vva_valr := '%' || vva_valr || '%';
        end if;
      end if;

      --Standardiser l'opérateur
      if vva_opert in ('!', '<>', '^=', '#') then
        vva_opert := '!=';
      end if;

      if vva_valr is null then
        -- Recherche de is null ou is not null
        if vva_opert = '=' then
          vva_opert := ' is ';
        elsif vva_opert = '!=' then
          vva_opert := ' is not ';
        end if;
      end if;
    exception
      when others then
        vva_valr := null;
    end;

    if vbo_opert_like and pva_coln is not null then
      return 'upper(' || pva_coln || ')' || vva_opert || sie_07_sql_util_pkg.v (upper (vva_valr));
    else
      return pva_coln || vva_opert || sie_07_sql_util_pkg.v (vva_valr);
    end if;
  end;

  function formt_filtr_numbr (pva_coln in varchar2,
                              pva_valr in varchar2,
                              pva_formt in varchar2 default null)
    return varchar2 is
    vva_valr                                varchar2 (32000) default pva_valr;
    vnu_valr                                number;
    vva_opert                               varchar2 (10) default '=';
  begin
    begin
      --Extraire l'opérateur si un est précisé
      if substr (vva_valr,
                 1,
                 2) in ('<=', '>=', '<>', '!=', '^=') then
        vva_opert :=
          substr (vva_valr,
                  1,
                  2);
        vva_valr :=
          substr (vva_valr,
                  3);
      elsif substr (vva_valr,
                    1,
                    1) in ('=', '<', '>', '!', '#') then
        vva_opert :=
          substr (vva_valr,
                  1,
                  1);
        vva_valr :=
          substr (vva_valr,
                  2);
      end if;

      --Standardiser l'opérateur
      if vva_opert in ('!', '<>', '^=', '#') then
        vva_opert := '!=';
      end if;

      if vva_valr is null then
        vnu_valr := null;

        -- Recherche de is null ou is not null
        if vva_opert = '=' then
          vva_opert := ' is ';
        elsif vva_opert = '!=' then
          vva_opert := ' is not ';
        end if;
      else
        if pva_formt is not null then
          vnu_valr :=
            to_number (vva_valr,
                       pva_formt);
        else
          vnu_valr := to_number (vva_valr);
        end if;
      end if;
    exception
      when others then
        vnu_valr := null;
    end;

    return pva_coln || vva_opert || sie_07_sql_util_pkg.nv (vnu_valr);
  end;

  function formt_filtr_date (pva_coln in varchar2,
                             pva_valr in varchar2,
                             pva_formt in varchar2 default null)
    return varchar2 is
    vva_valr                                varchar2 (32000) default pva_valr;
    vda_valr                                date;
    vva_opert                               varchar2 (10) default '=';
  begin
    begin
      --Extraire l'opérateur si un est précisé
      if substr (vva_valr,
                 1,
                 2) in ('<=', '>=', '<>', '!=', '^=') then
        vva_opert :=
          substr (vva_valr,
                  1,
                  2);
        vva_valr :=
          substr (vva_valr,
                  3);
      elsif substr (vva_valr,
                    1,
                    1) in ('=', '<', '>', '!', '#') then
        vva_opert :=
          substr (vva_valr,
                  1,
                  1);
        vva_valr :=
          substr (vva_valr,
                  2);
      end if;

      --Standardiser l'opérateur
      if vva_opert in ('!', '<>', '^=', '#') then
        vva_opert := '!=';
      end if;

      if vva_valr is null then
        vda_valr := null;

        -- Recherche de is null ou is not null
        if vva_opert = '=' then
          vva_opert := ' is ';
        elsif vva_opert = '!=' then
          vva_opert := ' is not ';
        end if;
      else
        if pva_formt is not null then
          vda_valr :=
            to_date (vva_valr,
                     pva_formt);
        else
          vda_valr := to_date (vva_valr);
        end if;
      end if;
    exception
      when others then
        vda_valr := null;
    end;

    return pva_coln || vva_opert || sie_07_sql_util_pkg.dv (vda_valr);
  end;

  procedure ajout_filtr_rechr (pva_nouv_filtr in varchar2,
                               pbo_rempl_filtr_auto in boolean default false) is
  begin
    gva_filtr_persn := gva_filtr_persn || ' and ' || pva_nouv_filtr;

    if pbo_rempl_filtr_auto then
      gbo_rempl_filtr_auto := true;
    end if;
  end;

  procedure trait_mode_rechr is
    vnu_ref_page_courn                      number;
  begin
    if sie_07_util_pkg.v ('REQUEST') = 'SIE_13_RECHR_FORML' then
      vnu_ref_page_courn := sie_13_page_pkg.obten_page_sesn ();

      -- S'assurer que la page est une page de recherche valide
      if sie_13_page_pkg.est_page_rechr (vnu_ref_page_courn) then
        gbo_mode_rechr := true;

        -- Simuler un mode création
        gnu_sspc := null;

        sie_07_util_pkg.reint_etat_sesn_page (sie_07_util_pkg.nv ('APP_PAGE_ID'));

        defnr_varbl_sie_04 ();
      end if;
    end if;
  end;

  /*procedure anulr_mode_rechr
                          is
  begin
    gbo_mode_rechr := false;
    -- Aller en mode création
    gnu_sspc := null;
    sie_07_util_pkg.reint_etat_sesn_page (sie_07_util_pkg.nv('APP_PAGE_ID'));
    defnr_varbl_sie_04 ();
  end;*/

  function est_en_mode_rechr
    return boolean is
  begin
    return gbo_mode_rechr;
  end;

  function est_en_mode_rechr_va
    return varchar2 is
  begin
    return case when gbo_mode_rechr then 'O' else 'N' end;
  end;

  procedure script_mode_rechr is
    rec_info_extra                          sie_13_page_pkg.typ_info_extra;
    var_item_rechr                          sie_13_navgt_noyau_pkg.typ_arr_item_rechr;
  begin
    if gbo_mode_rechr then
      rec_info_extra := sie_13_page_pkg.obten_info_extra ();

      htp.p ('<script type="text/javascript">');
      htp.p ('<!-- ');
      htp.p ('function sie_13_rechr_init_item (nom_item, actif) {');
      htp.p ('  var obj = afw.jQuery("#" + nom_item);');
      htp.p ('  ');
      htp.p ('  if (actif) {');
      htp.p ('    afw.jQuery(obj)');
      htp.p ('      .addClass("sie_13_item_rechr")');
      htp.p ('      .attr("readonly", "")');
      htp.p ('    ;');
      htp.p ('    ');
      htp.p ('    if (afw.jQuery("#" + nom_item + "_HIDDENVALUE").length == 0)');
      htp.p ('      afw.jQuery(obj).attr("disabled", "");');
      htp.p ('    if (afw.jQuery(obj).attr("tagName") == "SELECT") {');
      htp.p ('      var valr_null = afw.jQuery("option[value=''%null%'']",obj);');
      htp.p ('      if (afw.jQuery(valr_null).length == 0) {');
      htp.p ('        afw.jQuery("option:first", obj).before ("<option value=\"%null%\">- Tous -</option>");');
      htp.p ('      }');
      htp.p ('      else {');
      htp.p ('        afw.jQuery(valr_null).text ("- Tous -");');
      htp.p ('      }');
      htp.p (
        '      afw.jQuery("option[value!=''%null%'']",obj).each(function () {afw.jQuery(this).val("=" + afw.jQuery(this).val());});'
      );
      htp.p ('      afw.jQuery(obj).val ("%null%");');
      htp.p ('      afw.jQuery(obj).attr ("onchange", "");');
      htp.p ('    }');
      htp.p ('    else if (afw.jQuery(obj).attr("type") != "hidden") {');
      htp.p ('      afw.jQuery(obj).val ("").attr("maxlength","4000");');
      htp.p ('    }');
      htp.p ('  }');
      htp.p ('  else {');
      htp.p ('    afw.jQuery(obj)');
      htp.p ('      .addClass("sie_13_rechr_desct")');
      htp.p ('      .attr("readOnly", "true")');
      htp.p ('    ;');
      htp.p ('    afw.jQuery("[id^=''" + nom_item + "'']").attr("disabled", true);');
      htp.p ('  }');
      htp.p ('}');
      htp.p ('');
      htp.p ('function sie_13_rechr_init () {');
      htp.p ('  window.orig_doSubmit = doSubmit;');
      htp.p ('  doSubmit = function () {orig_doSubmit ("SIE_13_RECHR_FORML");};');
      --htp.p ('  afw.jQuery(":input[id!='''']").attr ("name", function () {return this.id;});');
      --htp.p ('  afw.jQuery("form").attr ("action", "!sie_reprt.acept");');
      /*htp.p ('  afw.jQuery(":input[type!=hidden]")');
                        htp.p ('    .css("background-color","' || vva_coulr_fond_desct || '")');
      htp.p ('    .css("color","' || vva_coulr_texte_desct || '")');
      htp.p ('  ;');*/
      htp.p ('  ');
      var_item_rechr :=
        sie_13_navgt_noyau_pkg.obten_item_rechr (sie_13_page_pkg.obten_page_sesn (),
                                                 rec_info_extra.va_schem,
                                                 rec_info_extra.va_table,
                                                 'O');

      if var_item_rechr.first () is not null then
        for i in var_item_rechr.first () .. var_item_rechr.last () loop
          htp.p (
               '  sie_13_rechr_init_item ("'
            || var_item_rechr (i).nom_item
            || '",'
            || case when var_item_rechr (i).indic_rechr = 'O' then 'true' else 'false' end
            || ');'
          );
        end loop;
      end if;

      htp.p ('  ');
      htp.p ('}');
      htp.p ('');
      htp.p ('afw.jQuery().ready(function () {sie_13_rechr_init();});');
      htp.p ('// -->');
      htp.p ('</script>');
    /*htp.p (
                        '<input type="hidden" id="p" name="p" value="' ||
      sie_11_prodt_pkg.obten_numr_apex_prodt(sie_11_prodt_pkg.obten_prodt('SAF')) ||
      ':SIE_13_RECHR' ||
      ':' || sie_07_util_pkg.nv('SESSION') ||
      '" />'
    );*/
    end if;
  end;

  procedure efect_rechr is
    /*vnu_app_id        number default sie_07_util_pkg.nv('APP_ID');
                vnu_app_page_id   number default sie_07_util_pkg.nv('APP_PAGE_ID');*/

    vnu_count                               number;
    rec_info_extra                          sie_13_page_pkg.typ_info_extra;
    vnu_ref_page                            number;
    vva_where                               varchar2 (4000);
    vva_sql                                 varchar2 (4000);
    var_item_rechr                          sie_13_navgt_noyau_pkg.typ_arr_item_rechr;
  begin
    rec_info_extra := sie_13_page_pkg.obten_info_extra ();

    begin
      vnu_ref_page := sie_13_page_pkg.obten_page_sesn ();
    exception
      when no_data_found then
        vnu_ref_page := null;
    end;

    if rec_info_extra.va_table is not null then
      if not gbo_rempl_filtr_auto then
        vva_where := null;

        var_item_rechr :=
          sie_13_navgt_noyau_pkg.obten_item_rechr (vnu_ref_page,
                                                   rec_info_extra.va_schem,
                                                   rec_info_extra.va_table);

        if var_item_rechr.first () is not null then
          for i in var_item_rechr.first () .. var_item_rechr.last () loop
            -- Vérifier le type de données
            var_item_rechr (i).type_don :=
              obten_type_don_coln (rec_info_extra.va_schem,
                                   rec_info_extra.va_table,
                                   var_item_rechr (i).nom_coln);

            if lower (var_item_rechr (i).valr_rechr) = '%null%' then
              var_item_rechr (i).valr_rechr := null;
            end if;

            if var_item_rechr (i).valr_rechr is not null
           and var_item_rechr (i).type_don in ('VARCHAR2', 'NUMBER', 'DATE', 'CLOB') then
              if vva_where is null then
                vva_where := ' where ';
              else
                vva_where := vva_where || ' and ';
              end if;

              -- Traiter comme un varchar2
              if var_item_rechr (i).type_don = 'CLOB' then
                var_item_rechr (i).type_don := 'VARCHAR2';
              end if;

              case var_item_rechr (i).type_don
                when 'VARCHAR2' then
                  vva_where :=
                       vva_where
                    || formt_filtr_varch ('r$.' || var_item_rechr (i).nom_coln,
                                          var_item_rechr (i).valr_rechr);
                when 'NUMBER' then
                  vva_where :=
                       vva_where
                    || formt_filtr_numbr ('r$.' || var_item_rechr (i).nom_coln,
                                          var_item_rechr (i).valr_rechr,
                                          var_item_rechr (i).formt);
                when 'DATE' then
                  vva_where :=
                       vva_where
                    || formt_filtr_date ('r$.' || var_item_rechr (i).nom_coln,
                                         var_item_rechr (i).valr_rechr,
                                         var_item_rechr (i).formt);
              end case;
            end if;
          end loop;
        end if;
      end if;

      if vva_where is null then
        vva_where := ' where 1=1';
      end if;

      vva_where := vva_where || gva_filtr_persn;

      vva_sql :=
           'select r$.'
        || rec_info_extra.va_coln_pk1
        || case when rec_info_extra.va_coln_pk2 is not null then ', r$' || rec_info_extra.va_coln_pk2 else null end
        || ' from '
        || case when rec_info_extra.va_schem is not null then rec_info_extra.va_schem || '.' else null end
        || rec_info_extra.va_table
        || ' r$'
        || vva_where;

      gnu_ref_ir := null;
      gnu_rpts_id := null;

      creer_contx_navgt (vva_sql);
      obten_premr_enreg ();
      alimn_contx_exect ();

      if gnu_sspc is null then
        sie_01_err_apex_pkg.lever_err_apex_code ('RCH.000001',
                                                 pva_code_prodt             => 'AFW');
      end if;
    else
      -- Pas de processus fetch, ne rien faire
      null;
    end if;

    sie_07_util_pkg.reint_etat_sesn_page (sie_07_util_pkg.nv ('APP_PAGE_ID'));

    sie_08_url_pkg.redrg_page_postn (sie_04_contx_pkg.genr_url_en_contx (sie_07_util_pkg.nv ('APP_PAGE_ID')));
  /*exception
                    when others then
    raise;*/
  end;
/*procedure acept_rechr
      is
  vva_nom         varchar2(100);
  vva_valr        varchar2(32000);
begin
  sie_07_util_pkg.defnr_etat_sessn ('SESSION', sie_reprt_noyau_pkg.gnu_sesn);
  select app_user
    into vva_valr
    from vd_sie_12_sesn;
  sie_07_util_pkg.defnr_etat_sessn ('APP_USER', vva_valr);
  while sie_reprt_noyau_pkg.obten_parmt (vva_nom, vva_valr) loop
    sie_07_util_pkg.defnr_etat_sessn (upper(vva_nom), vva_valr);
  end loop;
  sie_07_util_pkg.defnr_etat_sessn ('APP_ID', sie_07_util_pkg.v('PFLOWID'));
  sie_07_util_pkg.defnr_etat_sessn ('APP_PAGE_ID', sie_07_util_pkg.v('PFLOWSTEPID'));
  gnu_page_courn := sie_07_util_pkg.nv('PFLOWSTEPID');
  efect_rechr ();
  sie_08_url_pkg.redrg_page_postn (
    'f?p=' ||
    sie_07_util_pkg.v('APP_ID') || ':' ||
    sie_07_util_pkg.v('APP_PAGE_ID') || ':' ||
    sie_07_util_pkg.v('SESSION')
  );
exception
when others then
  raise;
end;*/

end sie_13_navgt_pkg;
/

Prompt Package Body SIE_13_OPERT_PKG;
/* Formatted on 04/12/2013 11:35:27 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_OPERT_PKG" as
  procedure creer_opert (pva_code_prodt in varchar2,
                         pva_code in varchar2,
                         pva_nom in varchar2,
                         pva_descr in varchar2,
                         pnu_ref_fonct in number default null) is
  begin
    insert into   vd_i_sie_13_opert (code, nom, descr, ref_fonct, ref_prodt, dnr_ref_prodt)
         values   (pva_code,
                   pva_nom,
                   pva_descr,
                   pnu_ref_fonct,
                   sie_11_prodt_pkg.obten_prodt (pva_code_prodt),
                   sie_11_prodt_pkg.obten_prodt (pva_code_prodt));
  end creer_opert;

  procedure suprm_opert (pnu_opert in number) is
  begin
    delete   vd_i_sie_13_opert
     where   seqnc = pnu_opert;
  end suprm_opert;

  procedure suprm_opert (pva_code_prodt in varchar2,
                         pva_code in varchar2) is
  begin
    delete   vd_i_sie_13_opert
     where   (ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt)
           or (pva_code_prodt is null and ref_prodt is null))
         and code = pva_code;
  end suprm_opert;

  procedure modfc_code_opert (pva_code_prodt in varchar2,
                              pva_code_ancn in varchar2,
                              pva_code_nouv in varchar2,
                              pva_nom_nouv in varchar2,
                              pva_descr_nouv in varchar2) is
  begin
    update   vd_i_sie_13_opert
       set   code = pva_code_nouv, nom = nvl (pva_nom_nouv, nom), descr = nvl (pva_descr_nouv, descr)
     where   code = pva_code_ancn
         and (ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt)
           or (pva_code_prodt is null and ref_prodt is null));
  end modfc_code_opert;
end sie_13_opert_pkg;
/

Prompt Package Body SIE_13_PAGE_ITEM_PKG;
/* Formatted on 04/12/2013 11:35:27 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_PAGE_ITEM_PKG" as
  function obten_tradc_libl (pnu_item_id number)
    return varchar2 is
    vva_nom                                 vd_sie_13_page_item_lang.nom%type;
  begin
    select   pil.nom
      into   vva_nom
      from   vd_sie_13_page_item pi,
             vd_sie_13_page_item_lang pil
     where   pil.ref_page_item = pi.seqnc
         and pi.id_apex = pnu_item_id
         and pil.ref_lang = sie_01_lang_pkg.obten_lang_sesn ();

    return vva_nom;
  exception
    when others then
      return null;
  end obten_tradc_libl;

  function obten_id_item (pnu_page in number,
                          pva_nom_item in varchar2)
    return number is
    vnu_id_apex                             number;
  begin
    select   id_apex
      into   vnu_id_apex
      from   vd_sie_13_page_item pi
     where   ref_page = pnu_page and nom_apex = pva_nom_item;

    return vnu_id_apex;
  exception
    when others then
      return null;
  end obten_id_item;

  procedure chang_modl_page_item (pnu_item_id in number,
                                  pnu_templ_final in number) is
  begin
    update   apex_item_page
       set   item_field_template = pnu_templ_final
     where   id = pnu_item_id;
  end chang_modl_page_item;
end sie_13_page_item_pkg;
/

Prompt Package Body SIE_13_PAGE_PKG;
/* Formatted on 04/12/2013 11:35:28 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_PAGE_PKG" as
  gva_sie_13_liste_navgt_excls            varchar2 (200);
  gbo_list_afich                          boolean default true;
  gbo_forcr_afich_list_nagvt              boolean default false;
  gbo_cachr_list                          boolean default false;
  gva_indic_migrt                         varchar2 (1) default 'N';

  procedure maj_pages_refrt_apex (pnu_ref_aplic in number default null) is
    vva_page_apex                           varchar2 (200);
    vva_nom_apex                            varchar2 (200);
    vnu_cnt                                 pls_integer;
    vnu_aplic                               pls_integer;
  begin
    -- Suppression des pages supprim¿es

    delete   vd_i_sie_13_page dest
     where   not exists
               (select   1
                  from   (select   pro.seqnc --sie_11_prodt_pkg.obten_prodt_numr_apex (app.id) MODFC :: CONAL, provoque un ora-04091, trigger mutating ???
                                            aplic,
                                   pag.id numr_page_apex
                            from   apex_page pag,
                                   apex_aplic app,
                                   vd_i_sie_11_aplic pro
                           where   pag.flow_id = app.id and app.id = pro.numr_aplic_apex) sourc
                 where   sourc.numr_page_apex = dest.numr_apex and dest.ref_aplic = sourc.aplic)
         and (dest.ref_aplic = pnu_ref_aplic
           or pnu_ref_aplic is null);

    --Cr¿ation des pages
    merge into   sie_13_page dest
         using   (select   pro.seqnc aplic,                     --sie_11_prodt_pkg.obten_prodt_numr_apex (app.id) prodt,
                           pag.id numr_page_apex,
                           pag.name nom
                    from   apex_page pag,
                           apex_aplic app,
                           vd_i_sie_11_aplic pro
                   where   pag.flow_id = app.id
                       and app.id = pro.numr_aplic_apex
                       and (pro.seqnc = pnu_ref_aplic
                         or pnu_ref_aplic is null)) sourc
            on   (sourc.numr_page_apex = dest.numr_apex and dest.ref_aplic = sourc.aplic)
    when matched then
      update set dest.nom = sourc.nom
    when not matched then
      insert       (numr_apex, nom, ref_aplic, dnr_ref_aplic)
          values   (sourc.numr_page_apex,
                    sourc.nom,
                    sourc.aplic,
                    sourc.aplic);

    -- Mettre ¿ jour la traduction des pages
    insert into   sie_13_page_lang (ref_page, ref_lang, nom, dnr_ref_aplic)
      select   p.seqnc,
               l.seqnc,
               p.nom,
               pr.seqnc
        from   vd_i_sie_13_page p,
               vd_i_sie_11_aplic pr,
               apex_aplic aa,
               vd_i_sie_01_lang l
       where   not exists
                 (select   null
                    from   vd_i_sie_13_page_lang pl
                   where   pl.ref_page = p.seqnc)
           and p.ref_aplic = pr.seqnc
           and pr.numr_aplic_apex = aa.id
           and upper (aa.flow_language) = l.code;

    update   vd_i_sie_11_aplic
       set   date_dernr_maj_refrn_apex = sysdate
     where   (seqnc = pnu_ref_aplic
           or pnu_ref_aplic is null);
  exception
    when others then
      raise;
  end maj_pages_refrt_apex;

  procedure maj_page_refrt_apex (pnu_page in number) is
    vva_page_apex                           varchar2 (200);
    vva_nom_apex                            varchar2 (200);
    vnu_seqnc_afich                         number (10, 2);
    vnu_cnt                                 pls_integer;
    vnu_aplic                               pls_integer;
    vnu_ref_aplic                           number (10);
  begin
    select   ref_aplic,
             numr_apex
      into   vnu_ref_aplic,
             vva_page_apex
      from   vd_i_sie_13_page p
     where   p.seqnc = pnu_page;

    -- Mettre a jour les noms avant de lancer les suppressions
    update   vd_i_sie_13_page_item sourc
       set   nom_apex =
               (select   itm.name
                  from   apex_item_page itm
                 where   itm.id = sourc.id_apex)
     where   exists
               (select   null
                  from   apex_item_page itm
                 where   itm.id = sourc.id_apex and itm.name <> sourc.nom_apex)
         and ref_page = pnu_page;

    update   vd_i_sie_13_page_item sourc
       set   nom_apex =
               (select   itm.button_name
                  from   apex_boutn_page itm
                 where   itm.id = sourc.id_apex)
     where   exists
               (select   null
                  from   apex_boutn_page itm
                 where   itm.id = sourc.id_apex and itm.button_name <> sourc.nom_apex)
         and ref_page = pnu_page;

    -- Effectuer les suppressions d'items qui n'existent plus
    delete   vd_i_sie_13_page_item sourc
     where   not exists
                   (select   1
                      from   apex_item_page itm,
                             vd_i_sie_13_page pag,
                             vd_i_sie_11_aplic pro
                     where   pag.seqnc = sourc.ref_page
                         and pro.seqnc = pag.ref_aplic
                         and itm.name = sourc.nom_apex
                         and itm.flow_step_id = pag.numr_apex
                         and itm.flow_id = pro.numr_aplic_apex)
         and type_item = 'ITEM'
         and ref_page = pnu_page;

    delete   vd_i_sie_13_page_item sourc
     where   not exists
                   (select   1
                      from   apex_boutn_page b,
                             vd_i_sie_13_page pag,
                             vd_i_sie_11_aplic pro
                     where   pag.seqnc = sourc.ref_page
                         and pro.seqnc = pag.ref_aplic
                         and b.button_name = sourc.nom_apex
                         and b.flow_step_id = pag.numr_apex
                         and b.flow_id = pro.numr_aplic_apex)
         and type_item = 'BOUTN'
         and ref_page = pnu_page;

    --mettre ¿ jour la table des items
    merge into   sie_13_page_item dest
         using   (select   p.seqnc ref_page,
                           itm.id id_apex,
                           itm.name nom_apex,
                           nvl (itm.prompt, '[' || itm.name || ']') libl,
                           'ITEM' type_item,
                           case when itm.source_type = 'DB_COLUMN' then 'O' else 'N' end indic_rechr,
                           pro.seqnc ref_aplic
                    from   apex_item_page itm,
                           apex_page pag,
                           apex_aplic app,
                           vd_i_sie_13_page p,
                           vd_i_sie_11_aplic pro
                   where   pag.flow_id = app.id
                       and itm.flow_step_id = pag.id
                       and itm.flow_id = app.id
                       and p.seqnc = pnu_page
                       and p.numr_apex = pag.id
                       and pro.seqnc = p.ref_aplic
                       and app.id = pro.numr_aplic_apex) sourc
            on   (sourc.ref_page = dest.ref_page
              and dest.nom_apex = sourc.nom_apex
              and dest.type_item = sourc.type_item)
    when matched then
      update set dest.id_apex = sourc.id_apex, dest.libl = sourc.libl
    when not matched then
      insert       (ref_page, id_apex, nom_apex, libl, indic_rechr, dnr_ref_aplic)
          values   (sourc.ref_page,
                    sourc.id_apex,
                    sourc.nom_apex,
                    sourc.libl,
                    sourc.indic_rechr,
                    sourc.ref_aplic);

    --Assurer que les boutons sont "uniques"
    begin
      select   id,
               button_name,
               cnt,
               flow_id
        into   vva_page_apex,
               vva_nom_apex,
               vnu_cnt,
               vnu_aplic
        from   (select     pag.id,
                           b.button_name,
                           count (1) cnt,
                           pag.flow_id
                    from   apex_boutn_page b,
                           apex_page pag,
                           apex_aplic app,
                           vd_i_sie_13_page p,
                           vd_i_sie_11_aplic pro
                   where   pag.flow_id = app.id
                       and b.flow_step_id = pag.id
                       and b.flow_id = app.id
                       and app.id = pro.numr_aplic_apex
                       and p.seqnc = pnu_page
                       and pro.seqnc = p.ref_aplic
                group by   pag.id,
                           b.button_name,
                           pag.flow_id
                  having   count (1) > 1)
       where   rownum = 1;

      sie_01_err_apex_pkg.lever_err_apex_code ('SAF.000028',
                                               vva_nom_apex,
                                               vva_page_apex,
                                               vnu_aplic,
                                               pva_code_prodt             => 'AFW');
    exception
      when no_data_found then
        null;
    end;

    --Cr¿er les boutons
    merge into   sie_13_page_item dest
         using   (select   p.seqnc ref_page,
                           b.id id_apex,
                           b.button_name nom_apex,
                           b.button_image_alt libl,
                           'BOUTN' type_item,
                           pro.seqnc ref_aplic
                    from   apex_boutn_page b,
                           apex_page pag,
                           apex_aplic app,
                           vd_i_sie_13_page p,
                           vd_i_sie_11_aplic pro
                   where   pag.flow_id = app.id
                       and b.flow_step_id = pag.id
                       and b.flow_id = app.id
                       and p.seqnc = pnu_page
                       and p.numr_apex = pag.id
                       and pro.seqnc = p.ref_aplic
                       and app.id = pro.numr_aplic_apex) sourc
            on   (sourc.ref_page = dest.ref_page
              and dest.nom_apex = sourc.nom_apex
              and dest.type_item = sourc.type_item)
    when matched then
      update set dest.libl = sourc.libl
    when not matched then
      insert       (ref_page, nom_apex, id_apex, libl, type_item, dnr_ref_aplic)
          values   (sourc.ref_page,
                    sourc.nom_apex,
                    sourc.id_apex,
                    sourc.libl,
                    'BOUTN',
                    sourc.ref_aplic);

    if gva_indic_migrt = 'N' then
      --Supprimer les interactive
      delete   vd_i_sie_13_page_ir pi
       where   pi.ref_page = pnu_page
           and not exists
                     (select   1
                        from   apex_ir ir,
                               vd_i_sie_13_page p,
                               vd_i_sie_11_aplic pro
                       where   ir.flow_id = pro.numr_aplic_apex
                           and pro.seqnc = p.ref_aplic
                           and ir.page_id = p.numr_apex
                           and p.seqnc = pi.ref_page);

      --Cr¿er les interactives
      merge into   vd_i_sie_13_page_ir dest
           using   (select   p.seqnc ref_page,
                             ar.plug_name libl_regn,
                             ir.id id_apex,
                             pro.seqnc ref_aplic
                      from   apex_ir ir,
                             apex_regn ar,
                             vd_i_sie_13_page p,
                             vd_i_sie_11_aplic pro
                     where   ir.flow_id = pro.numr_aplic_apex
                         and ir.page_id = p.numr_apex
                         and pro.seqnc = p.ref_aplic
                         and p.seqnc = pnu_page
                         and ir.region_id = ar.id) sourc
              on   (sourc.ref_page = dest.ref_page)
      when matched then
        update set dest.id_apex = sourc.id_apex, dest.libl_regn = sourc.libl_regn
      when not matched then
        insert       (ref_page, libl_regn, id_apex, dnr_ref_aplic)
            values   (sourc.ref_page,
                      sourc.libl_regn,
                      sourc.id_apex,
                      sourc.ref_aplic);
    end if;

    --Supprimer les colonnes d'interactive report
    --NOTE: Ne pas se fier au ID qui peut ne pas ¿tre bon (ex: apr¿s une migration)
    --NOTE 2 : se fier au id pour le moment, ¿ tester en migration (avec un mode migration)

    delete   vd_i_sie_13_page_ir_coln pic
     where   exists
               (select   1
                  from   vd_i_sie_13_page_ir pi,
                         vd_i_sie_13_page p
                 where   p.seqnc = pnu_page and pi.ref_page = p.seqnc and pi.seqnc = pic.ref_page_ir)
         and not exists
                   (select   1
                      from   apex_ir_coln aic,
                             apex_ir ai,
                             vd_i_sie_13_page_ir pi,
                             vd_i_sie_13_page p,
                             vd_i_sie_11_aplic pr
                     where   aic.worksheet_id = ai.id
                         and aic.db_column_name = pic.coln_table
                         and ai.flow_id = pr.numr_aplic_apex
                         and ai.page_id = p.numr_apex
                         and pi.seqnc = pic.ref_page_ir
                         and p.seqnc = pi.ref_page
                         and pr.seqnc = p.ref_aplic);

    --Cr¿er les colonnes d'interactive report
    merge into   vd_i_sie_13_page_ir_coln dest
         using   (select   pi.seqnc ref_page_ir,
                           aic.db_column_name coln_table,
                           aic.display_order ordre_afich,
                           aic.column_label libl,
                           aic.id id_apex,
                           pr.seqnc ref_aplic
                    from   apex_ir_coln aic,
                           apex_ir ai,
                           vd_i_sie_11_aplic pr,
                           vd_i_sie_13_page_ir pi,
                           vd_i_sie_13_page p
                   where   aic.worksheet_id = ai.id
                       and ai.flow_id = pr.numr_aplic_apex
                       and ai.page_id = p.numr_apex
                       and p.numr_apex = ai.page_id
                       and pi.id_apex = aic.worksheet_id
                       and p.seqnc = pnu_page
                       and pi.ref_page = p.seqnc
                       and pr.seqnc = p.ref_aplic) sourc
            on   (sourc.ref_page_ir = dest.ref_page_ir and sourc.coln_table = dest.coln_table)
    when matched then
      update set dest.libl = sourc.libl, dest.ordre_afich = sourc.ordre_afich, id_apex = sourc.id_apex
    when not matched then
      insert       (ref_page_ir, ordre_afich, libl, coln_table, id_apex, dnr_ref_aplic)
          values   (sourc.ref_page_ir,
                    sourc.ordre_afich,
                    sourc.libl,
                    sourc.coln_table,
                    sourc.id_apex,
                    sourc.ref_aplic);

    --ajouter les items rajout¿s dans la pages dans les cas de lecture seule
    if not sie_13_condt_piltb_pkg.vbo_en_charg then
      insert into   vd_i_sie_13_lien_condt_piltb (ref_page_item, ref_condt_piltb, indic_lectr_seul, dnr_ref_aplic)
        select   pi.seqnc,
                 cls1.seqnc,
                 'N',
                 p.ref_aplic
          from   vd_i_sie_13_page_item pi,
                 vd_i_sie_13_page p,
                 vd_i_sie_13_condt_piltb cls1
         where   p.seqnc = pi.ref_page
             and cls1.ref_page = p.seqnc
             and p.seqnc = pnu_page
             and not exists
                       (select   1
                          from   vd_i_sie_13_lien_condt_piltb lls,
                                 vd_i_sie_13_condt_piltb cls
                         where   lls.ref_page_item = pi.seqnc
                             and cls.seqnc = lls.ref_condt_piltb
                             and cls.ref_page = p.seqnc);
    end if;

    --TODO CARLO
    --Pour toutes traduction
    --pour chaque page
    --assurer que les traductions sont l¿ (si existe, ne rien faire, sinon, la cr¿er)
    insert into   vd_i_sie_13_page_lang (ref_page, nom, ref_lang, dnr_ref_aplic)
      select   pa2.seqnc,
               ap.name,
               l.seqnc,
               apl.seqnc
        from   vd_sie_11_prodt p,
               vd_sie_11_prodt_lang pl,
               vd_sie_01_lang l,
               apex_tradc at,
               apex_aplic aa,
               apex_page ap,
               vd_sie_11_aplic apl,
               vd_sie_13_page pa2
       where   pl.ref_prodt = p.seqnc
           and pa2.seqnc = pnu_page
           and l.seqnc = pl.ref_lang
           and apl.ref_prodt = p.seqnc
           and at.primary_language_flow_id = apl.numr_aplic_apex
           and upper (at.translation_flow_language_code) = l.code
           and aa.id = at.translation_flow_id
           and aa.id = ap.flow_id
           and trunc (ap.id) not in
                 (select   pa.numr_apex
                    from   vd_sie_13_page pa,
                           vd_sie_13_page_lang pal
                   where   pa.ref_aplic = apl.seqnc and pal.ref_page = pa.seqnc and pal.ref_lang = l.seqnc)
           and trunc (ap.id) = pa2.numr_apex
           and pa2.ref_aplic = p.seqnc;

    update   vd_i_sie_13_page
       set   date_dernr_maj_refrn_apex = sysdate
     where   seqnc = pnu_page;
  exception
    when others then
      sie_03_journ_pkg.ecrir_journ (null,
                                    null,
                                    null,
                                    true);
      raise;
  end maj_page_refrt_apex;

  procedure maj_table_a_partr_refrt_apex (pnu_ref_aplic in number default null,
                                          pva_indic_migrt in varchar2 default 'N') is
    vva_page_apex                           varchar2 (200);
    vva_nom_apex                            varchar2 (200);
    vnu_cnt                                 pls_integer;
    vnu_aplic                               pls_integer;

    cursor cur_page is
      select   p.seqnc
        from   vd_i_sie_13_page p
       where   (p.ref_aplic = pnu_ref_aplic
             or pnu_ref_aplic is null);
  begin
    gva_indic_migrt := pva_indic_migrt;
    maj_pages_refrt_apex (pnu_ref_aplic);

    for rec_page in cur_page loop
      maj_page_refrt_apex (rec_page.seqnc);
    end loop;
  end maj_table_a_partr_refrt_apex;

  function obten_lectr_seul
    return boolean is
  begin
    if true then
      return true;
    end if;
  end obten_lectr_seul;

  function obten_afich
    return boolean is
  begin
    return null;
  end obten_afich;

  procedure defn_contx_exect_page is
  begin
    null;
  end defn_contx_exect_page;

  function genr_optio_liste_navgt
    return varchar2 is
    cva_ocurn_optio                constant varchar2 (45) default '<li><a href="%link%">%icon%%libl%</a></li>';
    cva_link                       constant varchar2 (45) default 'f?p=%page%:%sesn%:::RP:%varbl1%:%valr1%';
    vnu_page                                number (10) default sie_07_util_pkg.nv ('APP_PAGE_ID');
    vnu_sesn                                number default sie_07_util_pkg.nv ('APP_SESSION');
    vnu_app                                 number default sie_07_util_pkg.nv ('APP_ID');

    cursor cur_list is
      select     sln.libl,
                 page,
                 aplic,
                 sspc,
                 sapc,
                 sspi,
                 sapi,
                 code,
                 seqnc,
                 css_icone_boots
          from   vd_i_sie_13_liste_navgt sln
         where   ref_page = (select   seqnc
                               from   vd_i_sie_13_page p
                              where   p.numr_apex = vnu_page and p.ref_aplic = sie_11_aplic_pkg.obten_aplic_sesn)
      order by   ordre_presn asc;

    vva_optio_courn                         varchar2 (32767);
    vva_optio                               varchar2 (500);
    vbo_exist                               boolean default false;
    vva_excls                               varchar2 (200) default ':' || gva_sie_13_liste_navgt_excls || ':';
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Page - Générer la liste de navigation');

    if gbo_forcr_afich_list_nagvt then
      gbo_list_afich := true;
    elsif gbo_cachr_list then
      gbo_list_afich := false;
    elsif sie_07_util_pkg.exist_item ('P' || sie_07_util_pkg.nv ('APP_PAGE_ID') || '_SEQNC') then
      gbo_list_afich := sie_07_util_pkg.nv ('P' || sie_07_util_pkg.nv ('APP_PAGE_ID') || '_SEQNC') is not null;
    end if;

    if gbo_list_afich then
      for rec_list in cur_list loop
        if instr (vva_excls,
                  ':' || rec_list.code || ':') = 0 then
          -- Valider le droit d'accès
          if sie_12_secrt_pkg.verif_acces_liste_navgt (rec_list.seqnc) then
            vbo_exist := true;
            vva_optio := cva_link;
            vva_optio :=
              replace (vva_optio,
                       '%sesn%',
                       vnu_sesn);

            if rec_list.page like '%:%' then
              vva_optio :=
                replace (vva_optio,
                         '%page%',
                         rec_list.page);
            else
              vva_optio :=
                replace (vva_optio,
                         '%page%',
                         nvl (rec_list.aplic, vnu_app) || ':' || rec_list.page);
            end if;

            if rec_list.sapi is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SAPI');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sapi);
            end if;

            if rec_list.sspi is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SSPI');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sspi);
            end if;

            if rec_list.sapc is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SAPC');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sapc);
            end if;

            if rec_list.sspc is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SSPC');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sspc);
            end if;

            vva_optio :=
              replace (vva_optio,
                       '%varbl1%',
                       'SIDF');
            vva_optio :=
              replace (vva_optio,
                       '%valr1%',
                       sie_07_util_pkg.nv ('SIDF'));

            vva_optio :=
              replace (cva_ocurn_optio,
                       '%link%',
                       vva_optio);

            vva_optio :=
              replace (vva_optio,
                       '%icon%',
                       '<i class="' || nvl (rec_list.css_icone_boots, 'icon-external-link') || '"></i> ');


            vva_optio :=
              replace (vva_optio,
                       '%libl%',
                       rec_list.libl);


            vva_optio_courn := vva_optio_courn || vva_optio;
          end if;
        end if;
      end loop;

      if vbo_exist then
        --batir un lien courant
        /* vva_optio   := replace (cva_link, '%app%', vnu_app);
         vva_optio   := replace (vva_optio, '%sesn%', vnu_sesn);
         vva_optio   := replace (vva_optio, '%page%', vnu_page);
         vva_optio   := replace (vva_optio, '%varbl1%', 'SIDF');
         vva_optio   :=
            replace (vva_optio, '%valr1%', sie_07_util_pkg.nv ('SIDF'));
         vva_optio   := replace (cva_ocurn_optio, '%link%', vva_optio);
         vva_optio   :=
            replace (vva_optio, '%libl%', ' - Naviguer vers - ');
         vva_optio_courn :=
               vva_optio
            || vva_optio_courn;*/
        vva_optio_courn :=
             '<div class="btn-group">'
          || '<button type="button" class="btn btn-warning btn-small dropdown-toggle" data-toggle="dropdown" id="a_sie_13_defnt_liste_navgt">'
          || '<i class="icon-cogs icon-large"></i> Actions <span class="caret"></span>'
          || '</button>'
          || '<ul class="dropdown-menu pull-right">'
          || vva_optio_courn
          || '</ul>'
          || '</div>';
      end if;

      return aa.do_substitutions (vva_optio_courn);
    else
      return null;
    end if;
  end genr_optio_liste_navgt;

  function genr_elemn_liste_navgt
    return varchar2 is
    cva_ocurn_optio                constant varchar2 (45) default '<li><a href="%link%">%icon%%libl%</a></li>';
    cva_link                       constant varchar2 (45) default 'f?p=%page%:%sesn%:::RP:%varbl1%:%valr1%';
    vnu_page                                number (10) default sie_07_util_pkg.nv ('APP_PAGE_ID');
    vnu_sesn                                number default sie_07_util_pkg.nv ('APP_SESSION');
    vnu_app                                 number default sie_07_util_pkg.nv ('APP_ID');

    cursor cur_list is
      select     sln.libl,
                 page,
                 aplic,
                 sspc,
                 sapc,
                 sspi,
                 sapi,
                 code,
                 seqnc,
                 css_icone_boots
          from   vd_i_sie_13_liste_navgt sln
         where   ref_page = (select   seqnc
                               from   vd_i_sie_13_page p
                              where   p.numr_apex = vnu_page and p.ref_aplic = sie_11_aplic_pkg.obten_aplic_sesn)
      order by   ordre_presn asc;

    vva_optio_courn                         varchar2 (32767);
    vva_optio                               varchar2 (500);
    vbo_exist                               boolean default false;
    vva_excls                               varchar2 (200) default ':' || gva_sie_13_liste_navgt_excls || ':';
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Page - Générer la liste de navigation');

    if gbo_forcr_afich_list_nagvt then
      gbo_list_afich := true;
    elsif gbo_cachr_list then
      gbo_list_afich := false;
    elsif sie_07_util_pkg.exist_item ('P' || sie_07_util_pkg.nv ('APP_PAGE_ID') || '_SEQNC') then
      gbo_list_afich := sie_07_util_pkg.nv ('P' || sie_07_util_pkg.nv ('APP_PAGE_ID') || '_SEQNC') is not null;
    end if;

    if gbo_list_afich then
      for rec_list in cur_list loop
        if instr (vva_excls,
                  ':' || rec_list.code || ':') = 0 then
          -- Valider le droit d'accès
          if sie_12_secrt_pkg.verif_acces_liste_navgt (rec_list.seqnc) then
            vbo_exist := true;
            vva_optio := cva_link;
            vva_optio :=
              replace (vva_optio,
                       '%sesn%',
                       vnu_sesn);

            if rec_list.page like '%:%' then
              vva_optio :=
                replace (vva_optio,
                         '%page%',
                         rec_list.page);
            else
              vva_optio :=
                replace (vva_optio,
                         '%page%',
                         nvl (rec_list.aplic, vnu_app) || ':' || rec_list.page);
            end if;

            if rec_list.sapi is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SAPI');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sapi);
            end if;

            if rec_list.sspi is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SSPI');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sspi);
            end if;

            if rec_list.sapc is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SAPC');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sapc);
            end if;

            if rec_list.sspc is not null then
              vva_optio :=
                replace (vva_optio,
                         '%varbl1%',
                         '%varbl1%,SSPC');
              vva_optio :=
                replace (vva_optio,
                         '%valr1%',
                         '%valr1%,' || rec_list.sspc);
            end if;

            vva_optio :=
              replace (vva_optio,
                       '%varbl1%',
                       'SIDF');
            vva_optio :=
              replace (vva_optio,
                       '%valr1%',
                       sie_07_util_pkg.nv ('SIDF'));

            vva_optio :=
              replace (cva_ocurn_optio,
                       '%link%',
                       vva_optio);

            vva_optio :=
              replace (vva_optio,
                       '%icon%',
                       '<i class="' || nvl (rec_list.css_icone_boots, 'icon-external-link') || '"></i> ');


            vva_optio :=
              replace (vva_optio,
                       '%libl%',
                       rec_list.libl);


            vva_optio_courn := vva_optio_courn || vva_optio;
          end if;
        end if;
      end loop;

      if vbo_exist then
        --batir un lien courant
        /* vva_optio   := replace (cva_link, '%app%', vnu_app);
         vva_optio   := replace (vva_optio, '%sesn%', vnu_sesn);
         vva_optio   := replace (vva_optio, '%page%', vnu_page);
         vva_optio   := replace (vva_optio, '%varbl1%', 'SIDF');
         vva_optio   :=
            replace (vva_optio, '%valr1%', sie_07_util_pkg.nv ('SIDF'));
         vva_optio   := replace (cva_ocurn_optio, '%link%', vva_optio);
         vva_optio   :=
            replace (vva_optio, '%libl%', ' - Naviguer vers - ');
         vva_optio_courn :=
               vva_optio
            || vva_optio_courn;*/
        vva_optio_courn :=
          '<li class="divider"></li>' || '<li class="dropdown-header">Navigation</li>' || vva_optio_courn;
      end if;

      return aa.do_substitutions (vva_optio_courn);
    else
      return null;
    end if;
  end genr_elemn_liste_navgt;

  procedure ajout_exclu_liste_navgt (pva_code_elemn_navgt in varchar2) is
    vva_exclu                               varchar2 (200) default sie_07_util_pkg.v ('A_SIE_13_LISTE_NAVGT_EXCLS');
  begin
    if gva_sie_13_liste_navgt_excls is null then
      gva_sie_13_liste_navgt_excls := pva_code_elemn_navgt;
    else
      gva_sie_13_liste_navgt_excls := gva_sie_13_liste_navgt_excls || ':' || pva_code_elemn_navgt;
    end if;
  end ajout_exclu_liste_navgt;

  procedure reint_exclu_liste_navgt is
  begin
    gva_sie_13_liste_navgt_excls := null;
    gbo_list_afich := true;
  end reint_exclu_liste_navgt;

  procedure cachr_liste_navgt is
  begin
    gbo_cachr_list := true;
  end cachr_liste_navgt;

  procedure forcr_afich_liste_navgt is
  begin
    gbo_forcr_afich_list_nagvt := true;
  end forcr_afich_liste_navgt;

  procedure tradc_raprt_intrc is
    vnu_page                                number (10) default sie_07_util_pkg.nv ('APP_PAGE_ID');
    vnu_app                                 number default sie_07_util_pkg.nv ('APP_ID');
    vnu_exist                               number;
  begin
    select   1
      into   vnu_exist
      from   vd_sie_11_aplic p,
             vd_sie_13_page pa,
             vd_sie_13_page_ir pi
     where   p.numr_aplic_apex = vnu_app
         and p.seqnc = pa.ref_aplic
         and pa.numr_apex = vnu_page
         and pa.seqnc = pi.ref_page;

    htp.p ('<script>
             $().ready(function() {
               $("label[for=''apexir_NUM_ROWS'']").text("Rangées");
             });
           </script>');
  exception
    when no_data_found then
      null;
  end tradc_raprt_intrc;

  function obten_titre_page_lang
    return varchar2 is
    vva_nom                                 vd_i_sie_13_page_lang.nom%type;
    vva_item_page_titre                     vd_i_sie_13_page_lang.nom%type
      := sie_07_util_pkg.v ('P' || sie_07_util_pkg.v ('APP_PAGE_ID') || '_PAGE_TITRE');
  begin
    if vva_item_page_titre is not null then
      return vva_item_page_titre;
    else
      select   pl.nom
        into   vva_nom
        from   vd_i_sie_13_page_lang pl,
               vd_i_sie_13_page p
       where   p.seqnc = sie_13_page_pkg.obten_page_sesn
           and pl.ref_page = p.seqnc
           and pl.ref_lang = sie_01_lang_pkg.obten_lang_sesn ();
    end if;

    return vva_nom;
  exception
    when no_data_found then
      return null;
  end obten_titre_page_lang;

  function obten_page_sesn
    return number is
    vnu_seqnc_page                          vd_i_sie_13_page.seqnc%type;
  begin
    select   p.seqnc
      into   vnu_seqnc_page
      from   vd_i_sie_13_page p
     where   p.numr_apex = sie_07_util_pkg.v ('APP_PAGE_ID') and p.ref_aplic = sie_11_aplic_pkg.obten_aplic_sesn;

    return vnu_seqnc_page;
  exception
    when others then
      raise;
  end obten_page_sesn;

  function obten_page_zero_sesn
    return number is
    vnu_seqnc_page                          vd_i_sie_13_page.seqnc%type;
  begin
    select   p.seqnc
      into   vnu_seqnc_page
      from   vd_i_sie_13_page p
     where   p.numr_apex = 0 and p.ref_aplic = sie_11_aplic_pkg.obten_aplic_sesn;

    return vnu_seqnc_page;
  end;

  function obten_struc_aplic (pnu_page in number)
    return number is
    vnu_struc                               number (10);
  begin
    select   ref_struc_aplic
      into   vnu_struc
      from   vd_i_sie_13_page p
     where   p.seqnc = pnu_page;

    return vnu_struc;
  exception
    when no_data_found then
      return null;
  end obten_struc_aplic;

  function obten_numr_apex_page (pnu_page in number default null)
    return number is
    vnu_numr_apex                           vd_i_sie_13_page.numr_apex%type;
  begin
    select   p.numr_apex
      into   vnu_numr_apex
      from   vd_i_sie_13_page p
     where   p.seqnc = nvl (pnu_page, obten_page_sesn);

    return vnu_numr_apex;
  exception
    when no_data_found then
      return null;
  end obten_numr_apex_page;

  function obten_info_extra (pnu_app_id in number,
                             pnu_app_page_id in number)
    return typ_info_extra is
    rec_info_extra                          typ_info_extra;

    cursor cur_procs_fetch is
      select   ap.process_sql_clob info_fetch
        from   apex_procs ap
       where   flow_id = pnu_app_id and flow_step_id = pnu_app_page_id and process_type = 'DML_FETCH_ROW';

    rec_procs_fetch                         cur_procs_fetch%rowtype;

    subtype typ_arr_info is apex_application_global.vc_arr2;

    var_info                                typ_arr_info;
    -- (1) : ["F|"]Schema|"#OWNER#"
    -- (2) : Table ou vue
    -- (3) : Item s¿quence 1
    -- (4) : Colonne s¿quence 1
    -- (5) : Item s¿quence 2
    -- (6) : Colonne s¿quence 2

    vva_schem_tmp                           varchar2 (32);

    function obten_info (pnu_index in number)
      return varchar2 is
    begin
      if var_info.exists (pnu_index) then
        return var_info (pnu_index);
      else
        return null;
      end if;
    end;
  begin
    open cur_procs_fetch;

    fetch cur_procs_fetch
    into rec_procs_fetch;

    close cur_procs_fetch;

    if rec_procs_fetch.info_fetch is not null then
      -- Extraire les infos de fetch du clob
      var_info := sie_07_util_pkg.string_to_table (rec_procs_fetch.info_fetch);
      vva_schem_tmp := obten_info (1);
      rec_info_extra.va_table := obten_info (2);
      rec_info_extra.va_item_pk1 := obten_info (3);
      rec_info_extra.va_coln_pk1 := obten_info (4);
      rec_info_extra.va_item_pk2 := obten_info (5);
      rec_info_extra.va_coln_pk2 := obten_info (6);

      -- Ajuster le sch¿ma
      if vva_schem_tmp like 'F|%' then
        rec_info_extra.va_cache := 'FETCH';
        rec_info_extra.va_schem :=
          substr (vva_schem_tmp,
                  3);
      else
        rec_info_extra.va_cache := 'DISPL';
        rec_info_extra.va_schem := vva_schem_tmp;
      end if;

      if rec_info_extra.va_schem = '#OWNER#' then
        rec_info_extra.va_schem := null;
      end if;
    end if;

    return rec_info_extra;
  end obten_info_extra;

  function obten_info_extra (pnu_ref_page number default null)
    return typ_info_extra is
    vnu_app_id                              number;
    vnu_app_page_id                         number;
  begin
    if pnu_ref_page is null then
      vnu_app_id := sie_07_util_pkg.nv ('APP_ID');
      vnu_app_page_id := sie_07_util_pkg.nv ('APP_PAGE_ID');
    else
      select   p.app_id_formt,
               p.numr_apex
        into   vnu_app_id,
               vnu_app_page_id
        from   vd_sie_13_page p
       where   p.seqnc = pnu_ref_page;
    end if;

    return obten_info_extra (vnu_app_id,
                             vnu_app_page_id);
  end obten_info_extra;

  function exist_info_extra (pnu_app_id in number,
                             pnu_app_page_id in number)
    return boolean is
    rec_info_extra                          typ_info_extra
                                              default obten_info_extra (pnu_app_id,
                                                                        pnu_app_page_id);
  begin
    return (rec_info_extra.va_table is not null);
  end exist_info_extra;

  function exist_info_extra (pnu_ref_page number default null)
    return boolean is
    rec_info_extra                          typ_info_extra default obten_info_extra (pnu_ref_page);
  begin
    return (rec_info_extra.va_table is not null);
  end exist_info_extra;

  function exist_info_extra_va (pnu_ref_page number default null)
    return varchar2 is
  begin
    return case when exist_info_extra (pnu_ref_page) then 'O' else 'N' end;
  end exist_info_extra_va;

  function obten_page_rechr (pnu_ref_page number default null)
    return number is
    vnu_ref_page_rechr                      number;
  begin
    if pnu_ref_page is null then
      select   ref_page_rechr
        into   vnu_ref_page_rechr
        from   vd_i_sie_13_page
       where   seqnc = obten_page_sesn ();
    else
      select   ref_page_rechr
        into   vnu_ref_page_rechr
        from   vd_i_sie_13_page
       where   seqnc = pnu_ref_page;
    end if;

    if vnu_ref_page_rechr is not null then
      if exist_info_extra (vnu_ref_page_rechr) then
        return vnu_ref_page_rechr;
      end if;
    end if;

    return null;
  exception
    when no_data_found then
      return null;
  end obten_page_rechr;

  function est_page_rechr (pnu_ref_page in number)
    return boolean is
    vnu_exist                               number default 0;
  begin
    -- Consid¿rer que la page est une page de recherche si au moins 1 page
    -- l'utilise comme page de recherche
    select   max (1)
      into   vnu_exist
      from   vd_i_sie_13_page
     where   ref_page_rechr = pnu_ref_page;

    return (vnu_exist = 1);
  end est_page_rechr;

  function obten_opert_dml (pva_reqt in varchar2 default null)
    return varchar2 is
    vnu_app_id                              number default sie_07_util_pkg.nv ('APP_ID');
    vnu_app_page_id                         number default sie_07_util_pkg.nv ('APP_PAGE_ID');
    vva_reqt                                varchar2 (100)
                                              default upper (nvl (pva_reqt, sie_07_util_pkg.v ('REQUEST')));
    vva_actio                               varchar2 (10);
  begin
    case
      when vva_reqt in ('INSERT', 'CREATE', 'CREATE_AGAIN', 'CREATEAGAIN') then
        return 'I';
      when vva_reqt like '%CREATE%' then
        return 'I';
      when vva_reqt in ('SAVE', 'APPLY CHANGES', 'UPDATE', 'UPDATE ROW', 'CHANGE', 'APPLY') then
        return 'U';
      when vva_reqt like 'APPLY%CHANGES%' then
        return 'U';
      when vva_reqt like 'GET_NEXT%' then
        return 'U';
      when vva_reqt like 'GET_PREV%' then
        return 'U';
      when vva_reqt like '%SAVE%' then
        return 'U';
      when vva_reqt in ('DELETE', 'REMOVE', 'DELETE ROW', 'DROP', 'MULTI_ROW_DELETE') then
        return 'D';
      else
        begin
          select   upper (database_action)
            into   vva_actio
            from   apex_boutn_page
           where   flow_id = vnu_app_id and flow_step_id = vnu_app_page_id and upper (button_name) = vva_reqt;

          return substr (vva_actio,
                         1,
                         1);
        exception
          when no_data_found then
            return null;
        end;
    end case;
  end obten_opert_dml;

  function est_opert_inser (pva_reqt in varchar2 default null)
    return boolean is
  begin
    return nvl (obten_opert_dml (pva_reqt), '.') = 'I';
  end est_opert_inser;

  function est_opert_updat (pva_reqt in varchar2 default null)
    return boolean is
  begin
    return nvl (obten_opert_dml (pva_reqt), '.') = 'U';
  end est_opert_updat;

  function est_opert_delt (pva_reqt in varchar2 default null)
    return boolean is
  begin
    return nvl (obten_opert_dml (pva_reqt), '.') = 'D';
  end est_opert_delt;

  function est_opert_inser_va (pva_reqt in varchar2 default null)
    return varchar2 is
  begin
    return case when obten_opert_dml (pva_reqt) = 'I' then 'O' else 'N' end;
  end est_opert_inser_va;

  function est_opert_updat_va (pva_reqt in varchar2 default null)
    return varchar2 is
  begin
    return case when obten_opert_dml (pva_reqt) = 'U' then 'O' else 'N' end;
  end est_opert_updat_va;

  function est_opert_delt_va (pva_reqt in varchar2 default null)
    return varchar2 is
  begin
    return case when obten_opert_dml (pva_reqt) = 'D' then 'O' else 'N' end;
  end est_opert_delt_va;

  procedure chang_modl_page (pnu_numr_apex in number,
                             pnu_page_apex in number,
                             pnu_templ_initl in number,
                             pnu_templ_final in number) is
    cursor cur_page_item is
      select   id
        from   apex_item_page
       where   flow_id = pnu_numr_apex and flow_step_id = pnu_page_apex and item_field_template = pnu_templ_initl;
  begin
    for rec_page_item in cur_page_item loop
      sie_13_page_item_pkg.chang_modl_page_item (rec_page_item.id,
                                                 pnu_templ_final);
    end loop;
  end chang_modl_page;

  function obten_mesg_sucs_specf
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_sucs_specf
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_sucs_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_sucs_specf;

  function obten_mesg_echec_specf
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_echec_specf
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_echec_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_echec_specf;

  function obten_mesg_fetch_specf
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_fetch_specf
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_fetch_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_fetch_specf;

  function obten_mesg_range_suprm_specf
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_range_suprm_specf
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_suprm_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_range_suprm_specf;

  function obten_mesg_range_modf_specf
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_range_modf_specf
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_modf_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_range_modf_specf;

  function obten_mesg_range_inser_specf
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_range_inser_specf
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_inser_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_range_inser_specf;

  function obten_mesg_aucun_don_trouv
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_aucun_don_trouv
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_aucun_don_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_aucun_don_trouv;

  function obten_mesg_trop_don_trouv
    return varchar2 is
    vnu_mesg                                number (10);
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   ref_mesg_trop_don_trouv
      into   vnu_mesg
      from   vd_i_sie_13_page
     where   seqnc = obten_page_sesn;

    if vnu_mesg is not null then
      vva_mesg := sie_01_gestn_mesg_pkg.obten_mesg (vnu_mesg);
    else
      vva_mesg := sie_11_prodt_pkg.obten_mesg_trop_don_prodt;
    end if;

    return vva_mesg;
  end obten_mesg_trop_don_trouv;

  procedure defnr_item_aplic_apex is
  begin
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_SUCS_SPECF',
                                     obten_mesg_sucs_specf);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_ECHEC_SPECF',
                                     obten_mesg_echec_specf);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_LIEN_EDITN_RAPRT',
                                     obten_lien_editn_raprt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_PAGE_TITRE',
                                     obten_titre_page_lang);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_IMPOS_FETCH',
                                     obten_mesg_fetch_specf);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_RANGE_SUPRM',
                                     obten_mesg_range_suprm_specf);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_RANGE_MODF',
                                     obten_mesg_range_modf_specf);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_RANGE_INSER',
                                     obten_mesg_range_inser_specf);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_AUCUN_DON_TROUV',
                                     obten_mesg_aucun_don_trouv);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_13_MESG_TROP_DON_TROUV',
                                     obten_mesg_trop_don_trouv);
  end defnr_item_aplic_apex;

  function obten_lien_editn_raprt
    return varchar2 is
    vva_icon                                varchar2 (50);
    vva_titre                               varchar2 (50);
  begin
    if sie_12_secrt_pkg.verfc_droit_acces_schem_apex (null,
                                                      true,
                                                      null,
                                                      null)
    or sie_12_secrt_pkg.verfc_droit_acces_schem_apex (null,
                                                      null,
                                                      true,
                                                      null)
    or sie_12_secrt_pkg.verfc_droit_acces_schem_apex (null,
                                                      null,
                                                      null,
                                                      true) then
      -- traduire
      vva_icon := 'icon-edit';
    else
      -- traduire
      vva_icon := 'icon-search';
    end if;

    return    sie_15_htp_pkg.ouvri_bals ('i',
                                         'class',
                                         'icon-rang-raprt-inter ' || vva_icon)
           || sie_15_htp_pkg.fermr_bals ('i');
  exception
    when others then
      raise;
  end obten_lien_editn_raprt;

  function obten_modl_mesg_sucs (pnu_page in number default null,
                                 pnu_aplic in number default null)
    return varchar2 is
    vva_modl_mesg_sucs                      apex_flow_templ.success_message%type;
    vva_mesg_sucs                           apex_flow_templ.success_message%type
      default    '<div id="sie_sucs_mesg" class="alert alert-success">'
              || '<button type="button" class="close" data-dismiss="alert">&times;</button>'
              || '#SUCCESS_MESSAGE#'
              || '</div>';
  begin
    begin
      select   aft.success_message
        into   vva_modl_mesg_sucs
        from   apex_page ap,
               apex_flow_templ aft
       where   ap.id = obten_numr_apex_page (pnu_page)
           and ap.flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic)
           and aft.id = ap.step_template;
    exception
      when no_data_found then
        begin
          select   aft.success_message
            into   vva_modl_mesg_sucs
            from   apex_aplic aa,
                   apex_flow_templ aft
           where   aa.id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic) and aft.id = aa.default_page_template;
        exception
          when no_data_found then
            --Bogue étrange APEX 4.2 ? - CONAL
            vva_modl_mesg_sucs := vva_mesg_sucs;
        end;
    end;

    return vva_modl_mesg_sucs;
  end obten_modl_mesg_sucs;

  function obten_modl_mesg_ereur (pnu_page in number default null,
                                  pnu_aplic in number default null)
    return varchar2 is
    vva_modl_mesg_ereur                     apex_flow_templ.message%type;
    vva_mesg_ereur                          apex_flow_templ.message%type
      default    '<div id="sie_sucs_mesg" class="alert alert-danger">'
              || '<button type="button" class="close" data-dismiss="alert">&times;</button>'
              || '#MESSAGE#'
              || '</div>';
  begin
    begin
      select   aft.message
        into   vva_modl_mesg_ereur
        from   apex_page ap,
               apex_flow_templ aft
       where   ap.id = obten_numr_apex_page (pnu_page)
           and ap.flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic)
           and aft.id = ap.step_template;
    exception
      when no_data_found then
        begin
          select   aft.message
            into   vva_modl_mesg_ereur
            from   apex_aplic aa,
                   apex_flow_templ aft
           where   aa.id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic) and aft.id = aa.default_page_template;
        exception
          when no_data_found then
            vva_modl_mesg_ereur := vva_mesg_ereur;
        end;
    end;

    return vva_modl_mesg_ereur;
  end obten_modl_mesg_ereur;

  function obten_nom_modl_page (pnu_page in number default null,
                                pnu_aplic in number default null)
    return varchar2 is
    vva_nom_modl                            apex_flow_templ.name%type;
    --CONAL ERREUR APEX 4.2 ?
    vva_nom                                 apex_flow_templ.name%type default 'Aucun onglet';
  begin
    begin
      select   aft.name
        into   vva_nom_modl
        from   apex_page ap,
               apex_flow_templ aft
       where   ap.id = obten_numr_apex_page (pnu_page)
           and ap.flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic)
           and aft.id = ap.step_template;
    exception
      when no_data_found then
        begin
          select   aft.name
            into   vva_nom_modl
            from   apex_aplic aa,
                   apex_flow_templ aft
           where   aa.id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic) and aft.id = aa.default_page_template;
        exception
          when no_data_found then
            vva_nom_modl := vva_nom;
        end;
    end;

    return vva_nom_modl;
  end obten_nom_modl_page;

  function obten_page_ir (pnu_page in number)
    return number is
    cursor cur_page_ir is
      select   seqnc
        from   vd_i_sie_13_page_ir ir
       where   ir.ref_page = pnu_page;

    vnu_nombr_trouv                         number (3) default 0;
    vnu_seqnc                               number (10);
  begin
    for rec_page_ir in cur_page_ir loop
      vnu_nombr_trouv := vnu_nombr_trouv + 1;
      vnu_seqnc := rec_page_ir.seqnc;
    end loop;

    if vnu_nombr_trouv = 1 then
      return vnu_seqnc;
    else
      return null;
    end if;
  end obten_page_ir;

  procedure reint_soums_page (pnu_numr_apex_aplic in number,
                              pnu_numr_apex_page in number,
                              pnu_sesn in number default sie_12_sesn_pkg.obten_sesn) is
  begin
    delete   apex_soums_page asp
     where   asp.flow_id = pnu_numr_apex_aplic and asp.page_id = pnu_numr_apex_page and asp.session_id = pnu_sesn;
  end reint_soums_page;
end sie_13_page_pkg;
/

Prompt Package Body SIE_13_PAGE_PREFR_NAVGT_PKG;
/* Formatted on 04/12/2013 11:35:28 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_PAGE_PREFR_NAVGT_PKG" as
  procedure ajout_prefr_navgt (pnu_page in number,
                               pnu_page_ir in number) is
  begin
    insert into   vd_i_sie_13_page_prefr_navgt (ref_page, ref_page_ir)
         values   (pnu_page,
                   pnu_page_ir);
  end ajout_prefr_navgt;

  procedure suprm_prefr_navgt (pnu_seqnc in number) is
  begin
    delete from   vd_i_sie_13_page_prefr_navgt
          where   seqnc = pnu_seqnc;
  end suprm_prefr_navgt;
end sie_13_page_prefr_navgt_pkg;
/

Prompt Package Body SIE_13_PREFR_PKG;
/* Formatted on 04/12/2013 11:35:28 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_PREFR_PKG" as
  procedure sauvg_prefr (pnu_ref_prefr in number,
                         pva_valr in varchar2) is
    vva_type_insta                          vd_sie_13_prefr.ref_dv_type_insta_organ%type;
    vva_indic_contx                         vd_sie_13_prefr.indic_contx%type;
    vnu_ref_utils                           number default null;
    vnu_ref_sesn                            number default null;
    vnu_ref_contx                           number default null;
  begin
    select   pref.ref_dv_type_insta_organ,
             pref.indic_contx
      into   vva_type_insta,
             vva_indic_contx
      from   vd_sie_13_prefr pref
     where   pref.seqnc = pnu_ref_prefr;

    -- Alimenter les références selon le type d'instanciation
    case vva_type_insta
      when 'UTILS' then
        vnu_ref_utils := sie_12_utils_pkg.obten_usagr_conct ();

        -- S'assurer qu'on trouve l'utilisateur, sinon arrêter ici
        if vnu_ref_utils is null then
          return;
        end if;
      when 'SESN' then
        -- S'assurer qu'on trouve la session, sinon arrêter ici
        vnu_ref_sesn := sie_07_util_pkg.nv ('SESSION');

        if vnu_ref_sesn is null then
          return;
        end if;
      else
        null;
    end case;

    if vva_indic_contx = 'O' then
      -- Lier au contexte
      select   max (tc.seqnc)
        into   vnu_ref_contx
        from   vd_sie_12_struc_aplic tc
       where   tc.code = sie_07_util_pkg.v ('A_SIE_04_CONTX') and ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn ();
    end if;

    merge into   vd_sie_13_insta_prefr ip
         using   (select   pnu_ref_prefr ref_prefr,
                           vnu_ref_utils ref_utils,
                           vnu_ref_sesn ref_sesn,
                           pva_valr valr,
                           vnu_ref_contx ref_struc_aplic
                    from   dual) nouv
            on   (ip.ref_prefr = nouv.ref_prefr
              and (ip.ref_utils = nouv.ref_utils
                or (ip.ref_utils is null and nouv.ref_utils is null))
              and (ip.ref_sesn = nouv.ref_sesn
                or (ip.ref_sesn is null and nouv.ref_sesn is null))
              and (ip.ref_struc_aplic = nouv.ref_struc_aplic
                or (ip.ref_struc_aplic is null and nouv.ref_struc_aplic is null)))
    when matched then
      update set ip.valr = nouv.valr
    when not matched then
      insert       (ip.ref_prefr, ip.ref_utils, ip.ref_sesn, ip.ref_struc_aplic, ip.valr)
          values   (nouv.ref_prefr,
                    nouv.ref_utils,
                    nouv.ref_sesn,
                    nouv.ref_struc_aplic,
                    nouv.valr);
  end sauvg_prefr;

  function charg_prefr (pnu_ref_prefr in number,
                        pva_valr   out varchar2)
    return boolean is
    vva_type_insta                          vd_sie_13_prefr.ref_dv_type_insta_organ%type;
    vva_indic_contx                         vd_sie_13_prefr.indic_contx%type;
    vva_valr_insta                          vd_sie_13_prefr.ref_dv_valr_insta_organ%type;
    vva_forml_valr_insta                    vd_sie_13_prefr.forml_valr_insta%type;
    vnu_ref_utils                           number default null;
    vnu_ref_sesn                            number default null;
    vnu_ref_contx                           number default null;
  begin
    select   pref.ref_dv_type_insta_organ,
             pref.indic_contx,
             pref.ref_dv_valr_insta_organ,
             pref.forml_valr_insta
      into   vva_type_insta,
             vva_indic_contx,
             vva_valr_insta,
             vva_forml_valr_insta
      from   vd_sie_13_prefr pref
     where   pref.seqnc = pnu_ref_prefr;

    -- Alimenter les références selon le type d'instanciation
    case vva_type_insta
      when 'UTILS' then
        vnu_ref_utils := sie_12_utils_pkg.obten_usagr_conct ();

        -- S'assurer qu'on trouve l'utilisateur, sinon arrêter ici
        if vnu_ref_utils is null then
          return false;
        end if;
      when 'SESN' then
        -- S'assurer qu'on trouve la session, sinon arrêter ici
        vnu_ref_sesn := sie_07_util_pkg.nv ('SESSION');

        if vnu_ref_sesn is null then
          return false;
        end if;
      else
        null;
    end case;

    if vva_indic_contx = 'O' then
      -- Lier au contexte
      select   max (tc.seqnc)
        into   vnu_ref_contx
        from   vd_sie_12_struc_aplic tc
       where   tc.code = sie_07_util_pkg.v ('A_SIE_04_CONTX') and ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn ();
    end if;

    begin
      select   ip.valr
        into   gva_valr
        from   vd_sie_13_insta_prefr ip
       where   ip.ref_prefr = pnu_ref_prefr
           and (ip.ref_utils = vnu_ref_utils
             or (ip.ref_utils is null and vnu_ref_utils is null))
           and (ip.ref_sesn = vnu_ref_sesn
             or (ip.ref_sesn is null and vnu_ref_sesn is null))
           and (ip.ref_struc_aplic = vnu_ref_contx
             or (ip.ref_struc_aplic is null and vnu_ref_contx is null));
    exception
      when no_data_found then
        -- Dans le cas de la valeur de préférence seulement,
        -- ne pas retourner null, conserver la valeur actuel de l'item
        if vva_valr_insta = 'VALR_PREFR' then
          return false;
        end if;

        gva_valr := null;
    end;

    case vva_valr_insta
      when 'VALR_PREFR' then
        pva_valr := gva_valr;
      when 'VALR_FIXE' then
        pva_valr :=
          replace (vva_forml_valr_insta,
                   '#PREFERENCE#',
                   gva_valr);
      --TODO:TRESE exécuter la formule via sie_05_forml...
      /*when 'PL/SQL' then
                    pva_valr := gva_valr;*/
      else
        return false;
    end case;

    return true;
  end charg_prefr;

  procedure sauvg_prefr_page (pnu_ref_aplic in number default null,
                              pnu_numr_page_apex in number default null) is
    vnu_ref_aplic                           number default nvl (pnu_ref_aplic, sie_11_aplic_pkg.obten_aplic_sesn ());
    vnu_numr_page_apex                      number default nvl (pnu_numr_page_apex, sie_07_util_pkg.nv ('APP_PAGE_ID'));
    vva_valr                                vd_sie_13_insta_prefr.valr%type;

    -- TODO:TRESE Ajouter le 2e champ de formule pour la condition de sauvegarde
    cursor cur_prefr is
      select   pref.seqnc,
               pref.ref_dv_condt_sauvg_organ condt_type,
               pref.forml_condt_sauvg condt_expre_1,
               null condt_expre_2,
               pi.nom_apex
        from   vd_sie_13_prefr pref,
               vd_sie_13_page_item pi,
               vd_sie_13_page p
       where   p.ref_aplic = vnu_ref_aplic
           and p.numr_apex = vnu_numr_page_apex
           and pi.ref_page = p.seqnc
           and pref.ref_item = pi.seqnc;
  begin
    -- Boucler les préférences d'item pour la page demandée
    for rec_prefr in cur_prefr loop
      -- Tester s'il faut sauvegarder la préférence
      if apex_condt.standard_condition (rec_prefr.condt_type,
                                        rec_prefr.condt_expre_1,
                                        rec_prefr.condt_expre_2) then
        vva_valr := sie_07_util_pkg.v (rec_prefr.nom_apex);
        sauvg_prefr (rec_prefr.seqnc,
                     vva_valr);
      end if;
    end loop;
  end sauvg_prefr_page;

  procedure charg_prefr_page (pnu_ref_aplic in number default null,
                              pnu_numr_page_apex in number default null) is
    vnu_ref_aplic                           number default nvl (pnu_ref_aplic, sie_11_aplic_pkg.obten_aplic_sesn ());
    vnu_numr_page_apex                      number default nvl (pnu_numr_page_apex, sie_07_util_pkg.nv ('APP_PAGE_ID'));

    -- TODO:TRESE Ajouter le 2e champ de formule pour la condition de sauvegarde
    cursor cur_prefr is
      select   pref.seqnc,
               pref.ref_dv_condt_utils_organ condt_type,
               pref.forml_condt_utils condt_expre_1,
               null condt_expre_2,
               pi.nom_apex
        from   vd_sie_13_prefr pref,
               vd_sie_13_page_item pi,
               vd_sie_13_page p
       where   p.ref_aplic = vnu_ref_aplic
           and p.numr_apex = vnu_numr_page_apex
           and pi.ref_page = p.seqnc
           and pref.ref_item = pi.seqnc;

    vva_valr                                vd_sie_13_insta_prefr.valr%type;
  begin
    -- Boucler les préférences d'item pour la page demandée
    for rec_prefr in cur_prefr loop
      -- Tester s'il faut charger la préférence
      if apex_condt.standard_condition (rec_prefr.condt_type,
                                        rec_prefr.condt_expre_1,
                                        rec_prefr.condt_expre_2) then
        if charg_prefr (rec_prefr.seqnc,
                        vva_valr) then
          sie_07_util_pkg.defnr_etat_sesn (rec_prefr.nom_apex,
                                           vva_valr);
        end if;
      end if;
    end loop;
  end charg_prefr_page;

  function obten_boutn_actio_prefr
    return varchar2 is
    vva_icon                                varchar2 (50) default 'icon-user';
    vva_titre                               varchar2 (50) default 'Préférences utilisateur';
    vva_boutn_actio                         varchar2 (4000);
  begin
    vva_boutn_actio :=
         sie_15_htp_pkg.ouvri_bals ('span',
                                    'class',
                                    'btn',
                                    'title',
                                    vva_titre)
      || sie_15_htp_pkg.ouvri_bals ('i',
                                    'class',
                                    vva_icon)
      || sie_15_htp_pkg.fermr_bals ('i')
      || sie_15_htp_pkg.fermr_bals ('span');

    return vva_boutn_actio;
  end obten_boutn_actio_prefr;
end sie_13_prefr_pkg;
/

Prompt Package Body SIE_13_RAPRT_INTER_CU_PKG;
/* Formatted on 04/12/2013 11:35:28 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_13_raprt_inter_cu_pkg is
  gnu_page_apex                           number (10);
  gva_code_ir                             varchar2 (23);

  procedure defnr_ir_specf (pnu_page_apex in number,
                            pva_code_ir in varchar2 default null) is
  begin
    if pnu_page_apex is not null then
      gnu_page_apex := pnu_page_apex;
      sie_04_contx_pkg.defnr_contx_etend_numbr ('SIE_13_NUMR_PAGE_APEX_SOURC',
                                                pnu_page_apex,
                                                'M',
                                                false);
    end if;

    if pva_code_ir is not null then
      gva_code_ir := pva_code_ir;
      sie_04_contx_pkg.defnr_contx_etend_varch ('SIE_13_CODE_PAGE_IR_SOURC',
                                                pva_code_ir,
                                                'M',
                                                false);
    end if;
  end defnr_ir_specf;

  function obten_seqnc_raprt_courn
    return typ_seqnc_reprt_courn
    pipelined is
    vnu_aplic                               number default sie_07_util_pkg.v ('APP_ID');
    vnu_page_apex                           number
      default nvl (sie_04_contx_pkg.obten_contx_etend_numbr ('SIE_13_NUMR_PAGE_APEX_SOURC'),
                   sie_07_util_pkg.v ('APP_PAGE_ID'));
    vva_code_ir                             varchar2 (23);
    vnu_ref_ir                              number;
    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_rpts_id                             number;
  begin
    --obtenir les informations du contexte étendu si existantes
    vnu_page_apex :=
      nvl (sie_04_contx_pkg.obten_contx_etend_numbr ('SIE_13_NUMR_PAGE_APEX_SOURC'), sie_07_util_pkg.v ('APP_PAGE_ID'));

    begin
      vva_code_ir := sie_04_contx_pkg.obten_contx_etend_varch ('SIE_13_CODE_PAGE_IR_SOURC');

      if vva_code_ir is not null then
        select   pi.seqnc
          into   vnu_ref_ir
          from   vd_sie_13_page_ir pi,
                 vd_sie_13_page p
         where   pi.code = vva_code_ir
             and p.seqnc = pi.ref_page
             and p.numr_apex = vnu_page_apex
             and p.ref_aplic = sie_11_aplic_pkg.obten_aplic_numr_apex (vnu_aplic);
      else
        -- Chercher le rapport interactif sur la page
        select   pi.seqnc
          into   vnu_ref_ir
          from   vd_sie_13_page p,
                 vd_sie_13_page_ir pi
         where   p.seqnc = pi.ref_page
             and p.numr_apex = vnu_page_apex
             and p.ref_aplic = sie_11_aplic_pkg.obten_aplic_numr_apex (vnu_aplic);
      end if;

      -- Récupérer le select
      vnu_rpts_id :=
        sie_13_raprt_inter_pkg.obten_repts_courn (vnu_page_apex,
                                                  vva_code_ir);
      vva_selct :=
        sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id,
                                                 false,
                                                 'SEQNC');
    exception
      when no_data_found then
        vva_selct := null;
    end;

    if vva_selct is not null then
      vnu_cursr :=
        sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                    vnu_rpts_id,
                                    vva_selct,
                                    var_infor_coln,
                                    chr (10));

      if var_infor_coln.first () is not null then
        -- Extraire la valeur de la séquence pour chaque rangée
        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          pipe row (var_infor_coln (1).nu_valr_numbr);
        end loop;
      end if;

      -- Fermer le curseur
      sie_07_sql_pkg.fermr_selct (vnu_cursr);
    end if;

    return;
  exception
    when others then
      raise;
  end obten_seqnc_raprt_courn;
end sie_13_raprt_inter_cu_pkg;
/

Prompt Package Body SIE_13_RAPRT_INTER_PKG;
/* Formatted on 04/12/2013 11:35:28 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_RAPRT_INTER_PKG" is
  function obten_ir_page (pnu_numr_page number default null,
                          pva_code in varchar2 default null,
                          pnu_numr_aplic number default null)
    return number is
    vnu_ref_aplic                           number default nvl (pnu_numr_aplic, sie_07_util_pkg.nv ('APP_ID'));
    vnu_numr_page                           number default nvl (pnu_numr_page, sie_07_util_pkg.nv ('APP_PAGE_ID'));
    vnu_ref_ir                              number;
  begin
    select   pir.seqnc
      into   vnu_ref_ir
      from   vd_sie_13_page_ir pir,
             vd_sie_13_page p
     where   p.numr_apex = vnu_numr_page
         and p.app_id_formt = pnu_numr_aplic
         and p.seqnc = pir.ref_page
         and (pir.code = pva_code
           or pva_code is null);

    return vnu_ref_ir;
  exception
    when too_many_rows then
      sie_01_err_apex_pkg.lever_err_apex_code (
        pva_code                   => 'STA.000002',
        pva_valr_subst1            => 'Il existe plus d''un état interactif pour cette page.',
        pva_code_prodt             => 'AFW'
      );
  end obten_ir_page;

  function obten_rpts_de_base_id_sesn (pnu_base_rpts_id in number)
    return number is
    vnu_rpts                                number;
    vnu_sesn                                number default sie_07_util_pkg.nv ('APP_SESSION');
  begin
    select   id
      into   vnu_rpts
      from   apex_ir_rpts rpts
     where   rpts.base_report_id = pnu_base_rpts_id and rpts.session_id = vnu_sesn;

    return vnu_rpts;
  exception
    when others then
      return null;
  end obten_rpts_de_base_id_sesn;

  function obten_selct_ir (pnu_ir_id in number)
    return clob is
    vcl_sql                                 clob;
  begin
    select   rtrim (sql_query,
                    ' ;' || chr (10) || chr (13))
      into   vcl_sql
      from   apex_ir
     where   id = pnu_ir_id;

    return vcl_sql;
  end obten_selct_ir;

  function obten_selct_rpts (pnu_rpts_id in number,
                             pbo_inclu_order_by in boolean default true,
                             pva_coln_selct in varchar2 default null)
    return clob is
    cursor cur_rpts is
      select   rpts.report_columns,
               rpts.sort_column_1,
               rpts.sort_direction_1,
               rpts.sort_column_2,
               rpts.sort_direction_2,
               rpts.sort_column_3,
               rpts.sort_direction_3,
               rpts.sort_column_4,
               rpts.sort_direction_4,
               rpts.sort_column_5,
               rpts.sort_direction_5,
               rpts.sort_column_6,
               rpts.sort_direction_6,
               rpts.worksheet_id
        from   apex_ir_rpts rpts
       where   rpts.id = pnu_rpts_id;

    rec_rpts                                cur_rpts%rowtype;

    cursor cur_coln_exist (pnu_works_id in number,
                           pva_liste_coln in varchar2) is
      select     irc.expr,
                 irc.db_column_name,
                 irc.display_condition_type,
                 irc.display_condition,
                 irc.display_condition2
          from   (select   '"' || column_identifier || '"' expr,
                           db_column_name,
                           display_condition_type,
                           display_condition,
                           display_condition2
                    from   apex_ir_coln
                   where   worksheet_id = pnu_works_id
                  union all
                  select   '(' || computation_expr || ')' expr,
                           db_column_name,
                           null,
                           null,
                           null
                    from   apex_ir_compt
                   where   report_id = pnu_rpts_id) irc,
                 (select     column_value,
                             max (rownum) rn
                      from   table (sie_07_util_pkg.strin_to_table_va (upper (pva_liste_coln)))
                  group by   column_value) coln
         where   coln.column_value = irc.db_column_name
      order by   coln.rn;

    cursor cur_ident_colns (pnu_works_id in number) is
      select   db_column_name,
               column_identifier
        from   apex_ir_coln
       where   worksheet_id = pnu_works_id;

    cursor cur_condt is
      select   condition_type,
               replace (expr,
                        '''',
                        '''''')
                 expr,
               replace (replace (condition_sql,
                                 '#APXWS_EXPR#',
                                    ''''
                                 || replace (expr,
                                             '''',
                                             '''''')
                                 || ''''),
                        '#APXWS_EXPR2#',
                           ''''
                        || replace (expr2,
                                    '''',
                                    '''''')
                        || '''')
                 condt
        from   apex_ir_condt irc
       where   irc.report_id = pnu_rpts_id and irc.enabled = 'Y';

    cursor cur_compt is
      select   c.db_column_name,
               c.column_identifier,
               computation_expr,
               format_mask,
               column_type
        from   apex_ir_compt c
       where   c.report_id = pnu_rpts_id;

    cursor cur_coln_tri_group is
      select   break_on.coln coln,
               break_on.dirct
        from   (select   column_value coln,
                         'asc' dirct
                  from   table (sie_07_util_pkg.strin_to_table_va ( (select   break_on
                                                                       from   apex_ir_rpts
                                                                      where   id = pnu_rpts_id)))) break_on;

    cursor cur_coln_tri_exist (pnu_works_id in number) is
      select     coln.nom,
                 coln.dirct
          from   (select   db_column_name,
                           display_condition_type,
                           display_condition,
                           display_condition2
                    from   apex_ir_coln
                   where   worksheet_id = pnu_works_id
                  union all
                  select   db_column_name,
                           null,
                           null,
                           null
                    from   apex_ir_compt
                   where   report_id = pnu_rpts_id) irc,
                 (select   rec_rpts.sort_column_1 nom,
                           nvl (rec_rpts.sort_direction_1, 'asc') dirct,
                           1 rn
                    from   dual
                  union all
                  select   rec_rpts.sort_column_2 nom,
                           nvl (rec_rpts.sort_direction_2, 'asc') dirct,
                           2 rn
                    from   dual
                  union all
                  select   rec_rpts.sort_column_3 nom,
                           nvl (rec_rpts.sort_direction_3, 'asc') dirct,
                           3 rn
                    from   dual
                  union all
                  select   rec_rpts.sort_column_4 nom,
                           nvl (rec_rpts.sort_direction_4, 'asc') dirct,
                           4 rn
                    from   dual
                  union all
                  select   rec_rpts.sort_column_5 nom,
                           nvl (rec_rpts.sort_direction_5, 'asc') dirct,
                           5 rn
                    from   dual
                  union all
                  select   rec_rpts.sort_column_6 nom,
                           nvl (rec_rpts.sort_direction_6, 'asc') dirct,
                           6 rn
                    from   dual) coln
         where   coln.nom = irc.db_column_name
      order by   coln.rn;

    vbo_premr_condt                         boolean default true;
    vcl_sql                                 clob;
    vbo_clob_ouvrt                          boolean default false;
    vva_sql_order_by                        varchar2 (4000);
    vva_colmn_list                          varchar2 (4000);
    vva_colmn_list_condt                    varchar2 (4000);

    procedure ajout_ligne_clob (pcl_clob in out nocopy clob,
                                pva_contn in  varchar2) is
    begin
      if not vbo_clob_ouvrt then
        dbms_lob.createtemporary (pcl_clob,
                                  true);
        vbo_clob_ouvrt := true;
      end if;

      dbms_lob.writeappend (pcl_clob,
                            length (pva_contn),
                            pva_contn);
    end ajout_ligne_clob;
  begin
    open cur_rpts;

    fetch cur_rpts
    into rec_rpts;

    close cur_rpts;

    if rec_rpts.worksheet_id is not null then
      -- Certaines colonnes peuvent ne plus exister au niveau du worksheet
      vva_colmn_list := null;

      for rec_coln_exist in cur_coln_exist (rec_rpts.worksheet_id,
                                            nvl (pva_coln_selct, rec_rpts.report_columns)) loop
        if apex_condt.standard_condition (rec_coln_exist.display_condition_type,
                                          rec_coln_exist.display_condition,
                                          rec_coln_exist.display_condition2) then
          vva_colmn_list := vva_colmn_list || ',' || rec_coln_exist.expr || ' "' || rec_coln_exist.db_column_name || '"';
        end if;
      end loop;

      -- Supprimer la virgule initiale de trop
      vva_colmn_list :=
        substr (vva_colmn_list,
                2);

      -- Faire un select des colonnes retenues
      ajout_ligne_clob (vcl_sql,
                        'select ' || vva_colmn_list || chr (10));

      -- Récupérer les identifiants de colonnes
      vva_colmn_list := null;

      for rec_ident_colns in cur_ident_colns (rec_rpts.worksheet_id) loop
        vva_colmn_list :=
          vva_colmn_list || ',"' || rec_ident_colns.db_column_name || '" "' || rec_ident_colns.column_identifier || '"';
      end loop;

      -- Supprimer la virgule initiale de trop
      vva_colmn_list :=
        substr (vva_colmn_list,
                2);

      -- Inscrire le select de base, encapsulé dans un select qui
      -- renomme les noms de colonnes avec leur identifiant
      ajout_ligne_clob (
        vcl_sql,
        '  from (select ' || vva_colmn_list || '  from (' || obten_selct_ir (rec_rpts.worksheet_id) || ')'
      );

      -- Ajouter les conditions avant de refermer le dernier sous select
      for rec_condt in cur_condt loop
        if rec_condt.condition_type in ('FILTER', 'SEARCH') then
          if vbo_premr_condt then
            if rec_condt.condt is not null then
              ajout_ligne_clob (vcl_sql,
                                ' where ' || rec_condt.condt || chr (10));
            else
              for rec_coln_exist in cur_coln_exist (rec_rpts.worksheet_id,
                                                    rec_rpts.report_columns) loop
                if apex_condt.standard_condition (rec_coln_exist.display_condition_type,
                                                  rec_coln_exist.display_condition,
                                                  rec_coln_exist.display_condition2) then
                  vva_colmn_list_condt := vva_colmn_list_condt || '||' || rec_coln_exist.db_column_name;
                end if;
              end loop;

              vva_colmn_list_condt :=
                substr (vva_colmn_list_condt,
                        3);
              ajout_ligne_clob (
                vcl_sql,
                   ' where upper(sie_07_util_pkg.purgr_html('
                || vva_colmn_list_condt
                || ')) like ''%'
                || upper (rec_condt.expr)
                || '%'''
                || chr (10)
              );
            end if;

            vbo_premr_condt := false;
          else
            if rec_condt.condt is not null then
              ajout_ligne_clob (vcl_sql,
                                '   and ' || rec_condt.condt || chr (10));
            else
              ajout_ligne_clob (vcl_sql,
                                   '   and upper(sie_07_util_pkg.purgr_html('
                                || rtrim (replace (rec_rpts.report_columns,
                                                   ':',
                                                   '||'),
                                          '||')
                                || ')) like ''%'
                                || upper (rec_condt.expr)
                                || '%'''
                                || chr (10));
            end if;
          end if;
        end if;
      end loop;

      -- Ajouter la clause "order by" si demandée
      if pbo_inclu_order_by then
        vva_sql_order_by := null;

        /* AJOUT CONAL */
        for rec_coln_tri_group in cur_coln_tri_group loop
          if rec_coln_tri_group.coln <> '0' then
            vva_sql_order_by := vva_sql_order_by || rec_coln_tri_group.coln || ' ' || rec_coln_tri_group.dirct || ',';
          end if;
        end loop;

        /*FIN AJOUT CONAL */

        for rec_coln_tri_exist in cur_coln_tri_exist (rec_rpts.worksheet_id) loop
          vva_sql_order_by := vva_sql_order_by || rec_coln_tri_exist.nom || ' ' || rec_coln_tri_exist.dirct || ',';
        end loop;

        if vva_sql_order_by is not null then
          ajout_ligne_clob (vcl_sql,
                               'order by '
                            || substr (vva_sql_order_by,
                                       1,
                                       length (vva_sql_order_by) - 1));
        end if;
      end if;

      ajout_ligne_clob (vcl_sql,
                        ')');
    end if;

    return vcl_sql;
  end obten_selct_rpts;

  function obten_selct_rpts_base_id (pnu_base_report_id in number)
    return clob is
  begin
    return obten_selct_rpts (obten_rpts_de_base_id_sesn (pnu_base_report_id));
  end obten_selct_rpts_base_id;

  function obten_repts_courn (pnu_numr_page_apex in number default null,
                              pva_code in varchar2 default null,
                              pnu_numr_aplic_apex in number default null)
    return number is
    vnu_app_id                              number default nvl (pnu_numr_aplic_apex, sie_07_util_pkg.nv ('APP_ID'));
    vnu_page_id                             number default nvl (pnu_numr_page_apex, sie_07_util_pkg.nv ('APP_PAGE_ID'));
    vnu_ws_id                               number;
    vva_nom_prefr                           varchar2 (500);
    vva_valr_prefr                          varchar2 (500);
    vnu_repts_base_id                       number default null;
  begin
    begin
      select   id_apex
        into   vnu_ws_id
        from   vd_sie_13_page_ir
       where   app_id_formt = vnu_app_id
           and app_page_id_formt = vnu_page_id
           and (code = pva_code
             or pva_code is null);
    exception
      when no_data_found then
        return null;
      when too_many_rows then
        sie_01_err_apex_pkg.lever_err_apex_code (
          pva_code                   => 'STA.000002',
          pva_valr_subst1            => 'Il existe plus d''un état interactif pour cette page.',
          pva_code_prodt             => 'AFW'
        );
    end;

    vva_nom_prefr := 'FSP_IR_' || vnu_app_id || '_P' || vnu_page_id || '_W' || vnu_ws_id;

    vva_valr_prefr := sie_07_util_pkg.obten_prefr (vva_nom_prefr);

    if instr (vva_valr_prefr,
              '_') > 0 then
      vnu_repts_base_id :=
        substr (vva_valr_prefr,
                1,
                instr (vva_valr_prefr,
                       '_') -
                1);
    else
      return null;
    end if;

    return obten_rpts_de_base_id_sesn (vnu_repts_base_id);
  end obten_repts_courn;

  function obten_works_id (pnu_app_id in number default sie_07_util_pkg.nv ('APP_ID'),
                           pnu_app_page_id in number default sie_07_util_pkg.nv ('APP_PAGE_ID'),
                           pva_code in varchar2 default null)
    return number is
    vnu_id                                  number;
  begin
    select   id
      into   vnu_id
      from   apex_ir air,
             vd_sie_13_page_ir pir
     where   air.flow_id = pnu_app_id
         and air.page_id = pnu_app_page_id
         and pir.id_apex = air.id
         and (code = pva_code
           or pva_code is null);

    return vnu_id;
  exception
    when no_data_found then
      return null;
    when too_many_rows then
      sie_01_err_apex_pkg.lever_err_apex_code (
        pva_code                   => 'STA.000002',
        pva_valr_subst1            => 'Il existe plus d''un état interactif pour cette page.',
        pva_code_prodt             => 'AFW'
      );
  end obten_works_id;

  function obten_seqnc_raprt_courn (pnu_numr_page_apex in number default null,
                                    pva_code in varchar2 default null,
                                    pnu_numr_aplic_apex in number default null)
    return typ_seqnc_reprt_courn
    pipelined is
    vnu_aplic                               number default nvl (pnu_numr_aplic_apex, sie_07_util_pkg.v ('APP_ID'));
    vnu_page                                number default nvl (pnu_numr_page_apex, sie_07_util_pkg.v ('APP_PAGE_ID'));
    vnu_ref_ir                              number;
    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_rpts_id                             number;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select   pir.seqnc
        into   vnu_ref_ir
        from   vd_sie_13_page pag,
               vd_sie_13_page_ir pir
       where   pag.app_id_formt = vnu_aplic
           and pag.numr_apex = vnu_page
           and pir.ref_page = pag.seqnc
           and (pir.code = pva_code
             or pva_code is null);

      -- Récupérer le select
      vnu_rpts_id :=
        sie_13_raprt_inter_pkg.obten_repts_courn (vnu_page,
                                                  null,
                                                  vnu_aplic);
      vva_selct :=
        sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id,
                                                 false,
                                                 'SEQNC');
    exception
      when no_data_found then
        vva_selct := null;
      when too_many_rows then
        sie_01_err_apex_pkg.lever_err_apex_code (
          pva_code                   => 'STA.000002',
          pva_valr_subst1            => 'Il existe plus d''un état interactif pour cette page.',
          pva_code_prodt             => 'AFW'
        );
    end;

    if vva_selct is not null then
      vnu_cursr :=
        sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                    vnu_rpts_id,
                                    vva_selct,
                                    var_infor_coln,
                                    chr (10));

      if var_infor_coln.first () is not null then
        -- Extraire la valeur de la séquence pour chaque rangée
        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          pipe row (var_infor_coln (1).nu_valr_numbr);
        end loop;
      end if;

      -- Fermer le curseur
      sie_07_sql_pkg.fermr_selct (vnu_cursr);
    end if;

    return;
  exception
    when others then
      raise;
  end obten_seqnc_raprt_courn;

  function genr_url_filtr (pnu_page_ir in vd_sie_13_page_ir.seqnc%type,
                           pty_page_ir_filtr in typ_page_ir_filtr,
                           pnu_page_ir_sauvg in number default null)
    return varchar2 is
    vva_url                                 varchar2 (2000);
    vnu_numr_page                           number;
    vnu_numr_aplic                          number;
  begin
    select   pr.numr_aplic_apex,
             p.numr_apex
      into   vnu_numr_aplic,
             vnu_numr_page
      from   vd_sie_13_page_ir pi,
             vd_sie_13_page p,
             vd_sie_11_aplic pr
     where   pi.seqnc = pnu_page_ir and p.seqnc = pi.ref_page and pr.seqnc = p.ref_aplic;

    vva_url :=
         'f?p='
      || vnu_numr_aplic
      || ':'
      || vnu_numr_page
      || ':#SESSION#:IR_REPORT_#REPORT_ID#:'
      || sie_07_util_pkg.v ('DEBUG')
      || ':'
      || 'RIR,CIR:';

    return vva_url;
  end genr_url_filtr;
end sie_13_raprt_inter_pkg;
/

Prompt Package Body SIE_13_REGN_PILTB_PKG;
/* Formatted on 04/12/2013 11:35:29 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_13_REGN_PILTB_PKG" as
  function obten_contn_page_courn (pva_code in varchar2,
                                   pva_code_lang in varchar2 default null,
                                   pva_indic_etend_page_zero in varchar2 default 'N')
    return clob is
    vcl_contn                               clob;
    vnu_aplic                               number default sie_11_aplic_pkg.obten_aplic_sesn;
    vnu_page                                number default sie_13_page_pkg.obten_page_sesn;
    vnu_lang                                number (10)
      default case
                when pva_code_lang is null then sie_01_lang_pkg.obten_lang_sesn
                else sie_01_lang_pkg.obten_lang (pva_code_lang)
              end;
  begin
    dbms_lob.createtemporary (vcl_contn,
                              true);

    select   rpl.contn
      into   vcl_contn
      from   vd_i_sie_13_regn_piltb_lang rpl,
             vd_i_sie_13_regn_piltb rp,
             vd_i_sie_13_page p
     where   rpl.ref_lang = vnu_lang
         and rpl.ref_regn_piltb = rp.seqnc
         and rp.ref_page = p.seqnc
         and ( (p.seqnc = vnu_page and pva_indic_etend_page_zero = 'N')
           or ( (p.seqnc = vnu_page
              or p.seqnc = sie_13_page_pkg.obten_page_zero_sesn)
           and pva_indic_etend_page_zero = 'O'))
         and rp.code = pva_code
         and p.ref_aplic = vnu_aplic;

    -- TODO: CARLO il semble y avoir un bug dans cette procédure
    --sie_15_htp_pkg.efect_subst (vcl_contn);

    return vcl_contn;
  exception
    when no_data_found then
      return null;
  end obten_contn_page_courn;

  procedure afich_contn_page_courn (pva_code in varchar2,
                                    pva_code_lang in varchar2 default null,
                                    pva_indic_etend_page_zero in varchar2 default 'N') is
    vcl_contn                               clob;
  begin
    dbms_lob.createtemporary (vcl_contn,
                              true);

    vcl_contn :=
      obten_contn_page_courn (pva_code,
                              pva_code_lang,
                              pva_indic_etend_page_zero);

    sie_15_htp_pkg.ecrir_clob (vcl_contn);
  end afich_contn_page_courn;

  function obten_contn_aide_page (pnu_page in number,
                                  pnu_lang in number)
    return clob is
    vcl_contn                               clob;
  begin
    dbms_lob.createtemporary (vcl_contn,
                              true);

    select   rpl.contn
      into   vcl_contn
      from   vd_i_sie_13_regn_piltb rp,
             vd_i_sie_13_regn_piltb_lang rpl
     where   rp.ref_page = pnu_page
         and rpl.ref_regn_piltb = rp.seqnc
         and rp.ref_dv_type_regn_piltb = sie_14_domn_valr_pkg.obten_seqnc ('TYPE_REGN_PILTB',
                                                                           'AIDE_PAGE',
                                                                           'SAFP')
         and rpl.ref_lang = pnu_lang;

    --sie_15_htp_pkg.efect_subst (vcl_contn);

    return vcl_contn;
  exception
    when no_data_found then
      dbms_lob.freetemporary (vcl_contn);
      -- TODO: Définir ce message dans SAFP
      return 'Aucune aide n''est définie pour cette page.';
  end obten_contn_aide_page;

  procedure afich_contn_aide_page (pnu_page in number,
                                   pnu_lang in number) is
    vcl_contn                               clob;
  begin
    dbms_lob.createtemporary (vcl_contn,
                              true);

    vcl_contn :=
      obten_contn_aide_page (pnu_page,
                             pnu_lang);

    sie_15_htp_pkg.ecrir_clob (vcl_contn);
  end afich_contn_aide_page;
end sie_13_regn_piltb_pkg;
/

Prompt Package Body SIE_13_RESRC_PKG;
/* Formatted on 04/12/2013 11:35:29 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_13_resrc_pkg as
  function obten_chemn_resrc (pva_propr in varchar2,
                              pva_code_resrc in varchar2,
                              pva_code_formt in varchar2,
                              pva_code_ocurn in varchar2 default null)
    return varchar2 is
    vva_chemn_compl                         varchar2 (500);
    vnu_prodt                               number (10) default sie_11_prodt_pkg.obten_prodt_sesn ();
  begin
    select   edv.empla || ore.nom_physq icone
      into   vva_chemn_compl
      from   vd_sie_13_empla_dosr_virtl edv,
             vd_sie_13_resrc r,
             vd_sie_13_ocurn_resrc ore,
             vd_sie_13_formt_resrc fr
     where   edv.ref_dosr_virtl = r.ref_dosr_virtl
         and r.indic_stock_meme_reprt = 'O'
         and ore.ref_resrc = r.seqnc
         and r.code = pva_code_resrc
         and ( (pva_propr = 'PLUGN' and r.ref_plugn is not null)
           or (pva_propr = 'STRUC_APLIC' and r.ref_struc_aplic is not null)
           or (pva_propr = 'PRODT' and r.ref_prodt is not null))
         and ore.ref_formt_resrc = fr.seqnc
         and fr.code = pva_code_formt
         and fr.ref_prodt = vnu_prodt
         and (ore.nom = pva_code_ocurn
           or pva_code_ocurn is null)
    union all
    select   edv.empla || ore.nom_physq icone
      from   vd_sie_13_empla_dosr_virtl edv,
             vd_sie_13_resrc r,
             vd_sie_13_ocurn_resrc ore,
             vd_sie_13_formt_resrc fr
     where   edv.ref_dosr_virtl = ore.ref_dosr_virtl
         and r.indic_stock_meme_reprt = 'N'
         and ore.ref_resrc = r.seqnc
         and r.code = pva_code_resrc
         and ( (pva_propr = 'PLUGN' and r.ref_plugn is not null)
           or (pva_propr = 'STRUC_APLIC' and r.ref_struc_aplic is not null)
           or (pva_propr = 'PRODT' and r.ref_prodt is not null))
         and ore.ref_formt_resrc = fr.seqnc
         and fr.code = pva_code_formt
         and fr.ref_prodt = vnu_prodt
         and (ore.nom = pva_code_ocurn
           or pva_code_ocurn is null);

    return vva_chemn_compl;
  end obten_chemn_resrc;
end sie_13_resrc_pkg;
/

Prompt Package Body SIE_14_DOMN_VALR_CU_PKG;
/* Formatted on 04/12/2013 11:35:29 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_14_domn_valr_cu_pkg as
  function obten_valr (pva_code_domn in varchar2,
                       pva_code_valr in varchar2,
                       pva_code_prodt in varchar2 default null)
    return varchar2 is
    vva_valr                                vd_sie_14_detl_domn_valr.valr%type;
    vva_enonc_sql                           varchar2 (4000);
    vva_ref_code_formt_formt                varchar2 (30);
    vva_type_don                            varchar2 (1);
  begin
    select   enonc_sourc,
             ref_code_formt_formt,
             type_don
      into   vva_enonc_sql,
             vva_ref_code_formt_formt,
             vva_type_don
      from   vd_sie_14_domn_valr dv
     where   dv.code = pva_code_domn
         and (pva_code_prodt is null
           or dv.ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt));

    if vva_enonc_sql is not null then
      begin
        execute immediate 'select d from  (' || vva_enonc_sql || ') where r = :1'
                                              into   vva_valr
          using in pva_code_valr;
      exception
        when no_data_found then
          null;
      end;
    else
      select   ddv.valr
        into   vva_valr
        from   vd_sie_14_detl_domn_valr ddv,
               vd_sie_14_domn_valr dv
       where   ddv.code_valr = pva_code_valr
           and dv.code = pva_code_domn
           and dv.seqnc = ddv.ref_domn_valr
           and (pva_code_prodt is null
             or dv.ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt));
    end if;

    return vva_valr;
  exception
    when others then
      return null;
  end obten_valr;
end sie_14_domn_valr_cu_pkg;
/

Prompt Package Body SIE_14_DOMN_VALR_PKG;
/* Formatted on 04/12/2013 11:35:29 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_14_DOMN_VALR_PKG" as
  function obten_valr (pnu_seqnc_valr in number)
    return varchar2
    result_cache relies_on (sie_14_detl_domn_valr) is
    vva_valr                                vd_i_sie_14_detl_domn_valr.valr%type;
  begin
    select   ddv.valr
      into   vva_valr
      from   vd_i_sie_14_detl_domn_valr ddv
     where   ddv.seqnc = pnu_seqnc_valr;

    return vva_valr;
  exception
    when others then
      return null;
  end obten_valr;

  function obten_valr_court (pnu_seqnc_valr in number)
    return varchar2
    result_cache relies_on (sie_14_detl_domn_valr) is
    vva_valr_court                          vd_i_sie_14_detl_domn_valr.valr_court%type;
  begin
    select   ddv.valr_court
      into   vva_valr_court
      from   vd_i_sie_14_detl_domn_valr ddv
     where   ddv.seqnc = pnu_seqnc_valr;

    return vva_valr_court;
  exception
    when others then
      return null;
  end obten_valr_court;

  function obten_code (pnu_seqnc_valr in number)
    return varchar2
    result_cache relies_on (sie_14_detl_domn_valr) is
    vva_code_valr                           vd_sie_14_detl_domn_valr.code_valr%type;
  begin
    select   ddv.code_valr
      into   vva_code_valr
      from   vd_i_sie_14_detl_domn_valr ddv
     where   ddv.seqnc = pnu_seqnc_valr;

    return vva_code_valr;
  exception
    when others then
      return null;
  end obten_code;

  function obten_code_parnt (pnu_seqnc_valr in number)
    return varchar2
    result_cache relies_on (sie_14_detl_domn_valr) is
    vva_code_valr_parnt                     vd_sie_14_detl_domn_valr.ref_code_domn_valr_formt%type;
  begin
    select   ref_code_domn_valr_formt
      into   vva_code_valr_parnt
      from   vd_sie_14_detl_domn_valr
     where   seqnc = pnu_seqnc_valr;

    return vva_code_valr_parnt;
  exception
    when others then
      return null;
  end obten_code_parnt;

  function obten_seqnc (pva_code_domn in varchar2,
                        pva_code_valr in varchar2,
                        pva_code_prodt in varchar2 default null)
    return number is
    vnu_seqnc                               vd_sie_14_detl_domn_valr.seqnc%type;
  begin
    select   ddv.seqnc
      into   vnu_seqnc
      from   vd_i_sie_14_detl_domn_valr ddv,
             vd_i_sie_14_domn_valr dv
     where   ddv.code_valr = pva_code_valr
         and dv.code = pva_code_domn
         and dv.seqnc = ddv.ref_domn_valr
         and (pva_code_prodt is null and dv.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn
           or pva_code_prodt is not null and dv.ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt));

    return vnu_seqnc;
  exception
    when others then
      return null;
  end obten_seqnc;

  function obten_valr (pva_code_domn in varchar2,
                       pva_code_valr in varchar2,
                       pva_code_prodt in varchar2 default null)
    return varchar2 is
    vva_valr                                vd_i_sie_14_detl_domn_valr.valr%type;
    vva_enonc_sql                           varchar2 (4000);
    vva_ref_code_formt_formt                varchar2 (30);
    vva_type_don                            varchar2 (1);
  begin
    select   enonc_sourc,
             ref_code_formt_formt,
             type_don
      into   vva_enonc_sql,
             vva_ref_code_formt_formt,
             vva_type_don
      from   vd_sie_14_domn_valr dv
     where   dv.code = pva_code_domn
         and (pva_code_prodt is null and dv.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn
           or pva_code_prodt is not null and dv.ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt));

    if vva_enonc_sql is not null then
      begin
        execute immediate 'select d from  (' || vva_enonc_sql || ') where r = :1'
                                              into   vva_valr
          using in pva_code_valr;
      exception
        when no_data_found then
          null;
      end;
    else
      select   ddv.valr
        into   vva_valr
        from   vd_i_sie_14_detl_domn_valr ddv,
               vd_i_sie_14_domn_valr dv
       where   ddv.code_valr = pva_code_valr
           and dv.code = pva_code_domn
           and dv.seqnc = ddv.ref_domn_valr
           and (pva_code_prodt is null and dv.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn
             or pva_code_prodt is not null and dv.ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt));
    end if;

    return vva_valr;
  exception
    when others then
      return null;
  end obten_valr;

  function obten_valr_organ (pnu_seqnc_valr in number)
    return varchar2
    result_cache relies_on (sie_14_detl_domn_valr) is
    vva_valr_organ                          vd_i_sie_14_detl_domn_valr.valr_organ%type;
  begin
    select   ddv.valr_organ
      into   vva_valr_organ
      from   vd_i_sie_14_detl_domn_valr ddv
     where   ddv.seqnc = pnu_seqnc_valr;

    return vva_valr_organ;
  exception
    when others then
      return null;
  end obten_valr_organ;

  function copr_domn_valr (pnu_domn_a_copr in number,
                           pnu_prodt_sourc in number default null,
                           pnu_prodt_destn in number default null)
    return number is
    vnu_type_domn_valr                      number (10);
    vnu_nouv_type                           number (10);
    vnu_nouv_domn_valr                      number (10);
    vnu_formt                               number (10);
    vnu_nouv_formt                          number (10);
  begin
    select   ref_type_domn_valr,
             ref_formt
      into   vnu_type_domn_valr,
             vnu_formt
      from   vd_i_sie_14_domn_valr
     where   seqnc = pnu_domn_a_copr;

    gbo_copie_domn := true;

    --Copier le type du domaine de valeur et le format s'ils sont présent
    if vnu_type_domn_valr is not null then
      begin
        select   seqnc
          into   vnu_nouv_type
          from   vd_i_sie_14_type_domn_valr
         where   code = (select   code
                           from   vd_i_sie_14_type_domn_valr f
                          where   f.seqnc = vnu_type_domn_valr)
             and ref_prodt = pnu_prodt_destn;
      exception
        when no_data_found then
          vnu_nouv_type := sie_14_type_domn_valr_seq.nextval;

          insert into   vd_i_sie_14_type_domn_valr (seqnc, code, nom, descr, ref_prodt, dnr_ref_prodt)
            select   vnu_nouv_type,
                     code,
                     nom,
                     descr,
                     pnu_prodt_destn,
                     pnu_prodt_destn
              from   vd_i_sie_14_type_domn_valr tdv
             where   tdv.seqnc = vnu_type_domn_valr;
      end;
    end if;

    if vnu_formt is not null and pnu_prodt_destn is not null and pnu_prodt_sourc is not null then
      begin
        select   seqnc
          into   vnu_nouv_formt
          from   vd_i_sie_14_formt
         where   defnt = (select   defnt
                            from   vd_i_sie_14_formt f
                           where   f.seqnc = vnu_type_domn_valr)
             and ref_prodt = pnu_prodt_sourc;
      exception
        when no_data_found then
          vnu_nouv_formt := sie_14_formt_seq.nextval;

          insert into   vd_i_sie_14_formt (seqnc,
                                           libl,
                                           defnt,
                                           type_don,
                                           indic_formt_orcl,
                                           indic_unite_inclu,
                                           ref_prodt)
            select   vnu_nouv_formt,
                     libl,
                     defnt,
                     type_don,
                     indic_formt_orcl,
                     indic_unite_inclu,
                     pnu_prodt_destn
              from   vd_i_sie_14_formt f
             where   f.seqnc = vnu_formt;
      end;
    end if;

    vnu_nouv_domn_valr := sie_14_domn_valr_seq.nextval;

    insert into   vd_i_sie_14_domn_valr (seqnc,
                                         code,
                                         nom,
                                         descr,
                                         enonc_sourc,
                                         type_don,
                                         ref_formt,
                                         ref_prodt,
                                         ref_type_domn_valr,
                                         indic_systm,
                                         dnr_ref_prodt)
      select   vnu_nouv_domn_valr,
               code,
               nom,
               descr,
               enonc_sourc,
               type_don,
               vnu_nouv_formt,
               pnu_prodt_destn,
               vnu_nouv_type,
               indic_systm,
               pnu_prodt_destn
        from   vd_i_sie_14_domn_valr dv
       where   dv.seqnc = pnu_domn_a_copr;

    insert into   vd_i_sie_14_detl_domn_valr (code_valr,
                                              valr,
                                              ref_domn_valr,
                                              seqnc_presn,
                                              date_debut_efect,
                                              date_fin_efect,
                                              valr_court,
                                              valr_organ,
                                              dnr_ref_prodt)
      select   code_valr,
               valr,
               vnu_nouv_domn_valr,
               seqnc_presn,
               date_debut_efect,
               date_fin_efect,
               valr_court,
               valr_organ,
               pnu_prodt_destn
        from   vd_i_sie_14_detl_domn_valr ddv
       where   ddv.ref_domn_valr = pnu_domn_a_copr;

    gbo_copie_domn := false;

    return vnu_nouv_domn_valr;
  end copr_domn_valr;

  function obten_enonc_sql (pnu_seqnc_domn_valr in number)
    return varchar2 is
    vva_enonc_sql                           varchar2 (4000);
    vva_enonc_sourc                         vd_i_sie_14_domn_valr.enonc_sourc%type;
  begin
    select   enonc_sourc
      into   vva_enonc_sourc
      from   vd_sie_14_domn_valr dv
     where   seqnc = pnu_seqnc_domn_valr;

    if vva_enonc_sourc is not null then
      vva_enonc_sql := 'select d, r from  (' || vva_enonc_sourc || ') order by d';
    else
      vva_enonc_sql :=
           'select valr d, seqnc r from vd_sie_14_detl_domn_valr where ref_domn_valr = '
        || pnu_seqnc_domn_valr
        || ' order by seqnc_presn';
    end if;

    return vva_enonc_sql;
  end obten_enonc_sql;


  function obten_table_valr (pnu_seqnc_domn_valr in number)
    return table_rec_valr
    pipelined is
    vta_table_rec_valr                      table_rec_valr;
    vre_rec_valr                            rec_valr;
    vva_enonc_sourc                         vd_i_sie_14_domn_valr.enonc_sourc%type;
    cur_domn_valr_enonc                     sys_refcursor;

    cursor cur_domn_valr_valr is
      select     valr,
                 seqnc
          from   vd_sie_14_detl_domn_valr
         where   ref_domn_valr = pnu_seqnc_domn_valr
      order by   seqnc_presn;
  begin
    select   enonc_sourc
      into   vva_enonc_sourc
      from   vd_sie_14_domn_valr dv
     where   seqnc = pnu_seqnc_domn_valr;

    if vva_enonc_sourc is not null then
      open cur_domn_valr_enonc for 'select d, r from  (' || vva_enonc_sourc || ') order by d';

      fetch cur_domn_valr_enonc
      bulk collect into vta_table_rec_valr;

      close cur_domn_valr_enonc;

      if vta_table_rec_valr.count > 0 then
        for i in vta_table_rec_valr.first .. vta_table_rec_valr.last loop
          pipe row (vta_table_rec_valr (i));
        end loop;
      end if;
    else
      for rec_domn_valr_valr in cur_domn_valr_valr loop
        vre_rec_valr.code_valr := rec_domn_valr_valr.seqnc;
        vre_rec_valr.valr := rec_domn_valr_valr.valr;
        pipe row (vre_rec_valr);
      end loop;
    end if;

    return;
  end obten_table_valr;
end sie_14_domn_valr_pkg;
/

Prompt Package Body SIE_14_FORMT_PKG;
/* Formatted on 04/12/2013 11:35:29 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_14_FORMT_PKG" as
  gva_seprt_decml                         varchar2 (1) default ',';

  function formt_texte (pnu_valr in number)
    return varchar2 is
    vnu_valr                                number default pnu_valr;
    vnu_part_decm                           number (38, 38);
    vnu_part_entir                          number (38);
    vbo_negtf                               boolean default false;

    vva_retr                                varchar2 (600);
    vva_group                               varchar2 (100);

    type typ_tab_unite is varray (19) of varchar2 (15);

    vta_tab_unite                           typ_tab_unite
                                              default typ_tab_unite ('mille',
                                                                     'million',
                                                                     'millard',
                                                                     'billion',
                                                                     'billiard',
                                                                     'trillion',
                                                                     'trilliard',
                                                                     'quadrillion',
                                                                     'quadrilliard',
                                                                     'quintillion',
                                                                     'quintilliard',
                                                                     'sextillion',
                                                                     'sextilliard',
                                                                     'septillion',
                                                                     'septilliard',
                                                                     'octillion',
                                                                     'octilliard',
                                                                     'nonillion',
                                                                     'nonilliard');

    type typ_tab_chifr is varray (16) of varchar2 (15);

    vta_tab_chifr                           typ_tab_chifr
                                              default typ_tab_chifr ('un',
                                                                     'deux',
                                                                     'trois',
                                                                     'quatre',
                                                                     'cinq',
                                                                     'six',
                                                                     'sept',
                                                                     'huit',
                                                                     'neuf',
                                                                     'dix',
                                                                     'onze',
                                                                     'douze',
                                                                     'treize',
                                                                     'quatorze',
                                                                     'quize',
                                                                     'seize');

    type typ_tab_dizn is varray (10) of varchar2 (20);

    vta_tab_dizn                            typ_tab_dizn
                                              default typ_tab_dizn ('dix',
                                                                    'vingt',
                                                                    'trente',
                                                                    'quarante',
                                                                    'cinquante',
                                                                    'soixante',
                                                                    'soixante-dix',
                                                                    'quatre-vingt',
                                                                    'quatre-vingt-dix');

    vnu_compt_unite                         pls_integer default 0;
    vnu_valr_group                          number;
    vnu_valr_dizn                           number;
    vnu_valr_unite                          number;
  begin
    if vnu_valr = 0 then
      vva_retr := 'zero';
    else
      if vnu_valr < 0 then
        vbo_negtf := true;
        vnu_valr := -vnu_valr;
      end if;

      vnu_part_entir := trunc (vnu_valr);
      vnu_part_decm := vnu_valr - vnu_part_entir;

      while vnu_part_entir > 0 loop
        vnu_valr_group :=
          mod (vnu_part_entir,
               1000);
        vnu_part_entir := (vnu_part_entir - vnu_valr_group) / 1000;

        if vnu_valr_group > 0 then
          -- Cas particulier pour "mille"
          if vnu_compt_unite = 1 and vnu_valr_group = 1 then
            vva_group := vta_tab_unite (vnu_compt_unite);
          else
            vva_group := null;

            -- Mettre le nom de l'unité (ex: mille, million)
            if vnu_compt_unite > 0 then
              vva_group := vta_tab_unite (vnu_compt_unite);

              -- Il y aura un nombre devant, alors on met un espace
              if vnu_valr_group > 1
              or vnu_compt_unite > 1 then
                vva_group := ' ' || vva_group;

                -- Également mettre au pluriel si ce n'est pas 'mille'
                if vnu_valr_group > 1 and vnu_compt_unite > 1 then
                  vva_group := vva_group || 's';
                end if;
              end if;
            end if;

            --Traiter les dizaines et unités
            vnu_valr_unite :=
              mod (vnu_valr_group,
                   10);
            vnu_valr_group := (vnu_valr_group - vnu_valr_unite) / 10;
            vnu_valr_dizn :=
              mod (vnu_valr_group,
                   10);
            vnu_valr_group := (vnu_valr_group - vnu_valr_dizn) / 10;

            --Quelques particularités
            if vnu_valr_dizn in (1, 7, 9) and vnu_valr_unite <= 6 then
              vnu_valr_dizn := vnu_valr_dizn - 1;
              vnu_valr_unite := vnu_valr_unite + 10;
            end if;

            vva_group :=
                 case
                   when vnu_valr_dizn = 0 and vnu_valr_unite = 0 then
                     null
                   when vnu_valr_dizn = 0 then
                     vta_tab_chifr (vnu_valr_unite)
                   when vnu_valr_unite in (1, 11) and vnu_valr_dizn <> 8 then
                     vta_tab_dizn (vnu_valr_dizn) || ' et ' || vta_tab_chifr (vnu_valr_unite)
                   when vnu_valr_unite = 0 then
                     vta_tab_dizn (vnu_valr_dizn)
                   else
                     vta_tab_dizn (vnu_valr_dizn) || '-' || vta_tab_chifr (vnu_valr_unite)
                 end
              || vva_group;

            -- Ajouter un 's' à 80 s'il termine le nombre
            if vnu_compt_unite = 0 and vnu_valr_dizn = 8 and vnu_valr_unite = 0 then
              vva_group := vva_group || 's';
            end if;

            -- Inscrire les centaines
            if vnu_valr_group > 0 then
              if vnu_valr_dizn > 0
              or vnu_valr_unite > 0 then
                vva_group := ' ' || vva_group;
              end if;

              vva_group :=
                   case when vnu_valr_group > 1 then vta_tab_chifr (vnu_valr_group) || ' ' else null end
                || 'cent'
                || case
                     when vnu_valr_group > 1 and vnu_compt_unite = 0 and vnu_valr_dizn = 0 and vnu_valr_unite = 0 then
                       's'
                     else
                       null
                   end
                || vva_group;
            end if;
          end if;

          -- Ajouter le groupe au nom complet
          if vva_group is not null then
            if vva_retr is not null then
              vva_retr := ' ' || vva_retr;
            end if;

            vva_retr := vva_group || vva_retr;
          end if;
        end if;

        vnu_compt_unite := vnu_compt_unite + 1;
      end loop;

      if vbo_negtf then
        vva_retr := 'moins ' || vva_retr;
      end if;
    end if;

    return vva_retr;
  end;

  function to_char2 (pnu_valr in number,
                     pva_formt in varchar2)
    return varchar2 is
    vnu_valr                                number default pnu_valr;
    vva_retr                                varchar2 (600);
    vnu_part_decm                           number (38, 38);
    vnu_part_entir                          number (38);
    vbo_negtf                               boolean default false;

    type typ_tab_demnt is varray (32) of varchar2 (5);

    type typ_tab_mesr is varray (32) of number (6, 5);

    vta_tab_demnt                           typ_tab_demnt
                                              default typ_tab_demnt ('1/32',
                                                                     '1/16',
                                                                     '3/32',
                                                                     '1/8',
                                                                     '5/32',
                                                                     '3/16',
                                                                     '7/32',
                                                                     '1/4',
                                                                     '9/32',
                                                                     '5/16',
                                                                     '11/32',
                                                                     '3/8',
                                                                     '13/32',
                                                                     '7/16',
                                                                     '15/32',
                                                                     '1/2',
                                                                     '17/32',
                                                                     '9/16',
                                                                     '19/32',
                                                                     '5/8',
                                                                     '21/32',
                                                                     '11/16',
                                                                     '23/32',
                                                                     '3/4',
                                                                     '25/32',
                                                                     '13/16',
                                                                     '27/32',
                                                                     '7/8',
                                                                     '29/32',
                                                                     '15/16',
                                                                     '31/32');

    vnu_indx_arond                          pls_integer;
  begin
    if pnu_valr is null then
      vva_retr := null;
    elsif upper (pva_formt) like 'IMPERIAL COURT%' then
      --Obtenir la partie décimale
      --obtenir la partie entière

      if vnu_valr < 0 then
        vbo_negtf := true;
        vnu_valr := -vnu_valr;
      end if;

      vnu_part_entir := trunc (vnu_valr);
      vnu_part_decm := vnu_valr - vnu_part_entir;

      case upper (pva_formt)
        when 'IMPERIAL COURT/1' then
          vnu_indx_arond := 0;
        when 'IMPERIAL COURT/2' then
          vnu_indx_arond := trunc (vnu_part_decm * 2) * 16;
        when 'IMPERIAL COURT/4' then
          vnu_indx_arond := trunc (vnu_part_decm * 4) * 8;
        when 'IMPERIAL COURT/8' then
          vnu_indx_arond := trunc (vnu_part_decm * 8) * 4;
        when 'IMPERIAL COURT/16' then
          vnu_indx_arond := trunc (vnu_part_decm * 16) * 2;
        else
          vnu_indx_arond := trunc (vnu_part_decm * 32);
      end case;

      if vnu_indx_arond = 0 then
        vva_retr := null;
      else
        vva_retr := vta_tab_demnt (vnu_indx_arond);
      end if;

      if vva_retr is not null then
        vva_retr := vnu_part_entir || '" ' || vva_retr;
      else
        vva_retr := vnu_part_entir || '"';
      end if;
    elsif upper (pva_formt) like 'IMPERIAL LONG%' then
      if vnu_valr < 0 then
        vbo_negtf := true;
        vnu_valr := -vnu_valr;
      end if;

      --trouver le nombre de pieds et rappeller pour les pouces
      vnu_part_entir := trunc (vnu_valr / 12);

      vva_retr :=
           vnu_part_entir
        || ''' '
        || to_char2 (vnu_valr - (vnu_part_entir * 12),
                     replace (upper (pva_formt),
                              'LONG',
                              'COURT'));
    elsif upper (pva_formt) like 'IMPERIAL VERGE%' then
      if vnu_valr < 0 then
        vbo_negtf := true;
        vnu_valr := -vnu_valr;
      end if;

      --trouver le nombre de verges et rappeller pour les pieds
      vnu_part_entir := trunc (vnu_valr / 36);

      vva_retr :=
           vnu_part_entir
        || 'vg '
        || to_char2 (vnu_valr - (vnu_part_entir * 36),
                     replace (upper (pva_formt),
                              'VERGE',
                              'LONG'));
    elsif pva_formt = 'TEXTE' then
      vva_retr := upper (formt_texte (pnu_valr));
    elsif pva_formt = 'texte' then
      vva_retr := lower (formt_texte (pnu_valr));
    elsif pva_formt = 'Texte' then
      vva_retr :=
           upper (substr (formt_texte (pnu_valr),
                          1,
                          1))
        || lower (substr (formt_texte (pnu_valr),
                          2));
    elsif upper (pva_formt) = 'CENTS' then
      vva_retr :=
        to_char (mod (trunc (pnu_valr * 100),
                      100),
                 'FM00');
    elsif pva_formt is null then
      vva_retr := to_char (pnu_valr);
    else
      vva_retr :=
        to_char (pnu_valr,
                 pva_formt);
    end if;

    if vbo_negtf then
      return '-' || vva_retr;
    else
      return vva_retr;
    end if;
  end to_char2;

  function to_number2 (pva_valr in varchar2,
                       pva_formt in varchar2 default null)
    return number is
    nombr_inval                             exception;

    vva_valr                                varchar2 (100)
                                              default replace (trim (pva_valr),
                                                               '.',
                                                               ',');
    vnu_retr                                number;
    var_mots                                apex_application_global.vc_arr2;
    var_unite                               sie_07_util_pkg.typ_table_nu_ibpls;
    vva_mot                                 varchar2 (20);
    vnu_nb_mots                             number;
    vbo_tous_unite                          boolean;
    vnu_dernr_unite                         number;
    vnu_unite_atend                         number;
    vbo_negtf                               boolean default false;

    function valr_mot_unit (pva_mot in varchar2,
                            pnu_unite in number)
      return number is
      vnu_pos_slash                           number;
      vnu_retr                                number;
    begin
      case pnu_unite
        when 4 then                                                                                             -- verge
          return to_number (pva_mot) * 36;
        when 3 then                                                                                              -- pied
          return to_number (pva_mot) * 12;
        when 2 then                                                                                             -- pouce
          return to_number (pva_mot);
        when 1 then                                                                                 -- fraction de pouce
          vnu_pos_slash :=
            instr (pva_mot,
                   '/');

          if vnu_pos_slash = 0 then
            raise nombr_inval;
          end if;

          if to_number (substr (pva_mot,
                                vnu_pos_slash + 1)) not in (2, 4, 8, 16, 32) then
            raise nombr_inval;
          end if;

          return to_number (substr (pva_mot,
                                    1,
                                    vnu_pos_slash - 1)) /
                 to_number (substr (pva_mot,
                                    vnu_pos_slash + 1));
        else
          raise nombr_inval;
      end case;
    end;
  begin
    -- Supprimer les espaces doubles en trop
    while instr (vva_valr,
                 '  ') > 0 loop
      vva_valr :=
        replace (vva_valr,
                 '  ',
                 ' ');
    end loop;

    if vva_valr is null then
      return null;
    elsif upper (pva_formt) like 'IMPERIAL %' then
      var_mots :=
        sie_07_util_pkg.string_to_table (replace (vva_valr,
                                                  ' ',
                                                  ':'));
      vnu_nb_mots := var_mots.count ();

      -- Lire l'unité des mots
      vbo_tous_unite := true;

      for i in 1 .. vnu_nb_mots loop
        vva_mot := var_mots (i);

        if vva_mot like '-%' then
          if i = 1 then
            vva_mot :=
              substr (vva_mot,
                      2);
            vbo_negtf := true;
          else
            raise nombr_inval;
          end if;
        end if;

        if vva_mot like '%/%' then
          var_unite (i) := 1;                                                                                -- Fraction
        elsif vva_mot like '%"' then
          var_unite (i) := 2;                                                                                   -- Pouce
          vva_mot :=
            substr (vva_mot,
                    1,
                    length (vva_mot) - 1);
        elsif vva_mot like '%''''' then
          var_unite (i) := 2;                                                                                   -- Pouce
          vva_mot :=
            substr (vva_mot,
                    1,
                    length (vva_mot) - 2);
        elsif vva_mot like '%''' then
          var_unite (i) := 3;                                                                                    -- Pied
          vva_mot :=
            substr (vva_mot,
                    1,
                    length (vva_mot) - 1);
        elsif lower (vva_mot) like '%vg' then
          var_unite (i) := 4;                                                                                   -- Verge
          vva_mot :=
            substr (vva_mot,
                    1,
                    length (vva_mot) - 2);
        else
          var_unite (i) := 0;                                                                       -- Aucun ou invalide
          vbo_tous_unite := false;
        end if;

        var_mots (i) := vva_mot;
      end loop;

      vnu_retr := 0;

      if vbo_tous_unite then
        -- Accepter toutes les unités, pourvus qu'ils soient dans le bon ordre
        vnu_dernr_unite := var_unite (1) + 1;

        for i in 1 .. vnu_nb_mots loop
          if var_unite (i) < vnu_dernr_unite then
            vnu_retr :=
              vnu_retr +
              valr_mot_unit (var_mots (i),
                             var_unite (i));
            vnu_dernr_unite := var_unite (i);
          else
            raise nombr_inval;
          end if;
        end loop;
      else
        if var_unite (vnu_nb_mots) = 1 then                                                                  -- Fraction
          vnu_unite_atend := vnu_nb_mots;
        elsif upper (pva_formt) like 'IMPERIAL COURT%' then
          vnu_unite_atend := 2;                                                                                 -- Pouce
        elsif upper (pva_formt) like 'IMPERIAL LONG%' then
          vnu_unite_atend := 3;                                                                                  -- Pied
        elsif upper (pva_formt) like 'IMPERIAL VERGE%' then
          vnu_unite_atend := 4;                                                                                 -- Verge
        else
          raise nombr_inval;
        end if;

        for i in 1 .. vnu_nb_mots loop
          if var_unite (i) = 0
          or var_unite (i) = vnu_unite_atend then
            vnu_retr :=
              vnu_retr +
              valr_mot_unit (var_mots (i),
                             vnu_unite_atend);
            vnu_unite_atend := vnu_unite_atend - 1;
          else
            raise nombr_inval;
          end if;
        end loop;
      end if;

      if vbo_negtf then
        vnu_retr := -vnu_retr;
      end if;
    elsif pva_formt is null then
      vnu_retr := to_number (vva_valr);
    else
      vnu_retr :=
        to_number (vva_valr,
                   pva_formt);
    end if;

    return vnu_retr;
  exception
    when others then
      sie_01_err_apex_pkg.lever_err_apex_code ('SIE.000008',
                                               pva_valr,
                                               pva_formt,
                                               pva_code_prodt             => 'SDP' --Devrait changer le code du produit : CONAL
                                                                                  );
  end to_number2;

  function obten_seqnc (pva_defnt_formt in varchar2,
                        pva_code_prodt in varchar2 default sie_11_prodt_pkg.obten_code_prodt)
    return number is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_14_formt
     where   defnt = pva_defnt_formt and ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt);

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_seqnc;
end sie_14_formt_pkg;
/

Prompt Package Body SIE_15_AJAX_PKG;
/* Formatted on 04/12/2013 11:35:29 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_15_AJAX_PKG" as
  procedure obten_json_sql (pva_sql in varchar2) is
  begin
    apex_util.json_from_sql (pva_sql);
  exception
    when others then
      htp.prn ('{"row":[]}');
  end obten_json_sql;
end sie_15_ajax_pkg;
/

Prompt Package Body SIE_15_FTP_NOYAU_PKG;
/* Formatted on 04/12/2013 11:35:32 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_15_ftp_noyau_pkg as
  /*
     * VERSION HISTORY
     *  --------------------
     *  1.0     11/19/2002    Unit-tested single and multiple transfers between disparate hosts.
     *  1.0     01/18/2003    Began testing code as proof of concept under 8i.
     *                        As delivered the code did not work correctly for our 8i environment
     *  1.1     03/03/2003    Left package on the shelf to gather dust for awhile.
     *                        Modified login code. Kept failing for some reason.
     *                        Removed multiple file support. Couldn't seem to make it work right.
     *                        Added time_out setting which terminates session if it exceeds 4 minutes
     *                        Added functionality for remove and rename, and sending different filename
     *
     *                          -- To process a file as a different name use the # symbol
     *                          -- test.txt#test.txt20032801
     *                          -- Would be used if you wanted to send the file test.txt
     *                             but copy to remote server as test.txt20032801
     *
     *  2.0      03/01/2004  Upgraded script to support Oracle 9.2.x.x features
     *                       Requires that DBA_DIRECTORIES be utilitized
     *                       meaning that instead of passing local path
     *                       as a path, you must use your defined DBA_DIRECTORY
     *                       values e.g. INTF0047_TABLES is defined as /xfer/INTF0047
     *
     *                        Added binary support
     *                        Added MVS mainframe support
     *
     *  2.1.0    14-AUG-2006 QUOTE SITE command for mainframe was not working. Corrected same.
     *                       Additionally, expanded QUOTE SITE command to permit multiple
     *                       commands to be submitted separated by a | delimiter.
     *
     *                       Added dir and ls functionality
     *
     *  3.0.0    30-AUG-2006 Added some debugging code. Streamlined logic in FTP_FILES_STAGE procedure
     *
     *  3.1.0    15-SEP-2006 Added CLOB / BLOB support and Server Type identification
     *                       Added RMDIR and MKDIR commands for remote server access
     *
     *  3.1.1    22-SEP-2006 Fixed handling of ASCII transfers where carriage return was being captured
     *
     *  3.1.2    22-SEP-2006 Changed logic for current remote path logic on non-mainframe connections
     *                       where we picked up path using PWD command and then performed a CWD
     *                       we had to change because the humad\* accounts with backwards slash
     *                       throws the routine off. LTRIM RTRIM was changed to substr and instr
     *                 commands.
  */
  type tstringtable is table of varchar2 (2000);

  type tserverreply is record
  (
    rpt                                     char,
    code                                    varchar2 (3),
    message                                 varchar2 (256)
  );

  type tserverreplya is table of tserverreply;

  type tconnectinfo is record
  (
    ip                                      varchar2 (22),
    port                                    pls_integer
  );

  vbo_ecrir_dirct                         boolean default true;

  procedure mode_fichr (pbo_ecrir_dirct in boolean) is
  begin
    vbo_ecrir_dirct := pbo_ecrir_dirct;
  end mode_fichr;

  --
  -- WRITECOMMAND
  --
  -- Sends instruction to remote server
  --
  function writecommand (a_conn in utl_tcp.connection,
                         a_command in varchar2)
    return tserverreplya is
    v_conn                                  utl_tcp.connection;
    v_str                                   varchar2 (500);
    v_bytes_written                         number;
    v_reply                                 tserverreplya;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.WRITECOMMAND';
  begin
    v_reply := tserverreplya ();
    v_conn := a_conn;

    if a_command is not null then
      v_bytes_written :=
        utl_tcp.write_line (v_conn,
                            a_command);
    end if;

    v_conn := a_conn;

    while 1 = 1 loop
      v_str :=
        utl_tcp.get_line (v_conn,
                          true);
      v_reply.extend;
      v_reply (v_reply.count).code :=
        substr (v_str,
                1,
                3);
      v_reply (v_reply.count).rpt :=
        substr (v_str,
                4,
                1);
      v_reply (v_reply.count).message :=
        substr (v_str,
                5);

      if v_reply (v_reply.count).rpt = ' ' then
        exit;
      end if;
    end loop;

    if substr (v_reply (v_reply.count).code,
               1,
               1) = '5' then
      raise_application_error (-20000,
                               'WriteCommand: ' || v_str,
                               true);
    end if;

    return v_reply;
  end;

  --
  -- LOGIN
  --
  -- Opens connection with remote server
  --
  function login (a_site_in in varchar2,
                  a_port_in in varchar2,
                  a_user_name in varchar2,
                  a_user_pass in varchar2)
    return utl_tcp.connection is
    v_conn                                  utl_tcp.connection;
    v_reply                                 tserverreplya;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.LOGIN';
  begin
    v_conn :=
      utl_tcp.open_connection (remote_host                => a_site_in,
                               remote_port                => a_port_in,
                               tx_timeout                 => tx_timeout);
    v_reply :=
      writecommand (v_conn,
                    null);

    if v_reply (v_reply.count).code <> '220' then
      utl_tcp.close_all_connections;
      raise_application_error (-20001,
                               'Login: ' || v_reply (v_reply.count).code || ' ' || v_reply (v_reply.count).message,
                               true);
      return v_conn;
    end if;

    v_reply :=
      writecommand (v_conn,
                    'USER ' || a_user_name);

    if substr (v_reply (v_reply.count).code,
               1,
               1) = '5' then
      utl_tcp.close_all_connections;
      raise_application_error (-20000,
                               'Login: ' || v_reply (v_reply.count).code || ' ' || v_reply (v_reply.count).message,
                               true);
      return v_conn;
    end if;

    if v_reply (v_reply.count).code <> '331' then
      utl_tcp.close_all_connections;
      raise_application_error (-20001,
                               'Login: ' || v_reply (v_reply.count).code || ' ' || v_reply (v_reply.count).message,
                               true);
      return v_conn;
    end if;

    v_reply :=
      writecommand (v_conn,
                    'PASS ' || a_user_pass);

    if substr (v_reply (v_reply.count).code,
               1,
               1) = '5' then
      utl_tcp.close_all_connections;
      raise_application_error (-20000,
                               'Login: ' || v_reply (v_reply.count).code || ' ' || v_reply (v_reply.count).message,
                               true);
      return v_conn;
    end if;

    if v_reply (v_reply.count).code <> '230' then
      utl_tcp.close_all_connections;
      raise_application_error (-20001,
                               'Login: ' || v_reply (v_reply.count).code || ' ' || v_reply (v_reply.count).message,
                               true);
      return v_conn;
    end if;

    return v_conn;
  end;

  --
  -- PRINT_OUTPUT
  --
  -- This prints information to DBMS_OUTPUT, but avoids the buffer limit of 255 per
  -- line of DBMS_OUTPUT.
  --
  procedure print_output (p_message in varchar2) is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.PRINT_OUTPUT';
  begin
    --
    -- Optional method
    --
    -- Then you can also remove all of the references to the debug flag on the FTP_INTERFACE
    -- package, since you can control same via the global debug flag on the CS_PRINT_UTILITY
    -- package.
    --
    --
    --      IF NVL(cs_print_utility.g_debug_flag, 'N') = 'Y' THEN
    --         cs_print_utility.print_output(p_message =>      p_message
    --                                     , p_size =>         1000);
    --      END IF;
    --
    -- If we use the above method, we can get rid of the remainder
    --
    dbms_output.put_line (substr (p_message,
                                  1,
                                  250));

    --
    if length (p_message) > 250 then
      dbms_output.put_line (substr (p_message,
                                    251,
                                    250));
    end if;

    --
    if length (p_message) > 501 then
      dbms_output.put_line (substr (p_message,
                                    501,
                                    250));
    end if;

    --
    if length (p_message) > 751 then
      dbms_output.put_line (substr (p_message,
                                    751,
                                    250));
    end if;
  --
  exception
    when others then
      null;                                                           -- Ignore errors... protect buffer overflow's etc.
  end print_output;

  --
  -- CREATE_PASV
  --
  -- Create the passive host IP and port number to connect to
  --
  procedure create_pasv (p_pasv_cmd in varchar2,
                         p_pasv_host   out varchar2,
                         p_pasv_port   out number) is
    v_pasv_cmd                              varchar2 (30) := p_pasv_cmd;
    --Host and port to connect to for data transfer
    n_port_dec                              number;
    n_port_add                              number;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.CREATE_PASV';
  begin
    p_pasv_host :=
      replace (substr (v_pasv_cmd,
                       1,
                       instr (v_pasv_cmd,
                              ',',
                              1,
                              4) -
                       1),
               ',',
               '.');
    n_port_dec :=
      to_number (substr (v_pasv_cmd,
                         instr (v_pasv_cmd,
                                ',',
                                1,
                                4) +
                         1,
                         (instr (v_pasv_cmd,
                                 ',',
                                 1,
                                 5) -
                          (instr (v_pasv_cmd,
                                  ',',
                                  1,
                                  4) +
                           1))));
    n_port_add :=
      to_number (substr (v_pasv_cmd,
                         instr (v_pasv_cmd,
                                ',',
                                1,
                                5) +
                         1,
                         length (v_pasv_cmd) -
                         instr (v_pasv_cmd,
                                ',',
                                1,
                                5)));
    p_pasv_port := (n_port_dec * 256) + n_port_add;
  --       print_output (   'p_pasv_host= '
  --                             || p_pasv_host);
  --       print_output (   'n_port_dec= '
  --                             || n_port_dec);
  --       print_output (   'n_port_add= '
  --                             || n_port_add);
  --       print_output (   'p_pasv_port= '
  --                             || p_pasv_port);
  exception
    when others then
      --print_output(SQLERRM);
      raise;
  end create_pasv;

  --
  -- VALIDATE_REPLY
  --
  -- Read a single or multi-line reply from the FTP server and VALIDATE
  -- it against the code passed in p_code.
  --
  -- Return TRUE if reply code matches p_code, FALSE if it doesn't or error
  -- occurs
  --
  -- Send full server response back to calling procedure
  --
  function validate_reply (p_ctrl_con in out utl_tcp.connection,
                           p_code in pls_integer,
                           p_reply   out varchar2)
    return boolean is
    n_code                                  varchar2 (3) := p_code;
    n_byte_count                            pls_integer;
    v_msg                                   varchar2 (1000);
    n_line_count                            pls_integer := 0;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.VALIDATE_REPLY';
  begin
    loop
      v_msg := utl_tcp.get_line (p_ctrl_con);
      n_line_count := n_line_count + 1;

      if n_line_count = 1 then
        p_reply := v_msg;
      else
        p_reply :=
             p_reply
          || substr (v_msg,
                     4);
      end if;

      exit when instr (v_msg,
                       '-',
                       1,
                       1) <> 4;
    end loop;

    --       print_output('n_code := ' || n_code);
    --       print_output('p_reply := ' || TO_NUMBER (SUBSTR (p_reply
    --  ,                           1
    --  ,                           3)));
    if to_number (substr (p_reply,
                          1,
                          3)) = n_code then
      return true;
    else
      return false;
    end if;
  exception
    when others then
      p_reply := sqlerrm;
      return false;
  end validate_reply;

  --
  -- VALIDATE_REPLY
  --
  -- Read a single or multi-line reply from the FTP server and VALIDATE
  -- it against the code passed in p_code.
  --
  -- Return TRUE if reply code matches p_code1 or p_code2, FALSE if it doesn't or error
  -- occurs
  --
  -- Send full server response back to calling procedure
  --
  function validate_reply (p_ctrl_con in out utl_tcp.connection,
                           p_code1 in pls_integer,
                           p_code2 in pls_integer,
                           p_reply   out varchar2)
    return boolean is
    v_code1                                 varchar2 (3) := to_char (p_code1);
    v_code2                                 varchar2 (3) := to_char (p_code2);
    v_msg                                   varchar2 (1000);
    n_line_count                            pls_integer := 0;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.VALIDATE_REPLY';
  begin
    loop
      v_msg := utl_tcp.get_line (p_ctrl_con);
      n_line_count := n_line_count + 1;

      if n_line_count = 1 then
        p_reply := v_msg;
      else
        p_reply :=
             p_reply
          || substr (v_msg,
                     4);
      end if;

      exit when instr (v_msg,
                       '-',
                       1,
                       1) <> 4;
    end loop;

    if to_number (substr (p_reply,
                          1,
                          3)) in (v_code1, v_code2) then
      return true;
    else
      return false;
    end if;
  exception
    when others then
      p_reply := sqlerrm;
      return false;
  end validate_reply;

  --
  -- TRANSFER_DATA
  --
  -- Handles actual data transfer.  Responds with status, error message, and
  -- transfer statistics.
  --
  -- Potential errors could be with connection or file i/o
  --
  procedure transfer_data (u_ctrl_connection in out utl_tcp.connection,
                           p_localpath in varchar2,
                           p_filename in varchar2,
                           p_filetype in varchar2,
                           p_pasv_host in varchar2,
                           p_pasv_port in pls_integer,
                           p_transfer_mode in varchar2,
                           v_status   out varchar2,
                           v_error_message   out varchar2,
                           n_bytes_transmitted   out number,
                           d_trans_start   out date,
                           d_trans_end   out date) is
    l_amount                                pls_integer;
    u_filehandle                            utl_file.file_type;
    v_tsfr_mode                             varchar2 (30) := p_transfer_mode;
    v_mode                                  varchar2 (1);
    v_tsfr_cmd                              varchar2 (10);
    v_buffer                                varchar2 (32767);
    v_buffer_header1                        varchar2 (32767);
    v_buffer_header2                        varchar2 (32767);
    v_localpath                             varchar2 (255) := p_localpath;
    v_filename                              varchar2 (255) := p_filename;
    v_filenamefr                            varchar2 (255) := p_filename;
    v_filenameto                            varchar2 (255) := p_filename;
    v_host                                  varchar2 (20) := p_pasv_host;
    n_port                                  pls_integer := p_pasv_port;
    n_bytes                                 number;
    l_longdir_line_cnt                      pls_integer := 0;
    l_header_displayed                      pls_integer := 0;
    v_msg                                   varchar2 (1000);
    v_reply                                 varchar2 (1000);
    v_err_status                            varchar2 (20) := 'ERROR';
    v_database_directory                    varchar2 (100);
    p_data_clob                             clob;
    p_data_blob                             blob;
    l_step                                  varchar2 (1000);
    l_filename_search                       varchar2 (1000);
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.TRANSFER_DATA';
  begin
    /** Initialize some of our OUT variables **/
    v_status := 'SUCCESS';
    v_error_message := ' ';
    n_bytes_transmitted := 0;
    --
    l_step := 'PARSING FILENAME';

    if nvl (instr (v_filename,
                   '#'),
            0) = 0 then
      v_filenamefr := v_filename;
      v_filenameto := v_filename;
    else
      v_filenamefr :=
        ltrim (rtrim (substr (v_filename,
                              1,
                              instr (v_filename,
                                     '#') -
                              1)));
      v_filenameto :=
        ltrim (rtrim (substr (v_filename,
                              instr (v_filename,
                                     '#') +
                              1)));
    end if;

    l_step := 'SELECTING TRANSFER MODE';

    if upper (v_tsfr_mode) = 'PUT' then
      v_mode := 'r';
      v_tsfr_cmd := 'STOR';
    elsif upper (v_tsfr_mode) = 'GET' then
      v_mode := 'w';
      v_tsfr_cmd := 'RETR';
    elsif upper (v_tsfr_mode) = 'LIST' then
      v_mode := 'w';
      v_tsfr_cmd := 'LIST';
    elsif upper (v_tsfr_mode) = 'NLST' then
      v_mode := 'w';
      v_tsfr_cmd := 'NLST';
    elsif upper (v_tsfr_mode) = 'DELE' then
      v_mode := 'd';
      v_tsfr_cmd := 'DELE';
    elsif upper (v_tsfr_mode) = 'RNFR' then
      v_mode := 'm';
      v_tsfr_cmd := 'RNFR';
    end if;

    l_step := 'OPEN CONNECTION WITH SERVER';
    /** Open data connection on Passive host and port **/
    u_data_con :=
      utl_tcp.open_connection (remote_host                => v_host,
                               remote_port                => n_port,
                               tx_timeout                 => tx_timeout);
    l_step := 'SOME FILE OPERATIONS';

    /* FILE STUFF */

    if upper (v_tsfr_mode) = 'PUT' then
      if (v_operation_mode = 'LOB' and v_localpath = 'CLOB')
      or (p_filetype = 'ASCII' and v_operation_mode = 'LOB') then
        p_data_clob := g_data_c;
      elsif p_filetype = 'BINARY' then
        if v_operation_mode = 'LOB' and v_localpath = 'BLOB' then
          p_data_blob := g_data_b;
        else
          /* Read file into LOB for transferring */
          p_data_blob :=
            get_local_binary_data (p_dir                      => v_localpath,
                                   p_file                     => v_filenamefr);
          g_data_b := p_data_blob;
        end if;
      elsif v_operation_mode = 'FILE' and p_filetype = 'ASCII' then
        /** Open the local file to read and transfer data **/
        u_filehandle :=
          utl_file.fopen (v_localpath,
                          v_filenamefr,
                          v_mode,
                          32000);
      end if;
    elsif upper (v_tsfr_mode) in ('GET', 'LIST', 'NLST') then
      if (v_operation_mode = 'LOB' and v_localpath = 'CLOB')
      or (p_filetype = 'ASCII' and v_operation_mode = 'LOB') then
        p_data_clob := g_data_c;
      elsif v_operation_mode = 'LOB' and v_localpath = 'BLOB' then
        p_data_blob := g_data_b;
      else
        if upper (v_tsfr_cmd) in ('LIST', 'NLST') and v_operation_mode = 'FILE' then
          /** Open the local file to read and transfer data using from name which is our directory listing file **/
          u_filehandle :=
            utl_file.fopen (v_localpath,
                            v_filenamefr,
                            v_mode,
                            32000);
        elsif v_operation_mode = 'FILE' and upper (v_tsfr_mode) = 'GET' then
          /** Open the local file to read and transfer data **/
          u_filehandle :=
            utl_file.fopen (v_localpath,
                            v_filenameto,
                            v_mode,
                            32000);
        end if;
      end if;
    end if;

    --
    -- v_tsfr_cmd is used for determining remote actions
    if upper (v_tsfr_cmd) = 'DELE' then
      l_step := 'DELETE COMMAND';

      /** Send the DELE command to tell the server we're going to delete a file **/
      if mainframe_connection then
        n_bytes :=
          utl_tcp.write_line (u_ctrl_connection,
                              'DELE ' || '''' || v_filenamefr || '''');
      else
        n_bytes :=
          utl_tcp.write_line (u_ctrl_connection,
                              'DELE ' || v_filenamefr);
      end if;
    elsif upper (v_tsfr_cmd) = 'RNFR' then
      l_step := 'RENAME A FILE';

      /** Send the RNFR command to tell the server we're going to rename a file **/
      if mainframe_connection then
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'RNFR ' || '''' || v_filenamefr || '''');

        --
        if validate_reply (u_ctrl_con,
                           rnfr_code,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      else
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'RNFR ' || v_filenamefr);

        --
        if validate_reply (u_ctrl_con,
                           rnfr_code,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      end if;

      --
      /** Send the RNTO command to tell the server we're going to rename a file to this name**/
      if mainframe_connection then
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'RNTO ' || '''' || v_filenameto || '''');
      else
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'RNTO ' || v_filenameto);
      end if;
    elsif upper (v_tsfr_cmd) = 'RETR' then
      l_step := 'RETREIVE A FILE';

      /** Send the command to tell the server we're going to download a file **/
      if mainframe_connection then
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'RETR ' || '''' || v_filenamefr || '''');

        --
        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      else
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'RETR ' || v_filenamefr);

        --
        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      end if;
    elsif upper (v_tsfr_cmd) = 'LIST' then
      l_step := 'LIST DIR CONTENTS - FULL LISTING';

      /** Send the command to tell the server we're going to list dir contents **/
      if mainframe_connection then
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'LIST');


        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      else
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'LIST');


        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      end if;
    elsif upper (v_tsfr_cmd) = 'NLST' then
      l_step := 'LIST DIRECTORY CONTENTS - FILENAME ONLY';

      /** Send the command to tell the server we're going to list dir contents **/
      if mainframe_connection then
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'NLST');

        --
        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      else
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'NLST');

        --
        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      end if;
    else
      l_step := 'UPLOAD FILE';

      -- Defaults to STOR (PUT) case
      /** Send the command to tell the server we're going to upload a file **/
      if mainframe_connection then
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'STOR ' || '''' || v_filenameto || '''');

        --
        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      else
        n_bytes :=
          utl_tcp.write_line (u_ctrl_con,
                              'STOR ' || v_filenameto);

        --
        if validate_reply (u_ctrl_con,
                           tsfr_start_code1,
                           tsfr_start_code2,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      end if;
    end if;

    --
    d_trans_start := sysdate;

    --
    if nvl (upper (l_ftp_debug), 'N') = 'Y' then
      --
      -- For our purposes in this release
      -- we really only needed just the one debug
      -- output entry.
      --
      -- FILETYPE              ASCII vs. BINARY
      -- OPERATION_MODE        FILE vs. LOB
      -- LOCALPATH          EITHER DBA_DIRECTORY OR LOB TYPE
      -- TSFR_MODE          PUT,GET,etc
      -- SYSTEM_TYPE        SERVER TYPE e.g. UNIX,NETWARE,WINDOWS,MVS
      -- SYSTEM_TYPE_REPLY     FULL REPLY TO SYST COMMAND
      --
      -- These values should be beneficial to most debugging
      -- efforts. You can leverage the l_ftp_debug elsewhere
      -- as needed
      --
      print_output (
           'FTP_DEBUG :: INFO :: '
        || p_filetype
        || ' :: '
        || v_operation_mode
        || ' :: '
        || v_localpath
        || ' :: '
        || upper (v_tsfr_mode)
        || ' :: '
        || v_system_type
        || ' :: '
        || v_system_type_reply
      );
    end if;

    if upper (v_tsfr_mode) = 'PUT' then
      l_step := 'UPLOADING DATA';

      if (p_filetype = 'BINARY' and v_operation_mode = 'FILE')
      or (p_filetype = 'BINARY' and v_operation_mode = 'LOB') then
        p_data_blob := g_data_b;
        put_remote_binary_data (u_data_con,
                                p_data_blob);
        n_bytes_transmitted := dbms_lob.getlength (p_data_blob);
        --
        -- Populate Global Spec variable so that we can handle the binary put operation
        --
        g_data_b := p_data_blob;
      elsif (v_localpath = 'CLOB' and v_operation_mode = 'LOB')
         or (p_filetype = 'ASCII' and v_operation_mode = 'LOB') then
        p_data_clob := g_data_c;
        put_remote_ascii_data (u_data_con,
                               p_data_clob);
        n_bytes_transmitted := dbms_lob.getlength (p_data_clob);
      else
        -- Read from file
        -- and it must be a flat ascii file
        --
        loop
          begin
            utl_file.get_line (u_filehandle,
                               v_buffer);
          exception
            when no_data_found then
              exit;
          end;

          --
          /* Trim off Carriage return */
          n_bytes :=
            utl_tcp.write_line (u_data_con,
                                rtrim (v_buffer,
                                       chr (13)));
          n_bytes_transmitted := n_bytes_transmitted + n_bytes;
        end loop;
      end if;
    elsif upper (v_tsfr_mode) = 'GET' then
      l_step := 'GETTING DATA';

      if p_filetype = 'BINARY' and v_operation_mode = 'FILE' then
        p_data_blob := get_remote_binary_data (u_data_con);
        n_bytes_transmitted := dbms_lob.getlength (p_data_blob);
        put_local_binary_data (p_data                     => p_data_blob,
                               p_dir                      => v_localpath,
                               p_file                     => v_filenameto);
      elsif (v_localpath = 'CLOB' and v_operation_mode = 'LOB')
         or (p_filetype = 'ASCII' and v_operation_mode = 'LOB') then
        p_data_clob := get_remote_ascii_data (u_data_con);
        n_bytes_transmitted := dbms_lob.getlength (p_data_clob);
        g_data_c := p_data_clob;
      elsif p_filetype = 'BINARY' and v_operation_mode = 'LOB' then
        p_data_blob := get_remote_binary_data (u_data_con);
        n_bytes_transmitted := dbms_lob.getlength (p_data_blob);
        g_data_b := p_data_blob;
      else
        if mainframe_connection then
          loop
            begin
              v_buffer :=
                utl_tcp.get_line (u_data_con,
                                  true);

              --
              /** Sometimes the TCP/IP buffer sends null data **/
              /** we only want to receive the actual data **/
              if v_buffer is not null then
                utl_file.put_line (u_filehandle,
                                   v_buffer);
                n_bytes := length (v_buffer);
                n_bytes_transmitted := n_bytes_transmitted + n_bytes;
              end if;
            --
            exception
              when utl_tcp.end_of_input then
                exit;
            end;
          --
          end loop;
        else
          begin
            loop
              v_buffer :=
                utl_tcp.get_line (u_data_con,
                                  true);

              /** Sometimes the TCP/IP buffer sends null data **/
              /** we only want to receive the actual data **/
              if v_buffer is not null then
                utl_file.put_line (u_filehandle,
                                   v_buffer);
                n_bytes := length (v_buffer);
                n_bytes_transmitted := n_bytes_transmitted + n_bytes;
              end if;
            end loop;
          exception
            when utl_tcp.end_of_input then
              null;
          end;
        end if;                                                                        -- end of IF mainframe connection
      end if;                                                                            -- end of IF filetype is BINARY
    elsif upper (v_tsfr_mode) in ('LIST', 'NLST') then
      l_step := 'GETTING DIRECTORY LISTING';
      /*

      Long Output Format

      The output from ls -l summarizes all the most important information about the file on one line.
      If the specified pathname is a directory, ls displays information on every file in that directory
      (one file per line). It precedes this list with a status line that indicates the total number of
      file system blocks (512 byte units) occupied by the files in that directory. Here is a sample of
      the output along with an explanation.

      -rw-rw-rw- 1 root   dir 104 Dec 25 19:32 file

      The first character identifies the file type:

      -    Regular file
      b    Block special file
      c    Character special file
      d    Directory
      l    Symbolic link
      n    Network file
      p    FIFO
      s    Socket

      The next nine characters are in three groups of three; they describe the permissions on the file.
      The first group of three describes owner permissions; the second describes group permissions;
      the third describes other (or world) permissions. Because Windows systems do not support group
      and other permissions, these are copies of the owner's permissions. Characters that may appear are:

      r    Permission to read file
      w    Permission to write to file
      x    Permission to execute file
      a    Archive bit is on (file has not been backed up)
      c    Compressed file
      s    System file
      h    Hidden file
      t    Temporary file

      On Windows systems, most of the permissions shown are artificial, with no real meaning. The w bit
      is set according to the ReadOnly attribute, and the rx bits are always set on.

      You can change some permissions with the chmod command.

      After the permissions comes the number of links to the file. Since Windows Me does not support links,
      this value is always 1.

      Next comes the name of the owner of the file or directory. On Windows Me and under
      Windows NT/2000/XP/2003 on file systems that don't support Windows NT/2000/XP/2003 security,
      the owner name cannot be determined and the owner ID number is displayed instead. Since Windows Me
      does not support the concept of ownership, the owner ID number is always user ID zero. Under
      Windows NT/2000/XP/2003 the name of the owner of a file is displayed if the file's SIDs can be
      obtained and if these SIDs have an associated name in the SAM database. If the file has a SID
      associated with it, but the name of the SID cannot be determined, then the value of the SID is
      displayed. (This can happen when the current user is not in the domain that was used when the
      file was created.) If the file does not have a SID (for example, if it is on a non-NTFS file system),
      or if the file security information cannot be accessed because the file is locked by another process,
      then the user name appears as <unavail>.

      Then comes the name of the group that owns the file or directory. On Windows systems, the same
      rules are followed for the group name as for the owner name.

      Following this is the size of the file, expressed in bytes.

      After this comes a date and time. For a file, this is the time that the file was last changed;
      for a directory, it is the time that the directory was created. The -c and -u options can change
      which time value is used. If the date is more than six months old or if the date is in the future,
      the year is shown instead of the time.

      The last item on the line is the name of the file or directory.

      --
      For LIST command we want to determine what the system type is
      because it will determine our format for the headers when running
      the LIST (DIR) command.
      --
      Permission Lnk Owner    Group         Bytes Mon Dy Time  Name
      drwxrwxr-x 221 oaphrb   pay           12288 May 02 12:59 appltop
      --
      Although on Unix system, the header row is not presented, we would like to  provide it here
      so that it remains consistent with how the mainframe response is received which does
      in fact include a header row.
      --
      Problem is that different systems display data differently to put it simple. We will be
      supporting the following : Netware, VMS, Unix, and Windows. If you have others, you
      will need to modify the code accordingly to support it. To identify the system ,
      ftp to the server manually and type sys and press enter. It will respond back with
      the server type.

      Then do a dir command and capture how the headers are displayed. Code for it.
      --
      --
      Connecting to a Netware O/S (Novell)
      --
        Permission Owner                           Bytes Mon Dy  Year Name
      - [RWCEAFMS] JSB2493S                       483566 May 26  2004 Rearch.EXE
      --
      Connect to MVS O/S (mainframe)
      --
      Volume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname
      PRM515 3390   2006/08/25  1   15  FB     100 27900  PS  ET.TALX.COIDUDN.FILE
      --
      --
      Connect to Windows O/S
      --
      Permission Lnk Owner    Group           Bytes Mon Dy Time  Name
      ---------- --- -----    -----           ----- --- -- ----  ----
      dr-xr-xr-x   1 owner    group               0 Feb  1 17:32 bussys
      --
      --
      */
      l_longdir_line_cnt := 0;

      if (v_localpath = 'CLOB' and v_operation_mode = 'LOB')
      or (p_filetype = 'ASCII' and v_operation_mode = 'LOB') then
        p_data_clob :=
          get_remote_listing_data (u_data_con,
                                   v_filenameto,
                                   v_tsfr_mode);
        n_bytes_transmitted := dbms_lob.getlength (p_data_clob);
        g_data_c := p_data_clob;
      else
        if mainframe_connection then
          loop
            begin
              v_buffer :=
                utl_tcp.get_line (u_data_con,
                                  true);

              --

              --
              /** Sometimes the TCP/IP buffer sends null data **/
              /** we only want to receive the actual data **/
              if v_buffer is not null then
                l_longdir_line_cnt := l_longdir_line_cnt + 1;

                --
                -- Capture the first line. On our system
                -- it is the column headers
                --
                if l_longdir_line_cnt = 1 then
                  v_buffer_header1 := v_buffer;
                end if;

                --
                -- DISPLAY HEADER ROW WHEN v_SYSTEM_TYPE IS NOT NULL
                --
                case
                  when l_longdir_line_cnt = 1 and upper (v_tsfr_mode) = 'LIST' and v_system_type = 'MVS' then
                    v_buffer_header1 := v_buffer_header1;
                    n_bytes := length (v_buffer_header1);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                    v_buffer_header2 := '------ ----    -------- --- ---- ----- ----- ----- ----- ------';
                    n_bytes := length (v_buffer_header2);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                  when l_header_displayed = 0 and upper (v_tsfr_mode) = 'LIST' and v_system_type <> 'MVS' then
                    --
                    -- We didn't recognize the system type so display a message
                    -- that we won't be displaying the header row
                    --
                    v_buffer_header1 := ltrim (rtrim ('System Reply => ' || v_system_type_reply));
                    n_bytes := length (v_buffer_header1);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                    v_buffer_header2 :=
                      '************************************************************************************************';
                    n_bytes := length (v_buffer_header2);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                  else
                    null;
                end case;

                --
                -- We stored the filename filter in v_filenameto
                --
                if v_filenameto = '*' then
                  if l_header_displayed = 0
                 and upper (v_tsfr_mode) = 'LIST'
                 and 'PLACEHOLDER ONLY. ALWAYS INCLUDES HEADER BY DEFAULT' is null then
                    l_header_displayed := 1;
                    utl_file.put_line (u_filehandle,
                                       v_buffer_header1);
                    utl_file.put_line (u_filehandle,
                                       v_buffer_header2);
                  end if;

                  utl_file.put_line (u_filehandle,
                                     v_buffer);
                  n_bytes := length (v_buffer);
                  n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                else
                  --
                  -- Here we are building our search string
                  -- by replacing wildcard * with %
                  -- and then encapsulating the resulting string
                  -- with % on each end. We also make sure we don't
                  -- have %% on the tail and lead of the search string
                  --
                  l_filename_search :=
                       '%'
                    || rtrim (ltrim (   '%'
                                     || replace (v_filenameto,
                                                 '*',
                                                 '%')
                                     || '%',
                                     '%'),
                              '%')
                    || '%';

                  if v_buffer like l_filename_search then
                    if l_header_displayed = 0 and upper (v_tsfr_mode) = 'LIST' then
                      l_header_displayed := 1;
                      utl_file.put_line (u_filehandle,
                                         v_buffer_header1);
                      utl_file.put_line (u_filehandle,
                                         v_buffer_header2);
                    end if;

                    utl_file.put_line (u_filehandle,
                                       v_buffer);
                    n_bytes := length (v_buffer);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                  end if;
                end if;
              end if;
            --
            exception
              when utl_tcp.end_of_input then
                exit;
            end;
          --
          end loop;
        else                                                                                            -- Not mainframe
          begin
            loop
              v_buffer :=
                utl_tcp.get_line (u_data_con,
                                  true);

              --
              /** Sometimes the TCP/IP buffer sends null data **/
              /** we only want to receive the actual data **/
              if v_buffer is not null then
                l_longdir_line_cnt := l_longdir_line_cnt + 1;

                --
                -- DISPLAY HEADER ROW WHEN v_SYSTEM_TYPE IS NOT NULL
                --
                case
                  when upper (v_tsfr_mode) = 'LIST' and v_system_type = 'UNIX' then
                    v_buffer_header1 := 'Permission Lnk Owner    Group         Bytes Mon Dy Time  Name';
                    n_bytes := length (v_buffer_header1);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                    v_buffer_header2 := '---------- --- -----    -----         ----- --- -- ----  ----';
                    n_bytes := length (v_buffer_header2);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                  when upper (v_tsfr_mode) = 'LIST' and v_system_type = 'NETWARE' then
                    v_buffer_header1 := 'Permission   Owner                           Bytes Mon Dy DStmp Name';
                    n_bytes := length (v_buffer_header1);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                    v_buffer_header2 := '------------ --------                        ----- --- -- ----- ----';
                    n_bytes := length (v_buffer_header2);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                  when upper (v_tsfr_mode) = 'LIST' and v_system_type = 'WINDOWS' then
                    v_buffer_header1 := 'Permission Lnk Owner    Group           Bytes Mon Dy DStmp Name';
                    n_bytes := length (v_buffer_header1);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                    v_buffer_header2 := '---------- --- -----    -----           ----- --- -- ----- ----';
                    n_bytes := length (v_buffer_header2);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                  else
                    --
                    -- We didn't recognize the system type so display a message
                    -- that we won't be displaying the header row
                    --
                    v_buffer_header1 := ltrim (rtrim ('System Reply => ' || v_system_type_reply));
                    n_bytes := length (v_buffer_header1);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                    v_buffer_header2 :=
                      '************************************************************************************************';
                    n_bytes := length (v_buffer_header2);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                end case;

                --
                -- We stored the filename filter in v_filenameto
                --
                if v_filenameto = '*' then
                  if l_header_displayed = 0 and upper (v_tsfr_mode) = 'LIST' then
                    t_fichr.delete ();

                    l_header_displayed := 1;
                    utl_file.put_line (u_filehandle,
                                       v_buffer_header1);
                    utl_file.put_line (u_filehandle,
                                       v_buffer_header2);
                  end if;

                  utl_file.put_line (u_filehandle,
                                     v_buffer);

                  while instr (v_buffer,
                               '  ') > 0 loop
                    v_buffer :=
                      replace (v_buffer,
                               '  ',
                               ' ');
                  end loop;

                  t_fichr (t_fichr.count).nom :=
                    substr (v_buffer,
                            instr (v_buffer,
                                   ' ',
                                   1,
                                   8) +
                            1);
                  --t_fichr(t_fichr.last).tail := to_number(substr(v_buffer, instr(v_buffer, ' ', -1, 5),instr(v_buffer, ' ', -1, 4)-instr(v_buffer, ' ', -1, 5)));
                  t_fichr (t_fichr.last).type_fichr :=
                    case substr (v_buffer,
                                 1,
                                 1)
                      when '-' then 'F'
                      else 'D'
                    end;
                  n_bytes := length (v_buffer);
                  n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                else
                  l_filename_search :=
                       '%'
                    || rtrim (ltrim (   '%'
                                     || replace (v_filenameto,
                                                 '*',
                                                 '%')
                                     || '%',
                                     '%'),
                              '%')
                    || '%';

                  if v_buffer like l_filename_search then
                    if l_header_displayed = 0 and upper (v_tsfr_mode) = 'LIST' then
                      l_header_displayed := 1;
                      utl_file.put_line (u_filehandle,
                                         v_buffer_header1);
                      utl_file.put_line (u_filehandle,
                                         v_buffer_header2);
                    end if;

                    utl_file.put_line (u_filehandle,
                                       v_buffer);
                    n_bytes := length (v_buffer);
                    n_bytes_transmitted := n_bytes_transmitted + n_bytes;
                  end if;
                end if;
              end if;
            end loop;
          exception
            when utl_tcp.end_of_input then
              null;
          end;
        end if;                                                                        -- end of IF mainframe connection
      end if;                                                                                      -- end of LOB vs FILE
    end if;

    --
    d_trans_end := sysdate;
    l_step := 'CLOSING FILE IF OPEN';

    --
    /** Close the file **/
    --
    -- We don't have to do this when in LOB mode because we
    -- are not working with the filesystem
    --
    if v_mode in ('r', 'w', 'l', 'n') and v_operation_mode = 'FILE' then
      utl_file.fclose (u_filehandle);
    end if;

    l_step := 'CLOSING DATA CONNECTION';
    --
    /** Close the Data Connection **/
    utl_tcp.close_connection (u_data_con);
    --
    --
    l_step := 'VERIFY TRANSFER SUCCESS';

    --
    /** Verify the transfer succeeded **/
    if v_mode in ('r', 'w', 'l', 'n') then
      if mainframe_connection then
        if validate_reply (u_ctrl_connection,
                           tsfr_end_code_mf,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      else
        if validate_reply (u_ctrl_connection,
                           tsfr_end_code,
                           v_reply) = false then
          raise ctrl_exception;
        end if;
      end if;
    elsif v_mode = 'd' then
      if validate_reply (u_ctrl_con,
                         delete_code,
                         v_reply) = false then
        raise ctrl_exception;
      end if;
    elsif v_mode = 'm' then
      if validate_reply (u_ctrl_con,
                         rnto_code,
                         v_reply) = false then
        raise ctrl_exception;
      end if;
    end if;
  exception
    when ctrl_exception then
      v_status := v_err_status;
      v_error_message := c_process || ' :: ' || v_reply || '. :: ' || l_step;

      --
      if utl_file.is_open (u_filehandle) and v_operation_mode = 'FILE' then
        utl_file.fclose (u_filehandle);
      end if;

      --
      utl_tcp.close_connection (u_data_con);
    when utl_file.invalid_path then
      v_status := v_err_status;
      v_error_message :=
           c_process
        || ' :: '
        || 'Directory '
        || v_localpath
        || ' is not available to UTL_FILE.  Check the init.ora file for valid UTL_FILE directories'
        || '. :: '
        || l_step;
      utl_tcp.close_connection (u_data_con);
    when utl_file.invalid_operation then
      v_status := v_err_status;

      --
      if upper (v_tsfr_mode) = 'PUT' then
        v_error_message :=
             c_process
          || ' :: '
          || 'The file '
          || v_filenamefr
          || ' in the directory '
          || v_localpath
          || ' could not be opened for reading'
          || '. :: '
          || l_step;
      elsif upper (v_tsfr_mode) = 'GET' then
        v_error_message :=
             c_process
          || ' :: '
          || 'The file '
          || v_filenamefr
          || ' in the directory '
          || v_localpath
          || ' could not be opened for writing'
          || '. :: '
          || l_step;
      elsif upper (v_tsfr_mode) = 'LIST' then
        v_error_message :=
             'The file '
          || v_filenamefr
          || ' in the directory '
          || v_localpath
          || ' could not be opened for writing, or some other problem occurred with dir cmd'
          || '. :: '
          || l_step;
      elsif upper (v_tsfr_mode) = 'NLIST' then
        v_error_message :=
             c_process
          || ' :: '
          || 'The file '
          || v_filenamefr
          || ' in the directory '
          || v_localpath
          || ' could not be opened for writing, or some other problem occurred with dir cmd'
          || '. :: '
          || l_step;
      elsif upper (v_tsfr_mode) = 'DELE' then
        v_error_message :=
             c_process
          || ' :: '
          || 'The file '
          || v_filenamefr
          || ' in the directory '
          || v_localpath
          || ' could not be deleted'
          || '. :: '
          || l_step;
      elsif upper (v_tsfr_mode) = 'RNFR' then
        v_error_message :=
             c_process
          || ' :: '
          || 'The file '
          || v_filenamefr
          || ' in the directory '
          || v_localpath
          || ' could not be renamed'
          || '. :: '
          || l_step;
      end if;

      --
      if utl_file.is_open (u_filehandle) and v_operation_mode = 'FILE' then
        utl_file.fclose (u_filehandle);
      end if;

      --
      utl_tcp.close_connection (u_data_con);
    when utl_file.read_error then
      v_status := v_err_status;
      v_error_message :=
           c_process
        || ' :: '
        || 'The system encountered an error while trying to read '
        || v_filenamefr
        || ' in the directory '
        || v_localpath
        || '. :: '
        || l_step;

      --
      if utl_file.is_open (u_filehandle) and v_operation_mode = 'FILE' then
        utl_file.fclose (u_filehandle);
      end if;

      --
      utl_tcp.close_connection (u_data_con);
    when utl_file.write_error then
      v_status := v_err_status;
      v_error_message :=
           c_process
        || ' :: '
        || 'The system encountered an error while trying to write to '
        || v_filenamefr
        || ' in the directory '
        || v_localpath
        || '. :: '
        || l_step;

      --
      if utl_file.is_open (u_filehandle) and v_operation_mode = 'FILE' then
        utl_file.fclose (u_filehandle);
      end if;

      --
      utl_tcp.close_connection (u_data_con);
    when utl_file.internal_error then
      v_status := v_err_status;
      v_error_message :=
           c_process
        || ' :: '
        || 'The UTL_FILE package encountered an unexpected internal system error'
        || '. :: '
        || l_step;

      --
      if utl_file.is_open (u_filehandle) and v_operation_mode = 'FILE' then
        utl_file.fclose (u_filehandle);
      end if;

      --
      utl_tcp.close_connection (u_data_con);
    when others then
      v_status := v_err_status;
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm || '. :: ' || l_step;

      --
      if utl_file.is_open (u_filehandle) and v_operation_mode = 'FILE' then
        utl_file.fclose (u_filehandle);
      end if;

      --
      utl_tcp.close_connection (u_data_con);
  end transfer_data;

  --
  --
  -- FTP_FILES_STAGE
  --
  -- Handles connection to remote server and initial remote server commands
  --
  --
  --    * Function to handle FTP of files.
  --    * Returns TRUE if no batch-level errors occur.
  --    * Returns FALSE if a batch-level error occurs.
  --    *
  --    * Parameters:
  --    *
  --    * p_error_msg - error message for batch level errors
  --    * p_files - FTP_INTERFACE.t_ftp_rec table type.  Accepts
  --    *           list of files to be transferred
  --    *           returns the table updated with transfer status, error message,
  --    *           bytes_transmitted, transmission start date/time and transmission end
  --    *           date/time
  --    * p_username - username for FTP server
  --    * p_password - password for FTP server
  --    * p_hostname - hostname or IP address of server Ex: 'ftp.oracle.com' or '127.0.0.1'
  --    * p_port - port number to connect on.  FTP is usually on 21, but this may be overridden
  --    *          if the server is configured differently.
  --
  function ftp_files_stage (p_error_msg   out varchar2,
                            p_files in out t_ftp_rec,
                            p_username in varchar2,
                            p_password in varchar2,
                            p_hostname in varchar2,
                            p_port in pls_integer default 21)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.FTP_FILES_STAGE';
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (30) := p_password;
    v_hostname                              varchar2 (30) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_remotepath                            varchar2 (2000);
    n_byte_count                            pls_integer;
    n_first_index                           number;
    v_msg                                   varchar2 (1000);
    v_reply                                 varchar2 (1000);
    v_pasv_host                             varchar2 (20);
    l_filetype                              varchar2 (10);
    n_pasv_port                             number;
    v_buffer                                varchar2 (1000);
    u_ctrl_connection                       utl_tcp.connection;
    v_mainframe_cmd_temp                    varchar2 (2000);
    l_step                                  varchar2 (1000);
    lncnt                                   pls_integer := 0;
    ln_array                                sie_07_util_chain_pkg.atoms_tabtype;
    ln_empty_array                          sie_07_util_chain_pkg.atoms_tabtype;
    invalid_transfer                        exception;
  begin
    p_error_msg := 'FTP Successful';
    --Assume the overall transfer will succeed
    /** Attempt to connect to the host machine **/
    l_step := 'LOGIN TO HOST MACHINE';
    u_ctrl_con :=
      login (a_site_in                  => p_hostname,
             a_port_in                  => p_port,
             a_user_name                => v_username,
             a_user_pass                => v_password);
    --
    u_ctrl_connection := u_ctrl_con;

    --
    /** We should be logged in, time to transfer all files **/
    for i in p_files.first .. p_files.last loop
      l_step := 'LOOP THROUGH FILES';

      if p_files.exists (i) then
        --
        -- For LIST command we want to determine what the system type is
        -- because it will determine our format for the headers when running
        -- the LIST (DIR) command.
        --
        -- Permission Lnk Owner    Group         Bytes Mon Dy Time  Name
        -- drwxrwxr-x 221 oaphrb   pay           12288 May 02 12:59 appltop
        --
        -- Although on Unix system, the header row is not presented, we would like to  provide it here
        -- so that it remains consistent with how the mainframe response is received which does
        -- in fact include a header row.
        --
        -- Problem is that different systems display data differently to put it simple. We will be
        -- supporting the following : Netware, VMS, Unix, and Windows. If you have others, you
        -- will need to modify the code accordingly to support it. To identify the system ,
        -- ftp to the server manually and type sys and press enter. It will respond back with
        -- the server type.
        --
        -- Then do a dir command and capture how the headers are displayed. Code for it.
        --
        --
        -- Connecting to a Netware O/S (Novell)
        --
        --   Permission Owner                           Bytes Mon Dy  Year Name
        -- - [RWCEAFMS] JSB2493S                       483566 May 26  2004 Rearch.EXE
        --
        -- Connect to MVS O/S (mainframe)
        --
        -- Volume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname
        -- PRM515 3390   2006/08/25  1   15  FB     100 27900  PS  ET.TALX.COIDUDN.FILE
        --
        --
        -- Connect to Windows O/S
        --
        -- Permission Lnk Owner    Group           Bytes Mon Dy Time  Name
        -- ---------- --- -----    -----           ----- --- -- ----  ----
        -- dr-xr-xr-x   1 owner    group               0 Feb  1 17:32 bussys
        --
        --

        --
        -- Special Note. If so desired, we could do other things by leveraging
        -- the server type reply. For now, we are just impacting the LIST (dir)
        -- command
        --
        begin
          l_step := 'PERFORMING SYST COMMAND';
          --
          /** Change to the remotepath directory **/
          n_byte_count :=
            utl_tcp.write_line (u_ctrl_con,
                                'SYST');

          if validate_reply (u_ctrl_con,
                             syst_code,
                             v_reply) = false then
            --                      print_output ( 'user_code= ' || user_code );
            --                      print_output ( 'v_reply= ' || v_reply );
            raise ctrl_exception;
          end if;

          case
            when upper (v_reply) like '%NETWARE%' then
              v_system_type := 'NETWARE';
              v_system_type_reply := v_reply;
            when upper (v_reply) like '%MVS%' then
              v_system_type := 'MVS';
              v_system_type_reply := v_reply;
            when upper (v_reply) like '%UNIX%' then
              v_system_type := 'UNIX';
              v_system_type_reply := v_reply;
            when upper (v_reply) like '%WINDOWS%' then
              v_system_type := 'WINDOWS';
              v_system_type_reply := v_reply;
            else
              v_system_type := 'INFO :: Header columns not supported yet. Contact IT Support.';
              v_system_type_reply := v_reply;
          end case;
        exception
          when others then
            -- If this SYST command fails we don't want to fail the ftp
            -- we just won't show headers on the output file for directory listings
            v_system_type := null;
            v_system_type_reply := v_reply;
        end;

        v_remotepath := p_files (i).remotepath;

        --
        -- If no path was provided we assume stay in current path
        -- let us get path and so we can perform CWD command
        --
        --
        if (v_remotepath is null
         or v_remotepath = '.') then
          /** Check PWD command **/
          n_byte_count :=
            utl_tcp.write_line (u_ctrl_con,
                                'PWD');

          if validate_reply (u_ctrl_con,
                             pwd_code,
                             v_reply) = false then
            print_output ('user_code= ' || user_code);
            print_output ('v_reply= ' || v_reply);
            raise ctrl_exception;
          else
            if nvl (upper (l_ftp_debug), 'N') = 'Y' then
              print_output ('PWD REPLY IS => ' || v_reply);
            end if;

            --
            -- Typical reply would like this :
            --
            -- 257 "/activitytracker" is current directory.
            --
            -- If your server response code does not have quotes around the
            -- path, then you will need to alter this logic here appropriately
            --
            -- So far, all of our servers seem to work this way, so I am assuming
            -- its a FTP standard
            --
            v_remotepath :=
              substr (v_reply,
                      instr (v_reply,
                             '"',
                             1) +
                      1,
                      instr (substr (v_reply,
                                     instr (v_reply,
                                            '"',
                                            1) +
                                     1),
                             '"',
                             1) -
                      1);

            --
            -- Get rid of leading quote and trailing quote that is picked up from the mainframe
            --
            if mainframe_connection then
              v_remotepath :=
                ltrim (rtrim (v_remotepath,
                              ''''),
                       '''');
            end if;

            if v_remotepath is null then
              raise ctrl_exception;
            end if;
          end if;
        end if;

        if nvl (upper (l_ftp_debug), 'N') = 'Y' then
          --                      print_output ( 'user_code= ' || user_code );
          --                      print_output ( 'v_reply= ' || v_reply );
          print_output ('PATH IS => ' || v_remotepath);
        end if;

        begin
          --
          l_step := 'PERFORMING CWD COMMAND FOR ' || v_remotepath;

          --
          if mainframe_connection then
            --
            -- Mainframe does not use unix path syntax.
            -- We will convert / (fwd slash) to a . (period)
            -- and also trim leading fwd slash
            --
            -- If already periods, then this really won't do anything
            --
            v_remotepath :=
              ltrim (v_remotepath,
                     '/');
            v_remotepath :=
              replace (v_remotepath,
                       '/',
                       '.');

            if nvl (upper (l_ftp_debug), 'N') = 'Y' then
              --                      print_output ( 'user_code= ' || user_code );
              --                      print_output ( 'v_reply= ' || v_reply );
              print_output ('MF REMOTEPATH IS => ' || v_remotepath);
            end if;

            --
            /** Change to the remotepath directory **/
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'CWD ' || '''' || v_remotepath || '''');
          else
            /** Change to the remotepath directory **/
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'CWD ' || v_remotepath);
          end if;

          if validate_reply (u_ctrl_con,
                             cwd_code,
                             v_reply) = false then
            --                      print_output ( 'user_code= ' || user_code );
            --                      print_output ( 'v_reply= ' || v_reply );
            raise ctrl_exception;
          end if;

          --
          --
          /** Switch to IMAGE mode **/
          -- In certain cases we want to switch to ASCII mode
          -- otherwise we always default to BINARY because it works fine
          -- everything. We handle the 'feature' of binary that adds carriage
          -- return to flat text files by trimming it off before sending it over
          --
          if upper (p_files (i).localpath) = 'CLOB' then
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'TYPE A');

            --
            if validate_reply (u_ctrl_con,
                               type_code,
                               v_reply) = false then
              raise ctrl_exception;
            end if;

            l_filetype := 'ASCII';
          elsif upper (p_files (i).transfer_mode) in ('LIST', 'NLST') then
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'TYPE A');

            --
            if validate_reply (u_ctrl_con,
                               type_code,
                               v_reply) = false then
              raise ctrl_exception;
            end if;

            l_filetype := 'ASCII';
          elsif mainframe_connection then
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'TYPE A');

            --
            if validate_reply (u_ctrl_con,
                               type_code,
                               v_reply) = false then
              raise ctrl_exception;
            end if;

            l_filetype := 'ASCII';
          elsif upper (p_files (i).filetype) = 'ASCII' then
            --
            -- BINARY MODE WORKS FINE FOR GENERAL PURPOSES
            -- HOWEVER WE WILL SAY FILETYPE OF ASCII SO
            -- CARRIAGE RETURNS ARE TRIMMED AND FILE
            -- IS WRITTEN OUT CORRECTLY
            --
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'TYPE I');

            --
            if validate_reply (u_ctrl_con,
                               type_code,
                               v_reply) = false then
              raise ctrl_exception;
            end if;

            l_filetype := 'ASCII';
          elsif upper (p_files (i).filetype) = 'BINARY' then
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'TYPE I');

            --
            if validate_reply (u_ctrl_con,
                               type_code,
                               v_reply) = false then
              raise ctrl_exception;
            end if;

            l_filetype := 'BINARY';
          else
            --
            -- We will default to BINARY MODE
            --
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'TYPE I');

            --
            if validate_reply (u_ctrl_con,
                               type_code,
                               v_reply) = false then
              raise ctrl_exception;
            end if;

            l_filetype := 'BINARY';
          end if;

          --
          -- We can provide a list of SITE commands by separating with | symbols
          -- This permits us to allocate space as well as submit additional commands
          -- like handling special characters
          --
          -- e.g. quote site recfm=fb lrecl=512 cyl pri=30 sec=30|quote site sbdataconn=(ibm-1047,iso8859-1)
          --
          -- quote site recfm=fb lrecl=512 cyl pri=30 sec=30         => allocate space
          -- quote site sbdataconn=(ibm-1047,iso8859-1)              => handle special characters
          --
          -- Technically, any valid FTP command could be sent here that has
          -- a success return code of 200. We just enforce it for Mainframe to
          -- make sure that it is not forgotten
          --
          -- Some other commands that have a success code of 200
          --
          -- TYPE, MODE
          --
          /** Submit QUOTE SITE commands **/
          if mainframe_connection and mainframe_cmd is not null then
            sie_07_util_chain_pkg.std_delimiters := '|';
            ln_array := ln_empty_array;
            sie_07_util_chain_pkg.parse_string (string_in                  => mainframe_cmd,
                                                atomics_list_out           => ln_array,
                                                num_atomics_out            => lncnt);

            for i_idx in 1 .. lncnt loop
              if ln_array (i_idx) <> '|' then
                v_mainframe_cmd_temp :=
                  ltrim (rtrim (replace (lower (ln_array (i_idx)),
                                         'quote',
                                         '')));
                print_output ('Executing Site Command :: ' || v_mainframe_cmd_temp);
                n_byte_count :=
                  utl_tcp.write_line (u_ctrl_con,
                                      v_mainframe_cmd_temp);

                if validate_reply (u_ctrl_con,
                                   site_code,
                                   v_reply) = false then
                  raise ctrl_exception;
                end if;
              end if;
            end loop;
          else
            --
            -- We don't require SITE Commands for non-mainframe transfers
            -- However, if it was desired, it wouldn't take much to alter
            -- this package so that additional server commands could be
            -- sent for non-mainframe ftp processes as well
            --
            -- For now we will just put a place holder here which performs
            -- a NOOP check against the remote server.
            --
            -- If your FTP server does not recognize NOOP you can comment
            -- this out. Most likely it does. In my environment the server
            -- return code is 200 when successful.
            --
            n_byte_count :=
              utl_tcp.write_line (u_ctrl_con,
                                  'NOOP');

            if validate_reply (u_ctrl_con,
                               noop_code,
                               v_reply) = false then
              raise ctrl_exception;
            end if;
          end if;

          /** Get a Passive connection to use for data transfer **/
          n_byte_count :=
            utl_tcp.write_line (u_ctrl_con,
                                'PASV');

          if validate_reply (u_ctrl_con,
                             pasv_code,
                             v_reply) = false then
            raise ctrl_exception;
          end if;

          create_pasv (substr (v_reply,
                               instr (v_reply,
                                      '(',
                                      1,
                                      1) +
                               1,
                               instr (v_reply,
                                      ')',
                                      1,
                                      1) -
                               instr (v_reply,
                                      '(',
                                      1,
                                      1) -
                               1),
                       v_pasv_host,
                       n_pasv_port);

          --

          /** Transfer Data **/
          if upper (p_files (i).transfer_mode) = 'PUT' then
            transfer_data (u_ctrl_con,
                           p_files (i).localpath,
                           p_files (i).filename,
                           l_filetype,
                           v_pasv_host,
                           n_pasv_port,
                           p_files (i).transfer_mode,
                           p_files (i).status,
                           p_files (i).error_message,
                           p_files (i).bytes_transmitted,
                           p_files (i).trans_start,
                           p_files (i).trans_end);
          elsif upper (p_files (i).transfer_mode) = 'GET' then
            transfer_data (u_ctrl_con,
                           p_files (i).localpath,
                           p_files (i).filename,
                           l_filetype,
                           v_pasv_host,
                           n_pasv_port,
                           p_files (i).transfer_mode,
                           p_files (i).status,
                           p_files (i).error_message,
                           p_files (i).bytes_transmitted,
                           p_files (i).trans_start,
                           p_files (i).trans_end);
          elsif upper (p_files (i).transfer_mode) = 'LIST' then
            transfer_data (u_ctrl_con,
                           p_files (i).localpath,
                           p_files (i).filename,
                           l_filetype,
                           v_pasv_host,
                           n_pasv_port,
                           p_files (i).transfer_mode,
                           p_files (i).status,
                           p_files (i).error_message,
                           p_files (i).bytes_transmitted,
                           p_files (i).trans_start,
                           p_files (i).trans_end);
          elsif upper (p_files (i).transfer_mode) = 'NLST' then
            transfer_data (u_ctrl_con,
                           p_files (i).localpath,
                           p_files (i).filename,
                           l_filetype,
                           v_pasv_host,
                           n_pasv_port,
                           p_files (i).transfer_mode,
                           p_files (i).status,
                           p_files (i).error_message,
                           p_files (i).bytes_transmitted,
                           p_files (i).trans_start,
                           p_files (i).trans_end);
          elsif upper (p_files (i).transfer_mode) = 'DELE' then
            transfer_data (u_ctrl_con,
                           p_files (i).localpath,
                           p_files (i).filename,
                           l_filetype,
                           v_pasv_host,
                           n_pasv_port,
                           p_files (i).transfer_mode,
                           p_files (i).status,
                           p_files (i).error_message,
                           p_files (i).bytes_transmitted,
                           p_files (i).trans_start,
                           p_files (i).trans_end);
          elsif upper (p_files (i).transfer_mode) = 'RNFR' then
            transfer_data (u_ctrl_con,
                           p_files (i).localpath,
                           p_files (i).filename,
                           l_filetype,
                           v_pasv_host,
                           n_pasv_port,
                           p_files (i).transfer_mode,
                           p_files (i).status,
                           p_files (i).error_message,
                           p_files (i).bytes_transmitted,
                           p_files (i).trans_start,
                           p_files (i).trans_end);
          else
            raise invalid_transfer;                                                           -- Raise an exception here
          end if;
        exception
          when ctrl_exception then
            p_files (i).status := 'ERROR';
            p_files (i).error_message := c_process || ' :: ' || v_reply || ' :: ' || l_step;
          when invalid_transfer then
            p_files (i).status := 'ERROR';
            p_files (i).error_message :=
              'Invalid transfer method.  Use PUT/GET/REMOVE/RENAME/LS/DIR Only.' || ' :: ' || l_step;
        end;
      end if;
    end loop;

    /** Send QUIT command **/
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_con,
                          'QUIT');
    /** Don't need to VALIDATE QUIT, just close the connection **/
    utl_tcp.close_connection (u_ctrl_con);
    return true;
  exception
    when ctrl_exception then
      p_error_msg := c_process || ' :: ' || v_reply || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
    when others then
      p_error_msg := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
  end ftp_files_stage;

  --
  -- GET_LOCAL_BINARY_DATA
  --
  -- Load local binary file into BLOB
  --
  function get_local_binary_data (p_dir in varchar2,
                                  p_file in varchar2)
    return blob is
    l_bfile                                 bfile;
    l_data                                  blob;
    l_dbdir                                 varchar2 (100) := p_dir;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.GET_LOCAL_BINARY_DATA';
  begin
    dbms_lob.createtemporary (lob_loc                    => l_data,
                              cache                      => true,
                              dur                        => dbms_lob.call);
    --
    l_bfile :=
      bfilename (l_dbdir,
                 p_file);
    --
    dbms_lob.fileopen (l_bfile,
                       dbms_lob.file_readonly);
    --
    dbms_lob.loadfromfile (l_data,
                           l_bfile,
                           dbms_lob.getlength (l_bfile));
    --
    dbms_lob.fileclose (l_bfile);
    --
    return l_data;
  --
  exception
    when others then
      print_output (c_process || ' :: ' || 'Error during GET_LOCAL_BINARY_DATA :: ' || sqlcode || ' - ' || sqlerrm);
      dbms_lob.fileclose (l_bfile);
      raise;
  end get_local_binary_data;

  --
  -- GET_REMOTE_BINARY_DATA
  --
  -- Loads remote binary file into BLOB
  --
  function get_remote_binary_data (u_ctrl_connection in out utl_tcp.connection)
    return blob is
    l_amount                                pls_integer;
    l_buffer                                raw (32767);
    l_data                                  blob;
    l_conn                                  utl_tcp.connection := u_ctrl_connection;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.GET_REMOTE_BINARY_DATA';
  begin
    dbms_lob.createtemporary (lob_loc                    => l_data,
                              cache                      => true,
                              dur                        => dbms_lob.call);

    begin
      loop
        l_amount :=
          utl_tcp.read_raw (l_conn,
                            l_buffer,
                            32767);
        dbms_lob.writeappend (l_data,
                              l_amount,
                              l_buffer);
      end loop;
    exception
      when utl_tcp.end_of_input then
        null;
      when others then
        null;
    end;

    return l_data;
  exception
    when others then
      print_output (c_process || ' :: ' || 'Error during GET_REMOTE_BINARY_DATA :: ' || sqlcode || ' - ' || sqlerrm);
      raise;
  end get_remote_binary_data;

  --
  -- GET_REMOTE_ASCII_DATA
  --
  -- Loads remote ascii file into CLOB
  --
  -- Note, we do not have a GET_LOCAL_ASCII_DATA because that code
  -- is found within the TRANSFER_DATA routine itself using UTL_FILE.GET_LINE
  -- operations
  --
  function get_remote_ascii_data (u_ctrl_connection in out utl_tcp.connection)
    return clob is
    l_amount                                pls_integer;
    l_buffer                                varchar2 (32767);
    l_data                                  clob;
    l_conn                                  utl_tcp.connection := u_ctrl_connection;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.GET_REMOTE_ASCII_DATA';
  begin
    dbms_lob.createtemporary (lob_loc                    => l_data,
                              cache                      => true,
                              dur                        => dbms_lob.call);

    begin
      loop
        --
        -- Don't forget you are planning to retrieve an ASCII file
        -- via the CLOB method, and you are planning to include the
        -- output in a message body of an email which is a formatted
        -- email message (html) or in a webpage, then don't forget to
        -- use <PRE> </PRE> tags around your content. Otherwise it
        -- will look like one big piece of text. HTML doesn't recognize
        -- the carriage return correctly otherwise.
        --
        l_buffer :=
          utl_tcp.get_line (l_conn,
                            true);

        /** Sometimes the TCP/IP buffer sends null data **/
        /** we only want to receive the actual data **/
        if l_buffer is not null then
          --
          -- We append a crlf to the end of each line
          -- so that the content from is maintained
          -- as we grab one line at a time from the remote server
          --
          l_buffer := l_buffer || utl_tcp.crlf;
          l_amount := length (l_buffer);
          dbms_lob.writeappend (l_data,
                                l_amount,
                                l_buffer);
        end if;
      end loop;
    exception
      when utl_tcp.end_of_input then
        null;
    end;

    return l_data;
  exception
    when others then
      print_output (c_process || ' :: ' || 'Error during GET_REMOTE_ASCII_DATA :: ' || sqlcode || ' - ' || sqlerrm);
      raise;
  end get_remote_ascii_data;

  --
  -- GET_REMOTE_LISTING_DATA
  --
  -- This is used for obtaining a remote directory listing
  -- and loading up into a CLOB
  --
  function get_remote_listing_data (u_ctrl_connection in out utl_tcp.connection,
                                    p_filename_filter in varchar2,
                                    p_tsfr_mode in varchar2)
    return clob is
    l_data                                  clob;
    l_conn                                  utl_tcp.connection := u_ctrl_connection;
    l_amount                                pls_integer;
    v_buffer                                varchar2 (32767);
    v_buffer_header1                        varchar2 (32767);
    v_buffer_header2                        varchar2 (32767);
    l_header_displayed                      pls_integer := 0;
    l_longdir_line_cnt                      pls_integer := 0;
    l_filename_search                       varchar2 (1000);
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.GET_REMOTE_LISTING_DATA';
  begin
    dbms_lob.createtemporary (lob_loc                    => l_data,
                              cache                      => true,
                              dur                        => dbms_lob.call);

    --
    -- Don't forget you are planning to retrieve an ASCII file
    -- via the CLOB method, and you are planning to include the
    -- output in a message body of an email which is a formatted
    -- email message (html) or in a webpage, then don't forget to
    -- use <PRE> </PRE> tags around your content. Otherwise it
    -- will look like one big piece of text. HTML doesn't recognize
    -- the carriage return correctly otherwise.
    --
    if mainframe_connection then
      loop
        begin
          v_buffer :=
            utl_tcp.get_line (l_conn,
                              true);

          --

          --
          /** Sometimes the TCP/IP buffer sends null data **/
          /** we only want to receive the actual data **/
          if v_buffer is not null then
            l_longdir_line_cnt := l_longdir_line_cnt + 1;

            --
            -- Capture the first line. On our system
            -- it is the column headers
            --
            if l_longdir_line_cnt = 1 then
              v_buffer_header1 := v_buffer;
            end if;

            --
            -- DISPLAY HEADER ROW WHEN v_SYSTEM_TYPE IS NOT NULL
            --
            case
              when l_longdir_line_cnt = 1 and upper (p_tsfr_mode) = 'LIST' and v_system_type = 'MVS' then
                v_buffer_header1 := v_buffer_header1 || utl_tcp.crlf;
                v_buffer_header2 := '------ ----    -------- --- ---- ----- ----- ----- ----- ------';
                v_buffer_header2 := v_buffer_header2 || utl_tcp.crlf;
              when l_longdir_line_cnt = 1 and upper (p_tsfr_mode) = 'LIST' and v_system_type <> 'MVS' then
                --
                -- We didn't recognize the system type so display a message
                -- that we won't be displaying the header row
                --
                v_buffer_header1 := ltrim (rtrim ('System Reply => ' || v_system_type_reply));
                v_buffer_header1 := v_buffer_header1 || utl_tcp.crlf;
                v_buffer_header2 :=
                  '************************************************************************************************';
                v_buffer_header2 := v_buffer_header2 || utl_tcp.crlf;
              else
                null;
            end case;

            --
            -- We stored the filename filter in v_filenameto
            --
            if p_filename_filter = '*' then
              if l_header_displayed = 0
             and upper (p_tsfr_mode) = 'LIST'
             and 'PLACEHOLDER ONLY. ALWAYS INCLUDES HEADER BY DEFAULT' is null then
                l_header_displayed := 1;
                l_amount := length (v_buffer_header1);
                dbms_lob.writeappend (l_data,
                                      l_amount,
                                      v_buffer_header1);
                l_amount := length (v_buffer_header2);
                dbms_lob.writeappend (l_data,
                                      l_amount,
                                      v_buffer_header2);
              end if;

              --
              -- We append a crlf to the end of each line
              -- so that the content from is maintained
              -- as we grab one line at a time from the remote server
              --
              v_buffer := v_buffer || utl_tcp.crlf;
              l_amount := length (v_buffer);
              dbms_lob.writeappend (l_data,
                                    l_amount,
                                    v_buffer);
            else
              --
              -- Here we are building our search string
              -- by replacing wildcard * with %
              -- and then encapsulating the resulting string
              -- with % on each end. We also make sure we don't
              -- have %% on the tail and lead of the search string
              --
              l_filename_search :=
                   '%'
                || rtrim (ltrim (   '%'
                                 || replace (p_filename_filter,
                                             '*',
                                             '%')
                                 || '%',
                                 '%'),
                          '%')
                || '%';

              if v_buffer like l_filename_search then
                if l_header_displayed = 0 and upper (p_tsfr_mode) = 'LIST' then
                  l_header_displayed := 1;
                  l_amount := length (v_buffer_header1);
                  dbms_lob.writeappend (l_data,
                                        l_amount,
                                        v_buffer_header1);
                  l_amount := length (v_buffer_header2);
                  dbms_lob.writeappend (l_data,
                                        l_amount,
                                        v_buffer_header2);
                end if;

                v_buffer := v_buffer || utl_tcp.crlf;
                l_amount := length (v_buffer);
                dbms_lob.writeappend (l_data,
                                      l_amount,
                                      v_buffer);
              end if;
            end if;
          end if;
        --
        exception
          when utl_tcp.end_of_input then
            exit;
        end;
      --
      end loop;
    else
      begin
        loop
          v_buffer :=
            utl_tcp.get_line (l_conn,
                              true);

          --
          /** Sometimes the TCP/IP buffer sends null data **/
          /** we only want to receive the actual data **/
          if v_buffer is not null then
            l_longdir_line_cnt := l_longdir_line_cnt + 1;

            --
            -- DISPLAY HEADER ROW WHEN v_SYSTEM_TYPE IS NOT NULL
            --
            case
              when upper (p_tsfr_mode) = 'LIST' and l_longdir_line_cnt = 1 and v_system_type = 'UNIX' then
                v_buffer_header1 := 'Permission Lnk Owner    Group         Bytes Mon Dy Time  Name';
                v_buffer_header1 := v_buffer_header1 || utl_tcp.crlf;
                v_buffer_header2 := '---------- --- -----    -----         ----- --- -- ----  ----';
                v_buffer_header2 := v_buffer_header2 || utl_tcp.crlf;
              when upper (p_tsfr_mode) = 'LIST' and l_longdir_line_cnt = 1 and v_system_type = 'NETWARE' then
                v_buffer_header1 := 'Permission   Owner                           Bytes Mon Dy DStmp Name';
                v_buffer_header1 := v_buffer_header1 || utl_tcp.crlf;
                v_buffer_header2 := '------------ --------                        ----- --- -- ----- ----';
                v_buffer_header2 := v_buffer_header2 || utl_tcp.crlf;
              when upper (p_tsfr_mode) = 'LIST' and l_longdir_line_cnt = 1 and v_system_type = 'WINDOWS' then
                v_buffer_header1 := 'Permission Lnk Owner    Group           Bytes Mon Dy DStmp Name';
                v_buffer_header1 := v_buffer_header1 || utl_tcp.crlf;
                v_buffer_header2 := '---------- --- -----    -----           ----- --- -- ----- ----';
                v_buffer_header2 := v_buffer_header2 || utl_tcp.crlf;
              else
                --
                -- We didn't recognize the system type so display a message
                -- that we won't be displaying the header row
                --
                v_buffer_header1 := ltrim (rtrim ('System Reply => ' || v_system_type_reply));
                v_buffer_header1 := v_buffer_header1 || utl_tcp.crlf;
                v_buffer_header2 :=
                  '************************************************************************************************';
                v_buffer_header2 := v_buffer_header2 || utl_tcp.crlf;
            end case;

            --
            -- We stored the filename filter in v_filenameto
            --
            if p_filename_filter = '*' then
              if l_header_displayed = 0 and upper (p_tsfr_mode) = 'LIST' then
                l_header_displayed := 1;
                l_amount := length (v_buffer_header1);
                dbms_lob.writeappend (l_data,
                                      l_amount,
                                      v_buffer_header1);
                l_amount := length (v_buffer_header2);
                dbms_lob.writeappend (l_data,
                                      l_amount,
                                      v_buffer_header2);
              end if;

              v_buffer := v_buffer || utl_tcp.crlf;
              l_amount := length (v_buffer);
              dbms_lob.writeappend (l_data,
                                    l_amount,
                                    v_buffer);
            else
              l_filename_search :=
                   '%'
                || rtrim (ltrim (   '%'
                                 || replace (p_filename_filter,
                                             '*',
                                             '%')
                                 || '%',
                                 '%'),
                          '%')
                || '%';

              if v_buffer like l_filename_search then
                if l_header_displayed = 0 and upper (p_tsfr_mode) = 'LIST' then
                  l_header_displayed := 1;
                  l_amount := length (v_buffer_header1);
                  dbms_lob.writeappend (l_data,
                                        l_amount,
                                        v_buffer_header1);
                  l_amount := length (v_buffer_header2);
                  dbms_lob.writeappend (l_data,
                                        l_amount,
                                        v_buffer_header2);
                end if;

                v_buffer := v_buffer || utl_tcp.crlf;
                l_amount := length (v_buffer);
                dbms_lob.writeappend (l_data,
                                      l_amount,
                                      v_buffer);
              end if;
            end if;
          end if;
        end loop;
      exception
        when utl_tcp.end_of_input then
          null;
      end;
    end if;                                                                            -- end of IF mainframe connection

    return l_data;
  exception
    when others then
      print_output (c_process || ' :: ' || 'Error during GET_REMOTE_LISTING_DATA :: ' || sqlcode || ' - ' || sqlerrm);
      raise;
  end get_remote_listing_data;

  --
  -- PUT_LOCAL_BINARY_DATA
  --
  -- This is used to write out a BLOB
  -- to the local filesystem after
  -- retrieving data from remote server
  --
  procedure put_local_binary_data (p_data in blob,
                                   p_dir in varchar2,
                                   p_file in varchar2) is
    l_out_file                              utl_file.file_type;
    l_buffer                                raw (32767);
    l_amount                                binary_integer := 32767;
    l_pos                                   integer := 1;
    l_blob_len                              integer;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.PUT_LOCAL_BINARY_DATA';
  begin
    l_blob_len := dbms_lob.getlength (p_data);
    l_out_file :=
      utl_file.fopen (p_dir,
                      p_file,
                      'w',
                      32767);

    while l_pos < l_blob_len loop
      dbms_lob.read (p_data,
                     l_amount,
                     l_pos,
                     l_buffer);

      if l_buffer is not null then
        utl_file.put_raw (l_out_file,
                          l_buffer,
                          true);
      end if;

      l_pos := l_pos + l_amount;
    end loop;

    utl_file.fclose (l_out_file);
  exception
    when utl_file.invalid_path then
      print_output (
           c_process
        || ' :: '
        || 'Error during PUT_LOCAL_BINARY_DATA :: '
        || 'Directory '
        || p_dir
        || ' is not available to UTL_FILE.  Check the init.ora file for valid UTL_FILE directories.'
      );
      raise;
    when utl_file.invalid_operation then
      print_output (
           c_process
        || ' :: '
        || 'Error during PUT_LOCAL_BINARY_DATA :: '
        || 'The file '
        || p_file
        || ' in the directory '
        || p_dir
        || ' could not be accessed.'
      );

      if utl_file.is_open (l_out_file) then
        utl_file.fclose (l_out_file);
      end if;

      raise;
    when utl_file.read_error then
      print_output (
           c_process
        || ' :: '
        || 'Error during PUT_LOCAL_BINARY_DATA :: '
        || 'The system encountered an error while trying to read '
        || p_file
        || ' in the directory '
        || p_dir
      );

      if utl_file.is_open (l_out_file) then
        utl_file.fclose (l_out_file);
      end if;

      raise;
    when utl_file.write_error then
      print_output (
           c_process
        || ' :: '
        || 'Error during PUT_LOCAL_BINARY_DATA :: '
        || 'The system encountered an error while trying to write to '
        || p_file
        || ' in the directory '
        || p_dir
      );

      if utl_file.is_open (l_out_file) then
        utl_file.fclose (l_out_file);
      end if;

      raise;
    when utl_file.internal_error then
      print_output (
           c_process
        || ' :: '
        || 'Error during PUT_LOCAL_BINARY_DATA :: '
        || 'The UTL_FILE package encountered an unexpected internal system error.'
      );

      if utl_file.is_open (l_out_file) then
        utl_file.fclose (l_out_file);
      end if;

      raise;
    when others then
      print_output (c_process || ' :: ' || 'Error during PUT_LOCAL_BINARY_DATA :: ' || sqlcode || ' - ' || sqlerrm);

      if utl_file.is_open (l_out_file) then
        utl_file.fclose (l_out_file);
      end if;

      raise;
  end put_local_binary_data;

  --
  -- PUT_REMOTE_BINARY_DATA
  --
  -- This is used for upload BLOB
  -- to remote server after retrieving
  -- from local filesystem or passed
  -- via parameter as a BLOB e.g. PUT_BLOB function
  -- in this package.
  --
  procedure put_remote_binary_data (u_ctrl_connection in out utl_tcp.connection,
                                    p_data in blob) is
    l_result                                pls_integer;
    l_buffer                                raw (32767);
    l_amount                                binary_integer := 32767;
    l_pos                                   integer := 1;
    l_blob_len                              integer;
    l_conn                                  utl_tcp.connection := u_ctrl_connection;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.PUT_REMOTE_BINARY_DATA';
  begin
    l_blob_len := dbms_lob.getlength (p_data);

    while l_pos < l_blob_len loop
      dbms_lob.read (p_data,
                     l_amount,
                     l_pos,
                     l_buffer);
      l_result :=
        utl_tcp.write_raw (l_conn,
                           l_buffer,
                           l_amount);
      utl_tcp.flush (l_conn);
      l_pos := l_pos + l_amount;
    end loop;
  exception
    when others then
      print_output (c_process || ' :: ' || 'Error during PUT_REMOTE_BINARY_DATA :: ' || sqlcode || ' - ' || sqlerrm);
      raise;
  end put_remote_binary_data;

  --
  -- PUT_REMOTE_ASCII_DATA
  --
  -- This is used for upload CLOB
  -- to remote server after retrieving
  -- when passed via parameter as a
  -- CLOB e.g. PUT_BLOB function in this package.
  --
  procedure put_remote_ascii_data (u_ctrl_connection in out utl_tcp.connection,
                                   p_data in clob) is
    -- --------------------------------------------------------------------------
    l_result                                pls_integer;
    l_buffer                                varchar2 (32767);
    l_amount                                binary_integer := 32767;
    l_pos                                   integer := 1;
    l_clob_len                              integer;
    l_conn                                  utl_tcp.connection := u_ctrl_connection;
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.PUT_REMOTE_ASCII_DATA';
  begin
    l_clob_len := dbms_lob.getlength (p_data);

    while l_pos < l_clob_len loop
      dbms_lob.read (p_data,
                     l_amount,
                     l_pos,
                     l_buffer);
      l_result :=
        utl_tcp.write_line (l_conn,
                            l_buffer);
      utl_tcp.flush (l_conn);
      l_pos := l_pos + l_amount;
    end loop;
  exception
    when others then
      print_output (c_process || ' :: ' || 'Error during PUT_REMOTE_ASCII_DATA :: ' || sqlcode || ' - ' || sqlerrm);
      raise;
  end put_remote_ascii_data;

  /*****************************************************************************
  **  Convenience function for single-file PUT
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function put (p_localpath in varchar2,
                p_filename in varchar2,
                p_remotepath in varchar2,
                p_username in varchar2,
                p_password in varchar2,
                p_hostname in varchar2,
                v_status   out varchar2,
                v_error_message   out varchar2,
                n_bytes_transmitted   out number,
                d_trans_start   out date,
                d_trans_end   out date,
                p_port in pls_integer default 21,
                p_filetype in varchar2 := 'ASCII',
                p_mainframe_ftp in boolean default false,
                p_mainframe_cmd in varchar2 default null)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.PUT';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    err_mf_cmd_missing                      exception;
    err_mf_cmd_mf_ftp_false                 exception;
  -- MF cmd present but identified as not a MF ftp job
  begin
    v_operation_mode := 'FILE';

    if p_mainframe_ftp and p_mainframe_cmd is null then
      raise err_mf_cmd_missing;
    elsif p_mainframe_ftp and p_mainframe_cmd is not null then
      mainframe_connection := true;
      mainframe_cmd := p_mainframe_cmd;
    elsif not p_mainframe_ftp and p_mainframe_cmd is not null then
      raise err_mf_cmd_mf_ftp_false;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    t_files (1).localpath := p_localpath;
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := p_filetype;
    t_files (1).transfer_mode := 'PUT';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when err_mf_cmd_missing then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Missing Mainframe Command Parameter. i.e. SITE command';
      return false;
    when err_mf_cmd_mf_ftp_false then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Mainframe Command Parameter present, but not a Mainframe FTP.';
      return false;
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end put;

  /*****************************************************************************
  **  Convenience function for single-file GET
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function get (p_localpath in varchar2,
                p_filename in varchar2,
                p_remotepath in varchar2,
                p_username in varchar2,
                p_password in varchar2,
                p_hostname in varchar2,
                v_status   out varchar2,
                v_error_message   out varchar2,
                n_bytes_transmitted   out number,
                d_trans_start   out date,
                d_trans_end   out date,
                p_port in pls_integer default 21,
                p_filetype in varchar2 := 'ASCII',
                p_mainframe_ftp in boolean default false,
                p_mainframe_cmd in varchar2 default null)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.GET';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    err_mf_cmd_missing                      exception;
    err_mf_cmd_mf_ftp_false                 exception;
  -- MF cmd present but identified as not a MF ftp job
  begin
    v_operation_mode := 'FILE';

    if p_mainframe_ftp and p_mainframe_cmd is null then
      raise err_mf_cmd_missing;
    elsif p_mainframe_ftp and p_mainframe_cmd is not null then
      mainframe_connection := true;
      mainframe_cmd := p_mainframe_cmd;
    elsif not p_mainframe_ftp and p_mainframe_cmd is not null then
      raise err_mf_cmd_mf_ftp_false;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    t_files (1).localpath := p_localpath;
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := p_filetype;
    t_files (1).transfer_mode := 'GET';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when err_mf_cmd_missing then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Missing Mainframe Command Parameter. i.e. SITE command';
      return false;
    when err_mf_cmd_mf_ftp_false then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Mainframe Command Parameter present, but not a Mainframe FTP.';
      return false;
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end get;

  /*****************************************************************************
  **  Convenience function for single-file DELETE
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function remove (p_localpath in varchar2,
                   p_filename in varchar2,
                   p_remotepath in varchar2,
                   p_username in varchar2,
                   p_password in varchar2,
                   p_hostname in varchar2,
                   v_status   out varchar2,
                   v_error_message   out varchar2,
                   n_bytes_transmitted   out number,
                   d_trans_start   out date,
                   d_trans_end   out date,
                   p_port in pls_integer default 21,
                   p_filetype in varchar2 := 'BINARY',
                   p_mainframe_connection in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.REMOVE';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
  begin
    v_operation_mode := 'FILE';

    if p_mainframe_connection then
      mainframe_connection := true;
      mainframe_cmd := null;
    end if;

    t_files (1).localpath := p_localpath;
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := p_filetype;
    t_files (1).transfer_mode := 'DELE';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end remove;

  /*****************************************************************************
  **  Convenience function for single-file RENAME
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function rename (p_localpath in varchar2,
                   p_filename in varchar2,
                   p_remotepath in varchar2,
                   p_username in varchar2,
                   p_password in varchar2,
                   p_hostname in varchar2,
                   v_status   out varchar2,
                   v_error_message   out varchar2,
                   n_bytes_transmitted   out number,
                   d_trans_start   out date,
                   d_trans_end   out date,
                   p_port in pls_integer default 21,
                   p_filetype in varchar2 := 'BINARY',
                   p_mainframe_connection in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.RENAME';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
  begin
    v_operation_mode := 'FILE';

    if p_mainframe_connection then
      mainframe_connection := true;
      mainframe_cmd := null;
    end if;

    t_files (1).localpath := p_localpath;
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := p_filetype;
    t_files (1).transfer_mode := 'RNFR';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end rename;

  /*****************************************************************************
  **  This is used to verify that a server is up or down or even existent
  **  for that matter
  **
  *****************************************************************************/
  function verify_server (p_remotepath in varchar2,
                          p_username in varchar2,
                          p_password in varchar2,
                          p_hostname in varchar2,
                          v_status   out varchar2,
                          v_error_message   out varchar2,
                          p_port in pls_integer default 21,
                          p_filetype in varchar2 := 'BINARY',
                          p_mainframe_connection in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.VERIFY_SERVER';
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (30) := p_password;
    v_hostname                              varchar2 (30) := p_hostname;
    v_remotepath                            varchar2 (255) := p_remotepath;
    n_port                                  pls_integer := p_port;
    u_ctrl_connection                       utl_tcp.connection;
    n_byte_count                            pls_integer;
    n_first_index                           number;
    v_msg                                   varchar2 (1000);
    v_reply                                 varchar2 (1000);
    v_pasv_host                             varchar2 (20);
    n_pasv_port                             number;
    l_step                                  varchar2 (1000);
  begin
    if p_mainframe_connection then
      mainframe_connection := true;
      mainframe_cmd := null;
    end if;

    --
    v_status := 'SUCCESS';
    v_error_message := 'Server connection is valid.';
    --Assume the overall transfer will succeed
    /** Attempt to connect to the host machine **/
    u_ctrl_con :=
      login (a_site_in                  => p_hostname,
             a_port_in                  => p_port,
             a_user_name                => v_username,
             a_user_pass                => v_password);
    --
    u_ctrl_connection := u_ctrl_con;

    --
    /** We should be logged in, time to verify remote path **/
    --
    if v_remotepath is null
    or v_remotepath = '.' then
      --
      -- Looks like no path is being declared. So let us stay where we are
      -- No CWD command required.
      --
      l_step := 'REMOTE PATH IS NULL OR CURRENT PATH';
      null;
    elsif v_remotepath is not null and v_remotepath <> '.' then
      l_step := 'PERFORMING CWD COMMAND FOR ' || v_remotepath;

      --
      --
      if mainframe_connection then
        --
        -- Mainframe does not use unix path syntax.
        -- We will convert / (fwd slash) to a . (period)
        -- and also trim leading fwd slash
        --
        -- If already periods, then this really won't do anything
        --
        v_remotepath :=
          ltrim (v_remotepath,
                 '/');
        v_remotepath :=
          replace (v_remotepath,
                   '/',
                   '.');
        --
        /** Change to the remotepath directory **/
        n_byte_count :=
          utl_tcp.write_line (u_ctrl_con,
                              'CWD ' || '''' || v_remotepath || '''');
      else
        /** Change to the remotepath directory **/
        n_byte_count :=
          utl_tcp.write_line (u_ctrl_con,
                              'CWD ' || v_remotepath);
      end if;

      --
      if validate_reply (u_ctrl_con,
                         cwd_code,
                         v_reply) = false then
        --                      print_output ( 'user_code= ' || user_code );
        --                      print_output ( 'v_reply= ' || v_reply );
        raise ctrl_exception;
      end if;
    end if;

    --
    --
    l_step := 'SEND PASV COMMAND';
    --
    --
    /** Get a Passive connection to use for data transfer **/
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_connection,
                          'PASV');

    --
    if validate_reply (u_ctrl_connection,
                       pasv_code,
                       v_reply) = false then
      raise ctrl_exception;
    end if;

    l_step := 'CREATE PASV COMMAND';
    --
    create_pasv (substr (v_reply,
                         instr (v_reply,
                                '(',
                                1,
                                1) +
                         1,
                         instr (v_reply,
                                ')',
                                1,
                                1) -
                         instr (v_reply,
                                '(',
                                1,
                                1) -
                         1),
                 v_pasv_host,
                 n_pasv_port);
    --
    l_step := 'SEND QUIT COMMAND';
    /** Send QUIT command **/
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_connection,
                          'QUIT');
    /** Don't need to VALIDATE QUIT, just close the connection **/
    l_step := 'CLOSING CONNECTION';
    utl_tcp.close_connection (u_ctrl_connection);
    return true;
  exception
    when ctrl_exception then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || v_reply || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
  end verify_server;

  /*****************************************************************************
  **  Convenience function for dir to local filename
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function dir (p_localpath in varchar2,
                p_filename_filter in varchar2 default null,
                p_dir_filename in varchar2 default 'remotedir_list.txt',
                p_remotepath in varchar2,
                p_username in varchar2,
                p_password in varchar2,
                p_hostname in varchar2,
                v_status   out varchar2,
                v_error_message   out varchar2,
                n_bytes_transmitted   out number,
                d_trans_start   out date,
                d_trans_end   out date,
                p_port in pls_integer default 21,
                p_filetype in varchar2 := 'ASCII',
                p_mainframe_ftp in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.DIR';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    l_filename_filter                       varchar2 (1000);
    l_dir_filename                          varchar2 (1000);
    l_step                                  varchar2 (1000);
  begin
    v_operation_mode := 'FILE';

    if p_mainframe_ftp then
      mainframe_connection := true;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    --
    if ltrim (rtrim (p_dir_filename)) is null then
      l_dir_filename := 'remotedir_list.txt';
    else
      l_dir_filename := ltrim (rtrim (p_dir_filename));
    end if;

    --
    if ltrim (rtrim (p_filename_filter)) is null then
      l_filename_filter := '*';
    else
      l_filename_filter := ltrim (rtrim (p_filename_filter));
    end if;

    --
    if nvl (upper (l_ftp_debug), 'N') = 'Y' then
      begin
        l_step := 'REMOVE, IF EXISTING, PREVIOUS REMOTE FILE LISTING';
        utl_file.fremove (location                   => p_localpath,
                          filename                   => l_dir_filename);
      exception
        when utl_file.invalid_path then
          l_step := 'UTL_FILE.INVALID_PATH';
        when utl_file.read_error then
          l_step := 'UTL_FILE.READ_ERROR';
        when utl_file.write_error then
          l_step := 'UTL_FILE.WRITE_ERROR';
        when utl_file.invalid_mode then
          l_step := 'UTL_FILE.INVALID_MODE';
        when utl_file.invalid_filehandle then
          l_step := 'UTL_FILE.INVALID_FILEHANDLE';
        when utl_file.invalid_operation then
          l_step := 'UTL_FILE.INVALID_OPERATION';
        when utl_file.internal_error then
          l_step := 'UTL_FILE.INTERNAL_ERROR';
        when utl_file.invalid_maxlinesize then
          l_step := 'UTL_FILE.INVALID_MAXLINESIZE';
        when value_error then
          l_step := 'UTL_FILE.VALUE_ERROR';
        when others then
          l_step := sqlcode || ' - ' || sqlerrm;
      end;

      print_output ('FTP_DEBUG :: INFO :: ' || l_step);
    end if;

    --
    t_files (1).localpath := p_localpath;
    t_files (1).filename := l_dir_filename || '#' || l_filename_filter;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := p_filetype;
    t_files (1).transfer_mode := 'LIST';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    --
    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end dir;

  /*****************************************************************************
  **  Convenience function for dir to local filename
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function ls (p_localpath in varchar2,
               p_filename_filter in varchar2 default null,
               p_dir_filename in varchar2 default 'remotedir_list.txt',
               p_remotepath in varchar2,
               p_username in varchar2,
               p_password in varchar2,
               p_hostname in varchar2,
               v_status   out varchar2,
               v_error_message   out varchar2,
               n_bytes_transmitted   out number,
               d_trans_start   out date,
               d_trans_end   out date,
               p_port in pls_integer default 21,
               p_filetype in varchar2 := 'ASCII',
               p_mainframe_ftp in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.LS';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    l_filename_filter                       varchar2 (1000);
    l_dir_filename                          varchar2 (1000);
    l_step                                  varchar2 (1000);
  begin
    v_operation_mode := 'FILE';

    if p_mainframe_ftp then
      mainframe_connection := true;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    if ltrim (rtrim (p_dir_filename)) is null then
      l_dir_filename := 'remotedir_list.txt';
    else
      l_dir_filename := ltrim (rtrim (p_dir_filename));
    end if;

    if ltrim (rtrim (p_filename_filter)) is null then
      l_filename_filter := '*';
    else
      l_filename_filter := ltrim (rtrim (p_filename_filter));
    end if;

    --
    if nvl (upper (l_ftp_debug), 'N') = 'Y' then
      begin
        l_step := 'REMOVE, IF EXISTING, PREVIOUS REMOTE FILE LISTING';
        utl_file.fremove (location                   => p_localpath,
                          filename                   => l_dir_filename);
      exception
        when utl_file.invalid_path then
          l_step := 'UTL_FILE.INVALID_PATH';
        when utl_file.read_error then
          l_step := 'UTL_FILE.READ_ERROR';
        when utl_file.write_error then
          l_step := 'UTL_FILE.WRITE_ERROR';
        when utl_file.invalid_mode then
          l_step := 'UTL_FILE.INVALID_MODE';
        when utl_file.invalid_filehandle then
          l_step := 'UTL_FILE.INVALID_FILEHANDLE';
        when utl_file.invalid_operation then
          l_step := 'UTL_FILE.INVALID_OPERATION';
        when utl_file.internal_error then
          l_step := 'UTL_FILE.INTERNAL_ERROR';
        when utl_file.invalid_maxlinesize then
          l_step := 'UTL_FILE.INVALID_MAXLINESIZE';
        when value_error then
          l_step := 'UTL_FILE.VALUE_ERROR';
        when others then
          l_step := sqlcode || ' - ' || sqlerrm;
      end;

      print_output ('FTP_DEBUG :: INFO :: ' || l_step);
    end if;

    --
    t_files (1).localpath := p_localpath;
    t_files (1).filename := l_dir_filename || '#' || l_filename_filter;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := p_filetype;
    t_files (1).transfer_mode := 'NLST';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end ls;

  --
  -- These are for future development
  --

  /*****************************************************************************
  **  Convenience function for single-file PUT
  **  Pass CLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function put_clob (p_filename in varchar2,
                     p_clob in clob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.PUT_CLOB';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    err_mf_cmd_missing                      exception;
    err_mf_cmd_mf_ftp_false                 exception;
  -- MF cmd present but identified as not a MF ftp job
  begin
    --
    -- Set our operation mode to LOB since we will uploading a
    -- LOB that was passed as a parameter
    --
    v_operation_mode := 'LOB';
    --
    -- Store our LOB parm into our global spec variable
    -- We did this to minimize modification to the existing
    -- code to ensure backwards compatibility
    --
    g_data_c := p_clob;

    if p_mainframe_ftp and p_mainframe_cmd is null then
      raise err_mf_cmd_missing;
    elsif p_mainframe_ftp and p_mainframe_cmd is not null then
      mainframe_connection := true;
      mainframe_cmd := p_mainframe_cmd;
    elsif not p_mainframe_ftp and p_mainframe_cmd is not null then
      raise err_mf_cmd_mf_ftp_false;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    --
    -- We have defined our LOB type
    -- in our localpath variable since
    -- we will not be writing out to the filesystem
    -- this value is used within the process
    -- as a flag indicator along with
    -- operation_mode and filetype to determine
    -- how request should be handled
    --
    t_files (1).localpath := 'CLOB';
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := 'ASCII';
    t_files (1).transfer_mode := 'PUT';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when err_mf_cmd_missing then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Missing Mainframe Command Parameter. i.e. SITE command';
      return false;
    when err_mf_cmd_mf_ftp_false then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Mainframe Command Parameter present, but not a Mainframe FTP.';
      return false;
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end put_clob;

  /*****************************************************************************
  **  Convenience function for single-file GET
  **  Pass CLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function get_clob (p_filename in varchar2,
                     p_clob   out clob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.GET_CLOB';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    err_mf_cmd_missing                      exception;
    err_mf_cmd_mf_ftp_false                 exception;
  -- MF cmd present but identified as not a MF ftp job
  begin
    --
    -- Set our operation mode to LOB since we will uploading a
    -- LOB that was passed as a parameter
    --
    v_operation_mode := 'LOB';

    if p_mainframe_ftp and p_mainframe_cmd is null then
      raise err_mf_cmd_missing;
    elsif p_mainframe_ftp and p_mainframe_cmd is not null then
      mainframe_connection := true;
      mainframe_cmd := p_mainframe_cmd;
    elsif not p_mainframe_ftp and p_mainframe_cmd is not null then
      raise err_mf_cmd_mf_ftp_false;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    --
    -- We have defined our LOB type
    -- in our localpath variable since
    -- we will not be writing out to the filesystem
    -- this value is used within the process
    -- as a flag indicator along with
    -- operation_mode and filetype to determine
    -- how request should be handled
    --
    t_files (1).localpath := 'CLOB';
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := 'ASCII';
    t_files (1).transfer_mode := 'GET';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    --
    -- Store our LOB parm into our global spec variable
    -- We did this to minimize modification to the existing
    -- code to ensure backwards compatibility. We then
    -- pass this LOB value back to the calling process
    -- as an out parameter
    --
    if b_ftp = false then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      p_clob := g_data_c;
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when err_mf_cmd_missing then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Missing Mainframe Command Parameter. i.e. SITE command';
      return false;
    when err_mf_cmd_mf_ftp_false then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Mainframe Command Parameter present, but not a Mainframe FTP.';
      return false;
    when others then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end get_clob;

  /*****************************************************************************
  **  Convenience function for single-file PUT
  **  Pass BLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function put_blob (p_filename in varchar2,
                     p_blob in blob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.PUT_BLOB';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    err_mf_cmd_missing                      exception;
    err_mf_cmd_mf_ftp_false                 exception;
  -- MF cmd present but identified as not a MF ftp job
  begin
    --
    -- Set our operation mode to LOB since we will uploading a
    -- LOB that was passed as a parameter
    --
    v_operation_mode := 'LOB';
    --
    -- Store our LOB parm into our global spec variable
    -- We did this to minimize modification to the existing
    -- code to ensure backwards compatibility
    --
    g_data_b := p_blob;

    if p_mainframe_ftp and p_mainframe_cmd is null then
      raise err_mf_cmd_missing;
    elsif p_mainframe_ftp and p_mainframe_cmd is not null then
      mainframe_connection := true;
      mainframe_cmd := p_mainframe_cmd;
    elsif not p_mainframe_ftp and p_mainframe_cmd is not null then
      raise err_mf_cmd_mf_ftp_false;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    --
    -- We have defined our LOB type
    -- in our localpath variable since
    -- we will not be writing out to the filesystem
    -- this value is used within the process
    -- as a flag indicator along with
    -- operation_mode and filetype to determine
    -- how request should be handled
    --
    t_files (1).localpath := 'BLOB';
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := 'BINARY';
    t_files (1).transfer_mode := 'PUT';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    if b_ftp = false then
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when err_mf_cmd_missing then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Missing Mainframe Command Parameter. i.e. SITE command';
      return false;
    when err_mf_cmd_mf_ftp_false then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Mainframe Command Parameter present, but not a Mainframe FTP.';
      return false;
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end put_blob;

  /*****************************************************************************
  **  Convenience function for single-file GET
  **  Pass BLOB for data to transfer.
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function get_blob (p_filename in varchar2,
                     p_blob   out blob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false,
                     p_mainframe_cmd in varchar2 default null)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.GET_BLOB';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    err_mf_cmd_missing                      exception;
    err_mf_cmd_mf_ftp_false                 exception;
  -- MF cmd present but identified as not a MF ftp job
  begin
    --
    -- Set our operation mode to LOB since we will uploading a
    -- LOB that was passed as a parameter
    --
    v_operation_mode := 'LOB';

    if p_mainframe_ftp and p_mainframe_cmd is null then
      raise err_mf_cmd_missing;
    elsif p_mainframe_ftp and p_mainframe_cmd is not null then
      mainframe_connection := true;
      mainframe_cmd := p_mainframe_cmd;
    elsif not p_mainframe_ftp and p_mainframe_cmd is not null then
      raise err_mf_cmd_mf_ftp_false;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    --
    -- We have defined our LOB type
    -- in our localpath variable since
    -- we will not be writing out to the filesystem
    -- this value is used within the process
    -- as a flag indicator along with
    -- operation_mode and filetype to determine
    -- how request should be handled
    --
    t_files (1).localpath := 'BLOB';
    t_files (1).filename := p_filename;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := 'BINARY';
    t_files (1).transfer_mode := 'GET';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    --
    -- Store our LOB parm into our global spec variable
    -- We did this to minimize modification to the existing
    -- code to ensure backwards compatibility. We then
    -- pass this LOB value back to the calling process
    -- as an out parameter
    --
    if b_ftp = false then
      p_blob := g_data_b;
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      p_blob := g_data_b;
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when err_mf_cmd_missing then
      p_blob := g_data_b;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Missing Mainframe Command Parameter. i.e. SITE command';
      return false;
    when err_mf_cmd_mf_ftp_false then
      p_blob := g_data_b;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || 'Mainframe Command Parameter present, but not a Mainframe FTP.';
      return false;
    when others then
      p_blob := g_data_b;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end get_blob;

  /*****************************************************************************
**  Convenience function for dir to local filename
**  Formats file information for ftp_files_stage function and calls it.
**
*****************************************************************************/
  function dir_clob (p_filename_filter in varchar2 default null,
                     p_clob   out clob,
                     p_remotepath in varchar2,
                     p_username in varchar2,
                     p_password in varchar2,
                     p_hostname in varchar2,
                     v_status   out varchar2,
                     v_error_message   out varchar2,
                     n_bytes_transmitted   out number,
                     d_trans_start   out date,
                     d_trans_end   out date,
                     p_port in pls_integer default 21,
                     p_mainframe_ftp in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.DIR_CLOB';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    l_filename_filter                       varchar2 (1000);
    l_dir_filename                          varchar2 (1000);
  begin
    --
    -- Set our operation mode to LOB since we will uploading a
    -- LOB that was passed as a parameter
    --
    v_operation_mode := 'LOB';

    if p_mainframe_ftp then
      mainframe_connection := true;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    --
    l_dir_filename := 'remotedir_list.txt';

    --
    if ltrim (rtrim (p_filename_filter)) is null then
      l_filename_filter := '*';
    else
      l_filename_filter := ltrim (rtrim (p_filename_filter));
    end if;

    --
    -- We have defined our LOB type
    -- in our localpath variable since
    -- we will not be writing out to the filesystem
    -- this value is used within the process
    -- as a flag indicator along with
    -- operation_mode and filetype to determine
    -- how request should be handled
    --
    t_files (1).localpath := 'CLOB';
    t_files (1).filename := l_dir_filename || '#' || l_filename_filter;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := 'ASCII';
    t_files (1).transfer_mode := 'LIST';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    --
    -- Store our LOB parm into our global spec variable
    -- We did this to minimize modification to the existing
    -- code to ensure backwards compatibility. We then
    -- pass this LOB value back to the calling process
    -- as an out parameter
    --
    if b_ftp = false then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      p_clob := g_data_c;
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when others then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end dir_clob;

  /*****************************************************************************
  **  Convenience function for dir to local filename
  **  Formats file information for ftp_files_stage function and calls it.
  **
  *****************************************************************************/
  function ls_clob (p_filename_filter in varchar2 default null,
                    p_clob   out clob,
                    p_remotepath in varchar2,
                    p_username in varchar2,
                    p_password in varchar2,
                    p_hostname in varchar2,
                    v_status   out varchar2,
                    v_error_message   out varchar2,
                    n_bytes_transmitted   out number,
                    d_trans_start   out date,
                    d_trans_end   out date,
                    p_port in pls_integer default 21,
                    p_filetype in varchar2 := 'ASCII',
                    p_mainframe_ftp in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.LS_CLOB';
    t_files                                 t_ftp_rec;
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (50) := p_password;
    v_hostname                              varchar2 (100) := p_hostname;
    n_port                                  pls_integer := p_port;
    v_err_msg                               varchar2 (1000);
    b_ftp                                   boolean;
    l_filename_filter                       varchar2 (1000);
    l_dir_filename                          varchar2 (1000);
  begin
    --
    -- Set our operation mode to LOB since we will uploading a
    -- LOB that was passed as a parameter
    --
    v_operation_mode := 'LOB';

    if p_mainframe_ftp then
      mainframe_connection := true;
    elsif not p_mainframe_ftp then
      mainframe_connection := false;
      mainframe_cmd := null;
    end if;

    l_dir_filename := 'remotedir_list.txt';

    if ltrim (rtrim (p_filename_filter)) is null then
      l_filename_filter := '*';
    else
      l_filename_filter := ltrim (rtrim (p_filename_filter));
    end if;

    --
    -- We have defined our LOB type
    -- in our localpath variable since
    -- we will not be writing out to the filesystem
    -- this value is used within the process
    -- as a flag indicator along with
    -- operation_mode and filetype to determine
    -- how request should be handled
    --
    t_files (1).localpath := 'CLOB';
    t_files (1).filename := l_dir_filename || '#' || l_filename_filter;
    t_files (1).remotepath := p_remotepath;
    t_files (1).filetype := 'ASCII';
    t_files (1).transfer_mode := 'NLST';
    b_ftp :=
      ftp_files_stage (v_err_msg,
                       t_files,
                       v_username,
                       v_password,
                       v_hostname,
                       n_port);

    --
    -- Store our LOB parm into our global spec variable
    -- We did this to minimize modification to the existing
    -- code to ensure backwards compatibility. We then
    -- pass this LOB value back to the calling process
    -- as an out parameter
    --
    if b_ftp = false then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := v_err_msg;
      return false;
    elsif b_ftp = true then
      p_clob := g_data_c;
      v_status := t_files (1).status;
      v_error_message := t_files (1).error_message;
      n_bytes_transmitted := t_files (1).bytes_transmitted;
      d_trans_start := t_files (1).trans_start;
      d_trans_end := t_files (1).trans_end;
      return true;
    end if;
  exception
    when others then
      p_clob := g_data_c;
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm;
      return false;
  end ls_clob;

  /*****************************************************************************
  **  This is used to create a directory on a remote server
  **
  *****************************************************************************/
  function mkdir_remote (p_remotepath in varchar2,
                         p_target_dir in varchar2,
                         p_username in varchar2,
                         p_password in varchar2,
                         p_hostname in varchar2,
                         v_status   out varchar2,
                         v_error_message   out varchar2,
                         p_port in pls_integer default 21,
                         p_mainframe_connection in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.MKDIR_REMOTE';
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (30) := p_password;
    v_hostname                              varchar2 (30) := p_hostname;
    v_remotepath                            varchar2 (255) := p_remotepath;
    n_port                                  pls_integer := p_port;
    u_ctrl_connection                       utl_tcp.connection;
    n_byte_count                            pls_integer;
    n_first_index                           number;
    v_msg                                   varchar2 (1000);
    v_reply                                 varchar2 (1000);
    v_pasv_host                             varchar2 (20);
    n_pasv_port                             number;
    l_step                                  varchar2 (1000);
  begin
    if p_mainframe_connection then
      mainframe_connection := true;
      mainframe_cmd := null;
    end if;

    --
    v_status := 'SUCCESS';
    v_error_message := 'Server connection is valid.';
    --Assume the overall transfer will succeed
    /** Attempt to connect to the host machine **/
    u_ctrl_con :=
      login (a_site_in                  => p_hostname,
             a_port_in                  => p_port,
             a_user_name                => v_username,
             a_user_pass                => v_password);
    --
    u_ctrl_connection := u_ctrl_con;

    --
    /** We should be logged in, time to verify remote path **/
    --
    if v_remotepath is null
    or v_remotepath = '.' then
      --
      -- Looks like no path is being declared. So let us stay where we are
      -- No CWD command required.
      --
      l_step := 'REMOTE PATH IS NULL OR CURRENT PATH';
      null;
    elsif v_remotepath is not null and v_remotepath <> '.' then
      l_step := 'PERFORMING CWD COMMAND FOR ' || v_remotepath;

      --
      --
      if mainframe_connection then
        --
        -- Mainframe does not use unix path syntax.
        -- We will convert / (fwd slash) to a . (period)
        -- and also trim leading fwd slash
        --
        -- If already periods, then this really won't do anything
        --
        v_remotepath :=
          ltrim (v_remotepath,
                 '/');
        v_remotepath :=
          replace (v_remotepath,
                   '/',
                   '.');
        --
        /** Change to the remotepath directory **/
        n_byte_count :=
          utl_tcp.write_line (u_ctrl_con,
                              'CWD ' || '''' || v_remotepath || '''');
      else
        /** Change to the remotepath directory **/
        n_byte_count :=
          utl_tcp.write_line (u_ctrl_con,
                              'CWD ' || v_remotepath);
      end if;

      --
      if validate_reply (u_ctrl_con,
                         cwd_code,
                         v_reply) = false then
        --                      print_output ( 'user_code= ' || user_code );
        --                      print_output ( 'v_reply= ' || v_reply );
        raise ctrl_exception;
      end if;
    end if;

    --
    if v_remotepath is null
    or v_remotepath = '.' then
      l_step := 'PERFORMING MKD COMMAND FOR ' || p_target_dir || ' in current path';
    else
      l_step := 'PERFORMING MKD COMMAND FOR ' || p_target_dir || ' in ' || v_remotepath;
    end if;

    --
    -- No separate command set for mainframe because we don't need quotes around the
    -- target directory to be created.
    --
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_con,
                          'MKD ' || p_target_dir);

    --
    if validate_reply (u_ctrl_con,
                       mkd_code,
                       v_reply) = false then
      --                      print_output ( 'user_code= ' || user_code );
      --                      print_output ( 'v_reply= ' || v_reply );
      raise ctrl_exception;
    end if;

    --
    l_step := 'SEND PASV COMMAND';
    --
    --
    /** Get a Passive connection to use for data transfer **/
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_connection,
                          'PASV');

    --
    if validate_reply (u_ctrl_connection,
                       pasv_code,
                       v_reply) = false then
      raise ctrl_exception;
    end if;

    l_step := 'CREATE PASV COMMAND';
    --
    create_pasv (substr (v_reply,
                         instr (v_reply,
                                '(',
                                1,
                                1) +
                         1,
                         instr (v_reply,
                                ')',
                                1,
                                1) -
                         instr (v_reply,
                                '(',
                                1,
                                1) -
                         1),
                 v_pasv_host,
                 n_pasv_port);
    --

    --
    l_step := 'SEND QUIT COMMAND';
    /** Send QUIT command **/
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_connection,
                          'QUIT');
    /** Don't need to VALIDATE QUIT, just close the connection **/
    l_step := 'CLOSING CONNECTION';
    utl_tcp.close_connection (u_ctrl_connection);
    return true;
  exception
    when ctrl_exception then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || v_reply || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
  end mkdir_remote;

  /*****************************************************************************
  **  This is used to remove a directory on a remote server
  **
  *****************************************************************************/
  function rmdir_remote (p_remotepath in varchar2,
                         p_target_dir in varchar2,
                         p_username in varchar2,
                         p_password in varchar2,
                         p_hostname in varchar2,
                         v_status   out varchar2,
                         v_error_message   out varchar2,
                         p_port in pls_integer default 21,
                         p_mainframe_connection in boolean default false)
    return boolean is
    c_process                      constant varchar2 (100) := 'hum_ftp_interface.RMDIR_REMOTE';
    v_username                              varchar2 (30) := p_username;
    v_password                              varchar2 (30) := p_password;
    v_hostname                              varchar2 (30) := p_hostname;
    v_remotepath                            varchar2 (255) := p_remotepath;
    n_port                                  pls_integer := p_port;
    u_ctrl_connection                       utl_tcp.connection;
    n_byte_count                            pls_integer;
    n_first_index                           number;
    v_msg                                   varchar2 (1000);
    v_reply                                 varchar2 (1000);
    v_pasv_host                             varchar2 (20);
    n_pasv_port                             number;
    l_step                                  varchar2 (1000);
  begin
    if p_mainframe_connection then
      mainframe_connection := true;
      mainframe_cmd := null;
    end if;

    --
    v_status := 'SUCCESS';
    v_error_message := 'Server connection is valid.';
    --Assume the overall transfer will succeed
    /** Attempt to connect to the host machine **/
    u_ctrl_con :=
      login (a_site_in                  => p_hostname,
             a_port_in                  => p_port,
             a_user_name                => v_username,
             a_user_pass                => v_password);
    --
    u_ctrl_connection := u_ctrl_con;

    --
    /** We should be logged in, time to verify remote path **/
    --
    if v_remotepath is null
    or v_remotepath = '.' then
      --
      -- Looks like no path is being declared. So let us stay where we are
      -- No CWD command required.
      --
      l_step := 'REMOTE PATH IS NULL OR CURRENT PATH';
      null;
    elsif v_remotepath is not null and v_remotepath <> '.' then
      l_step := 'PERFORMING CWD COMMAND FOR ' || v_remotepath;

      --
      --
      if mainframe_connection then
        --
        -- Mainframe does not use unix path syntax.
        -- We will convert / (fwd slash) to a . (period)
        -- and also trim leading fwd slash
        --
        -- If already periods, then this really won't do anything
        --
        v_remotepath :=
          ltrim (v_remotepath,
                 '/');
        v_remotepath :=
          replace (v_remotepath,
                   '/',
                   '.');
        --
        /** Change to the remotepath directory **/
        n_byte_count :=
          utl_tcp.write_line (u_ctrl_con,
                              'CWD ' || '''' || v_remotepath || '''');
      else
        /** Change to the remotepath directory **/
        n_byte_count :=
          utl_tcp.write_line (u_ctrl_con,
                              'CWD ' || v_remotepath);
      end if;

      --
      if validate_reply (u_ctrl_con,
                         cwd_code,
                         v_reply) = false then
        --                      print_output ( 'user_code= ' || user_code );
        --                      print_output ( 'v_reply= ' || v_reply );
        raise ctrl_exception;
      end if;
    end if;

    --
    if v_remotepath is null
    or v_remotepath = '.' then
      l_step := 'PERFORMING RMD COMMAND FOR ' || p_target_dir || ' in current path';
    else
      l_step := 'PERFORMING RMD COMMAND FOR ' || p_target_dir || ' in ' || v_remotepath;
    end if;

    --
    -- No separate command set for mainframe because we don't need quotes around the
    -- target directory to be created.
    --
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_con,
                          'RMD ' || p_target_dir);

    --
    if validate_reply (u_ctrl_con,
                       rmd_code,
                       v_reply) = false then
      --                      print_output ( 'user_code= ' || user_code );
      --                      print_output ( 'v_reply= ' || v_reply );
      raise ctrl_exception;
    end if;

    --
    l_step := 'SEND PASV COMMAND';
    --
    --
    /** Get a Passive connection to use for data transfer **/
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_connection,
                          'PASV');

    --
    if validate_reply (u_ctrl_connection,
                       pasv_code,
                       v_reply) = false then
      raise ctrl_exception;
    end if;

    l_step := 'CREATE PASV COMMAND';
    --
    create_pasv (substr (v_reply,
                         instr (v_reply,
                                '(',
                                1,
                                1) +
                         1,
                         instr (v_reply,
                                ')',
                                1,
                                1) -
                         instr (v_reply,
                                '(',
                                1,
                                1) -
                         1),
                 v_pasv_host,
                 n_pasv_port);
    --
    l_step := 'SEND QUIT COMMAND';
    /** Send QUIT command **/
    n_byte_count :=
      utl_tcp.write_line (u_ctrl_connection,
                          'QUIT');
    /** Don't need to VALIDATE QUIT, just close the connection **/
    l_step := 'CLOSING CONNECTION';
    utl_tcp.close_connection (u_ctrl_connection);
    return true;
  exception
    when ctrl_exception then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || v_reply || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
    when others then
      v_status := 'ERROR';
      v_error_message := c_process || ' :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || l_step;
      utl_tcp.close_all_connections;
      return false;
  end rmdir_remote;
end sie_15_ftp_noyau_pkg;
/

Prompt Package Body SIE_15_FTP_PKG;
/* Formatted on 04/12/2013 11:35:33 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_15_ftp_pkg is
  --
  -- CHANGE HISTORY
  --
  -- BCHASE        08-AUG-2006
  --                         Added exception handlers
  --                         Added logic to verify and handle INTERFACE table instead of path
  --                         for localpath entries
  --
  --
  /* Display Output. Displays DBMS_OUTPUT in chunks so we don't bust the 255 limit by accident */

  gbl_fich                                blob;
  gbo_ecrir_dirct                         boolean default true;

  procedure print_output (p_message in varchar2) is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.PRINT_OUTPUT';
  begin
    if sie_15_ftp_noyau_pkg.l_ftp_debug = 'Y' then
      null;               --ete (p_message);  #je ne sais pas si cette procédure est importante ou non : Bastien Gibrat#
    end if;
  exception
    when others then
      null;                                                           -- Ignore errors... protect buffer overflow's etc.
  end print_output;


  procedure verify_server (errbuf   out varchar2,
                           retcode   out number,
                           p_hostname in varchar2,
                           p_remotepath in varchar2,
                           p_username in varchar2,
                           p_password in varchar2,
                           p_mainframe_connection in varchar2 default 'F') is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.VERIFY_SERVER';
    lbok                                    boolean;
    p_error_msg                             varchar2 (32000);
    p_status                                varchar2 (32000);
    p_mainframe_conn                        boolean;
    p_remote_path                           varchar2 (2000);
  --
  -- This applies to Oracle Applications Environments only
  --
  --      p_request_id                  NUMBER := fnd_global.conc_request_id;
  --
  begin
    /* CLEAR PASSWORD SO IT CANNOT BE SEEN VIA CONCURRENT REQ VIEWS */
    --
    -- Change the argument identifiers to match your concurrent mgr setup
    --
    -- This applies to Oracle Applications Environments only
    --
    --      UPDATE fnd_concurrent_requests
    --      SET argument4 = '*******'
    --,         argument3 = '*******'
    --,         argument_text =
    --             REPLACE ( REPLACE ( argument_text
    --,                                argument4
    --,                                '*******' )
    --,                      argument3
    --,                      '*******' )
    --      WHERE  request_id = p_request_id;
    --
    --      COMMIT;


    if p_mainframe_connection = 'F' then
      p_mainframe_conn := false;
      p_remote_path := p_remotepath;
    else
      p_mainframe_conn := true;
      p_remote_path := p_remotepath;
    end if;

    print_output (chr (10));

    if p_mainframe_conn then
      print_output ('REMOTE FTP SERVER (mainframe) :: ' || p_hostname);
    else
      print_output ('REMOTE FTP SERVER :: ' || p_hostname);
    end if;

    print_output ('REMOTE PATH :: ' || p_remote_path);
    print_output (chr (10));
    --
    lbok :=
      sie_15_ftp_noyau_pkg.verify_server (p_remotepath               => p_remote_path,
                                          p_username                 => p_username,
                                          p_password                 => p_password,
                                          p_hostname                 => p_hostname,
                                          v_status                   => p_status,
                                          v_error_message            => p_error_msg,
                                          p_port                     => 21,
                                          p_filetype                 => 'ASCII',
                                          p_mainframe_connection     => p_mainframe_conn);

    if lbok and nvl (p_status, 'SUCCESS') = 'SUCCESS' then
      print_output (chr (10));
      print_output ('SERVER CONNECTION TO ' || p_hostname || ' IS VALID.');
      errbuf := null;
      retcode := 0;
    else
      print_output (chr (10));
      print_output (
        'ERROR :: SERVER CONNECTION TO ' || p_hostname || ' IS NOT VALID. ' || chr (10) || chr (10) || p_error_msg
      );
      errbuf := null;
      retcode := 2;
    end if;
  exception
    when others then
      print_output (chr (10));
      print_output (
           c_process
        || ' :: ERROR :: SERVER CONNECTION TO '
        || p_hostname
        || ' IS NOT VALID. '
        || chr (10)
        || chr (10)
        || sqlcode
        || ' - '
        || sqlerrm
      );
      errbuf := null;
      retcode := 2;
  end verify_server;

  procedure get_remote_file (errbuf   out varchar2,
                             retcode   out number,
                             p_hostname in varchar2,
                             p_localpath in varchar2,
                             p_filename in varchar2,
                             p_remotepath in varchar2,
                             p_username in varchar2,
                             p_password in varchar2,
                             p_port in number default 21,
                             p_filetype in varchar2 default 'ASCII',
                             p_mainframe in varchar2 default 'F',
                             p_mainframe_command in varchar2 default null) is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.GET_REMOTE_FILE';
    p_status                                varchar2 (32000);
    p_error_msg                             varchar2 (32000);
    p_elapsed_time                          varchar2 (100);
    p_files                                 varchar2 (4000);
    p_bytes_trans                           number;
    p_trans_start                           date;
    p_trans_end                             date;
    lbok                                    boolean;
    p_failed                                char (1) := 'N';
    p_mainframe_conn                        boolean;
    p_remote_path                           varchar2 (240);
    p_exists                                boolean;
    p_block_size                            binary_integer;
    l_original_filename                     varchar2 (4000);
    l_new_filename                          varchar2 (4000);
    l_success                               varchar2 (32767);
    l_dba_directory                         varchar2 (100);
    l_interface                             varchar2 (100);
    err_dba_dir_not_defined                 exception;
    err_dzero_byte_file                     exception;
  --
  -- This applies to Oracle Applications Environments only
  --
  --      p_request_id                  NUMBER := fnd_global.conc_request_id;
  --
  begin
    /* CLEAR PASSWORD SO IT CANNOT BE SEEN VIA CONCURRENT REQ VIEWS */
    --
    -- Change the argument identifiers to match your concurrent mgr setup
    --
    -- This applies to Oracle Applications Environments only
    --
    --      UPDATE fnd_concurrent_requests
    --      SET argument4 = '*******'
    --,         argument3 = '*******'
    --,         argument_text =
    --             REPLACE ( REPLACE ( argument_text
    --,                                argument4
    --,                                '*******' )
    --,                      argument3
    --,                      '*******' )
    --      WHERE  request_id = p_request_id;
    --
    --      COMMIT;
    --
    -- l_interface is the name of the DBA_DIRECTORY that you wish to use for
    -- this operation. You must have READ/WRITE permissions to this dba_directory
    --
    l_interface := upper (p_localpath);

    begin
      select   rtrim (directory_path,
                      '/')
        into   l_dba_directory
        from   all_directories
       where   directory_name = l_interface;
    exception
      when no_data_found then
        l_dba_directory := l_interface;
        raise err_dba_dir_not_defined;
    end;

    if p_mainframe = 'F' then
      p_mainframe_conn := false;
      p_remote_path := p_remotepath;
    else
      p_mainframe_conn := true;
      p_remote_path := p_remotepath;
    end if;

    if p_filetype not in ('ASCII', 'BINARY') then
      p_failed := 'Y';
      p_error_msg := 'INVALID FILETYPE DEFINED. MUST BE ASCII or BINARY.';
    end if;

    --
    if p_failed = 'N' then
      print_output (chr (10));

      if p_mainframe_conn then
        print_output ('REMOTE FTP SERVER (mainframe) :: ' || p_hostname);
      else
        print_output ('REMOTE FTP SERVER :: ' || p_hostname);
      end if;

      print_output ('REMOTE PATH :: ' || p_remote_path);
      print_output ('LOCAL PATH :: ' || l_dba_directory);

      print_output (chr (10));


      if p_mainframe_conn then
        print_output ('SITE COMMAND :: ' || p_mainframe_command);
        print_output (   'FILENAME :: '
                      || replace (p_filename,
                                  '#',
                                  ' => '));
      else
        print_output (   'FILENAME :: '
                      || replace (p_filename,
                                  '#',
                                  ' => '));
      end if;

      print_output ('TRANSFER MODE :: ' || p_filetype);
      print_output (chr (10));
      --
      -- Lets setup our output header columns
      --
      -- To process a file as a different name use the # symbol
      -- test.txt#test.txt20032801
      -- Would be used if you wanted to get the file test.txt but copy to local server as test.txt20032801
      print_output (   rpad ('FILENAME',
                             40)
                    || ' | '
                    || rpad ('STATUS',
                             15)
                    || ' | '
                    || rpad ('BYTES',
                             15)
                    || ' | '
                    || rpad ('START TIME',
                             25)
                    || ' | '
                    || rpad ('END TIME',
                             25)
                    || ' | '
                    || 'ERROR MESSAGE');
      print_output (chr (10));
      --
      p_files := p_filename;

      if gbo_ecrir_dirct then
        sie_15_ftp_noyau_pkg.mode_fichr (false);
      end if;

      lbok :=
        sie_15_ftp_noyau_pkg.get_blob (p_filename                 => p_files,
                                       p_blob                     => gbl_fich,
                                       p_remotepath               => p_remote_path,
                                       p_username                 => p_username,
                                       p_password                 => p_password,
                                       p_hostname                 => p_hostname,
                                       v_status                   => p_status,
                                       v_error_message            => p_error_msg,
                                       n_bytes_transmitted        => p_bytes_trans,
                                       d_trans_start              => p_trans_start,
                                       d_trans_end                => p_trans_end,
                                       p_port                     => p_port,
                                       p_mainframe_ftp            => p_mainframe_conn,
                                       p_mainframe_cmd            => p_mainframe_command);

      if gbo_ecrir_dirct then
        sie_15_ftp_noyau_pkg.mode_fichr (true);
      end if;

      if lbok and nvl (p_status, 'SUCCESS') = 'SUCCESS' then
        if nvl (instr (p_filename,
                       '#'),
                0) = 0 then
          l_new_filename := p_filename;
        else
          l_new_filename :=
            ltrim (rtrim (substr (p_filename,
                                  instr (p_filename,
                                         '#') +
                                  1)));
        end if;

        /* Getting filesize from local path which will show the bytes successfully written */
        if gbo_ecrir_dirct then
          utl_file.fgetattr (location                   => l_interface,
                             filename                   => l_new_filename,
                             fexists                    => p_exists,
                             file_length                => p_bytes_trans,
                             block_size                 => p_block_size);

          if p_exists                  -- If we don't see the file probably a permissions problem prevented the creation
                     then
            if p_bytes_trans = 0 then
              raise err_dzero_byte_file;
            end if;

            print_output (   rpad (replace (p_filename,
                                            '#',
                                            ' => '),
                                   40)
                          || ' | '
                          || rpad (p_status,
                                   15)
                          || ' | '
                          || rpad (to_char (p_bytes_trans),
                                   15)
                          || ' | '
                          || rpad (to_char (p_trans_start,
                                            'YYYY-MM-DD HH:MI:SS'),
                                   25)
                          || ' | '
                          || rpad (to_char (p_trans_end,
                                            'YYYY-MM-DD HH:MI:SS'),
                                   25)
                          || ' | '
                          || p_error_msg);
          else
            p_status := 'TRANSFER FAILED. FILE NOT CREATED.';
          end if;
        end if;

        if p_status <> 'SUCCESS' then
          p_failed := 'Y';
        end if;
      else
        p_failed := 'Y';
      end if;
    end if;

    if p_failed = 'N' then
      print_output (chr (10));
      print_output ('FTP PROCESS COMPLETED.');
      errbuf := null;
      retcode := 0;
    else
      print_output (chr (10));
      print_output ('ERROR :: FTP PROCESS FAILED :: ' || p_error_msg);
      errbuf := null;
      retcode := 2;
    end if;
  exception
    when err_dzero_byte_file then
      l_success := 'RETRIEVED FILE IS A ZERO-BYTE FILE OR DOES NOT EXIST [' || l_new_filename || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when err_dba_dir_not_defined then
      l_success := 'DBA DIRECTORY NOT DEFINED [' || l_dba_directory || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when others then
      print_output (chr (10));
      print_output (
        c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || p_error_msg
      );
      errbuf := null;
      retcode := 2;
  end get_remote_file;

  function get_remote_file (p_filename in varchar2,
                            p_remotepath in varchar2,
                            p_hostname in varchar2,
                            p_username in varchar2,
                            p_password in varchar2,
                            p_port in number default 21,
                            p_filetype in varchar2 default 'BINARY')
    return blob is
    vva_filtr                               varchar2 (200);
    vnu_nombr_fichr                         pls_integer;
    vva_reprt_physq                         varchar2 (200);
    vnu_presn                               pls_integer;
    vva_indic_a_charg                       varchar2 (1);
    /*vva_adres_servr                         varchar2 (200) default '192.168.1.62';
    vnu_port_servr                          number (5) default 21;
    vva_utils_servr                         varchar2 (30) default 'sie';
    vva_mot_passe_servr                     varchar2 (30) default 'sie';
    vva_type_acces                          varchar2 (23);*/
    vnu_sucrs                               number (10);

    /**/
    p_status                                varchar2 (32000);
    p_error_msg                             varchar2 (32000);
    p_elapsed_time                          varchar2 (100);
    p_remote_path                           varchar2 (2000) default p_remotepath;
    p_local_path                            varchar2 (2000);
    p_files                                 varchar2 (4000) default p_filename;
    p_bytes_trans                           number;
    p_trans_start                           date;
    p_trans_end                             date;
    lbok                                    boolean;
    lnfilescnt                              number := 0;
    l_errbuf                                varchar2 (2000);
    l_retcode                               pls_integer := 0;
    p_failed                                char (1) := 'N';
    p_database                              varchar2 (10);
    p_directory                             varchar2 (30) default 'DATA_PUMP_DIR';
  begin
    --sie_15_ftp_noyau_pkg.l_ftp_debug := 'Y';
    gbo_ecrir_dirct := false;
    get_remote_file (errbuf                     => l_errbuf,
                     retcode                    => l_retcode,
                     p_hostname                 => p_hostname,
                     p_localpath                => p_directory,
                     p_filename                 => p_files,
                     p_remotepath               => p_remote_path,
                     p_username                 => p_username,
                     p_password                 => p_password,
                     p_port                     => p_port,
                     p_filetype                 => 'BINARY');
    gbo_ecrir_dirct := true;
    return gbl_fich;
  exception
    when others then
      gbo_ecrir_dirct := true;
      raise;
  end get_remote_file;

  procedure put_remote_file (errbuf   out varchar2,
                             retcode   out number,
                             p_hostname in varchar2,
                             p_localpath in varchar2,
                             p_filename in varchar2,
                             p_remotepath in varchar2,
                             p_username in varchar2,
                             p_password in varchar2,
                             p_filetype in varchar2 default 'ASCII',
                             p_mainframe in varchar2 default 'F',
                             p_mainframe_command in varchar2 default null) is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.PUT_REMOTE_FILE';
    p_status                                varchar2 (32000);
    p_error_msg                             varchar2 (32000);
    p_elapsed_time                          varchar2 (100);
    p_files                                 varchar2 (4000);
    p_bytes_trans                           number;
    p_trans_start                           date;
    p_trans_end                             date;
    lbok                                    boolean;
    p_failed                                char (1) := 'N';
    p_mainframe_conn                        boolean;
    p_remote_path                           varchar2 (240);
    p_exists                                boolean;
    p_block_size                            binary_integer;
    l_original_filename                     varchar2 (4000);
    l_new_filename                          varchar2 (4000);
    l_success                               varchar2 (32767);
    l_dba_directory                         varchar2 (100);
    l_interface                             varchar2 (100);
    err_dba_dir_not_defined                 exception;
    err_dzero_byte_file                     exception;
  --
  -- This applies to Oracle Applications Environments only
  --
  --      p_request_id                  NUMBER := fnd_global.conc_request_id;
  --
  begin
    /* CLEAR PASSWORD SO IT CANNOT BE SEEN VIA CONCURRENT REQ VIEWS */
    --
    -- Change the argument identifiers to match your concurrent mgr setup
    --
    -- This applies to Oracle Applications Environments only
    --
    --      UPDATE fnd_concurrent_requests
    --      SET argument4 = '*******'
    --,         argument3 = '*******'
    --,         argument_text =
    --             REPLACE ( REPLACE ( argument_text
    --,                                argument4
    --,                                '*******' )
    --,                      argument3
    --,                      '*******' )
    --      WHERE  request_id = p_request_id;
    --
    --      COMMIT;
    --
    -- l_interface is the name of the DBA_DIRECTORY that you wish to use for
    -- this operation. You must have READ/WRITE permissions to this dba_directory
    --
    l_interface := upper (p_localpath);


    begin
      select   rtrim (directory_path,
                      '/')
        into   l_dba_directory
        from   all_directories
       where   directory_name = l_interface;
    exception
      when no_data_found then
        l_dba_directory := l_interface;
        raise err_dba_dir_not_defined;
    end;


    if p_mainframe = 'F' then
      p_mainframe_conn := false;
      p_remote_path := p_remotepath;
    else
      p_mainframe_conn := true;
      p_remote_path := p_remotepath;
    end if;


    if p_filetype not in ('ASCII', 'BINARY') then
      p_failed := 'Y';
      p_error_msg := 'INVALID FILETYPE DEFINED. MUST BE ASCII or BINARY.';
    end if;

    --
    if p_failed = 'N' then
      print_output (chr (10));

      if p_mainframe_conn then
        print_output ('REMOTE FTP SERVER (mainframe) :: ' || p_hostname);
      else
        print_output ('REMOTE FTP SERVER :: ' || p_hostname);
      end if;

      print_output ('REMOTE PATH :: ' || p_remote_path);
      print_output ('LOCAL PATH :: ' || l_dba_directory);

      print_output (chr (10));


      if p_mainframe_conn then
        print_output ('SITE COMMAND :: ' || p_mainframe_command);
        print_output (   'FILENAME :: '
                      || replace (p_filename,
                                  '#',
                                  ' => '));
      else
        print_output (   'FILENAME :: '
                      || replace (p_filename,
                                  '#',
                                  ' => '));
      end if;

      print_output ('TRANSFER MODE :: ' || p_filetype);
      print_output (chr (10));

      if nvl (instr (p_filename,
                     '#'),
              0) = 0 then
        l_original_filename := p_filename;
      else
        l_original_filename :=
          ltrim (rtrim (substr (p_filename,
                                1,
                                instr (p_filename,
                                       '#') -
                                1)));
      end if;

      /* Check to see if file exists before we even start */
      utl_file.fgetattr (location                   => l_interface,
                         filename                   => l_original_filename,
                         fexists                    => p_exists,
                         file_length                => p_bytes_trans,
                         block_size                 => p_block_size);

      --
      if not p_exists then
        p_failed := 'Y';
        p_error_msg := l_dba_directory || '/' || l_original_filename || ' DOES NOT EXIST.';
      else
        if p_bytes_trans = 0 then
          raise err_dzero_byte_file;
        end if;

        --
        -- Lets setup our output header columns
        --
        -- To process a file as a different name use the # symbol
        -- test.txt#test.txt20032801
        -- Would be used if you wanted to get the file test.txt but copy to local server as test.txt20032801
        print_output (   rpad ('FILENAME',
                               40)
                      || ' | '
                      || rpad ('STATUS',
                               15)
                      || ' | '
                      || rpad ('BYTES',
                               15)
                      || ' | '
                      || rpad ('START TIME',
                               25)
                      || ' | '
                      || rpad ('END TIME',
                               25)
                      || ' | '
                      || 'ERROR MESSAGE');
        print_output (chr (10));
        --
        p_files := p_filename;
        lbok :=
          sie_15_ftp_noyau_pkg.put (p_localpath                => l_interface,
                                    p_filename                 => p_files,
                                    p_remotepath               => p_remote_path,
                                    p_username                 => p_username,
                                    p_password                 => p_password,
                                    p_hostname                 => p_hostname,
                                    v_status                   => p_status,
                                    v_error_message            => p_error_msg,
                                    n_bytes_transmitted        => p_bytes_trans,
                                    d_trans_start              => p_trans_start,
                                    d_trans_end                => p_trans_end,
                                    p_port                     => 21,
                                    p_filetype                 => p_filetype,
                                    p_mainframe_ftp            => p_mainframe_conn,
                                    p_mainframe_cmd            => p_mainframe_command);

        if lbok and nvl (p_status, 'SUCCESS') = 'SUCCESS' then
          print_output (   rpad (replace (p_filename,
                                          '#',
                                          ' => '),
                                 40)
                        || ' | '
                        || rpad (p_status,
                                 15)
                        || ' | '
                        || rpad (to_char (p_bytes_trans),
                                 15)
                        || ' | '
                        || rpad (to_char (p_trans_start,
                                          'YYYY-MM-DD HH:MI:SS'),
                                 25)
                        || ' | '
                        || rpad (to_char (p_trans_end,
                                          'YYYY-MM-DD HH:MI:SS'),
                                 25)
                        || ' | '
                        || p_error_msg);

          if p_status <> 'SUCCESS' then
            p_failed := 'Y';
          end if;
        else
          p_failed := 'Y';
        end if;
      end if;
    end if;

    if p_failed = 'N' then
      print_output (chr (10));
      print_output ('FTP PROCESS COMPLETED.');
      errbuf := null;
      retcode := 0;
    else
      print_output (chr (10));
      print_output ('ERROR :: FTP PROCESS FAILED :: ' || p_error_msg);
      errbuf := null;
      retcode := 2;
    end if;
  exception
    when err_dzero_byte_file then
      l_success := 'LOCAL FILE IS A ZERO-BYTE FILE OR DOES NOT EXIST [' || l_original_filename || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when err_dba_dir_not_defined then
      l_success := 'DBA DIRECTORY NOT DEFINED [' || l_dba_directory || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when others then
      print_output (chr (10));
      print_output (
        c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || p_error_msg
      );
      errbuf := null;
      retcode := 2;
  end put_remote_file;

  procedure remove_remote_file (errbuf   out varchar2,
                                retcode   out number,
                                p_hostname in varchar2,
                                p_filename in varchar2,
                                p_remotepath in varchar2,
                                p_username in varchar2,
                                p_password in varchar2,
                                p_mainframe in varchar2 default 'F') is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.REMOTE_REMOTE_FILE';
    p_status                                varchar2 (32000);
    p_error_msg                             varchar2 (32000);
    p_elapsed_time                          varchar2 (100);
    p_files                                 varchar2 (4000);
    p_bytes_trans                           number;
    p_localpath                             char (1) := '.';
    p_trans_start                           date;
    p_trans_end                             date;
    lbok                                    boolean;
    p_failed                                char (1) := 'N';
    p_mainframe_conn                        boolean;
    p_remote_path                           varchar2 (240);
    p_exists                                boolean;
    p_block_size                            binary_integer;
  --
  -- This applies to Oracle Applications Environments only
  --
  --      p_request_id                  NUMBER := fnd_global.conc_request_id;
  --
  begin
    /* CLEAR PASSWORD SO IT CANNOT BE SEEN VIA CONCURRENT REQ VIEWS */
    --
    -- Change the argument identifiers to match your concurrent mgr setup
    --
    -- This applies to Oracle Applications Environments only
    --
    --      UPDATE fnd_concurrent_requests
    --      SET argument4 = '*******'
    --,         argument3 = '*******'
    --,         argument_text =
    --             REPLACE ( REPLACE ( argument_text
    --,                                argument4
    --,                                '*******' )
    --,                      argument3
    --,                      '*******' )
    --      WHERE  request_id = p_request_id;
    --
    --      COMMIT;


    if p_mainframe = 'F' then
      p_mainframe_conn := false;
      p_remote_path := p_remotepath;
    else
      p_mainframe_conn := true;
      p_remote_path := p_remotepath;
    end if;


    --
    if p_failed = 'N' then
      print_output (chr (10));

      if p_mainframe_conn then
        print_output ('REMOTE FTP SERVER (mainframe) :: ' || p_hostname);
      else
        print_output ('REMOTE FTP SERVER :: ' || p_hostname);
      end if;

      print_output ('REMOTE PATH :: ' || p_remote_path);
      print_output ('FILENAME :: ' || p_filename);
      print_output (chr (10));
      --
      -- Lets setup our output header columns
      --
      -- To process a file as a different name use the # symbol
      -- test.txt#test.txt20032801
      -- Would be used if you wanted to get the file test.txt but copy to local server as test.txt20032801
      print_output (   rpad ('FILENAME',
                             40)
                    || ' | '
                    || rpad ('STATUS',
                             15)
                    || ' | '
                    || rpad ('BYTES',
                             15)
                    || ' | '
                    || rpad ('START TIME',
                             25)
                    || ' | '
                    || rpad ('END TIME',
                             25)
                    || ' | '
                    || 'ERROR MESSAGE');
      print_output (chr (10));
      --
      p_files := p_filename;
      lbok :=
        sie_15_ftp_noyau_pkg.remove (p_localpath                => p_localpath,
                                     p_filename                 => p_files,
                                     p_remotepath               => p_remote_path,
                                     p_username                 => p_username,
                                     p_password                 => p_password,
                                     p_hostname                 => p_hostname,
                                     v_status                   => p_status,
                                     v_error_message            => p_error_msg,
                                     n_bytes_transmitted        => p_bytes_trans,
                                     d_trans_start              => p_trans_start,
                                     d_trans_end                => p_trans_end,
                                     p_port                     => 21,
                                     p_filetype                 => 'ASCII',
                                     p_mainframe_connection     => p_mainframe_conn);

      if lbok and nvl (p_status, 'SUCCESS') = 'SUCCESS' then
        print_output (   rpad (p_filename,
                               40)
                      || ' | '
                      || rpad (p_status,
                               15)
                      || ' | '
                      || rpad (to_char (p_bytes_trans),
                               15)
                      || ' | '
                      || rpad (to_char (p_trans_start,
                                        'YYYY-MM-DD HH:MI:SS'),
                               25)
                      || ' | '
                      || rpad (to_char (p_trans_end,
                                        'YYYY-MM-DD HH:MI:SS'),
                               25)
                      || ' | '
                      || p_error_msg);

        if p_status <> 'SUCCESS' then
          p_failed := 'Y';
        end if;
      else
        p_failed := 'Y';
      end if;
    end if;

    if p_failed = 'N' then
      print_output (chr (10));
      print_output ('FTP PROCESS COMPLETED.');
      errbuf := null;
      retcode := 0;
    else
      print_output (chr (10));
      print_output ('ERROR :: FTP PROCESS FAILED :: ' || p_error_msg);
      errbuf := null;
      retcode := 2;
    end if;
  exception
    when others then
      print_output (chr (10));
      print_output (
        c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || p_error_msg
      );
      errbuf := null;
      retcode := 2;
  end remove_remote_file;

  procedure rename_remote_file (errbuf   out varchar2,
                                retcode   out number,
                                p_hostname in varchar2,
                                p_filename in varchar2,
                                p_remotepath in varchar2,
                                p_username in varchar2,
                                p_password in varchar2,
                                p_mainframe in varchar2 default 'F') is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.RENAME_REMOTE_FILE';
    p_status                                varchar2 (32000);
    p_error_msg                             varchar2 (32000);
    p_elapsed_time                          varchar2 (100);
    p_files                                 varchar2 (4000);
    p_bytes_trans                           number;
    p_localpath                             char (1) := '.';
    p_trans_start                           date;
    p_trans_end                             date;
    lbok                                    boolean;
    p_failed                                char (1) := 'N';
    p_mainframe_conn                        boolean;
    p_remote_path                           varchar2 (240);
    p_exists                                boolean;
    p_block_size                            binary_integer;
  --
  -- This applies to Oracle Applications Environments only
  --
  --      p_request_id                  NUMBER := fnd_global.conc_request_id;
  --
  begin
    /* CLEAR PASSWORD SO IT CANNOT BE SEEN VIA CONCURRENT REQ VIEWS */
    --
    -- Change the argument identifiers to match your concurrent mgr setup
    --
    -- This applies to Oracle Applications Environments only
    --
    --      UPDATE fnd_concurrent_requests
    --      SET argument4 = '*******'
    --,         argument3 = '*******'
    --,         argument_text =
    --             REPLACE ( REPLACE ( argument_text
    --,                                argument4
    --,                                '*******' )
    --,                      argument3
    --,                      '*******' )
    --      WHERE  request_id = p_request_id;
    --
    --      COMMIT;



    if p_mainframe = 'F' then
      p_mainframe_conn := false;
      p_remote_path := p_remotepath;
    else
      p_mainframe_conn := true;
      p_remote_path := p_remotepath;
    end if;


    --
    if p_failed = 'N' then
      print_output (chr (10));

      if p_mainframe_conn then
        print_output ('REMOTE FTP SERVER (mainframe) :: ' || p_hostname);
      else
        print_output ('REMOTE FTP SERVER :: ' || p_hostname);
      end if;

      print_output ('REMOTE PATH :: ' || p_remote_path);
      print_output (   'FILENAME :: '
                    || replace (p_filename,
                                '#',
                                ' => '));
      print_output (chr (10));
      --
      -- Lets setup our output header columns
      --
      -- To process a file as a different name use the # symbol
      -- test.txt#test.txt20032801
      -- Would be used if you wanted to get the file test.txt but copy to local server as test.txt20032801
      print_output (   rpad ('FILENAME',
                             40)
                    || ' | '
                    || rpad ('STATUS',
                             15)
                    || ' | '
                    || rpad ('BYTES',
                             15)
                    || ' | '
                    || rpad ('START TIME',
                             25)
                    || ' | '
                    || rpad ('END TIME',
                             25)
                    || ' | '
                    || 'ERROR MESSAGE');
      print_output (chr (10));
      --
      p_files := p_filename;
      lbok :=
        sie_15_ftp_noyau_pkg.rename (p_localpath                => p_localpath,
                                     p_filename                 => p_files,
                                     p_remotepath               => p_remote_path,
                                     p_username                 => p_username,
                                     p_password                 => p_password,
                                     p_hostname                 => p_hostname,
                                     v_status                   => p_status,
                                     v_error_message            => p_error_msg,
                                     n_bytes_transmitted        => p_bytes_trans,
                                     d_trans_start              => p_trans_start,
                                     d_trans_end                => p_trans_end,
                                     p_port                     => 21,
                                     p_filetype                 => 'ASCII',
                                     p_mainframe_connection     => p_mainframe_conn);

      if lbok and nvl (p_status, 'SUCCESS') = 'SUCCESS' then
        print_output (   rpad (replace (p_filename,
                                        '#',
                                        ' => '),
                               40)
                      || ' | '
                      || rpad (p_status,
                               15)
                      || ' | '
                      || rpad (to_char (p_bytes_trans),
                               15)
                      || ' | '
                      || rpad (to_char (p_trans_start,
                                        'YYYY-MM-DD HH:MI:SS'),
                               25)
                      || ' | '
                      || rpad (to_char (p_trans_end,
                                        'YYYY-MM-DD HH:MI:SS'),
                               25)
                      || ' | '
                      || p_error_msg);

        if p_status <> 'SUCCESS' then
          p_failed := 'Y';
        end if;
      else
        p_failed := 'Y';
      end if;
    end if;

    if p_failed = 'N' then
      print_output (chr (10));
      print_output ('FTP PROCESS COMPLETED.');
      errbuf := null;
      retcode := 0;
    else
      print_output (chr (10));
      print_output ('ERROR :: FTP PROCESS FAILED :: ' || p_error_msg);
      errbuf := null;
      retcode := 2;
    end if;
  exception
    when others then
      print_output (chr (10));
      print_output (
        c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || p_error_msg
      );

      errbuf := null;
      retcode := 2;
  end rename_remote_file;

  /* USE THIS PROCEDURE TO COLLECT A DIRECTORY LISTING */
  /* OF REMOTE SERVER TO A FILE ON THE LOCAL DATABASE SERVER */
  /* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
  --
  -- Only return filenames
  --

  procedure get_remote_dir_short (errbuf   out varchar2,
                                  retcode   out number,
                                  p_hostname in varchar2,
                                  p_localpath in varchar2,
                                  p_filename_filter in varchar2 default null,
                                  p_dir_filename in varchar2 default 'remotedir_list.txt',
                                  p_remotepath in varchar2,
                                  p_username in varchar2,
                                  p_password in varchar2,
                                  p_mainframe in varchar2 default 'F') is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.GET_REMOTE_DIR_SHORT';
    u_filehandle                            utl_file.file_type;
    l_buffer                                varchar2 (32000);
    p_status                                varchar2 (32000);
    p_error_msg                             varchar2 (32000);
    p_elapsed_time                          varchar2 (100);
    p_files                                 varchar2 (4000);
    p_bytes_trans                           number;
    p_trans_start                           date;
    p_trans_end                             date;
    lbok                                    boolean;
    p_failed                                char (1) := 'N';
    p_mainframe_conn                        boolean;
    p_remote_path                           varchar2 (240);
    p_exists                                boolean;
    p_block_size                            binary_integer;
    l_filename_filter                       varchar2 (1000);
    l_dir_filename                          varchar2 (1000);
    l_success                               varchar2 (32767);
    l_dba_directory                         varchar2 (100);
    l_interface                             varchar2 (100);
    err_dba_dir_not_defined                 exception;
    err_dzero_byte_file                     exception;
  --
  -- This applies to Oracle Applications Environments only
  --
  --      p_request_id                  NUMBER := fnd_global.conc_request_id;
  --
  begin
    /* CLEAR PASSWORD SO IT CANNOT BE SEEN VIA CONCURRENT REQ VIEWS */
    --
    -- Change the argument identifiers to match your concurrent mgr setup
    --
    -- This applies to Oracle Applications Environments only
    --
    --      UPDATE fnd_concurrent_requests
    --      SET argument4 = '*******'
    --,         argument3 = '*******'
    --,         argument_text =
    --             REPLACE ( REPLACE ( argument_text
    --,                                argument4
    --,                                '*******' )
    --,                      argument3
    --,                      '*******' )
    --      WHERE  request_id = p_request_id;
    --
    --      COMMIT;
    --
    -- l_interface is the name of the DBA_DIRECTORY that you wish to use for
    -- this operation. You must have READ/WRITE permissions to this dba_directory
    --
    l_interface := upper (p_localpath);


    begin
      select   rtrim (directory_path,
                      '/')
        into   l_dba_directory
        from   all_directories
       where   directory_name = l_interface;
    exception
      when no_data_found then
        l_dba_directory := l_interface;
        raise err_dba_dir_not_defined;
    end;



    if p_mainframe = 'F' then
      p_mainframe_conn := false;
      p_remote_path := p_remotepath;
    else
      p_mainframe_conn := true;
      p_remote_path := p_remotepath;
    end if;

    --
    if p_failed = 'N' then
      print_output (chr (10));

      if p_mainframe_conn then
        print_output ('REMOTE FTP SERVER (mainframe) :: ' || p_hostname);
      else
        print_output ('REMOTE FTP SERVER :: ' || p_hostname);
      end if;

      print_output ('REMOTE PATH :: ' || p_remote_path);
      print_output ('LOCAL PATH :: ' || l_dba_directory);

      print_output (chr (10));

      if ltrim (rtrim (p_dir_filename)) is null then
        l_dir_filename := 'remotedir_list.txt';
      else
        l_dir_filename := ltrim (rtrim (p_dir_filename));
      end if;

      if ltrim (rtrim (p_filename_filter)) is null then
        l_filename_filter := '*';
      else
        l_filename_filter := ltrim (rtrim (p_filename_filter));
      end if;

      print_output ('DIRECTORY LISTING FILENAME :: ' || l_dir_filename);
      print_output ('FILENAME FILTER :: ' || l_filename_filter);
      print_output ('TRANSFER MODE :: ASCII');
      print_output (chr (10));
      --
      -- Lets setup our output header columns
      --
      print_output (   rpad ('DIRECTORY LISTING FILE',
                             40)
                    || ' | '
                    || rpad ('STATUS',
                             15)
                    || ' | '
                    || rpad ('BYTES',
                             15)
                    || ' | '
                    || rpad ('START TIME',
                             25)
                    || ' | '
                    || rpad ('END TIME',
                             25)
                    || ' | '
                    || 'ERROR MESSAGE');
      print_output (chr (10));
      --
      lbok :=
        sie_15_ftp_noyau_pkg.ls (p_localpath                => l_interface,
                                 p_filename_filter          => l_filename_filter,
                                 p_dir_filename             => l_dir_filename,
                                 p_remotepath               => p_remote_path,
                                 p_username                 => p_username,
                                 p_password                 => p_password,
                                 p_hostname                 => p_hostname,
                                 v_status                   => p_status,
                                 v_error_message            => p_error_msg,
                                 n_bytes_transmitted        => p_bytes_trans,
                                 d_trans_start              => p_trans_start,
                                 d_trans_end                => p_trans_end,
                                 p_port                     => 21,
                                 p_filetype                 => 'ASCII',
                                 p_mainframe_ftp            => p_mainframe_conn);

      if lbok and nvl (p_status, 'SUCCESS') = 'SUCCESS' then
        /* Getting filesize from local path which will show the bytes successfully written */
        utl_file.fgetattr (location                   => l_interface,
                           filename                   => l_dir_filename,
                           fexists                    => p_exists,
                           file_length                => p_bytes_trans,
                           block_size                 => p_block_size);

        if p_exists                    -- If we don't see the file probably a permissions problem prevented the creation
                   then
          if p_bytes_trans = 0 then
            raise err_dzero_byte_file;
          end if;

          print_output (   rpad (l_dir_filename,
                                 40)
                        || ' | '
                        || rpad (p_status,
                                 15)
                        || ' | '
                        || rpad (to_char (p_bytes_trans),
                                 15)
                        || ' | '
                        || rpad (to_char (p_trans_start,
                                          'YYYY-MM-DD HH:MI:SS'),
                                 25)
                        || ' | '
                        || rpad (to_char (p_trans_end,
                                          'YYYY-MM-DD HH:MI:SS'),
                                 25)
                        || ' | '
                        || p_error_msg);
        else
          p_status := 'TRANSFER FAILED. FILE NOT CREATED.';
        end if;

        if p_status <> 'SUCCESS' then
          p_failed := 'Y';
        end if;
      else
        p_failed := 'Y';
      end if;
    end if;

    if p_failed = 'N' then
      print_output (chr (10));
      print_output ('Directory Listing Details :: ');
      print_output (chr (10));
      --
      u_filehandle :=
        utl_file.fopen (l_interface,
                        l_dir_filename,
                        'r',
                        32000);

      loop
        begin
          utl_file.get_line (u_filehandle,
                             l_buffer);
          print_output (l_buffer);
        exception
          when no_data_found then
            exit;
        end;
      end loop;

      print_output (chr (10));
      print_output (chr (10));
      print_output ('FTP PROCESS COMPLETED.');
      errbuf := null;
      retcode := 0;
    else
      print_output (chr (10));
      print_output ('ERROR :: FTP PROCESS FAILED :: ' || p_error_msg);
      errbuf := null;
      retcode := 2;
    end if;
  exception
    when err_dzero_byte_file then
      l_success := 'RETRIEVED DIRECTORY FILE IS A ZERO-BYTE FILE OR DOES NOT EXIST [' || l_dir_filename || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when err_dba_dir_not_defined then
      l_success := 'DBA DIRECTORY NOT DEFINED [' || l_dba_directory || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when others then
      print_output (chr (10));
      print_output (
        c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || p_error_msg
      );
      errbuf := null;
      retcode := 2;
  end get_remote_dir_short;

  /* USE THIS PROCEDURE TO COLLECT A DIRECTORY LISTING */
  /* OF REMOTE SERVER TO A FILE ON THE LOCAL DATABASE SERVER */
  /* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
  --
  -- Returns full detail (timestamps,permissions, filenames, filesizes,etc)
  --

  procedure get_remote_dir_long (errbuf   out varchar2,
                                 retcode   out number,
                                 p_hostname in varchar2,
                                 p_localpath in varchar2,
                                 p_filename_filter in varchar2 default null,
                                 p_dir_filename in varchar2 default 'remotedir_list.txt',
                                 p_remotepath in varchar2,
                                 p_username in varchar2,
                                 p_password in varchar2,
                                 p_port in number default 21,
                                 p_mainframe in varchar2 default 'F') is
    c_process                      constant varchar2 (100) := 'hum_ftp_UTILITIES.GET_REMOTE_DIR_LONG';
    u_filehandle                            utl_file.file_type;
    l_buffer                                varchar2 (32000);
    p_status                                varchar2 (32000);
    p_error_msg                             varchar2 (32000);
    p_elapsed_time                          varchar2 (100);
    p_files                                 varchar2 (4000);
    p_bytes_trans                           number;
    p_trans_start                           date;
    p_trans_end                             date;
    lbok                                    boolean;
    p_failed                                char (1) := 'N';
    p_mainframe_conn                        boolean;
    p_remote_path                           varchar2 (240);
    p_exists                                boolean;
    p_block_size                            binary_integer;
    l_filename_filter                       varchar2 (1000);
    l_dir_filename                          varchar2 (1000);
    l_success                               varchar2 (32767);
    l_dba_directory                         varchar2 (100);
    l_interface                             varchar2 (100);
    err_dba_dir_not_defined                 exception;
    err_dzero_byte_file                     exception;
  --
  -- This applies to Oracle Applications Environments only
  --
  --      p_request_id                  NUMBER := fnd_global.conc_request_id;
  --
  begin
    /* CLEAR PASSWORD SO IT CANNOT BE SEEN VIA CONCURRENT REQ VIEWS */
    --
    -- Change the argument identifiers to match your concurrent mgr setup
    --
    -- This applies to Oracle Applications Environments only
    --
    --      UPDATE fnd_concurrent_requests
    --      SET argument4 = '*******'
    --,         argument3 = '*******'
    --,         argument_text =
    --             REPLACE ( REPLACE ( argument_text
    --,                                argument4
    --,                                '*******' )
    --,                      argument3
    --,                      '*******' )
    --      WHERE  request_id = p_request_id;
    --
    --      COMMIT;
    --
    -- l_interface is the name of the DBA_DIRECTORY that you wish to use for
    -- this operation. You must have READ/WRITE permissions to this dba_directory
    --
    l_interface := upper (p_localpath);


    begin
      select   rtrim (directory_path,
                      '/')
        into   l_dba_directory
        from   all_directories
       where   directory_name = l_interface;
    exception
      when no_data_found then
        l_dba_directory := l_interface;
        raise err_dba_dir_not_defined;
    end;


    if p_mainframe = 'F' then
      p_mainframe_conn := false;
      p_remote_path := p_remotepath;
    else
      p_mainframe_conn := true;
      p_remote_path := p_remotepath;
    end if;

    --
    if p_failed = 'N' then
      print_output (chr (10));

      if p_mainframe_conn then
        print_output ('REMOTE FTP SERVER (mainframe) :: ' || p_hostname);
      else
        print_output ('REMOTE FTP SERVER :: ' || p_hostname);
      end if;

      print_output ('REMOTE PATH :: ' || p_remote_path);
      print_output ('LOCAL PATH :: ' || l_dba_directory);

      print_output (chr (10));

      if ltrim (rtrim (p_dir_filename)) is null then
        l_dir_filename := 'remotedir_list.txt';
      else
        l_dir_filename := ltrim (rtrim (p_dir_filename));
      end if;

      if ltrim (rtrim (p_filename_filter)) is null then
        l_filename_filter := '*';
      else
        l_filename_filter := ltrim (rtrim (p_filename_filter));
      end if;

      print_output ('DIRECTORY LISTING FILENAME :: ' || l_dir_filename);
      print_output ('FILENAME FILTER :: ' || l_filename_filter);
      print_output ('TRANSFER MODE :: ASCII');
      print_output (chr (10));
      --
      -- Lets setup our output header columns
      --
      print_output (   rpad ('DIRECTORY LISTING FILE',
                             40)
                    || ' | '
                    || rpad ('STATUS',
                             15)
                    || ' | '
                    || rpad ('BYTES',
                             15)
                    || ' | '
                    || rpad ('START TIME',
                             25)
                    || ' | '
                    || rpad ('END TIME',
                             25)
                    || ' | '
                    || 'ERROR MESSAGE');
      print_output (chr (10));
      --
      lbok :=
        sie_15_ftp_noyau_pkg.dir (p_localpath                => l_interface,
                                  p_filename_filter          => l_filename_filter,
                                  p_dir_filename             => l_dir_filename,
                                  p_remotepath               => p_remote_path,
                                  p_username                 => p_username,
                                  p_password                 => p_password,
                                  p_hostname                 => p_hostname,
                                  v_status                   => p_status,
                                  v_error_message            => p_error_msg,
                                  n_bytes_transmitted        => p_bytes_trans,
                                  d_trans_start              => p_trans_start,
                                  d_trans_end                => p_trans_end,
                                  p_port                     => p_port,
                                  p_filetype                 => 'ASCII',
                                  p_mainframe_ftp            => p_mainframe_conn);

      if lbok and nvl (p_status, 'SUCCESS') = 'SUCCESS' then
        /* Getting filesize from local path which will show the bytes successfully written */
        utl_file.fgetattr (location                   => l_interface,
                           filename                   => l_dir_filename,
                           fexists                    => p_exists,
                           file_length                => p_bytes_trans,
                           block_size                 => p_block_size);

        if p_exists                    -- If we don't see the file probably a permissions problem prevented the creation
                   then
          if p_bytes_trans = 0 then
            raise err_dzero_byte_file;
          end if;

          print_output (   rpad (l_dir_filename,
                                 40)
                        || ' | '
                        || rpad (p_status,
                                 15)
                        || ' | '
                        || rpad (to_char (p_bytes_trans),
                                 15)
                        || ' | '
                        || rpad (to_char (p_trans_start,
                                          'YYYY-MM-DD HH:MI:SS'),
                                 25)
                        || ' | '
                        || rpad (to_char (p_trans_end,
                                          'YYYY-MM-DD HH:MI:SS'),
                                 25)
                        || ' | '
                        || p_error_msg);
        else
          p_status := 'TRANSFER FAILED. FILE NOT CREATED.';
        end if;

        if p_status <> 'SUCCESS' then
          p_failed := 'Y';
        end if;
      else
        p_failed := 'Y';
      end if;
    end if;

    if p_failed = 'N' then
      print_output (chr (10));
      print_output ('Directory Listing Details :: ');
      print_output (chr (10));
      --
      u_filehandle :=
        utl_file.fopen (l_interface,
                        l_dir_filename,
                        'r',
                        32000);

      loop
        begin
          utl_file.get_line (u_filehandle,
                             l_buffer);
          print_output (l_buffer);
        exception
          when no_data_found then
            exit;
        end;
      end loop;

      print_output (chr (10));
      print_output (chr (10));
      print_output ('FTP PROCESS COMPLETED.');
      errbuf := null;
      retcode := 0;
    else
      print_output (chr (10));
      print_output ('ERROR :: FTP PROCESS FAILED :: ' || p_error_msg);
      errbuf := null;
      retcode := 2;
    end if;
  exception
    when err_dzero_byte_file then
      l_success := 'RETRIEVED DIRECTORY FILE IS A ZERO-BYTE FILE OR DOES NOT EXIST [' || l_dir_filename || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when err_dba_dir_not_defined then
      l_success := 'DBA DIRECTORY NOT DEFINED [' || l_dba_directory || ']';
      print_output (chr (10));
      print_output (c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || l_success);
      errbuf := null;
      retcode := 2;
    when others then
      print_output (chr (10));
      print_output (
        c_process || ' :: ERROR :: FTP PROCESS FAILED :: ' || sqlcode || ' - ' || sqlerrm || ' :: ' || p_error_msg
      );
      errbuf := null;
      retcode := 2;
  end get_remote_dir_long;

  /* Use this routine to return a failure code if not in production */
  /* This would be used as a first stage in a request set to ensure */
  /* a request set that includes the above FTP routines, that it    */
  /* it would not fire off if executed in a test instance.          */
  /*                                                                */
  /* It would require someone to skip the first step to make it the */
  /* request set run. However, in that event, they need to change   */
  /* the necessary parameters to control the correct user/password  */
  /* and server/path information                                    */
  /*                           */
  /* We have a custom package and table that we use to identify     */
  /* Production/QA/Test Instances. This data is used by shell       */
  /* scripts, PLSQL, etc. to alter behavior with respect to the     */
  /* Oracle environment. It ensures that we do not launch processes */
  /* in non-production environments, or if we wish them to launch   */
  /* how they launch (email addresses used, ftp servers used etc.)  */
  /* can be controlled. You could easily build something similar    */
  /*
     PROCEDURE is_not_prod (
        errbuf                     OUT      VARCHAR2
  ,     retcode                    OUT      NUMBER )
     IS
        c_process            CONSTANT VARCHAR2 ( 100 )
                                             := 'hum_ftp_UTILITIES.IS_NOT_PROD';
        l_step                        VARCHAR2 ( 1000 );
     BEGIN
        l_step := c_process || ' :: Executing HUM_MACHINE_INFO.IS_PROD ';

  --
  -- We built a table that has instances referenced in it with an instance type
  -- identifier to indicate usage. We then built a function that checked the type
  -- for current oracle instance... it returned a yes or no if it was identified
  -- as a production environment.
  --
  -- Although not included in this document set, it would be easy enough
  -- for someone to add back in.
  --
  --      IF hum_machine_info.is_prod ( p_database ) = 'Y'
  --      THEN
  --         l_step := c_process || ' :: PRODUCTION ENVIRONMENT DETECTED ';
  --         print_output ( l_step);
  --         errbuf := NULL;
  --         retcode := 0;
  --      ELSE
  --         l_step := c_process || ' :: NON-PRODUCTION ENVIRONMENT DETECTED ';
  --         print_output ( l_step);
  --         errbuf := NULL;
  --         retcode := 2;
  --      END IF;
     EXCEPTION
        WHEN OTHERS
        THEN
           print_output (    c_process
                                         || ' :: ERROR :: '
                                         || l_step
                                         || ' :: '
                                         || SQLCODE
                                         || ' - '
                                         || SQLERRM);
           errbuf := NULL;
           retcode := 2;
     END is_not_prod;
  */

  function list_dir_sql
    return typ_fichr_sql
    pipelined is
  begin
    if sie_15_ftp_noyau_pkg.t_fichr.count != 0 then
      for i in sie_15_ftp_noyau_pkg.t_fichr.first () .. sie_15_ftp_noyau_pkg.t_fichr.last () loop
        pipe row (sie_15_ftp_noyau_pkg.t_fichr (i));
      end loop;
    end if;
  end list_dir_sql;
end sie_15_ftp_pkg;
/

Prompt Package Body SIE_15_HTP_PKG;
/* Formatted on 04/12/2013 11:35:33 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_15_HTP_PKG" as
  gar_tampn                               owa.vc_arr;
  gbo_ecrit_difr                          boolean default false;

  type typ_subst is record
  (
    champ_subtr                             varchar2 (30),
    valr_de_subst                           varchar2 (100)
  );

  type typ_subst_carct is record
  (
    champ_subtr                             varchar2 (2),
    valr_de_subst                           varchar2 (10)
  );

  type typ_tab_subst is table of typ_subst
                          index by pls_integer;

  type typ_tab_subst_carct is table of typ_subst_carct
                                index by pls_integer;

  gta_subst                               typ_tab_subst;
  gta_subst_carct                         typ_tab_subst_carct;

  procedure efect_subst (pcl_clob in out nocopy clob) is
  begin
    for i in gta_subst.first () .. gta_subst.last () loop
      /*Déterminer si au moins une occurence*/
      sie_07_clob_pkg.replc (pcl_clob,
                             gta_subst (i).champ_subtr,
                             gta_subst (i).valr_de_subst);
    end loop;
  end efect_subst;

  procedure ecrit_difr (pbo_ecrit_difr in boolean default true) is
  begin
    gbo_ecrit_difr := pbo_ecrit_difr;
  end;

  procedure vider is
  begin
    gar_tampn.delete ();
  end;

  function echap_atrib (pva_texte in varchar2)
    return varchar2 is
    vva_echap                               varchar2 (32000) default pva_texte;
  begin
    vva_echap :=
      replace (vva_echap,
               '&',
               '&amp;');
    vva_echap :=
      replace (vva_echap,
               '"',
               '&quot;');
    vva_echap :=
      replace (vva_echap,
               chr (13) || chr (10),
               ' ');
    vva_echap :=
      replace (vva_echap,
               chr (13),
               ' ');
    vva_echap :=
      replace (vva_echap,
               chr (10),
               ' ');
    return vva_echap;
  end;

  function echap_url (pva_texte in varchar2)
    return varchar2 is
    vva_echap                               varchar2 (32000) default pva_texte;
  begin
    -- Débuter par le %, sinon problème
    vva_echap :=
      replace (vva_echap,
               '%',
               '%25');
    -- Caractères réservés
    vva_echap :=
      replace (vva_echap,
               '$',
               '%24');
    vva_echap :=
      replace (vva_echap,
               '&',
               '%26');
    vva_echap :=
      replace (vva_echap,
               '+',
               '%2B');
    vva_echap :=
      replace (vva_echap,
               ',',
               '%2C');
    vva_echap :=
      replace (vva_echap,
               '/',
               '%2F');
    vva_echap :=
      replace (vva_echap,
               ':',
               '%3A');
    vva_echap :=
      replace (vva_echap,
               ';',
               '%3B');
    vva_echap :=
      replace (vva_echap,
               '=',
               '%3D');
    vva_echap :=
      replace (vva_echap,
               '?',
               '%3F');
    vva_echap :=
      replace (vva_echap,
               '@',
               '%40');
    -- Autres caractères
    vva_echap :=
      replace (vva_echap,
               ' ',
               '%20');
    vva_echap :=
      replace (vva_echap,
               '"',
               '%22');
    vva_echap :=
      replace (vva_echap,
               '<',
               '%3C');
    vva_echap :=
      replace (vva_echap,
               '>',
               '%3E');
    vva_echap :=
      replace (vva_echap,
               '#',
               '%23');
    vva_echap :=
      replace (vva_echap,
               '{',
               '%7B');
    vva_echap :=
      replace (vva_echap,
               '}',
               '%7D');
    vva_echap :=
      replace (vva_echap,
               '|',
               '%7C');
    vva_echap :=
      replace (vva_echap,
               '\',
               '%5C');
    vva_echap :=
      replace (vva_echap,
               '^',
               '%5E');
    vva_echap :=
      replace (vva_echap,
               '~',
               '%7E');
    vva_echap :=
      replace (vva_echap,
               '[',
               '%5B');
    vva_echap :=
      replace (vva_echap,
               ']',
               '%5D');
    vva_echap :=
      replace (vva_echap,
               '`',
               '%60');
    return vva_echap;
  end;

  function echap (pva_texte in varchar2,
                  pva_rempl_retr_br in varchar2 default 'N')
    return varchar2 is
    pva_echap                               varchar2 (32000);
  begin
    pva_echap :=
      replace (pva_texte,
               '&',
               '&amp;');
    pva_echap :=
      replace (pva_echap,
               '<',
               '&lt;');
    pva_echap :=
      replace (pva_echap,
               '>',
               '&gt;');

    if pva_rempl_retr_br = 'O' then
      pva_echap :=
        replace (pva_echap,
                 chr (13) || chr (10),
                 chr (10));
      pva_echap :=
        replace (pva_echap,
                 chr (13),
                 chr (10));
      pva_echap :=
        replace (pva_echap,
                 chr (10),
                 '<br/>' || chr (10));
    end if;

    return pva_echap;
  end;

  procedure echap (pva_texte in varchar2                     /*,
                              pva_rempl_retr_br   in varchar2 default 'N'*/
                                        ) is
  begin
    ecrir (echap (pva_texte                                                                      /*, pva_rempl_retr_br*/
                           ));
  end;

  procedure echap                                                 /*(
                                                    pva_rempl_retr_br   in varchar2 default 'N')*/
                 is
  begin
    for i in gar_tampn.first () .. gar_tampn.last () loop
      gar_tampn (i) := echap (gar_tampn (i)                                                      /*, pva_rempl_retr_br*/
                                           );
    end loop;
  end;

  procedure ecrir (pva_ligne in varchar2,
                   pbo_retr in boolean default true) is
    vva_tampn                               varchar2 (32000);
  begin
    vva_tampn := pva_ligne;

    if pbo_retr then
      vva_tampn := vva_tampn || chr (10);
    end if;

    if gbo_ecrit_difr then
      gar_tampn (gar_tampn.count + 1) := vva_tampn;
    else
      htp.prn (vva_tampn);
    end if;
  end;

  procedure ecrir is
  begin
    for i in gar_tampn.first () .. gar_tampn.last () loop
      htp.prn (gar_tampn (i));
    end loop;

    vider ();
  end;

  function obten (pbo_vider in boolean default true)
    return varchar2 is
    vbi_index                               binary_integer;
    vva_conct                               varchar2 (32000) default null;
  begin
    vbi_index := gar_tampn.first ();

    while vbi_index is not null loop
      if length (vva_conct) + length (gar_tampn (vbi_index)) > 32000 then
        vva_conct :=
             vva_conct
          || substr (gar_tampn (vbi_index),
                     1,
                     32000 - length (vva_conct));
      else
        vva_conct := vva_conct || gar_tampn (vbi_index);
      end if;

      vbi_index := gar_tampn.next (vbi_index);
    end loop;

    if pbo_vider then
      vider ();
    end if;
  end;

  function obten_arr (pbo_vider in boolean default true)
    return owa.vc_arr is
    vbi_index                               binary_integer;
    var_retr                                owa.vc_arr;
  begin
    vbi_index := gar_tampn.first ();

    while vbi_index is not null loop
      var_retr (vbi_index) := gar_tampn (vbi_index);
      vbi_index := gar_tampn.next (vbi_index);
    end loop;

    if pbo_vider then
      vider ();
    end if;

    return var_retr;
  end;

  function ouvri_bals (pva_nom in varchar2,
                       pva_parmt_1 in varchar2 default null,
                       pva_valr_1 in varchar2 default null,
                       pva_parmt_2 in varchar2 default null,
                       pva_valr_2 in varchar2 default null,
                       pva_parmt_3 in varchar2 default null,
                       pva_valr_3 in varchar2 default null,
                       pva_parmt_4 in varchar2 default null,
                       pva_valr_4 in varchar2 default null,
                       pva_parmt_5 in varchar2 default null,
                       pva_valr_5 in varchar2 default null,
                       pva_parmt_6 in varchar2 default null,
                       pva_valr_6 in varchar2 default null,
                       pva_parmt_7 in varchar2 default null,
                       pva_valr_7 in varchar2 default null,
                       pva_parmt_8 in varchar2 default null,
                       pva_valr_8 in varchar2 default null,
                       pva_parmt_9 in varchar2 default null,
                       pva_valr_9 in varchar2 default null,
                       pva_parmt_10 in varchar2 default null,
                       pva_valr_10 in varchar2 default null,
                       pva_extra in varchar2 default null)
    return varchar2 is
    vva_nom                                 varchar2 (30);
    vbo_fermr_bals                          boolean;
    vva_bals                                varchar2 (32000);
  begin
    vbo_fermr_bals := (pva_nom like '%/');

    if vbo_fermr_bals then
      vva_nom :=
        substr (pva_nom,
                1,
                length (pva_nom) - 1);
    else
      vva_nom := pva_nom;
    end if;

    vva_bals := '<' || vva_nom;

    if pva_parmt_1 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_1 || '="' || echap_atrib (pva_valr_1) || '"';
    end if;

    if pva_parmt_2 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_2 || '="' || echap_atrib (pva_valr_2) || '"';
    end if;

    if pva_parmt_3 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_3 || '="' || echap_atrib (pva_valr_3) || '"';
    end if;

    if pva_parmt_4 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_4 || '="' || echap_atrib (pva_valr_4) || '"';
    end if;

    if pva_parmt_5 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_5 || '="' || echap_atrib (pva_valr_5) || '"';
    end if;

    if pva_parmt_6 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_6 || '="' || echap_atrib (pva_valr_6) || '"';
    end if;

    if pva_parmt_7 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_7 || '="' || echap_atrib (pva_valr_7) || '"';
    end if;

    if pva_parmt_8 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_8 || '="' || echap_atrib (pva_valr_8) || '"';
    end if;

    if pva_parmt_9 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_9 || '="' || echap_atrib (pva_valr_9) || '"';
    end if;

    if pva_parmt_10 is not null then
      vva_bals := vva_bals || ' ' || pva_parmt_10 || '="' || echap_atrib (pva_valr_10) || '"';
    end if;

    if pva_extra is not null then
      vva_bals := vva_bals || ' ' || pva_extra;
    end if;

    if vbo_fermr_bals then
      vva_bals := vva_bals || ' /';
    end if;

    vva_bals := vva_bals || '>';
    return vva_bals;
  end ouvri_bals;

  procedure ouvri_bals (pva_nom in varchar2,
                        pva_parmt_1 in varchar2 default null,
                        pva_valr_1 in varchar2 default null,
                        pva_parmt_2 in varchar2 default null,
                        pva_valr_2 in varchar2 default null,
                        pva_parmt_3 in varchar2 default null,
                        pva_valr_3 in varchar2 default null,
                        pva_parmt_4 in varchar2 default null,
                        pva_valr_4 in varchar2 default null,
                        pva_parmt_5 in varchar2 default null,
                        pva_valr_5 in varchar2 default null,
                        pva_parmt_6 in varchar2 default null,
                        pva_valr_6 in varchar2 default null,
                        pva_parmt_7 in varchar2 default null,
                        pva_valr_7 in varchar2 default null,
                        pva_parmt_8 in varchar2 default null,
                        pva_valr_8 in varchar2 default null,
                        pva_parmt_9 in varchar2 default null,
                        pva_valr_9 in varchar2 default null,
                        pva_parmt_10 in varchar2 default null,
                        pva_valr_10 in varchar2 default null,
                        pva_extra in varchar2 default null) is
  begin
    ecrir (ouvri_bals (pva_nom,
                       pva_parmt_1,
                       pva_valr_1,
                       pva_parmt_2,
                       pva_valr_2,
                       pva_parmt_3,
                       pva_valr_3,
                       pva_parmt_4,
                       pva_valr_4,
                       pva_parmt_5,
                       pva_valr_5,
                       pva_parmt_6,
                       pva_valr_6,
                       pva_parmt_7,
                       pva_valr_7,
                       pva_parmt_8,
                       pva_valr_8,
                       pva_parmt_9,
                       pva_valr_9,
                       pva_parmt_10,
                       pva_valr_10,
                       pva_extra),
           true);
  end;

  function fermr_bals (pva_nom in varchar2)
    return varchar2 is
  begin
    return '</' || pva_nom || '>';
  end;

  procedure fermr_bals (pva_nom in varchar2) is
  begin
    ecrir (fermr_bals (pva_nom),
           true);
  end;

  function style (pva_parmt_1 in varchar2 default null,
                  pva_valr_1 in varchar2 default null,
                  pva_parmt_2 in varchar2 default null,
                  pva_valr_2 in varchar2 default null,
                  pva_parmt_3 in varchar2 default null,
                  pva_valr_3 in varchar2 default null,
                  pva_parmt_4 in varchar2 default null,
                  pva_valr_4 in varchar2 default null,
                  pva_parmt_5 in varchar2 default null,
                  pva_valr_5 in varchar2 default null,
                  pva_parmt_6 in varchar2 default null,
                  pva_valr_6 in varchar2 default null,
                  pva_parmt_7 in varchar2 default null,
                  pva_valr_7 in varchar2 default null,
                  pva_parmt_8 in varchar2 default null,
                  pva_valr_8 in varchar2 default null,
                  pva_parmt_9 in varchar2 default null,
                  pva_valr_9 in varchar2 default null,
                  pva_parmt_10 in varchar2 default null,
                  pva_valr_10 in varchar2 default null,
                  pva_extra in varchar2 default null)
    return varchar2 is
    vva_style                               varchar2 (32000);
  begin
    vva_style := null;

    if pva_parmt_1 is not null then
      vva_style := vva_style || pva_parmt_1 || ':' || pva_valr_1 || ';';
    end if;

    if pva_parmt_2 is not null then
      vva_style := vva_style || pva_parmt_2 || ':' || pva_valr_2 || ';';
    end if;

    if pva_parmt_3 is not null then
      vva_style := vva_style || pva_parmt_3 || ':' || pva_valr_3 || ';';
    end if;

    if pva_parmt_4 is not null then
      vva_style := vva_style || pva_parmt_4 || ':' || pva_valr_4 || ';';
    end if;

    if pva_parmt_5 is not null then
      vva_style := vva_style || pva_parmt_5 || ':' || pva_valr_5 || ';';
    end if;

    if pva_parmt_6 is not null then
      vva_style := vva_style || pva_parmt_6 || ':' || pva_valr_6 || ';';
    end if;

    if pva_parmt_7 is not null then
      vva_style := vva_style || pva_parmt_7 || ':' || pva_valr_7 || ';';
    end if;

    if pva_parmt_8 is not null then
      vva_style := vva_style || pva_parmt_8 || ':' || pva_valr_8 || ';';
    end if;

    if pva_parmt_9 is not null then
      vva_style := vva_style || pva_parmt_9 || ':' || pva_valr_9 || ';';
    end if;

    if pva_parmt_10 is not null then
      vva_style := vva_style || pva_parmt_10 || ':' || pva_valr_10 || ';';
    end if;

    if pva_extra is not null then
      if vva_style is not null and pva_extra not like ';%' then
        vva_style := vva_style || ';';
      end if;

      vva_style := vva_style || pva_extra;
    end if;

    return vva_style;
  end;

  function bals_anchor (pva_url in varchar2,
                        pva_text in varchar2,
                        pva_parmt_1 in varchar2 default null,
                        pva_valr_1 in varchar2 default null,
                        pva_parmt_2 in varchar2 default null,
                        pva_valr_2 in varchar2 default null,
                        pva_parmt_3 in varchar2 default null,
                        pva_valr_3 in varchar2 default null,
                        pva_parmt_4 in varchar2 default null,
                        pva_valr_4 in varchar2 default null,
                        pva_parmt_5 in varchar2 default null,
                        pva_valr_5 in varchar2 default null,
                        pva_parmt_6 in varchar2 default null,
                        pva_valr_6 in varchar2 default null,
                        pva_parmt_7 in varchar2 default null,
                        pva_valr_7 in varchar2 default null,
                        pva_parmt_8 in varchar2 default null,
                        pva_valr_8 in varchar2 default null,
                        pva_parmt_9 in varchar2 default null,
                        pva_valr_9 in varchar2 default null,
                        pva_extra in varchar2 default null)
    return varchar2 is
  begin
    return    ouvri_bals ('a',
                          'href',
                          pva_url,
                          pva_parmt_1,
                          pva_valr_1,
                          pva_parmt_2,
                          pva_valr_2,
                          pva_parmt_3,
                          pva_valr_3,
                          pva_parmt_4,
                          pva_valr_4,
                          pva_parmt_5,
                          pva_valr_5,
                          pva_parmt_6,
                          pva_valr_6,
                          pva_parmt_7,
                          pva_valr_7,
                          pva_parmt_8,
                          pva_valr_8,
                          pva_parmt_9,
                          pva_valr_9,
                          pva_extra)
           || pva_text
           || fermr_bals ('a');
  end bals_anchor;

  function bals_image (pva_url in varchar2,
                       pva_parmt_1 in varchar2 default null,
                       pva_valr_1 in varchar2 default null,
                       pva_parmt_2 in varchar2 default null,
                       pva_valr_2 in varchar2 default null,
                       pva_parmt_3 in varchar2 default null,
                       pva_valr_3 in varchar2 default null,
                       pva_parmt_4 in varchar2 default null,
                       pva_valr_4 in varchar2 default null,
                       pva_parmt_5 in varchar2 default null,
                       pva_valr_5 in varchar2 default null,
                       pva_parmt_6 in varchar2 default null,
                       pva_valr_6 in varchar2 default null,
                       pva_parmt_7 in varchar2 default null,
                       pva_valr_7 in varchar2 default null,
                       pva_parmt_8 in varchar2 default null,
                       pva_valr_8 in varchar2 default null,
                       pva_parmt_9 in varchar2 default null,
                       pva_valr_9 in varchar2 default null,
                       pva_extra in varchar2 default null)
    return varchar2 is
  begin
    return ouvri_bals ('img/',
                       'src',
                       pva_url,
                       pva_parmt_1,
                       pva_valr_1,
                       pva_parmt_2,
                       pva_valr_2,
                       pva_parmt_3,
                       pva_valr_3,
                       pva_parmt_4,
                       pva_valr_4,
                       pva_parmt_5,
                       pva_valr_5,
                       pva_parmt_6,
                       pva_valr_6,
                       pva_parmt_7,
                       pva_valr_7,
                       pva_parmt_8,
                       pva_valr_8,
                       pva_parmt_9,
                       pva_valr_9,
                       pva_extra);
  end bals_image;

  procedure ecrir_clob (pcl_clob in out nocopy clob) is
    vnu_tail_tampn                          integer := 1000;
    vnu_tail_clob                           integer;
    vnu_nombr_loop                          number;
  begin
    vnu_tail_clob := dbms_lob.getlength (pcl_clob);

    if vnu_tail_clob > 0 then
      vnu_nombr_loop := floor (vnu_tail_clob / vnu_tail_tampn);

      for i in 0 .. vnu_nombr_loop loop
        htp.prn (substr (pcl_clob,
                         i * vnu_tail_tampn + 1,
                         vnu_tail_tampn));
      end loop;
    end if;
  end ecrir_clob;
begin
  gta_subst (1).champ_subtr := '&SIDF.';
  gta_subst (1).valr_de_subst := sie_07_util_pkg.nv ('SIDF');
  gta_subst (2).champ_subtr := '&SAPC.';
  gta_subst (2).valr_de_subst := sie_07_util_pkg.v ('SAPC');
  gta_subst (3).champ_subtr := '&SSPC.';
  gta_subst (3).valr_de_subst := sie_07_util_pkg.nv ('SSPC');
  gta_subst (4).champ_subtr := '&SCPC.';
  gta_subst (4).valr_de_subst := sie_07_util_pkg.v ('SCPC');
  gta_subst (5).champ_subtr := '&SAPI.';
  gta_subst (5).valr_de_subst := sie_07_util_pkg.v ('SAPI');
  gta_subst (6).champ_subtr := '&SCPI.';
  gta_subst (6).valr_de_subst := sie_07_util_pkg.v ('SCPI');
  gta_subst (7).champ_subtr := '&SNPI.';
  gta_subst (7).valr_de_subst := sie_07_util_pkg.nv ('SNPI');
  gta_subst (8).champ_subtr := '&SSPI.';
  gta_subst (8).valr_de_subst := sie_07_util_pkg.nv ('SSPI');
  gta_subst (9).champ_subtr := '&APP_ID.';
  gta_subst (9).valr_de_subst := sie_07_util_pkg.nv ('APP_ID');
  gta_subst (10).champ_subtr := '&APP_ALIAS.';
  gta_subst (10).valr_de_subst := sie_07_util_pkg.v ('APP_ALIAS');
  gta_subst (11).champ_subtr := '&APP_PAGE_ID.';
  gta_subst (11).valr_de_subst := sie_07_util_pkg.nv ('APP_PAGE_ID');
  gta_subst (12).champ_subtr := '&SESSION.';
  gta_subst (12).valr_de_subst := sie_07_util_pkg.nv ('SESSION');
  gta_subst (13).champ_subtr := 'Û';
  gta_subst (13).valr_de_subst := '&Ucirc;';
  gta_subst (14).champ_subtr := 'â';
  gta_subst (14).valr_de_subst := '&acirc;';
  gta_subst (15).champ_subtr := 'Â';
  gta_subst (15).valr_de_subst := '&Acirc;';
  gta_subst (16).champ_subtr := 'é';
  gta_subst (16).valr_de_subst := '&eacute;';
  gta_subst (17).champ_subtr := 'É';
  gta_subst (17).valr_de_subst := '&Eacute;';
  gta_subst (18).champ_subtr := 'è';
  gta_subst (18).valr_de_subst := '&egrave;';
  gta_subst (19).champ_subtr := 'È';
  gta_subst (19).valr_de_subst := '&Egrave;';
  gta_subst (20).champ_subtr := 'à';
  gta_subst (20).valr_de_subst := '&agrave;';
  gta_subst (21).champ_subtr := 'À';
  gta_subst (21).valr_de_subst := '&Agrave;';
  gta_subst (22).champ_subtr := 'ç';
  gta_subst (22).valr_de_subst := '&ccedil;';
  gta_subst (23).champ_subtr := 'Ç';
  gta_subst (23).valr_de_subst := '&Ccedil;';
  gta_subst (24).champ_subtr := 'û';
  gta_subst (24).valr_de_subst := '&ucirc;';
  gta_subst (25).champ_subtr := '<';
  gta_subst (25).valr_de_subst := '&lt;';
  gta_subst (26).champ_subtr := '>';
  gta_subst (26).valr_de_subst := '&gt;';
end sie_15_htp_pkg;
/

Prompt Package Body SIE_16_LOV_NOYAU_PKG;
/* Formatted on 04/12/2013 11:35:33 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_16_LOV_NOYAU_PKG" as
  function obten_lov_item (pnu_seqnc_item in number)
    return varchar2 is
    vva_lov                                 varchar2 (4000);
  begin
    select   aip.lov
      into   vva_lov
      from   vd_i_sie_13_page_item pi,
             apex_item_page aip
     where   pi.seqnc = pnu_seqnc_item and aip.id = pi.id_apex;

    return vva_lov;
  exception
    when no_data_found then
      return null;
  end;
end;
/

Prompt Package Body SIE_16_LOV_PKG;
/* Formatted on 04/12/2013 11:35:33 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_16_LOV_PKG" as
  function obten_valr_rechr
    return varchar2
    deterministic is
  begin
    return gva_valr_rechr;
  end;

  function obten_afich_par_valr (pva_lov in varchar2,
                                 pva_valr in varchar2,
                                 pva_seprt in varchar2 default ':')
    return varchar2 is
    var_liste                               apex_application_global.vc_arr2;
    vin_index                               pls_integer;
    vva_selct                               varchar2 (32000);
    vnu_pos                                 number;
    vva_nom                                 varchar2 (1000);
    vva_valr                                varchar2 (1000);
    --Valeurs pour gérer le retour multiple
    vva_valr_initl                          varchar2 (2000) default pva_valr;
    vnu_postn                               pls_integer;
    vva_valr_subst                          varchar2 (200);
    vva_valr_retr                           varchar2 (2000);
  begin
    if instr (pva_valr,
              pva_seprt) > 0 then
      vnu_postn :=
        instr (vva_valr_initl,
               pva_seprt);

      while vnu_postn > 0 loop
        vva_valr_subst :=
          substr (vva_valr_initl,
                  1,
                  vnu_postn - 1);
        vva_valr_initl :=
          substr (vva_valr_initl,
                  vnu_postn + 1);
        vnu_postn :=
          instr (vva_valr_initl,
                 pva_seprt);
        vva_valr_retr :=
             vva_valr_retr
          || ', '
          || obten_afich_par_valr (pva_lov,
                                   vva_valr_subst);
      end loop;

      vva_valr_retr :=
           vva_valr_retr
        || ', '
        || obten_afich_par_valr (pva_lov,
                                 vva_valr_initl);

      return substr (vva_valr_retr,
                     3);
    else
      if pva_lov is null then
        -- Pas de LOV
        return null;
      elsif pva_lov like '.%.' then
        begin
          select   lov_disp_value
            into   vva_nom
            from   apex_valr_lov
           where   lov_id = substr (pva_lov,
                                    2,
                                    length (pva_lov) - 2)
               and lov_return_value = pva_valr
               and rownum = 1;

          return vva_nom;
        exception
          when no_data_found then
            return null;
        end;
      elsif pva_lov like 'STATIC:%'
         or pva_lov like 'STATIC1:%'
         or pva_lov like 'STATIC2:%' then
        -- LOV statique
        var_liste :=
          sie_07_util_pkg.string_to_table (substr (pva_lov,
                                                   9),
                                           ',');
        vin_index := 1;

        while var_liste.exists (vin_index) loop
          vnu_pos :=
            instr (var_liste (vin_index),
                   ';');

          if vnu_pos > 0 then
            vva_nom :=
              substr (var_liste (vin_index),
                      1,
                      vnu_pos - 1);
            vva_valr :=
              substr (var_liste (vin_index),
                      vnu_pos + 1);
          else
            vva_nom := var_liste (vin_index);
            vva_valr := var_liste (vin_index);
          end if;

          if vva_valr = pva_valr then
            return vva_nom;
          end if;

          vin_index := vin_index + 1;
        end loop;

        return null;
      else
        -- LOV dynamique de type select
        declare
          vva_exect                               varchar2 (4000);
          vnu_cursr                               number;
          var_info                                sie_07_sql_pkg.typ_arr_infor_coln;
          vva_owner                               varchar2 (30) default sie_11_aplic_pkg.obten_schem ();
          vva_lov                                 varchar2 (32767);
        begin
          vva_lov :=
            replace (pva_lov,
                     '#owner#',
                     vva_owner);
          vva_lov :=
            replace (vva_lov,
                     '#OWNER#',
                     vva_owner);

          if trim (lower (pva_lov)) not like 'select%' then
            -- Considérer que c'est un bloc PL/SQL retournant un select
            vva_exect :=
                 'declare '
              || 'function x return varchar2 is '
              || 'begin '
              || vva_lov
              || ' return null;'
              || 'end; '
              || 'begin '
              || 'sie_16_lov_pkg.gva_selct := x(); '
              || 'end;';

            begin
              execute immediate vva_exect;

              vva_selct := sie_16_lov_pkg.gva_selct;
            exception
              when others then
                vva_selct := null;
            end;
          else
            vva_selct := vva_lov;
          end if;

          if vva_selct is not null then
            gva_valr_rechr := pva_valr;

            vva_exect :=
                 'select d '
              || 'from ('
              || vva_selct
              || ') '
              || 'where r = sie_16_lov_pkg.obten_valr_rechr() and rownum = 1';

            vnu_cursr :=
              sie_07_sql_pkg.ouvri_selct (null,
                                          null,
                                          vva_exect,
                                          var_info,
                                          null);

            if sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                                var_info) then
              sie_07_sql_pkg.fermr_selct (vnu_cursr);

              case var_info (1).va_type_valr
                when 'VARCH' then
                  null;                                                                                   --Rien de plus
                when 'NUMBR' then
                  var_info (1).va_valr_varch := var_info (1).nu_valr_numbr;
                when 'DATE' then
                  var_info (1).va_valr_varch :=
                    to_char (var_info (1).da_valr_date,
                             'YYYY-MM-DD');
                else
                  var_info (1).va_valr_varch := '#####';
              end case;

              return var_info (1).va_valr_varch;
            else
              sie_07_sql_pkg.fermr_selct (vnu_cursr);
              return null;
            end if;
          else
            -- vva_selct is null
            return null;
          end if;
        end;
      end if;
    end if;
  end;

  function obten_lov_item (pnu_seqnc_item in number)
    return varchar2 is
  begin
    return sie_16_lov_noyau_pkg.obten_lov_item (pnu_seqnc_item);
  end;
end;
/

Prompt Package Body SIE_16_VUE_PARMT_PKG;
/* Formatted on 04/12/2013 11:35:33 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_16_VUE_PARMT_PKG" is
  gva_droit_acces                         varchar2 (1);
  gva_droit_creat                         varchar2 (1);
  gva_droit_modfc                         varchar2 (1);
  gva_droit_suprs                         varchar2 (1);
  gnu_membr_struc_admin                   number (10);
  gva_struc_aplic                         varchar2 (30);
  gva_code_type_struc                     varchar2 (30);
  gva_code_utils                          sie_12_utils.code_utils%type;

  procedure creer_lov_utils_struc_aplic_1 (pva_struc_aplic in varchar2,
                                           pva_droit in varchar2,
                                           pnu_membr_struc_admin in number default null,
                                           pva_code_type_struc in varchar2 default null,
                                           pva_code_utils   out varchar2) is
  begin
    if instr (upper (pva_droit),
              'ACCES') > 0 then
      gva_droit_acces := 'O';
    else
      gva_droit_acces := 'N';
    end if;

    if instr (upper (pva_droit),
              'CREAT') > 0 then
      gva_droit_creat := 'O';
    else
      gva_droit_creat := 'N';
    end if;

    if instr (upper (pva_droit),
              'MODFC') > 0 then
      gva_droit_modfc := 'O';
    else
      gva_droit_modfc := 'N';
    end if;

    if instr (upper (pva_droit),
              'SUPRS') > 0 then
      gva_droit_suprs := 'O';
    else
      gva_droit_suprs := 'N';
    end if;

    gnu_membr_struc_admin := pnu_membr_struc_admin;
    gva_struc_aplic := pva_struc_aplic;
    gva_code_type_struc := pva_code_type_struc;
  end creer_lov_utils_struc_aplic_1;

  function obten_lov_utils_struc_aplic
    return arr_typ_utils
    pipelined is
    rec_utils                               cur_utils%rowtype;
  begin
    open cur_utils (gva_struc_aplic,
                    gnu_membr_struc_admin,
                    gva_code_type_struc,
                    gva_droit_acces,
                    gva_droit_creat,
                    gva_droit_modfc,
                    gva_droit_suprs,
                    gva_code_utils);

    fetch cur_utils
    into rec_utils;

    while cur_utils%found loop
      pipe row (rec_utils);

      fetch cur_utils
      into rec_utils;
    end loop;

    close cur_utils;

    return;
  end obten_lov_utils_struc_aplic;

  function obten_membr_struc_de_code (pva_code in varchar2)
    return number is
    vnu_ref_membr_struc                     number (10);
  begin
    begin
      select   seqnc
        into   vnu_ref_membr_struc
        from   vs_ix_lov_utils_struc_aplic_01
       where   code_utils = pva_code;
    exception
      when no_data_found then
        return null;
    end;

    return vnu_ref_membr_struc;
  end obten_membr_struc_de_code;
end sie_16_vue_parmt_pkg;
/

Prompt Package Body SIE_17_ENVOI_COURL_PKG;
/* Formatted on 04/12/2013 11:35:34 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_17_ENVOI_COURL_PKG" as
  kva_crlf                       constant varchar2 (2) default chr (13) || chr (10);

  gva_nls_chars                           varchar2 (100);

  type typ_destn_courl is record
  (
    nom                                     varchar2 (100),
    adres                                   varchar2 (100),
    type                                    varchar2 (10),
    ref_fil_atent_destn                     number (10)
  );

  type typ_arr_dest_courl is table of typ_destn_courl
                               index by binary_integer;

  type typ_rec_atach is record
  (
    contn                                   blob,
    mime_type                               varchar2 (100),
    nom_fichr                               varchar2 (100)
  );

  type typ_tab_atach is table of typ_rec_atach
                          index by pls_integer;

  type typ_courl is record
  (
    servr                                   varchar2 (100),
    port                                    number default 25,
    domn                                    varchar2 (100),
    nom_envoy                               varchar2 (100),
    adres_envoy                             varchar2 (100),
    sujet                                   varchar2 (1000),
    formt_html                              boolean default false,
    corps                                   owa.vc_arr,
    destn                                   typ_arr_dest_courl,
    piece_joint                             typ_tab_atach,
    authe_methd                             varchar2 (23),
    authe_usagr                             varchar2 (100),
    authe_mdp                               varchar2 (100),
    ssl                                     boolean,
    empla_walt                              varchar2 (100),
    mot_passe_walt                          varchar2 (100)
  );

  type typ_arr_courl is table of typ_courl
                          index by courl;

  gar_courl                               typ_arr_courl;

  gco_courn                               courl default null;

  function obten_mesg_courl_html_uniqm
    return varchar2 is
  begin
    return sie_01_gestn_mesg_pkg.obten_mesg_par_numr ('SAF.000042',
                                                      'SAFP');
  end obten_mesg_courl_html_uniqm;

  procedure defnr_servr (pva_servr in varchar2,
                         pnu_port in number default 25,
                         pva_domn in varchar2 default null) is
  begin
    gar_courl (gco_courn).servr := pva_servr;
    gar_courl (gco_courn).port := nvl (pnu_port, 25);
    gar_courl (gco_courn).domn := pva_domn;
  end;

  procedure creer (pva_nom_envoy in varchar2,
                   pva_adres_envoy in varchar2,
                   pva_sujet in varchar2,
                   pva_servr in varchar2 default null,
                   pnu_port in number default 25,
                   pva_domn in varchar2 default null,
                   pva_empla_walt in varchar2 default null,
                   pva_mot_passe_walt in varchar2 default null,
                   pbo_ssl in boolean default false) is
  begin
    gco_courn := nvl (gar_courl.last (), 0) + 1;

    gar_courl (gco_courn).nom_envoy := pva_nom_envoy;
    gar_courl (gco_courn).adres_envoy := pva_adres_envoy;
    gar_courl (gco_courn).sujet := pva_sujet;

    gar_courl (gco_courn).empla_walt := pva_empla_walt;
    gar_courl (gco_courn).mot_passe_walt := pva_mot_passe_walt;
    gar_courl (gco_courn).ssl := pbo_ssl;

    defnr_servr (pva_servr,
                 pnu_port,
                 pva_domn);
  end;

  function creer (pva_nom_envoy in varchar2,
                  pva_adres_envoy in varchar2,
                  pva_sujet in varchar2,
                  pva_servr in varchar2 default null,
                  pnu_port in number default 25,
                  pva_domn in varchar2 default null,
                  pva_empla_walt in varchar2 default null,
                  pva_mot_passe_walt in varchar2 default null,
                  pbo_ssl in boolean default false)
    return courl is
  begin
    creer (pva_nom_envoy,
           pva_adres_envoy,
           pva_sujet,
           pva_servr,
           pnu_port,
           pva_domn,
           pva_empla_walt,
           pva_mot_passe_walt,
           pbo_ssl);

    return gco_courn;
  end;

  procedure defnr_courn (pco_courl in courl) is
  begin
    if pco_courl is null
    or gar_courl.exists (pco_courl) then
      gco_courn := pco_courl;
    else
      raise no_data_found;
    end if;
  end;

  function obten_courn
    return courl is
  begin
    return gco_courn;
  end;

  procedure defnr_authe_simpl (pva_usagr in varchar2,
                               pva_mdp in varchar2) is
  begin
    gar_courl (gco_courn).authe_methd := 'SIMPL';
    gar_courl (gco_courn).authe_usagr := pva_usagr;
    gar_courl (gco_courn).authe_mdp := pva_mdp;
  /*gar_courl (gco_courn).authe_usagr :=
    utl_raw.cast_to_varchar2 (utl_encode.base64_encode (utl_raw.cast_to_raw (pva_usagr)));
  gar_courl (gco_courn).authe_mdp :=
    utl_raw.cast_to_varchar2 (utl_encode.base64_encode (utl_raw.cast_to_raw (pva_mdp)));*/
  end;

  procedure formt_html is
  begin
    gar_courl (gco_courn).formt_html := true;
  end;

  procedure ajout_destn (pva_nom in varchar2,
                         pva_adres in varchar2,
                         pva_type in varchar2 default kva_destn_a) is
    vnu_index_destn                         binary_integer;
  begin
    vnu_index_destn := nvl (gar_courl (gco_courn).destn.last (), 0) + 1;

    gar_courl (gco_courn).destn (vnu_index_destn).nom := pva_nom;
    gar_courl (gco_courn).destn (vnu_index_destn).adres := pva_adres;
    gar_courl (gco_courn).destn (vnu_index_destn).type := pva_type;
  end;

  procedure ajout_piece_joint (pbl_contn in blob,
                               pva_mime_type in varchar2,
                               pva_nom_fichr in varchar2) is
    vnu_index_piece                         binary_integer;
  begin
    vnu_index_piece := nvl (gar_courl (gco_courn).piece_joint.last (), 0) + 1;
    gar_courl (gco_courn).piece_joint (vnu_index_piece).nom_fichr := pva_nom_fichr;
    gar_courl (gco_courn).piece_joint (vnu_index_piece).mime_type := pva_mime_type;
    gar_courl (gco_courn).piece_joint (vnu_index_piece).contn := pbl_contn;
  end ajout_piece_joint;

  procedure ajout_ligne_corps (pva_ligne in varchar2,
                               pbo_saut_ligne in boolean default true) is
    vnu_index_corps                         binary_integer;
  begin
    vnu_index_corps := nvl (gar_courl (gco_courn).corps.last (), 0) + 1;

    gar_courl (gco_courn).corps (vnu_index_corps) := pva_ligne;

    if pbo_saut_ligne then
      if gar_courl (gco_courn).formt_html then
        gar_courl (gco_courn).corps (vnu_index_corps) := gar_courl (gco_courn).corps (vnu_index_corps) || '<br />';
      end if;

      gar_courl (gco_courn).corps (vnu_index_corps) := gar_courl (gco_courn).corps (vnu_index_corps) || kva_crlf;
    end if;
  end;

  procedure ajout_corps (par_corps in owa.vc_arr) is
    vnu_index_corps                         binary_integer;
  begin
    vnu_index_corps := nvl (gar_courl (gco_courn).corps.last (), 0) + 1;

    if par_corps.first () is not null then
      for i in par_corps.first () .. par_corps.last () loop
        gar_courl (gco_courn).corps (vnu_index_corps) := par_corps (i);
        vnu_index_corps := vnu_index_corps + 1;
      end loop;
    end if;
  end;

  procedure debut_htp is
  begin
    sie_15_htp_pkg.ecrit_difr (true);
  end;

  procedure fin_htp is
  begin
    ajout_corps (sie_15_htp_pkg.obten_arr ());
    sie_15_htp_pkg.ecrit_difr (false);
  end;

  procedure anulr is
  begin
    if gco_courn is not null then
      gar_courl (gco_courn).destn.delete ();
      gar_courl (gco_courn).corps.delete ();
      gar_courl.delete (gco_courn);

      gco_courn := gar_courl.last ();
    end if;
  end;

  function placr_fil_atent (pbo_efacr in boolean default true)
    return fil_atent is
    vnu_fil_atent                           number;
    vva_indic_formt_html                    varchar2 (1);
    vcl_corps                               clob;
    vbo_exist_non_uniq                      boolean;

    procedure creer_fil is
    begin
      insert
           into   sie_17_courl (servr,
                                port,
                                domn,
                                nom_envoy,
                                adres_envoy,
                                sujet,
                                indic_formt_html,
                                authe_methd,
                                authe_usagr,
                                authe_mdp,
                                corps,
                                sens,
                                stat_soums)
         values   (gar_courl (gco_courn).servr,
                   gar_courl (gco_courn).port,
                   gar_courl (gco_courn).domn,
                   gar_courl (gco_courn).nom_envoy,
                   gar_courl (gco_courn).adres_envoy,
                   gar_courl (gco_courn).sujet,
                   vva_indic_formt_html,
                   gar_courl (gco_courn).authe_methd,
                   gar_courl (gco_courn).authe_usagr,
                   gar_courl (gco_courn).authe_mdp,
                   vcl_corps,
                   'EMIS',
                   'A_ENVOY')
      returning   seqnc
           into   vnu_fil_atent;
    end;

    procedure ajout_destn_fil (pnu_index in number) is
    begin
      insert into   sie_17_courl_destn (ref_fil_atent, nom, adres, type)
           values   (vnu_fil_atent,
                     gar_courl (gco_courn).destn (pnu_index).nom,
                     gar_courl (gco_courn).destn (pnu_index).adres,
                     gar_courl (gco_courn).destn (pnu_index).type);
    end;

    procedure ajout_piece_joint_fil (pnu_index in number,
                                     pva_mode in varchar2 default 'A') is
    begin
      insert into   sie_17_courl_piece_joint (mime_type, contn, tail, nom_fichr, mode_atach)
           values   (vnu_fil_atent,
                     gar_courl (gco_courn).piece_joint (pnu_index).contn,
                     dbms_lob.getlength (gar_courl (gco_courn).piece_joint (pnu_index).contn),
                     gar_courl (gco_courn).piece_joint (pnu_index).nom_fichr,
                     pva_mode);
    end;
  begin
    vva_indic_formt_html := case when gar_courl (gco_courn).formt_html then 'O' else 'N' end;

    sie_07_clob_pkg.creer_nouv ();

    if gar_courl (gco_courn).corps.first () is not null then
      for i in gar_courl (gco_courn).corps.first () .. gar_courl (gco_courn).corps.last () loop
        sie_07_clob_pkg.ajout (gar_courl (gco_courn).corps (i));
      end loop;
    end if;

    vcl_corps := sie_07_clob_pkg.obten ();

    vbo_exist_non_uniq := false;

    if gar_courl (gco_courn).destn.first () is not null then
      for i in gar_courl (gco_courn).destn.first () .. gar_courl (gco_courn).destn.last () loop
        if gar_courl (gco_courn).destn (i).type = kva_destn_uniq then
          creer_fil ();
          ajout_destn_fil (i);
        else
          vbo_exist_non_uniq := true;
        end if;
      end loop;
    end if;

    if vbo_exist_non_uniq then
      creer_fil ();

      if gar_courl (gco_courn).destn.first () is not null then
        for i in gar_courl (gco_courn).destn.first () .. gar_courl (gco_courn).destn.last () loop
          if gar_courl (gco_courn).destn (i).type <> kva_destn_uniq then
            ajout_destn_fil (i);
          end if;
        end loop;
      end if;

      if gar_courl (gco_courn).piece_joint.first () is not null then
        for i in gar_courl (gco_courn).piece_joint.first () .. gar_courl (gco_courn).piece_joint.last () loop
          ajout_piece_joint_fil (i);
        end loop;
      end if;
    end if;


    if pbo_efacr then
      anulr ();
    end if;

    return vnu_fil_atent;
  end;

  procedure placr_fil_atent (pbo_efacr in boolean default true) is
    vfa_fil_atent                           fil_atent;
  begin
    vfa_fil_atent := placr_fil_atent (pbo_efacr);
  end;

  procedure envoy (pbo_envoi_difr in boolean default false) is
    vco_courl                               courl default gco_courn;
    vbo_non_uniq                            boolean default false;

    vnu_postn                               pls_integer default 1;
    vnu_tail                                pls_integer;
    vnu_tail_segmn                          pls_integer default 54;
    vra_tampn                               raw (54);

    procedure envoy_copie (pnu_uniq in binary_integer default null) is
      vbl_corps                               blob;
      vcn_conct                               utl_smtp.connection;
      vva_a                                   varchar2 (32000);
      vva_cc                                  varchar2 (32000);
      vva_cci                                 varchar2 (32000);
      vva_delmt                               varchar2 (30) default 'a1b2c3d4e3f2g1';

      procedure ecrir (pva_contn in varchar2) is
        vra_contn                               raw (32767) default utl_raw.cast_to_raw (pva_contn);
      begin
        if pbo_envoi_difr then
          dbms_lob.writeappend (vbl_corps,
                                utl_raw.length (vra_contn),
                                vra_contn);
        else
          utl_smtp.write_raw_data (vcn_conct,
                                   vra_contn);
        end if;
      end;

      procedure ecrir_raw (pra_contn in raw) is
      begin
        if pbo_envoi_difr then
          dbms_lob.writeappend (vbl_corps,
                                utl_raw.length (pra_contn),
                                pra_contn);
        else
          utl_smtp.write_raw_data (vcn_conct,
                                   pra_contn);
        end if;
      end;

      function formt_entet_encd (pva_valr in varchar2)
        return varchar2 is
      begin
        if pva_valr is not null then
          return replace (utl_encode.mimeheader_encode (pva_valr),
                          chr (13) || chr (10),
                          null);
        else
          return null;
        end if;
      end;

      procedure entet (pva_atrib in varchar2,
                       pva_valr in varchar2) is
      begin
        ecrir (pva_atrib || ': ' || pva_valr || kva_crlf);
      end;

      procedure ligne_corps (pnu_ligne in binary_integer) is
        vva_ligne                               varchar2 (32000);
      begin
        vva_ligne := gar_courl (vco_courl).corps (pnu_ligne);

        -- TODO CARLO: trouver pourquoi on fait ça
        --vva_ligne := replace (vva_ligne, '=', '=3D');

        if gar_courl (vco_courl).formt_html then
          --utl_smtp.write_raw_data (vcn_conct, utl_raw.cast_to_raw(vva_ligne));
          ecrir (vva_ligne);
        else
          --utl_smtp.write_raw_data (vcn_conct, utl_raw.cast_to_raw(vva_ligne));
          ecrir (vva_ligne);
        end if;
      end;
    begin
      if pbo_envoi_difr then
        dbms_lob.createtemporary (vbl_corps,
                                  true);
      else
        utl_tcp.close_all_connections;

        -- Ouvrir la connexion et débuter l'envoi
        if gar_courl (vco_courl).ssl then /*
           $if dbms_db_version.ver_le_11
               and not dbms_db_version.ver_le_11_1 $then*/
          vcn_conct :=
            utl_smtp.open_connection (host                       => gar_courl (vco_courl).servr,
                                      port                       => gar_courl (vco_courl).port,
                                      tx_timeout                 => 10,
                                      wallet_path                => 'file:' || gar_courl (vco_courl).empla_walt,
                                      wallet_password            => gar_courl (vco_courl).mot_passe_walt,
                                      secure_connection_before_smtp => true);
        /* $else
           vcn_conct      :=
             utl_smtp.open_connection (host        => gar_courl (vco_courl).servr,
                                       port        => gar_courl (vco_courl).port,
                                       tx_timeout  => 10);
         $end*/
        else
          vcn_conct :=
            utl_smtp.open_connection (gar_courl (vco_courl).servr,
                                      gar_courl (vco_courl).port);
        end if;

        utl_smtp.ehlo (vcn_conct,
                       gar_courl (vco_courl).domn);

        case gar_courl (vco_courl).authe_methd
          when 'SIMPL' then
            utl_smtp.command (vcn_conct,
                              'AUTH LOGIN');
            utl_smtp.command (vcn_conct,
                              utl_encode.text_encode (gar_courl (vco_courl).authe_usagr,
                                                      gva_nls_chars,
                                                      1));
            utl_smtp.command (vcn_conct,
                              utl_encode.text_encode (gar_courl (vco_courl).authe_mdp,
                                                      gva_nls_chars,
                                                      1));
          else
            -- Pas d'authentification, ou pas supportée
            null;
        end case;

        utl_smtp.mail (vcn_conct,
                       gar_courl (vco_courl).adres_envoy);

        -- Initialiser le ou les destinataires
        if pnu_uniq is null then
          if gar_courl (vco_courl).destn.first () is not null then
            for i in gar_courl (vco_courl).destn.first () .. gar_courl (vco_courl).destn.last () loop
              if gar_courl (vco_courl).destn (i).type != kva_destn_uniq then
                if gar_courl (vco_courl).destn (i).type = kva_destn_a then
                  utl_smtp.rcpt (vcn_conct,
                                 gar_courl (vco_courl).destn (i).adres);

                  if vva_a is not null then
                    vva_a := vva_a || ', ';
                  end if;

                  vva_a :=
                       vva_a
                    || '"'
                    || formt_entet_encd (gar_courl (vco_courl).destn (i).nom)
                    || '" <'
                    || gar_courl (vco_courl).destn (i).adres
                    || '>';
                elsif gar_courl (vco_courl).destn (i).type = kva_destn_cc then
                  utl_smtp.rcpt (vcn_conct,
                                 gar_courl (vco_courl).destn (i).adres);

                  if vva_cc is not null then
                    vva_cc := vva_cc || ', ';
                  end if;

                  vva_cc :=
                       vva_cc
                    || '"'
                    || formt_entet_encd (gar_courl (vco_courl).destn (i).nom)
                    || '" <'
                    || gar_courl (vco_courl).destn (i).adres
                    || '>';
                elsif gar_courl (vco_courl).destn (i).type = kva_destn_cci then
                  utl_smtp.rcpt (vcn_conct,
                                 gar_courl (vco_courl).destn (i).adres);

                  if vva_cci is not null then
                    vva_cci := vva_cci || ', ';
                  end if;

                  vva_cci :=
                       vva_cci
                    || '"'
                    || formt_entet_encd (gar_courl (vco_courl).destn (i).nom)
                    || '" <'
                    || gar_courl (vco_courl).destn (i).adres
                    || '>';
                end if;
              end if;
            end loop;
          end if;
        else
          utl_smtp.rcpt (vcn_conct,
                         gar_courl (vco_courl).destn (pnu_uniq).adres);
          vva_a :=
               '"'
            || formt_entet_encd (gar_courl (vco_courl).destn (pnu_uniq).nom)
            || '" <'
            || gar_courl (vco_courl).destn (pnu_uniq).adres
            || '>';
        end if;

        utl_smtp.open_data (vcn_conct);
      end if;

      ecrir ('MIME-Version: 1.0' || kva_crlf);

      -- Écrire l'entête
      entet ('Date',
             to_char (systimestamp,
                      'Dy, dd Mon YYYY hh24:mi:ss TZHTZM',
                      'NLS_DATE_LANGUAGE = AMERICAN'));

      entet (
        'From',
        '"' || formt_entet_encd (gar_courl (vco_courl).nom_envoy) || '" <' || gar_courl (vco_courl).adres_envoy || '>'
      );
      entet ('To',
             vva_a);

      if vva_cc is not null then
        entet ('Cc',
               vva_cc);
      end if;

      if vva_cci is not null then
        entet ('Cci',
               vva_cci);
      end if;

      entet ('Subject',
             formt_entet_encd (gar_courl (vco_courl).sujet));

      ecrir ('Content-Type: multipart/mixed; boundary=' || 'mix' || vva_delmt || kva_crlf || kva_crlf);

      ecrir ('--' || 'mix' || vva_delmt || kva_crlf);

      ecrir ('Content-Type: multipart/alternative; boundary=' || 'alt' || vva_delmt || kva_crlf || kva_crlf);

      ecrir ('--' || 'alt' || vva_delmt || kva_crlf);

      ecrir ('content-Type: text/plain; charset=ISO-8859-1');
      ecrir (kva_crlf || kva_crlf);

      -- Écrire le corps
      ecrir (obten_mesg_courl_html_uniqm);

      ecrir (kva_crlf || kva_crlf);
      ecrir ('--' || 'alt' || vva_delmt || kva_crlf);

      -- else
      ecrir ('content-Type: text/html; charset=ISO-8859-1');
      ecrir (kva_crlf || kva_crlf);

      -- Écrire le corps
      if gar_courl (vco_courl).corps.first () is not null then
        for i in gar_courl (vco_courl).corps.first () .. gar_courl (vco_courl).corps.last () loop
          ligne_corps (i);
        end loop;

        ecrir (kva_crlf || kva_crlf);
      end if;

      ecrir ('--' || 'alt' || vva_delmt || '--' || kva_crlf);

      --gérer les pièces jointes
      if gar_courl (vco_courl).piece_joint.count () != 0 then
        for i in gar_courl (vco_courl).piece_joint.first () .. gar_courl (vco_courl).piece_joint.last () loop
          ecrir ('--' || 'mix' || vva_delmt || kva_crlf);
          ecrir ('Content-Type: ' || gar_courl (vco_courl).piece_joint (i).mime_type || ';');
          ecrir (kva_crlf);
          ecrir ('Content-Disposition: attachment;');
          ecrir (kva_crlf);
          ecrir (' filename="' || gar_courl (vco_courl).piece_joint (i).nom_fichr || '"');
          ecrir (kva_crlf);
          ecrir ('Content-Transfer-Encoding: base64');
          ecrir (kva_crlf);
          ecrir (kva_crlf);

          vnu_tail := dbms_lob.getlength (gar_courl (vco_courl).piece_joint (i).contn);
          vnu_postn := 1;
          vnu_tail_segmn := 54;

          while vnu_postn < vnu_tail loop
            dbms_lob.read (gar_courl (vco_courl).piece_joint (i).contn,
                           vnu_tail_segmn,
                           vnu_postn,
                           vra_tampn);
            ecrir_raw (utl_encode.base64_encode (vra_tampn));
            ecrir (kva_crlf);
            vra_tampn := null;
            vnu_postn := vnu_postn + vnu_tail_segmn;
          end loop;

          ecrir (kva_crlf || kva_crlf);
        end loop;
      end if;

      if gar_courl (vco_courl).piece_joint.count () != 0 then
        ecrir ('--' || 'mix' || vva_delmt || kva_crlf);
      end if;

      ecrir ('--' || 'mix' || vva_delmt || '--' || kva_crlf);

      if not pbo_envoi_difr then
        -- Terminer l'envoi et la connexion
        utl_smtp.close_data (vcn_conct);
        utl_smtp.quit (vcn_conct);
      end if;
    exception
      when utl_smtp.transient_error or utl_smtp.permanent_error then
        begin
          utl_smtp.quit (vcn_conct);
        exception
          when utl_smtp.transient_error or utl_smtp.permanent_error then
            null;
        end;

        raise;
    end;
  begin
    -- Chercher pour les destinataires uniques
    if gar_courl (vco_courl).destn.first () is not null then
      for i in gar_courl (vco_courl).destn.first () .. gar_courl (vco_courl).destn.last () loop
        if gar_courl (vco_courl).destn (i).type = kva_destn_uniq then
          -- Envoyer a un destinataire unique
          envoy_copie (i);
        else
          vbo_non_uniq := true;
        end if;
      end loop;

      -- Envoyer le courriel aux autres destinataires non-uniques
      if vbo_non_uniq then
        envoy_copie ();
      end if;
    end if;
  end;

  procedure envoy_fil_atent (pfa_fil_atent in fil_atent) is
    vco_ancien_courn                        courl;
    vva_indic_formt_html                    varchar2 (1);
    vcl_corps                               clob;
    vnu_index                               pls_integer;
    var_segmn                               sie_07_clob_pkg.typ_arr_segmn;

    cursor cur_fil_atent_destn is
      select   nom,
               adres,
               type
        from   sie_17_courl_destn
       where   ref_fil_atent = pfa_fil_atent;

    cursor cur_fil_atent_piece_joint is
      select   nom_fichr,
               mime_type,
               contn
        from   sie_17_courl_piece_joint
       where   ref_courl = pfa_fil_atent;

    procedure marqr_tentv_fil is
      pragma autonomous_transaction;
    begin
      sie_03_journ_pkg.ecrir_journ (
        'Envoi d''un courriel (Seqnc = ' || pfa_fil_atent || ', Erreur = ' || sqlerrm || ')',
        'SIE_17_ENVOI_COURL_PKG'
      );

      update   sie_17_courl
         set   nombr_tentv = nombr_tentv + 1
       where   seqnc = pfa_fil_atent;

      commit;
    end;

    procedure suprm_fil_atent is
      pragma autonomous_transaction;
    begin
      update   sie_17_courl
         set   stat_soums = 'ENVOY'
       where   seqnc = pfa_fil_atent;

      commit;
    end;
  begin
    vco_ancien_courn := gco_courn;
    gco_courn := nvl (gar_courl.last (), 0) + 1;
    gar_courl (gco_courn).servr := null;                                                -- Seulement pour créer l'entrée

    begin
      select     servr,
                 port,
                 domn,
                 nom_envoy,
                 adres_envoy,
                 sujet,
                 indic_formt_html,
                 authe_methd,
                 authe_usagr,
                 authe_mdp,
                 corps
          into   gar_courl (gco_courn).servr,
                 gar_courl (gco_courn).port,
                 gar_courl (gco_courn).domn,
                 gar_courl (gco_courn).nom_envoy,
                 gar_courl (gco_courn).adres_envoy,
                 gar_courl (gco_courn).sujet,
                 vva_indic_formt_html,
                 gar_courl (gco_courn).authe_methd,
                 gar_courl (gco_courn).authe_usagr,
                 gar_courl (gco_courn).authe_mdp,
                 vcl_corps
          from   sie_17_courl
         where   seqnc = pfa_fil_atent
      order by   date_creat;

      gar_courl (gco_courn).formt_html := (vva_indic_formt_html = 'O');

      if vcl_corps is not null then
        var_segmn := sie_07_clob_pkg.clob_vers_table_segmn (vcl_corps);

        if var_segmn.first () is not null then
          for i in var_segmn.first () .. var_segmn.last () loop
            gar_courl (gco_courn).corps (i) := var_segmn (i);
          end loop;
        end if;
      end if;

      vnu_index := 0;

      for rec_fil_atent_destn in cur_fil_atent_destn loop
        vnu_index := vnu_index + 1;
        gar_courl (gco_courn).destn (vnu_index).nom := rec_fil_atent_destn.nom;
        gar_courl (gco_courn).destn (vnu_index).adres := rec_fil_atent_destn.adres;
        gar_courl (gco_courn).destn (vnu_index).type := rec_fil_atent_destn.type;
      end loop;

      vnu_index := 0;

      for rec_fil_atent_piece_joint in cur_fil_atent_piece_joint loop
        vnu_index := vnu_index + 1;
        gar_courl (gco_courn).piece_joint (vnu_index).nom_fichr := rec_fil_atent_piece_joint.nom_fichr;
        gar_courl (gco_courn).piece_joint (vnu_index).mime_type := rec_fil_atent_piece_joint.mime_type;
        gar_courl (gco_courn).piece_joint (vnu_index).contn := rec_fil_atent_piece_joint.contn;
      end loop;
    exception
      when no_data_found then
        gco_courn := vco_ancien_courn;
        raise;
    end;

    --    marqr_tentv_fil ();

    begin
      envoy ();
      anulr ();
      gco_courn := vco_ancien_courn;

      -- S'il y a eu une erreur, la suppression sera sautée
      suprm_fil_atent ();
    end;
  exception
    when others then
      marqr_tentv_fil ();
      gco_courn := vco_ancien_courn;
      raise;
  end;

  procedure envoy_toute_fil_atent (pnu_envoi_max in number default 10) is
    cursor cur_fil_atent is
      select     seqnc
          from   sie_17_courl
         where   nombr_tentv < nombr_tentv_max and stat_soums = 'A_ENVOY' and sens = 'EMIS'
      order by   date_creat asc;

    vnu_nb_envoy                            number;
  begin
    vnu_nb_envoy := 0;

    for rec_fil_atent in cur_fil_atent loop
      begin
        envoy_fil_atent (rec_fil_atent.seqnc);

        -- Ne sera pas compté si une erreur survient
        vnu_nb_envoy := vnu_nb_envoy + 1;

        if pnu_envoi_max is not null and vnu_nb_envoy >= pnu_envoi_max and pnu_envoi_max > 0 then
          exit;
        end if;
      exception
        when others then
          ete ();
      end;
    end loop;
  exception
    when others then
      ete ();
  end envoy_toute_fil_atent;
begin
  select   value
    into   gva_nls_chars
    from   nls_database_parameters
   where   parameter = 'NLS_CHARACTERSET';
end sie_17_envoi_courl_pkg;
/

Prompt Package Body SIE_17_ENVOI_TELCP_AXIAT_PKG;
/* Formatted on 04/12/2013 11:35:34 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_17_envoi_telcp_axiat_pkg as
  cursor cur_compt (pva_code_compt_axiat in varchar2,
                    pnu_domn in number) is
    select   seqnc
      from   vd_i_sie_17_compt_axiat ca
     where   ca.code = pva_code_compt_axiat and ref_domn = nvl (pnu_domn, sie_12_domn_pkg.obten_domn_sesn ());

  procedure envoy_telcp_simpl (pva_code_compt_axiat in varchar2,
                               pnu_a in number,
                               pva_destn_formt in varchar2,
                               pnu_domn in number,
                               pda_date_envo_difr in date default null) is
    pragma autonomous_transaction;
    vnu_seqnc                               number (10);
  begin
    vnu_seqnc :=
      envoy_telcp_simpl (pva_code_compt_axiat,
                         pnu_a,
                         pva_destn_formt,
                         pnu_domn,
                         pda_date_envo_difr);
  end envoy_telcp_simpl;

  function envoy_telcp_simpl (pva_code_compt_axiat in varchar2,
                              pnu_a in number,
                              pva_destn_formt in varchar2,
                              pnu_domn in number,
                              pda_date_envo_difr in date default null)
    return number is
    vnu_seqnc                               number (10);
    vnu_seqnc_compt                         number (10);
    pragma autonomous_transaction;
  begin
    open cur_compt (pva_code_compt_axiat,
                    pnu_domn);

    fetch cur_compt
    into vnu_seqnc_compt;

    close cur_compt;

    insert
         into   vd_i_sie_17_telcp_axiat ta (ref_compt_axiat, destn_formt, numr_destn, stat_soums, date_envoi_difr, objet)
       values   (vnu_seqnc_compt,
                 pva_destn_formt,
                 pnu_a,
                 'EN_CREAT',
                 pda_date_envo_difr,
                 '***')
    returning   seqnc
         into   vnu_seqnc;

    commit;
    return vnu_seqnc;
  end envoy_telcp_simpl;

  procedure ajout_piece_joint (pnu_telcp_axiat in number,
                               pbl_contn in blob,
                               pnu_nombr_page in number,
                               pva_mime_type in varchar2,
                               pva_nom_fichr in varchar2) is
    pragma autonomous_transaction;
  begin
    insert into   vd_i_sie_17_piece_telcp_axiat pta (ref_telcp_axiat, nombr_page, contn, mime_type, nom_fichr)
         values   (pnu_telcp_axiat,
                   pnu_nombr_page,
                   pbl_contn,
                   pva_mime_type,
                   pva_nom_fichr);

    commit;
  end ajout_piece_joint;

  procedure termn_envoi (pnu_telcp_axiat in number) is
    pragma autonomous_transaction;
  begin
    update   vd_sie_17_telcp_axiat
       set   stat_soums = 'A_ENVOY'
     where   seqnc = pnu_telcp_axiat;

    commit;
  end termn_envoi;

  procedure vider_file_atent (pva_code_compt_axiat in varchar2,
                              pnu_domn in number) is
    pragma autonomous_transaction;
    vnu_compt                               number (10);
    vco_courl                               sie_17_envoi_courl_pkg.courl;

    cursor cur_telcp is
      select     seqnc,
                 numr_destn,
                 destn_formt,
                 ref_compt_axiat,
                 objet
          from   vd_i_sie_17_telcp_axiat ta
         where   ta.stat_soums = 'A_ENVOY'
             and (ref_compt_axiat = vnu_compt
               or vnu_compt is null)
             and (date_envoi_difr <= sysdate
               or date_envoi_difr is null)
      order by   ref_compt_axiat;

    cursor cur_piece (pnu_telcp in number) is
      select   contn,
               mime_type,
               nom_fichr
        from   vd_i_sie_17_piece_telcp_axiat pta
       where   pta.ref_telcp_axiat = pnu_telcp;

    cursor cur_profl_courl (pnu_compt_axiat in number) is
      select   pc.servr_sortn,
               pc.port_sortn,
               pc.nom_envoy,
               pc.adres_envoy,
               pc.authe_methd_sortn,
               pc.authe_usagr_sortn,
               pc.authe_mdp_sortn
        from   vd_i_sie_17_profl_courl pc,
               vd_i_sie_17_compt_axiat ca
       where   ca.seqnc = pnu_compt_axiat and ca.ref_profl_courl = pc.seqnc;

    rec_profl_courl                         cur_profl_courl%rowtype;
    vnu_domn_courl                          number (10);
    vbo_semph_obten                         boolean default false;

    procedure alimn_profl_courl (pnu_domn in number) is
    begin
      if vnu_domn_courl is null
      or vnu_domn_courl != pnu_domn then
        open cur_profl_courl (pnu_domn);

        fetch cur_profl_courl
        into rec_profl_courl;

        close cur_profl_courl;
      end if;
    end alimn_profl_courl;
  begin
    if not vbo_semph_obten then
      begin
        sie_07_semph_pkg.obten_semph ('SEM_TRAVL_TELCP',
                                      null,
                                      null,
                                      null,
                                      'O',
                                      5,
                                      null);
        vbo_semph_obten := true;
      exception
        when others then
          return;
      end;
    end if;

    --Valeur hardcodé pour test
    --trouver un moyen d'utiliser le domaine de la session pour les job !!
    open cur_compt (pva_code_compt_axiat,
                    21);

    fetch cur_compt
    into vnu_compt;

    close cur_compt;

    for rec_telcp in cur_telcp loop
      --Initier envoi courriel
      alimn_profl_courl (rec_telcp.ref_compt_axiat);

      vco_courl :=
        sie_17_envoi_courl_pkg.creer (rec_profl_courl.nom_envoy,
                                      rec_profl_courl.adres_envoy,
                                      rec_telcp.objet,
                                      rec_profl_courl.servr_sortn,
                                      rec_profl_courl.port_sortn);

      if rec_profl_courl.authe_methd_sortn = 'SIMPL' then
        sie_17_envoi_courl_pkg.defnr_authe_simpl (rec_profl_courl.authe_usagr_sortn,
                                                  rec_profl_courl.authe_mdp_sortn);
      end if;

      sie_17_envoi_courl_pkg.ajout_destn (rec_telcp.destn_formt,
                                          rec_telcp.numr_destn || '@fax.axiatel.com',
                                          sie_17_envoi_courl_pkg.kva_destn_uniq);

      --Pièces jointes
      for rec_piece in cur_piece (rec_telcp.seqnc) loop
        sie_17_envoi_courl_pkg.ajout_piece_joint (rec_piece.contn,
                                                  rec_piece.mime_type,
                                                  rec_piece.nom_fichr);
      end loop;

      sie_17_envoi_courl_pkg.envoy ();

      update   vd_i_sie_17_telcp_axiat
         set   stat_soums = 'ENVOY'
       where   seqnc = rec_telcp.seqnc;
    end loop;

    sie_07_semph_pkg.suprm_semph ('SEM_TRAVL_TELCP',
                                  null,
                                  null,
                                  null);
    commit;
  exception
    when others then
      sie_07_semph_pkg.suprm_semph ('SEM_TRAVL_TELCP',
                                    null,
                                    null,
                                    null);
      raise;
  end vider_file_atent;
end sie_17_envoi_telcp_axiat_pkg;
/

Prompt Package Body SIE_17_NOTFC_SMS_TWILIO_PKG;
/* Formatted on 04/12/2013 11:35:34 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_17_notfc_sms_twilio_pkg as
  gxm_repns_servr                         xmltype;
  gva_acoun_id                            varchar2 (100);
  gva_authn_token                         varchar2 (100);
  gva_empla_walt                          varchar2 (100);
  gva_mot_passe_walt                      varchar2 (100);

  function encod_sms (pva_mesg in varchar2)
    return varchar2 is
    vva_text                                varchar2 (500) default pva_mesg;
  begin
    vva_text :=
      replace (vva_text,
               ' ',
               '+');
    vva_text :=
      replace (vva_text,
               'é',
               'e');
    vva_text :=
      replace (vva_text,
               'è',
               'e');
    vva_text :=
      replace (vva_text,
               'ê',
               'e');
    vva_text :=
      replace (vva_text,
               'à',
               'a');
    vva_text :=
      replace (vva_text,
               'â',
               'a');
    vva_text :=
      replace (vva_text,
               'ô',
               'o');
    vva_text :=
      replace (vva_text,
               'û',
               'u');
    vva_text :=
      replace (vva_text,
               'ä',
               'a');
    vva_text :=
      replace (vva_text,
               'ë',
               'e');
    vva_text :=
      replace (vva_text,
               'ï',
               'i');
    vva_text :=
      replace (vva_text,
               'ö',
               'o');
    return vva_text;
  end encod_sms;

  procedure defnr_varbl_compt (pnu_compt_twili in number) is
  begin
    select   acoun_id,
             authe_token,
             reprt_walt,
             mot_passe_walt
      into   gva_acoun_id,
             gva_authn_token,
             gva_empla_walt,
             gva_mot_passe_walt
      from   vd_i_sie_17_compt_twili ct
     where   ct.seqnc = pnu_compt_twili;

    utl_http.set_wallet ('file:' || gva_empla_walt,
                         gva_mot_passe_walt);
  end defnr_varbl_compt;

  function obten_valr_iden (pva_iden in varchar2)
    return varchar2 is
    vva_valr                                varchar2 (300);
  begin
    if gxm_repns_servr is not null then
      vva_valr := gxm_repns_servr.extract ('/TwilioResponse/SMSMessage/' || pva_iden || '/text()').getstringval ();
    end if;

    return vva_valr;
  exception
    when others then
      if sqlcode = -30625 then                                                                --Valeur nulle dans le xml
        return null;
      else
        raise;
      end if;
  end obten_valr_iden;

  function obten_prix (pva_prix in varchar2)
    return number is
  begin
    begin
      return to_number (replace (pva_prix,
                                 '-',
                                 null),
                        '990D00000');
    exception
      when others then
        return to_number (replace (replace (pva_prix,
                                            '.',
                                            ','),
                                   '-',
                                   null),
                          '990D00000');
    end;
  end obten_prix;

  procedure envoy_sms (pva_code_compt_twili in varchar2,
                       pnu_de in number,
                       pnu_a in number,
                       pva_mesg in varchar2,
                       pda_date_envo_difr in date default null) is
    vnu_sms                                 number (10);
  begin
    vnu_sms :=
      envoy_sms (pva_code_compt_twili,
                 pnu_de,
                 pnu_a,
                 pva_mesg,
                 pda_date_envo_difr);
  end envoy_sms;

  function envoy_sms (pva_code_compt_twili in varchar2,
                      pnu_de in number,
                      pnu_a in number,
                      pva_mesg in varchar2,
                      pda_date_envo_difr in date default null)
    return number is
    pragma autonomous_transaction;
    knu_long_max_sms               constant pls_integer default 150;
    vva_contn                               varchar2 (32767);
    vva_ocurn_mesg                          varchar2 (300);
    vnu_compt_twili                         number (10);
    vnu_sms                                 number (10);
    vnu_empla_espac                         pls_integer;
    vnu_numr_mesg                           number (3) default 0;
    vnu_group_sms                           number (10);
    vnu_id_sesn                             number
                                              default nvl (v ('SESSION'),
                                                           to_number (to_char (sysdate,
                                                                               'yyyymmddhh24misssss')));
  begin
    vva_contn := pva_mesg;

    select   ct.seqnc
      into   vnu_compt_twili
      from   vd_i_sie_17_compt_twili ct
     where   ct.code = pva_code_compt_twili;

    while vva_contn is not null loop
      vnu_numr_mesg := vnu_numr_mesg + 1;

      --Déterminer la rangée à envoyer
      if length (vva_contn) <= knu_long_max_sms + 10 then
        vva_ocurn_mesg := vva_contn;
        vva_contn := null;
      else
        vva_ocurn_mesg :=
          substr (vva_contn,
                  1,
                  knu_long_max_sms);
        --ne pas couper de mot donc revenir en arrière
        --trouver le dernier espace
        vnu_empla_espac :=
          instr (vva_ocurn_mesg,
                 ' ',
                 -1);

        --ne prendre que jusqu'à cet espace
        vva_ocurn_mesg :=
          substr (vva_ocurn_mesg,
                  1,
                  vnu_empla_espac - 1);

        --Supprimer du contenu global à envoyer les mots envoyés par ce sms
        vva_contn :=
          substr (vva_contn,
                  vnu_empla_espac + 1);
      end if;

      insert
           into   vd_i_sie_17_sms_twili (numr_de,
                                         numr_a,
                                         mesg,
                                         stat_soums,
                                         date_envoi_difr,
                                         ref_compt_twili,
                                         numr_mesg,
                                         nombr_mesg_totl,
                                         ref_mesg_precd,
                                         id_sesn,
                                         group_sms)
         values   (pnu_de,
                   to_number ('1' || pnu_a),
                   vva_ocurn_mesg,
                   'A_ENVOY',
                   pda_date_envo_difr,
                   vnu_compt_twili,
                   vnu_numr_mesg,
                   1,
                   vnu_sms,
                   vnu_id_sesn,
                   vnu_group_sms)
      returning   seqnc
           into   vnu_sms;

      --le groupe de sms est la première sequence insérée, mise à jour par le trg et les autres, par le insert
      if vnu_group_sms is null then
        vnu_group_sms := vnu_sms;
      end if;
    end loop;

    if vnu_numr_mesg > 1 then
      update   vd_i_sie_17_sms_twili
         set   nombr_mesg_totl = vnu_numr_mesg, id_sesn = null
       where   id_sesn = vnu_id_sesn;
    end if;

    commit;
    return vnu_sms;
  exception
    when others then
      rollback;
      return null;
  end envoy_sms;

  procedure vider_file_atent (pva_code_compt_twili in varchar2) is
    pragma autonomous_transaction;
    vva_url                                 varchar2 (500)
      default 'https://api.twilio.com/2010-04-01/Accounts/%ACC_ID%/SMS/Messages';
    vva_contn                               varchar2 (32767);
    vre_reqt                                utl_http.req;
    vre_repns                               utl_http.resp;
    vva_repns                               varchar2 (32767);
    vnu_compt_twili                         number (10);
    vnu_compt_twil_courn                    number (10);
    vva_stat                                varchar2 (30);

    cursor cur_sms is
      select     seqnc,
                 numr_de,
                 numr_a,
                 case
                   when nombr_mesg_totl = 1 then mesg
                   else '(' || numr_mesg || '/' || nombr_mesg_totl || ')' || mesg
                 end
                   mesg,
                 ref_compt_twili,
                 numr_mesg,
                 nombr_mesg_totl
          from   vd_i_sie_17_sms_twili s
         where   s.stat_soums in ('A_ENVOY', 'REPRS')
             and (ref_compt_twili = vnu_compt_twili
               or vnu_compt_twili is null)
             and (date_envoi_difr is null
               or date_envoi_difr <= sysdate)
      order by   ref_compt_twili,
                 group_sms,
                 numr_mesg;
  begin
    for rec_sms in cur_sms loop
      if vnu_compt_twil_courn is null
      or vnu_compt_twil_courn != rec_sms.ref_compt_twili then
        vnu_compt_twil_courn := rec_sms.ref_compt_twili;
        defnr_varbl_compt (vnu_compt_twil_courn);
        vva_url :=
          replace (vva_url,
                   '%ACC_ID%',
                   gva_acoun_id);
      end if;

      begin
        vva_contn :=
             'From=+'
          || rec_sms.numr_de
          || '&To=+'
          || rec_sms.numr_a
          || '&Body='
          || encod_sms (rec_sms.mesg)
          || '&http://dev11g.sie-solutions.net/pls/twilio/!sie_17_notfc_sms_twilio_pkg.confr_stat_envoi';

        vre_reqt :=
          utl_http.begin_request (vva_url,
                                  'POST');
        utl_http.set_header (vre_reqt,
                             'content-length',
                             length (vva_contn));

        utl_http.set_header (vre_reqt,
                             'content-type',
                             'application/x-www-form-urlencoded;charset="UTF-8"');

        utl_http.set_authentication (vre_reqt,
                                     gva_acoun_id,
                                     gva_authn_token);
        utl_http.write_text (vre_reqt,
                             vva_contn);
        vre_repns := utl_http.get_response (vre_reqt);
        utl_http.read_text (vre_repns,
                            vva_repns,
                            32767);

        utl_http.end_response (vre_repns);
        gxm_repns_servr := xmltype (vva_repns);
        vva_stat := obten_valr_iden ('Status');

        update   vd_i_sie_17_sms_twili
           set   repns_servr = gxm_repns_servr,
                 stat_soums =
                   decode (vva_stat,
                           'queued', 'FILE_ATENT_TWILI',
                           'sent', 'ENVOY',
                           'failed', 'ECHEC_TWILI',
                           vva_stat),
                 tw_sid = obten_valr_iden ('Sid'),
                 tw_status = vva_stat,
                 tw_uri = obten_valr_iden ('Uri'),
                 tw_price = obten_prix (obten_valr_iden ('Price'))
         where   seqnc = rec_sms.seqnc;
      exception
        when others then
          update   vd_i_sie_17_sms_twili
             set   repns_servr = xmltype (vva_repns), stat_soums = 'ERREUR_VIDER_FILE'
           where   seqnc = rec_sms.seqnc;
      end;
    end loop;

    commit;
  exception
    when others then
      null;
      rollback;
  end vider_file_atent;

  procedure maj_file_atent (pva_code_compt_twili in varchar2) is
    pragma autonomous_transaction;
    vre_reqt                                utl_http.req;
    vre_repns                               utl_http.resp;
    vva_repns                               varchar2 (32767);
    vnu_compt_twili                         number (10);
    vnu_compt_twil_courn                    number (10);
    vva_stat                                varchar2 (30);
    vva_url                                 varchar2 (100) default 'https://api.twilio.com';

    cursor cur_sms is
      select     seqnc,
                 tw_uri,
                 ref_compt_twili
          from   vd_i_sie_17_sms_twili s
         where   s.stat_soums = 'FILE_ATENT_TWILI'
             and (ref_compt_twili = vnu_compt_twili
               or vnu_compt_twili is null)
      order by   ref_compt_twili;
  begin
    for rec_sms in cur_sms loop
      if vnu_compt_twil_courn is null
      or vnu_compt_twil_courn != rec_sms.ref_compt_twili then
        vnu_compt_twil_courn := rec_sms.ref_compt_twili;
        defnr_varbl_compt (vnu_compt_twil_courn);
      end if;

      begin
        vre_reqt :=
          utl_http.begin_request (vva_url || rec_sms.tw_uri,
                                  'GET');

        utl_http.set_authentication (vre_reqt,
                                     gva_acoun_id,
                                     gva_authn_token);

        vre_repns := utl_http.get_response (vre_reqt);
        utl_http.read_text (vre_repns,
                            vva_repns,
                            32767);

        utl_http.end_response (vre_repns);
        gxm_repns_servr := xmltype (vva_repns);

        vva_stat := obten_valr_iden ('Status');

        update   vd_i_sie_17_sms_twili
           set   repns_servr = gxm_repns_servr,
                 stat_soums =
                   decode (vva_stat,
                           'queued', 'FILE_ATENT_TWILI',
                           'sent', 'ENVOY',
                           'failed', 'ECHEC_TWILI',
                           vva_stat),
                 tw_sid = obten_valr_iden ('Sid'),
                 tw_status = vva_stat,
                 tw_price = obten_prix (obten_valr_iden ('Price'))
         where   seqnc = rec_sms.seqnc;
      exception
        when others then
          update   vd_i_sie_17_sms_twili
             set   repns_servr = xmltype (vva_repns), stat_soums = 'ERREUR_MAJ_FILE'
           where   seqnc = rec_sms.seqnc;
      end;
    end loop;

    commit;
  exception
    when others then
      null;
      rollback;
  end maj_file_atent;


  procedure confr_stat_envoi (name_array in typ_arr_parmt,
                              value_array in typ_arr_valr) is
  begin
    if name_array.count () != 0 then
      for i in name_array.first () .. name_array.last () loop
        ete (name_array (i),
             value_array (i));
      end loop;
    end if;
  end confr_stat_envoi;

  procedure recvr_sms (name_array in typ_arr_parmt,
                       value_array in typ_arr_valr) is
    pragma autonomous_transaction;
    rec_sms                                 sie_17_sms_twili_entra%rowtype;
  begin
    if name_array.count () != 0 then
      for i in name_array.first () .. name_array.last () loop
        case 'TW_RECPT_' || upper (name_array (i))
          when 'TW_RECPT_ACCOUNTSID' then
            rec_sms.tw_recpt_accountsid := value_array (i);
          when 'TW_RECPT_TOZIP' then
            rec_sms.tw_recpt_tozip := value_array (i);
          when 'TW_RECPT_TOSTATE' then
            rec_sms.tw_recpt_tostate := value_array (i);
          when 'TW_RECPT_TOCOUNTRY' then
            rec_sms.tw_recpt_tocountry := value_array (i);
          when 'TW_RECPT_TOCITY' then
            rec_sms.tw_recpt_tocity := value_array (i);
          when 'TW_RECPT_TOCITY' then
            rec_sms.tw_recpt_tocity := value_array (i);
          when 'TW_RECPT_TO' then
            rec_sms.tw_recpt_to := value_array (i);
          when 'TW_RECPT_SMSSTATUS' then
            rec_sms.tw_recpt_smsstatus := value_array (i);
          when 'TW_RECPT_SMSSID' then
            rec_sms.tw_recpt_smssid := value_array (i);
          when 'TW_RECPT_SMSMESSAGESID' then
            rec_sms.tw_recpt_smsmessagesid := value_array (i);
          when 'TW_RECPT_FROMZIP' then
            rec_sms.tw_recpt_fromzip := value_array (i);
          when 'TW_RECPT_FROMSTATE' then
            rec_sms.tw_recpt_fromstate := value_array (i);
          when 'TW_RECPT_FROMCOUNTRY' then
            rec_sms.tw_recpt_fromcountry := value_array (i);
          when 'TW_RECPT_FROMCITY' then
            rec_sms.tw_recpt_fromcity := value_array (i);
          when 'TW_RECPT_FROM' then
            rec_sms.tw_recpt_from := value_array (i);
          when 'TW_RECPT_BODY' then
            rec_sms.tw_recpt_body := value_array (i);
          when 'TW_RECPT_APIVERSION' then
            rec_sms.tw_recpt_apiversion := value_array (i);
          when 'TW_RECPT_ACCOUNTSID' then
            rec_sms.tw_recpt_accountsid := value_array (i);
          else
            null;
        end case;
      end loop;
    end if;

    insert into   vd_i_sie_17_sms_twili_entra
         values   rec_sms;

    commit;
  end recvr_sms;
end sie_17_notfc_sms_twilio_pkg;
/

Prompt Package Body SIE_17_PROFL_COURL_PKG;
/* Formatted on 04/12/2013 11:35:34 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_17_PROFL_COURL_PKG" as
  function obten_code (pnu_profl_courl in number)
    return varchar2 is
    pva_code                                vd_i_sie_17_profl_courl.code%type;
  begin
    select   pc.code
      into   pva_code
      from   vd_i_sie_17_profl_courl pc
     where   pc.seqnc = pnu_profl_courl;

    return pva_code;
  exception
    when others then
      return null;
  end obten_code;

  function obten_seqnc (pva_code_profl_courl in varchar2,
                        pva_code_domn in varchar2 default sie_12_domn_pkg.obten_code_domn_sesn)
    return number is
    pnu_seqnc                               vd_i_sie_17_profl_courl.seqnc%type;
  begin
    select   pc.seqnc
      into   pnu_seqnc
      from   vd_i_sie_17_profl_courl pc
     where   pc.code = pva_code_profl_courl and pc.ref_domn = sie_12_domn_pkg.obten_seqnc_domn (pva_code_domn);

    return pnu_seqnc;
  end obten_seqnc;

  procedure ajout_profl_courl_domn (pnu_domn_profl_courl in number,
                                    pnu_domn_cible in number) is
  begin
    insert into   vd_sie_17_profl_courl (servr_sortn,
                                         port_sortn,
                                         domn,
                                         nom_envoy,
                                         adres_envoy,
                                         authe_methd_sortn,
                                         authe_usagr_sortn,
                                         authe_mdp_sortn,
                                         code,
                                         ref_domn,
                                         nom,
                                         descr,
                                         indic_ssl_sortn,
                                         servr_entra,
                                         port_entra,
                                         indic_ssl_entra,
                                         authe_methd_entra,
                                         authe_usagr_entra,
                                         authe_mdp_entra,
                                         protc_entra)
      select   servr_sortn,
               port_sortn,
               domn,
               nom_envoy,
               adres_envoy,
               authe_methd_sortn,
               authe_usagr_sortn,
               authe_mdp_sortn,
               code,
               pnu_domn_cible,
               nom,
               descr,
               indic_ssl_sortn,
               servr_entra,
               port_entra,
               indic_ssl_entra,
               authe_methd_entra,
               authe_usagr_entra,
               authe_mdp_entra,
               protc_entra
        from   vd_sie_17_profl_courl
       where   seqnc = pnu_domn_profl_courl;
  end ajout_profl_courl_domn;
end sie_17_profl_courl_pkg;
/

Prompt Package Body SIE_17_TRAVL_PKG;
/* Formatted on 04/12/2013 11:35:34 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_17_travl_pkg as
  procedure obten_semph (pva_natr_envo in varchar2) is
  begin
    sie_07_semph_pkg.obten_semph ('SIE_17_TRAVL_' || pva_natr_envo,
                                  null,
                                  null,
                                  null,
                                  'O',
                                  0);
  end obten_semph;

  procedure libr_semph (pva_natr_envo in varchar2) is
  begin
    sie_07_semph_pkg.suprm_semph ('SIE_17_TRAVL_' || pva_natr_envo,
                                  null,
                                  null,
                                  null);
  end libr_semph;

  procedure exect_envoi_sms is
  begin
    obten_semph ('SMS');
    libr_semph ('SMS');
  exception
    when sie_07_semph_pkg.semph_non_dispn then
      null;
    when others then
      ete ();
  end exect_envoi_sms;

  procedure exect_envoi_courl is
  begin
    obten_semph ('COURL');

    sie_17_envoi_courl_pkg.envoy_toute_fil_atent ();

    libr_semph ('COURL');
  exception
    when sie_07_semph_pkg.semph_non_dispn then
      raise;
    when others then
      ete ();
  end exect_envoi_courl;

  procedure exect_envoi_telcp is
  begin
    obten_semph ('TELCP');
    libr_semph ('TELCP');
  exception
    when sie_07_semph_pkg.semph_non_dispn then
      null;
    when others then
      ete ();
  end exect_envoi_telcp;
end sie_17_travl_pkg;
/

Prompt Package Body SIE_18_ITF_PKG;
/* Formatted on 04/12/2013 11:35:34 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_18_ITF_PKG" is
  procedure desct_forml_tablr is
  begin
    htp.p ('
<script type="text/javascript">
<!--

  var champ_input = document.getElementsByTagName("input");
  var champ       = null;

  for (var i = 0; i < champ_input.length; i++)
  {
    champ = champ_input[i];

    if (champ.id.match(/^[f][0-9]{2}_[0-9]{4}$/))
    {
        champ.readOnly = true;
        champ.className = "sax_desct";
    }
  }
  
  var champ_input = document.getElementsByTagName("select");
  var champ       = null;

  for (var i = 0; i < champ_input.length; i++)
  {
    champ = champ_input[i];

    if (champ.id.match(/^[f][0-9]{2}_[0-9]{4}$/))
    {
        champ.disabled = true;
        champ.className = "sax_desct";
    }
  }
  
  var champ_input = document.getElementsByTagName("textarea");
  var champ       = null;

  for (var i = 0; i < champ_input.length; i++)
  {
    champ = champ_input[i];

    if (champ.id.match(/^[f][0-9]{2}_[0-9]{4}$/))
    {
        champ.readOnly = true;
        champ.className = "sax_desct";
    }
  }

// -->
</script>
');
  end desct_forml_tablr;

  procedure defnr_ligne_titre (pva_code_titre in varchar2,
                               pva_type_champ in varchar2 default 'hidden') is
  begin
    sie_07_util_pkg.ajout_code_javsc_charg (   'afw.sie_21.actio_dynmq.gestn_tablr_form.convr_ligne_titre ("'
                                            || replace (pva_type_champ,
                                                        '"',
                                                        '\"')
                                            || '", "'
                                            || replace (pva_code_titre,
                                                        '"',
                                                        '\"')
                                            || '");');
  end;

  procedure cachr_champ (pva_code in varchar2,
                         pnu_declg in number,
                         pva_type_champ in varchar2 default 'hidden') is
  begin
    sie_07_util_pkg.ajout_code_javsc_charg (   'afw.sie_21.actio_dynmq.gestn_tablr_form.defnr_indic ("'
                                            || replace (pva_type_champ,
                                                        '"',
                                                        '\"')
                                            || '", "'
                                            || replace (pva_code,
                                                        '"',
                                                        '\"')
                                            || '", '
                                            || pnu_declg
                                            || ', true, false);');
  end;
end sie_18_itf_pkg;
/

Prompt Package Body SIE_18_TABLR_FORM_PKG;
/* Formatted on 04/12/2013 11:35:34 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_18_TABLR_FORM_PKG" is
  function genr_html_color_pickr
    return varchar2 is
    vva_html                                varchar2 (4000);
  begin
    vva_html :=
      '<img align="absmiddle" alt="" src="/i/htmldb/icons/palette.gif" onclick="colorPopUp(''f05_0004'')" style="cursor: pointer;"/>';

    vva_html :=
         vva_html
      || '<img id="COULR_TEXTE_PREVIEW" class="colorpreview" align="absmiddle" style="" alt="" src="/i/1px_trans.gif"/>';

    return vva_html;
  end genr_html_color_pickr;

  procedure obten_json_item_depsm is
    vnu_page_sesn                           vd_i_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_sesn;
    vnu_page_zero_sesn                      vd_i_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_zero_sesn;
  begin
    -- génère l'objet JSON
    sie_15_ajax_pkg.obten_json_sql (
         'select  pi.nom_apex,
                                             pi.depsm_alias_coln,
                                             aip.display_as type_item
                                       from  vd_sie_13_page_item pi,
                                             apex_item_page aip,
                                             apex_regn_coln arc,
                                             apex_regn ar
                                      where       pi.ref_page in ('
      || vnu_page_sesn
      || ', '
      || vnu_page_zero_sesn
      || ')
                                             and  aip.id = pi.id_apex
                                             and  arc.column_alias = pi.depsm_alias_coln
                                             and  arc.flow_id = ar.flow_id
                                             and  arc.region_id = ar.id
                                             and  ar.flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic
                                             and  ar.page_id = sie_13_page_pkg.obten_numr_apex_page
                                             and  ar.plug_source_type = ''UPDATABLE_SQL_QUERY''                                                 
                                       order by 1'
    );
  end obten_json_item_depsm;

  function obten_nom_coln_cle_primr
    return varchar2 is
    vcl_clob                                apex_page_procs.process_sql_clob%type;
    vva_temp                                varchar2 (32767);
    vva_nom_coln_cle_primr                  varchar2 (30);
    vvc_elemn_procs_sql_clob                apex_application_global.vc_arr2;
  begin
    select   process_sql_clob
      into   vcl_clob
      from   apex_page_procs
     where   flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic
         and flow_step_id = sie_13_page_pkg.obten_numr_apex_page
         and process_type = 'MULTI_ROW_UPDATE';

    vva_temp := vcl_clob;

    vvc_elemn_procs_sql_clob := sie_07_util_pkg.string_to_table (vva_temp);

    return vvc_elemn_procs_sql_clob (3);
  exception
    when others then
      return 'SEQNC';
  end obten_nom_coln_cle_primr;
end sie_18_tablr_form_pkg;
/

Prompt Package Body SIE_19_BOUTN_PKG;
/* Formatted on 04/12/2013 11:35:35 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_19_BOUTN_PKG" as
  knu_sidf                                number (10) default sie_07_util_pkg.nv ('SIDF');
  knu_app_id                              number default sie_07_util_pkg.nv ('APP_ID');
  knu_app_page_id                         number default sie_07_util_pkg.nv ('APP_PAGE_ID');
  knu_session                             number default sie_07_util_pkg.nv ('SESSION');

  function obten_prise_charg_page
    return boolean is
    vnu_indic_prise_charg_page              vd_sie_13_page.indic_prise_charg_sie19%type;
  begin
    select   p.indic_prise_charg_sie19
      into   vnu_indic_prise_charg_page
      from   vd_sie_13_page p
     where   p.seqnc = sie_13_page_pkg.obten_page_sesn;

    if vnu_indic_prise_charg_page = 'O' then
      return true;
    end if;

    return false;
  end;

  procedure defnr_varbl_sesn is
    cursor cur_sie_19_boutn is
      select   b.item_subst,
               b.libl,
               nvl (b.templ_boutn, abt.template) gabrt,
               'afw.sie_19.boutn.fonct.' || lower (f.code) code,
               'sie_19_boutn_' || lower (f.code) id_html,
               b.indic_actif,
               f.nom_formt aide_contx,
               f.condt_prise_charg,
               (select   'O'
                  from   vd_sie_04_contx_etend ce
                 where   ce.ref_contx = knu_sidf and ce.nom = f.code and ce.valr_varch = 'desct')
                 desct,
               b.ref_code_type_mesg_aide_contx,
               b.mesg_aide_contx
        from   vd_sie_19_dispn_fonct df,
               vd_sie_19_fonct f,
               vd_sie_19_boutn b,
               apex_boutn_templ abt
       where   df.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn
           and df.ref_fonct = f.seqnc
           and b.ref_dispn_fonct = df.seqnc
           and b.ref_lang = sie_01_lang_pkg.obten_lang_sesn
           and abt.id(+) = b.id_templ_boutn;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 19 Boutons (Clés de fonctions) - Définition des variables de session');

    for rec_sie_19_boutn in cur_sie_19_boutn loop
      gbo_prise_charg := false;


      if rec_sie_19_boutn.condt_prise_charg is null then
        gbo_prise_charg := true;
      elsif rec_sie_19_boutn.condt_prise_charg is not null then
        execute immediate
          'begin sie_19_boutn_pkg.gbo_prise_charg := ' || rec_sie_19_boutn.condt_prise_charg || '; end;';
      end if;

      if rec_sie_19_boutn.indic_actif = 'N'
      or not gbo_prise_charg
      or not obten_prise_charg_page
      or rec_sie_19_boutn.desct = 'O' then
        --Désactiver le bouton
        if sie_07_util_pkg.exist_item (rec_sie_19_boutn.item_subst) then
          sie_07_util_pkg.defnr_etat_sessn (rec_sie_19_boutn.item_subst,
                                            null);
        end if;
      else
        --Activer le bouton
        if rec_sie_19_boutn.ref_code_type_mesg_aide_contx = 'FONCT_PLSQL' then
          --TODO: Carlo
          --execute immediate 'begin sie_19_boutn_pkg.gva_mesg_aide_contx := ' || rec_sie_19_boutn.mesg_aide_contx || '; end;';
          gva_mesg_aide_contx := rec_sie_19_boutn.aide_contx;
        elsif rec_sie_19_boutn.condt_prise_charg is not null then
          gva_mesg_aide_contx := rec_sie_19_boutn.aide_contx;
        else
          gva_mesg_aide_contx := null;
        end if;

        if sie_07_util_pkg.exist_item (rec_sie_19_boutn.item_subst) then
          sie_07_util_pkg.defnr_etat_sessn (rec_sie_19_boutn.item_subst,
                                            sie_07_util_pkg.multi_replc (
                                              rec_sie_19_boutn.gabrt,
                                              '#LINK#',
                                              'javascript:eval(' || rec_sie_19_boutn.code || ');',
                                              '#LABEL#',
                                              rec_sie_19_boutn.libl,
                                              '#TITLE#',
                                              gva_mesg_aide_contx,
                                              '#ID#',
                                              rec_sie_19_boutn.id_html
                                            ));
        end if;
      end if;
    end loop;
  end;
end sie_19_boutn_pkg;
/

Prompt Package Body SIE_19_CLE_PKG;
/* Formatted on 04/12/2013 11:35:35 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_19_CLE_PKG" as
  type typ_tab_cle is table of varchar2 (10)
                        index by pls_integer;

  gta_cle                                 typ_tab_cle;
  kva_shift                      constant varchar2 (5) default 'Shift';
  kva_alt                        constant varchar2 (3) default 'Alt';
  kva_ctrl                       constant varchar2 (4) default 'Ctrl';

  function obten_cle_formt (pnu_cle in number)
    return varchar2 is
    vva_cle_formt                           varchar2 (30);
    vnu_code                                pls_integer;
  begin
    --If you want to use more than one modifiers (e.g. alt+ctrl+z) you should define them by an alphabetical order e.g. alt+ctrl+shift
    select      case indic_alt when 'O' then kva_alt || '+' else null end
             || case indic_ctrl when 'O' then kva_ctrl || '+' else null end
             || case indic_shift when 'O' then kva_shift || '+' else null end
               modfr,
             code_keydw
      into   vva_cle_formt,
             vnu_code
      from   vd_sie_19_cle c
     where   c.seqnc = pnu_cle;

    if vnu_code is null then
      return null;
    elsif vva_cle_formt is null then
      return initcap (gta_cle (vnu_code));
    else
      return vva_cle_formt || initcap (gta_cle (vnu_code));
    end if;
  exception
    when no_data_found then
      return null;
  end obten_cle_formt;
begin
  -- Assigner les touches A à Z
  for i in ascii ('A') .. ascii ('Z') loop
    gta_cle (i) := chr (i);
  end loop;

  -- Assigner les touches 0 à 9
  for i in ascii ('0') .. ascii ('9') loop
    gta_cle (i) := chr (i);
  end loop;

  gta_cle (9) := 'TAB';
  gta_cle (13) := 'RETURN';
  gta_cle (33) := 'PAGEUP';
  gta_cle (34) := 'PAGEDOWN';
  gta_cle (35) := 'END';
  gta_cle (36) := 'HOME';
  gta_cle (37) := 'LEFT';
  gta_cle (38) := 'UP';
  gta_cle (39) := 'RIGHT';
  gta_cle (40) := 'DOWN';
  gta_cle (112) := 'F1';
  gta_cle (113) := 'F2';
  gta_cle (114) := 'F3';
  gta_cle (115) := 'F4';
  gta_cle (116) := 'F5';
  gta_cle (117) := 'F6';
  gta_cle (118) := 'F7';
  gta_cle (119) := 'F8';
  gta_cle (120) := 'F9';
  gta_cle (121) := 'F10';
  gta_cle (122) := 'F11';
  gta_cle (123) := 'F12';
  gta_cle (127) := 'DEL';
end sie_19_cle_pkg;
/

Prompt Package Body SIE_19_FONCT_PKG;
/* Formatted on 04/12/2013 11:35:35 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_19_FONCT_PKG" as
  knu_sidf                                number (10) default sie_07_util_pkg.nv ('SIDF');
  knu_app_id                              number default sie_07_util_pkg.nv ('APP_ID');
  knu_app_page_id                         number default sie_07_util_pkg.nv ('APP_PAGE_ID');
  knu_session                             number default sie_07_util_pkg.nv ('SESSION');

  function obten_nom_lang (pnu_fonct in number,
                           pnu_lang in number default null)
    return varchar2 is
    vva_nom                                 vd_sie_19_fonct_lang.nom%type;
  begin
    select   nom
      into   vva_nom
      from   vd_sie_19_fonct_lang fl
     where   fl.ref_fonct = pnu_fonct and ref_lang = nvl (pnu_lang, sie_07_util_pkg.obten_lang_sesn ());

    return vva_nom;
  exception
    when no_data_found then
      return null;
  end obten_nom_lang;

  function obten_descr_lang (pnu_fonct in number,
                             pnu_lang in number default null)
    return varchar2 is
    vva_descr                               vd_sie_19_fonct_lang.descr%type;
  begin
    select   descr
      into   vva_descr
      from   vd_sie_19_fonct_lang fl
     where   fl.ref_fonct = pnu_fonct and ref_lang = nvl (pnu_lang, sie_07_util_pkg.obten_lang_sesn ());

    return vva_descr;
  exception
    when no_data_found then
      return null;
  end obten_descr_lang;

  function obten_afich_atrib (pnu_dispn_fonct in number,
                              pva_atrib in varchar2)
    return boolean is
    vbo_afich                               boolean := false;
    vva_titre_atrib                         vd_sie_19_fonct.titre_atrib1%type;
  begin
    case pva_atrib
      when 'VALR_ATRIB_1' then
        select   f.titre_atrib1
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_2' then
        select   f.titre_atrib2
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_3' then
        select   f.titre_atrib3
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_4' then
        select   f.titre_atrib4
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_5' then
        select   f.titre_atrib5
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      else
        vva_titre_atrib := null;
    end case;

    if vva_titre_atrib is not null then
      vbo_afich := true;
    end if;

    return vbo_afich;
  exception
    when others then
      return false;
  end obten_afich_atrib;

  function obten_titre_atrib (pnu_dispn_fonct in number,
                              pnu_item_id in number)
    return varchar2 is
    vva_item_source                         apex_item_page.source%type;
    vva_titre_atrib                         vd_sie_19_fonct.titre_atrib1%type;
  begin
    select   source
      into   vva_item_source
      from   apex_item_page aip
     where   aip.id = pnu_item_id;

    case vva_item_source
      when 'VALR_ATRIB_1' then
        select   f.titre_atrib1
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_2' then
        select   f.titre_atrib2
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_3' then
        select   f.titre_atrib3
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_4' then
        select   f.titre_atrib4
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      when 'VALR_ATRIB_5' then
        select   f.titre_atrib5
          into   vva_titre_atrib
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f
         where   df.seqnc = pnu_dispn_fonct and df.ref_fonct = f.seqnc;
      else
        vva_titre_atrib := null;
    end case;

    return vva_titre_atrib;
  exception
    when others then
      return null;
  end obten_titre_atrib;

  function obten_url_impre
    return varchar2 is
  begin
    return 'http://';
  end obten_url_impre;

  function obten_url_enreg_precd
    return varchar2 is
  begin
    return sie_13_navgt_pkg.obten_url_precd;
  end obten_url_enreg_precd;

  function obten_url_enreg_suivn
    return varchar2 is
  begin
    return sie_13_navgt_pkg.obten_url_suivn;
  end obten_url_enreg_suivn;

  function obten_url_premr_enreg
    return varchar2 is
  begin
    return sie_13_navgt_pkg.obten_url_premr;
  end obten_url_premr_enreg;

  function obten_url_dernr_enreg
    return varchar2 is
  begin
    return sie_13_navgt_pkg.obten_url_dernr (1);
  end obten_url_dernr_enreg;

  procedure obten_aide_cle_fonct (pnu_sidf in number,
                                  pnu_lang in number) is
    cursor cur_cle_fonct is
      select     sie_19_cle_pkg.obten_cle_formt (c.seqnc) cle_formt,
                 sie_19_fonct_pkg.obten_nom_lang (df.ref_fonct,
                                                  pnu_lang)
                   nom_formt,
                 sie_19_fonct_pkg.obten_descr_lang (df.ref_fonct,
                                                    pnu_lang)
                   descr_formt
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f,
                 vd_sie_19_cle c,
                 vd_i_sie_04_fil_arian fa,
                 vd_sie_11_prodt p,
                 vd_sie_11_aplic ap
         where   fa.seqnc = pnu_sidf
             and ap.numr_aplic_apex = fa.app_id
             and ap.ref_prodt = p.seqnc
             and df.ref_prodt = p.seqnc
             and c.ref_dispn_fonct = df.seqnc
             and c.ref_lang = pnu_lang
             and f.seqnc = df.ref_fonct
             and not exists
                   (select   null
                      from   vd_sie_04_contx_etend ce
                     where   ce.ref_contx = fa.seqnc and ce.nom = f.code and ce.valr_varch = 'desct')
             and c.indic_inter = sie_19_javsc_pkg.obten_furtr_indic_inter
             and c.indic_actif = 'O'
      order by   2;

    vva_texte                               varchar2 (4000);
  begin
    htp.p ('<h1>Aide clés de fonctions</h1>');
    htp.p ('<div id="aide_cle_fonct">');
    htp.p ('  <table class="aide_cle_fonct">');
    htp.p ('    <tr>');
    htp.p ('      <th>Clé</th>');
    htp.p ('      <th>Fonction</th>');
    htp.p ('      <th>Description</th>');
    htp.p ('    </tr>');

    for rec_cle_fonct in cur_cle_fonct loop
      htp.p ('    <tr>');
      htp.p ('      <td>' || rec_cle_fonct.cle_formt || '</td>');
      htp.p ('      <td>' || rec_cle_fonct.nom_formt || '</td>');
      htp.p ('      <td>' || rec_cle_fonct.descr_formt || '</td>');
      htp.p ('    </tr>');
    end loop;

    htp.p ('  </table>');
    htp.p ('</div>');
  end obten_aide_cle_fonct;

  function obten_fonct (pva_code in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_i_sie_19_fonct f
     where   f.code = upper (pva_code);

    return vnu_seqnc;
  exception
    when others then
      return null;
  end obten_fonct;

  procedure desct_fonct (pva_code in varchar2) is
  begin
    sie_04_contx_pkg.defnr_contx_etend_varch (pva_code,
                                              'desct',
                                              pbo_page_cible             => false);
  end;

  procedure obten_avert_fonct_non_dispn (pnu_sidf in number,
                                         pnu_lang in number) is
  begin
    htp.p ('<h1>Cette fonction n''est pas active sur cette page.</h1>');
  end;
end sie_19_fonct_pkg;
/

Prompt Package Body SIE_19_JAVSC_PKG;
/* Formatted on 04/12/2013 11:35:35 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_19_JAVSC_PKG" as
  knu_sidf                                number (10) default sie_07_util_pkg.nv ('SIDF');
  knu_app_id                              number default sie_07_util_pkg.nv ('APP_ID');
  knu_app_page_id                         number default sie_07_util_pkg.nv ('APP_PAGE_ID');
  knu_session                             number default sie_07_util_pkg.nv ('SESSION');

  function obten_furtr_indic_inter
    return varchar2 is
    vva_indic_inter                         varchar2 (1) := 'O';
  begin
    if lower (sie_07_util_pkg.obten_furtr) like '%firefox%' then
      vva_indic_inter := 'N';
    elsif lower (sie_07_util_pkg.obten_furtr) like '%chrome%' then
      vva_indic_inter := 'N';
    end if;

    return vva_indic_inter;
  end obten_furtr_indic_inter;

  function obten_prise_charg_page
    return boolean is
    vnu_indic_prise_charg_page              vd_sie_13_page.indic_prise_charg_sie19%type;
  begin
    select   p.indic_prise_charg_sie19
      into   vnu_indic_prise_charg_page
      from   vd_sie_13_page p
     where   p.seqnc = sie_13_page_pkg.obten_page_sesn;

    if vnu_indic_prise_charg_page = 'O' then
      return true;
    end if;

    return false;
  end;

  procedure ajout_scrip_charg is
    cursor cur_dispn_fonct (
      pva_furtr_indic_inter varchar2
    ) is
      select     f.code code_fonct,
                 sie_14_domn_valr_pkg.obten_code (f.ref_dv_type_actio) type_actio,
                 sie_14_domn_valr_pkg.obten_code (f.ref_dv_type_expre) type_expre,
                 f.expre_actio,
                 f.indic_afect_input_html,
                 f.indic_prevn_actio_deft,
                 f.condt_prise_charg,
                 c.indic_actif cle_indic_actif,
                 sie_19_cle_pkg.obten_cle_formt (c.seqnc) cle_formt,
                 c.indic_inter,
                 b.indic_actif boutn_indic_actif,
                 (select   'O'
                    from   vd_sie_04_contx_etend ce
                   where   ce.ref_contx = sie_07_util_pkg.nv ('SIDF') and ce.nom = f.code and ce.valr_varch = 'desct')
                   desct
          from   vd_sie_19_dispn_fonct df,
                 vd_sie_19_fonct f,
                 vd_sie_19_cle c,
                 vd_sie_19_boutn b
         where   df.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn
             and df.ref_fonct = f.seqnc
             and c.ref_dispn_fonct(+) = df.seqnc
             and c.ref_lang(+) = sie_01_lang_pkg.obten_lang_sesn
             and c.indic_inter(+) = pva_furtr_indic_inter
             and c.indic_actif(+) = 'O'
             and b.ref_dispn_fonct(+) = df.seqnc
             and b.ref_lang = sie_01_lang_pkg.obten_lang_sesn
             and b.indic_actif = 'O'
      order by   1;

    procedure genr_fonct (pre_dispn_fonc in cur_dispn_fonct%rowtype) is
      vva_fonct                               varchar2 (200);
      vva_boutn                               varchar2 (4000);
      vva_boutn_type_actio                    varchar2 (50);
      vva_cle                                 varchar2 (4000);
      vva_cle_type_actio                      varchar2 (50);
      vva_cible_evenm                         varchar2 (50) := 'document';
      -- nomenclature d'un jQuery CSS Selector (il faut ajouter les quotes)
      vva_evenm                               varchar2 (10) := 'keydown';                 --on n'utilise pas le keypress

      vva_valr_retr                           varchar2 (4000);
    begin
      gbo_prise_charg := false;

      if pre_dispn_fonc.condt_prise_charg is null then
        gbo_prise_charg := true;
      else
        execute immediate 'begin sie_19_javsc_pkg.gbo_prise_charg := ' || pre_dispn_fonc.condt_prise_charg || '; end;';
      end if;

      if gbo_prise_charg
     and pre_dispn_fonc.desct is null
     and pre_dispn_fonc.type_actio is not null
     and pre_dispn_fonc.type_expre is not null then
        --Activer la fonction
        --Déterminer le type d'action
        case pre_dispn_fonc.type_actio
          when 'EXECT_FONCT_JAVSC' then
            vva_cle_type_actio := 'afw.sie_19.cle.exect_fonct_javsc';
            vva_boutn_type_actio := 'afw.sie_19.boutn.exect_fonct_javsc';
          when 'REDRC_URL' then
            vva_cle_type_actio := 'afw.sie_19.cle.redrc_url';
            vva_boutn_type_actio := 'afw.sie_19.boutn.redrc_url';
          when 'POP_FENTR_URL' then
            vva_cle_type_actio := 'afw.sie_19.cle.pop_fentr_url';
            vva_boutn_type_actio := 'afw.sie_19.boutn.pop_fentr_url';
          when 'POP_MODL_URL' then
            vva_cle_type_actio := 'afw.sie_19.cle.exect_fonct_javsc';
            vva_boutn_type_actio := 'afw.sie_19.boutn.exect_fonct_javsc';
          when 'REQT' then
            vva_cle_type_actio := 'afw.sie_19.cle.soums_reqt';
            vva_boutn_type_actio := 'afw.sie_19.boutn.soums_reqt';
          else
            null;
        end case;

        --Déterminer le type d'expression pour exécuter l'action
        case pre_dispn_fonc.type_expre
          when 'FONCT_JAVSC' then
            gva_fonct_javsc := pre_dispn_fonc.expre_actio;
          when 'URL' then
            gva_fonct_javsc := pre_dispn_fonc.expre_actio;
          when 'REQT' then
            gva_fonct_javsc := pre_dispn_fonc.expre_actio;
          when 'PLSQL_FONCT_JAVSC' then
            execute immediate 'begin sie_19_javsc_pkg.gva_fonct_javsc := ' || pre_dispn_fonc.expre_actio || '; end;';
          when 'PLSQL_URL' then
            execute immediate 'begin sie_19_javsc_pkg.gva_fonct_javsc := ' || pre_dispn_fonc.expre_actio || '; end;';
          when 'PLSQL_REQT' then
            execute immediate 'begin sie_19_javsc_pkg.gva_fonct_javsc := ' || pre_dispn_fonc.expre_actio || '; end;';
          when 'REPRT' then
            gva_fonct_javsc :=
                 'afw.jQuery.post(''!sie_reprt.acept'',{''p'':['''
              || sie_07_util_pkg.v ('A_SIE_11_SAF')
              || ':'
              || pre_dispn_fonc.expre_actio
              || ':'
              || knu_session
              || '''],''pnu_sidf'':['''
              || knu_sidf
              || '''],''pnu_lang'':['''
              || sie_01_lang_pkg.obten_lang_sesn
              || ''']}, function(data) {afw.jQuery.prompt(data, { prefix: ''sieprompt'' });});';
          else
            null;
        end case;

        --fonction utilisée par le bouton et la clé
        vva_fonct := 'afw.sie_19.fonct.' || lower (pre_dispn_fonc.code_fonct);

        vva_valr_retr := chr (10) || ' ' || vva_fonct || ' = "' || gva_fonct_javsc || '";';

        --assignation de la fonction au bouton
        if pre_dispn_fonc.boutn_indic_actif is not null then
          vva_boutn :=
               'afw.sie_19.boutn.fonct.'
            || lower (pre_dispn_fonc.code_fonct)
            || ' = "'
            || vva_boutn_type_actio
            || '('
            || vva_fonct
            || ');";';
          vva_valr_retr := vva_valr_retr || chr (10) || ' ' || vva_boutn;
        end if;

        --assignation de la fonction à la clé
        if pre_dispn_fonc.cle_indic_actif is not null then
          vva_cle :=
               'afw.jQuery_1_3_2('
            || vva_cible_evenm
            || ').bind('''
            || vva_evenm
            || ''', {combi:'''
            || pre_dispn_fonc.cle_formt
            || ''', disableInInput:'
            || case pre_dispn_fonc.indic_afect_input_html when 'N' then 'true' else 'false' end
            || '}, function (evt){'
            || vva_cle_type_actio
            || '(evt,'
            || vva_fonct
            || ','
            || case pre_dispn_fonc.indic_prevn_actio_deft when 'O' then 'true' else 'false' end
            || ');}'
            || ');';
          vva_valr_retr := vva_valr_retr || chr (10) || ' ' || vva_cle;
        end if;

        sie_07_util_pkg.ajout_code_javsc_charg (vva_valr_retr);
      else
        --Désactiver la fonction
        null;
      end if;
    end;
  begin
    if obten_prise_charg_page then
      sie_07_util_pkg.ajout_info_debug ('SIE 19 Clés de fonctions - JavaScript au chargement');

      -- générer les fonctions utilisées par les boutons et les clés de fonction
      -- affecter les clés de fonction
      for rec_dispn_fonc in cur_dispn_fonct (obten_furtr_indic_inter) loop
        genr_fonct (rec_dispn_fonc);
      end loop;
    end if;
  exception
    when others then
      ete ('sie_19_javsc_pkg',
           sqlerrm);
  end ajout_scrip_charg;
end sie_19_javsc_pkg;
/

Prompt Package Body SIE_20_DOCMN_PKG;
/* Formatted on 04/12/2013 11:35:35 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_20_docmn_pkg as
  function obten_sect_simpl_docmn (pva_code_struc_aplic in varchar2,
                                   pnu_seqnc_struc_aplic in number,
                                   pva_code_sectn_docmn in varchar2)
    return varchar2 is
    vva_valr                                varchar2 (4000);
  begin
    --manque un code

    select   valr
      into   vva_valr
      from   vd_i_sie_20_detl_docmn dd,
             vd_i_sie_20_docmn d,
             vd_i_sie_12_struc_aplic sa,
             vd_i_sie_20_sectn_docmn sc
     where   d.ref_seqnc_struc_aplic = pnu_seqnc_struc_aplic
         and sa.seqnc = d.ref_struc_aplic
         and sa.code = pva_code_struc_aplic
         and sa.ref_prodt = sie_11_prodt_pkg.obten_prodt_sesn
         and dd.ref_sectn_docmn = sc.seqnc
         and sc.ref_struc_aplic = sa.seqnc
         and dd.ref_docmn = d.seqnc
         and sc.nom = pva_code_sectn_docmn;

    return nvl (vva_valr, 'Aucune description pour cette section.');
  end obten_sect_simpl_docmn;

  function formt_propr_docmn (pnu_docmn in number)
    return varchar2 is
    vnu_seqnc                               number (10);
    vva_fonct_formt                         varchar2 (61);
    vva_valr_formt                          varchar2 (200);
    vva_nom_coln                            varchar2 (50);
    vva_nom_struc_acces                     varchar2 (50);
  begin
    --Obtenir la structure applicative pour la formater
    /*select d.ref_seqnc_struc_aplic,
               sa.nom_packg || '.' || sa.nom_fonct_valr_formt
      into vnu_seqnc,
           vva_fonct_formt
      from vd_i_sie_20_docmn d,
           vd_i_sie_12_struc_aplic sa
     where sa.seqnc = d.ref_struc_aplic
      and d.seqnc = pnu_docmn;
    execute immediate 'select ' || vva_fonct_formt || '(:1) from dual'
                                          into vva_valr_formt
      using vnu_seqnc;*/

    select   nom_coln
      into   vva_nom_coln
      from   vd_sie_12_atrib_struc_aplic
     where   ref_dv_natr_infor = sie_14_domn_valr_pkg.obten_seqnc ('NATR_INFOR_STRUC_APLIC',
                                                                   'NOM_FORMT',
                                                                   'AFW')
         and ref_struc_aplic = (select   seqnc
                                  from   vd_sie_12_struc_aplic
                                 where   seqnc = (select   ref_struc_aplic
                                                    from   vd_i_sie_20_docmn d
                                                   where   d.seqnc = pnu_docmn));

    select   nom_struc_acces_don
      into   vva_nom_struc_acces
      from   vd_i_sie_12_struc_aplic sa
     where   sa.seqnc = (select   ref_struc_aplic
                           from   vd_i_sie_20_docmn d
                          where   d.seqnc = pnu_docmn);

    execute immediate
         'select '
      || vva_nom_coln
      || ' from '
      || vva_nom_struc_acces
      || ' where seqnc = (select ref_seqnc_struc_aplic from vd_i_sie_20_docmn where seqnc = '
      || pnu_docmn
      || ')'
                                          into   vva_valr_formt;

    return vva_valr_formt;
  --return vva_valr_formt;
  end formt_propr_docmn;

  procedure creer_detl_docmn is
    vva_nom_struc_acces_don                 varchar2 (30);
    vva_sql                                 varchar2 (500);
    vnu_lang                                number (10) default 121;                                       --FR pour AFW

    cursor cur_struc_aplic_docmn is
      select   seqnc
        from   vd_i_sie_12_struc_aplic sa
       where   sa.indic_dispn_docmn = 'O';
  begin
    for rec_struc_aplic in cur_struc_aplic_docmn loop
      delete   tc_sie_07_seqnc;

      select   nom_struc_acces_don
        into   vva_nom_struc_acces_don
        from   vd_i_sie_12_struc_aplic sa
       where   seqnc = rec_struc_aplic.seqnc;

      vva_sql := 'insert into TC_SIE_07_SEQNC(seqnc) select seqnc from ' || vva_nom_struc_acces_don;

      execute immediate vva_sql;

      merge into   vd_i_sie_20_docmn cible
           using   tc_sie_07_seqnc sourc
              on   (sourc.seqnc = cible.ref_seqnc_struc_aplic
                and cible.ref_struc_aplic = rec_struc_aplic.seqnc
                and cible.ref_prodt_lang = vnu_lang)
      when not matched then
        insert       (ref_prodt_lang, ref_struc_aplic, ref_seqnc_struc_aplic)
            values   (vnu_lang,
                      rec_struc_aplic.seqnc,
                      sourc.seqnc);

      merge into   vd_i_sie_20_detl_docmn cible
           using   (select   sd.seqnc seqnc_sectn,
                             d.seqnc seqnc_docmn
                      from   vd_i_sie_20_sectn_docmn sd,
                             vd_i_sie_20_docmn d
                     where   sd.ref_struc_aplic = rec_struc_aplic.seqnc
                         and d.ref_struc_aplic = rec_struc_aplic.seqnc
                         and d.ref_seqnc_struc_aplic in (select   tc.seqnc
                                                           from   tc_sie_07_seqnc tc)
                         and ref_dv_type_sectn != sie_14_domn_valr_pkg.obten_seqnc ('TYPE_SECTN',
                                                                                    'TABL')) sourc
              on   (cible.ref_docmn = sourc.seqnc_docmn and cible.ref_sectn_docmn = sourc.seqnc_sectn)
      when not matched then
        insert       (ref_docmn, ref_sectn_docmn)
            values   (sourc.seqnc_docmn,
                      sourc.seqnc_sectn);
    end loop;
  end creer_detl_docmn;
end sie_20_docmn_pkg;
/

Prompt Package Body SIE_20_MODL_PKG;
/* Formatted on 04/12/2013 11:35:35 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_20_modl_pkg as
  function obten_indic (pva_valr in varchar2)
    return varchar2 is
    vva_indic                               varchar2 (1);
  begin
    select   decode (pva_valr,  'YES', 'O',  'NO', 'N')
      into   vva_indic
      from   dual;

    return vva_indic;
  end obten_indic;

  function detrm_fonct (pva_nom_packg in varchar2,
                        pva_nom_objet in varchar2,
                        pnu_numr_surch in number)
    return boolean is
    vnu_void                                number (1);
  begin
    select   count (1)
      into   vnu_void
      from   dual
     where   exists
               (select   1
                  from   dba_arguments
                 where   object_name = pva_nom_objet
                     and package_name = pva_nom_packg
                     and (overload = pnu_numr_surch and pnu_numr_surch is not null
                       or pnu_numr_surch is null)
                     and position = 0
                     and argument_name is null);

    return vnu_void = 1;
  end detrm_fonct;

  function detrm_fonct_numbr (pva_nom_packg in varchar2,
                              pva_nom_objet in varchar2,
                              pnu_numr_surch in number)
    return number is
  begin
    if detrm_fonct (pva_nom_packg,
                    pva_nom_objet,
                    pnu_numr_surch) then
      return sie_14_domn_valr_pkg.obten_seqnc ('TYPE_MODL',
                                               'FONCT');
    else
      return sie_14_domn_valr_pkg.obten_seqnc ('TYPE_MODL',
                                               'PROCD');
    end if;
  end detrm_fonct_numbr;

  function detrm_type_don (pva_type_don in varchar2)
    return number is
    vnu_dv_type_don                         number (10);
  begin
    case pva_type_don
      when 'VARCHAR2' then
        vnu_dv_type_don :=
          sie_14_domn_valr_pkg.obten_seqnc ('TYPE_DON',
                                            'VARCH');
      when 'DATE' then
        vnu_dv_type_don :=
          sie_14_domn_valr_pkg.obten_seqnc ('TYPE_DON',
                                            'DATE');
      when 'NUMBER' then
        vnu_dv_type_don :=
          sie_14_domn_valr_pkg.obten_seqnc ('TYPE_DON',
                                            'NUMBR');
      when 'CLOB' then
        vnu_dv_type_don :=
          sie_14_domn_valr_pkg.obten_seqnc ('TYPE_DON',
                                            'CLOB');
      when 'BOOLEAN' then
        vnu_dv_type_don :=
          sie_14_domn_valr_pkg.obten_seqnc ('TYPE_DON',
                                            'BOLN');
      else
        vnu_dv_type_don :=
          sie_14_domn_valr_pkg.obten_seqnc ('TYPE_DON',
                                            'AUTRE');
    end case;

    return vnu_dv_type_don;
  end detrm_type_don;

  function long_to_vc2 (pva_objet_id in varchar2,
                        pnu_subpr_id in number,
                        pnu_seqnc in number)
    return varchar2 is
    vva_deft_value                          varchar2 (200);
  begin
    select   default_value
      into   vva_deft_value
      from   dba_arguments
     where   object_id = pva_objet_id and subprogram_id = pnu_subpr_id and sequence = pnu_seqnc and position != 0;

    return vva_deft_value;
  end long_to_vc2;

  --CONAL : revoir le fonctionnement après la refonte
  procedure maj_modls_refrn (pnu_versn_prodt in number) is
    /*
      Différent type : VUE, PACKG, PROCD, FUNCT
    */
    vva_schem                               varchar2 (30);
  begin
    vva_schem := sie_11_aplic_pkg.obten_schem (sie_11_aplic_pkg.obten_aplic_sesn);

    --Supprimer les modules de packages
    delete from   vd_i_sie_20_modl dest
          where   not exists
                    (select   1
                       from   (select   object_name,
                                        procedure_name,
                                        overload
                                 from   dba_procedures procd
                                where   procd.owner = vva_schem) sourc
                      where   sourc.object_name = (select   nom_organ
                                                     from   vd_i_sie_20_modl m
                                                    where   m.seqnc = dest.ref_modl)
                          and sourc.procedure_name = dest.nom_organ
                          and sourc.overload = dest.numr_surch)
              and (dest.ref_versn = pnu_versn_prodt and pnu_versn_prodt is not null)
              and ref_modl is not null;

    --Supprimer les modules procd/function/pkg qui n'existent pas
    delete from   vd_i_sie_20_modl dest
          where   not exists
                    (select   1
                       from   (select   object_name
                                 from   dba_procedures procd
                                where   procd.owner = vva_schem) sourc
                      where   sourc.object_name = dest.nom_organ)
              and (dest.ref_versn = pnu_versn_prodt and pnu_versn_prodt is not null)
              and ref_modl is null;

    --Creer les procedures.
    merge into   vd_i_sie_20_modl dest
         using   (select   object_name nom,
                           overload surch,
                           aggregate agreg,
                           pipelined pipln,
                           deterministic detrm,
                           case authid when 'CURRENT_USER' then 'O' else 'N' end authid
                    from   dba_procedures
                   where   owner = vva_schem and object_type = 'PROCEDURE') sourc
            on   (sourc.nom = dest.nom_organ)
    when matched then
      update set
        dest.numr_surch = to_number (sourc.surch),
        dest.indic_agreg = obten_indic (sourc.agreg),
        dest.indic_pipln = obten_indic (sourc.pipln),
        dest.indic_detrm = obten_indic (sourc.detrm),
        dest.indic_authid_curnt_utils = sourc.authid
    when not matched then
      insert       (ref_dv_type_modl,
                    ref_versn,
                    nom_organ,
                    versn_bd_aplic,
                    numr_surch,
                    indic_agreg,
                    indic_pipln,
                    indic_detrm,
                    indic_authid_curnt_utils)
          values   (sie_14_domn_valr_pkg.obten_seqnc ('TYPE_MODL',
                                                      'PROCD'),
                    pnu_versn_prodt,
                    sourc.nom,
                    '11g',
                    to_number (sourc.surch),
                    obten_indic (sourc.agreg),
                    obten_indic (sourc.pipln),
                    obten_indic (sourc.detrm),
                    sourc.authid);

    --Creer les functions.
    merge into   vd_i_sie_20_modl dest
         using   (select   object_name nom,
                           overload surch,
                           aggregate agreg,
                           pipelined pipln,
                           deterministic detrm,
                           case authid when 'CURRENT_USER' then 'O' else 'N' end authid
                    from   dba_procedures
                   where   owner = vva_schem and object_type = 'FUNCTION') sourc
            on   (sourc.nom = dest.nom_organ)
    when matched then
      update set
        dest.numr_surch = to_number (sourc.surch),
        dest.indic_agreg = obten_indic (sourc.agreg),
        dest.indic_pipln = obten_indic (sourc.pipln),
        dest.indic_detrm = obten_indic (sourc.detrm),
        dest.indic_authid_curnt_utils = sourc.authid
    when not matched then
      insert       (ref_dv_type_modl,
                    ref_versn,
                    nom_organ,
                    versn_bd_aplic,
                    numr_surch,
                    indic_agreg,
                    indic_pipln,
                    indic_detrm,
                    indic_authid_curnt_utils)
          values   (sie_14_domn_valr_pkg.obten_seqnc ('TYPE_MODL',
                                                      'FONCT'),
                    pnu_versn_prodt,
                    sourc.nom,
                    '11g',
                    to_number (sourc.surch),
                    obten_indic (sourc.agreg),
                    obten_indic (sourc.pipln),
                    obten_indic (sourc.detrm),
                    sourc.authid);

    --Creer les packages.
    merge into   vd_i_sie_20_modl dest
         using   (select   object_name nom,
                           overload surch,
                           aggregate agreg,
                           pipelined pipln,
                           deterministic detrm,
                           case authid when 'CURRENT_USER' then 'O' else 'N' end authid
                    from   dba_procedures
                   where   owner = vva_schem and object_type = 'PACKAGE' and procedure_name is null) sourc
            on   (sourc.nom = dest.nom_organ)
    when matched then
      update set
        dest.numr_surch = to_number (sourc.surch),
        dest.indic_agreg = obten_indic (sourc.agreg),
        dest.indic_pipln = obten_indic (sourc.pipln),
        dest.indic_detrm = obten_indic (sourc.detrm),
        dest.indic_authid_curnt_utils = sourc.authid
    when not matched then
      insert       (ref_dv_type_modl,
                    ref_versn,
                    nom_organ,
                    versn_bd_aplic,
                    numr_surch,
                    indic_agreg,
                    indic_pipln,
                    indic_detrm,
                    indic_authid_curnt_utils)
          values   (sie_14_domn_valr_pkg.obten_seqnc ('TYPE_MODL',
                                                      'PACKG'),
                    pnu_versn_prodt,
                    sourc.nom,
                    '11g',
                    to_number (sourc.surch),
                    obten_indic (sourc.agreg),
                    obten_indic (sourc.pipln),
                    obten_indic (sourc.detrm),
                    sourc.authid);

    --Creer les procedures/fonctions des packages.
    merge into   vd_sie_20_modl dest
         using   (select   proc.object_name nom,
                           proc.procedure_name nom_procd,
                           proc.overload surch,
                           proc.aggregate agreg,
                           proc.pipelined pipln,
                           proc.deterministic detrm,
                           detrm_fonct_numbr (proc.object_name,
                                              proc.procedure_name,
                                              proc.overload)
                             type,
                           case proc.authid when 'CURRENT_USER' then 'O' else 'N' end authid,
                           modl.seqnc seqnc_modl
                    from   dba_procedures proc,
                           vd_i_sie_20_modl modl
                   where   proc.owner = vva_schem
                       and proc.object_type = 'PACKAGE'
                       and proc.object_name = modl.nom_organ
                       and proc.procedure_name is not null
                       and modl.ref_versn = pnu_versn_prodt
                       and pnu_versn_prodt is not null) sourc
            on   (sourc.nom_procd = dest.nom_organ
              and sourc.nom = dest.ref_modl_formt
              and sourc.surch = dest.numr_surch)
    when matched then
      update set
        dest.indic_agreg = obten_indic (sourc.agreg),
        dest.indic_pipln = obten_indic (sourc.pipln),
        dest.indic_detrm = obten_indic (sourc.detrm),
        dest.indic_authid_curnt_utils = sourc.authid
    when not matched then
      insert       (ref_dv_type_modl,
                    ref_versn,
                    nom_organ,
                    ref_modl,
                    versn_bd_aplic,
                    numr_surch,
                    indic_agreg,
                    indic_pipln,
                    indic_detrm,
                    indic_authid_curnt_utils)
          values   (sourc.type,
                    pnu_versn_prodt,
                    sourc.nom_procd,
                    sourc.seqnc_modl,
                    '11g',
                    to_number (sourc.surch),
                    obten_indic (sourc.agreg),
                    obten_indic (sourc.pipln),
                    obten_indic (sourc.detrm),
                    sourc.authid);

    --Merger les arguments des packages
    merge into   vd_i_sie_20_modl_parmt dest
         using   (select   arg.argument_name nom,
                           arg.position postn,
                           detrm_type_don (arg.pls_type) type_don,
                           case arg.defaulted when 'Y' then 'N' else 'O' end indic_publc,
                           long_to_vc2 (arg.object_id,
                                        arg.subprogram_id,
                                        arg.sequence)
                             deft,
                           arg.in_out sens,
                           modl.seqnc seqnc_modl
                    from   dba_arguments arg,
                           vd_sie_20_modl modl
                   where   arg.owner = vva_schem
                       and arg.object_name = modl.nom_organ
                       and (arg.package_name = modl.ref_modl_formt and modl.ref_modl is not null
                         or modl.ref_modl is null)
                       and (arg.overload = modl.numr_surch and modl.numr_surch is not null
                         or modl.numr_surch is null)
                       and arg.position != 0
                       and arg.argument_name is not null
                       and modl.ref_versn = pnu_versn_prodt
                       and pnu_versn_prodt is not null) sourc
            on   (sourc.nom = dest.nom_organ and sourc.seqnc_modl = dest.ref_modl)
    when matched then
      update set
        dest.ref_dv_type_don = sourc.type_don,
        dest.postn = sourc.postn,
        dest.valr_deft = sourc.deft,
        dest.sens = sourc.sens,
        dest.indic_publc = sourc.indic_publc,
        dest.indic_retr = 'N'
    when not matched then
      insert       (ref_dv_type_don, ref_modl, nom_organ, postn, valr_deft, sens, indic_publc, indic_retr)
          values   (sourc.type_don,
                    sourc.seqnc_modl,
                    sourc.nom,
                    sourc.postn,
                    sourc.deft,
                    sourc.sens,
                    sourc.indic_publc,
                    'N');

    --Merger les variables de retour des packages

    merge into   vd_i_sie_20_modl_parmt dest
         using   (select   arg.argument_name nom,
                           arg.position postn,
                           detrm_type_don (arg.pls_type) type_don,
                           case arg.defaulted when 'Y' then 'N' else 'O' end indic_publc,
                           long_to_vc2 (arg.object_id,
                                        arg.subprogram_id,
                                        arg.sequence)
                             deft,
                           arg.in_out sens,
                           modl.seqnc seqnc_modl
                    from   dba_arguments arg,
                           vd_sie_20_modl modl
                   where   arg.owner = vva_schem
                       and arg.object_name = modl.nom_organ
                       and (arg.package_name = modl.ref_modl_formt and modl.ref_modl is not null
                         or modl.ref_modl is null)
                       and (arg.overload = modl.numr_surch and modl.numr_surch is not null
                         or modl.numr_surch is null)
                       and arg.position = 0
                       and arg.argument_name is null
                       and modl.ref_versn = pnu_versn_prodt
                       and pnu_versn_prodt is not null) sourc
            on   ('Variable de retour' = dest.nom_organ and sourc.seqnc_modl = dest.ref_modl)
    when matched then
      update set
        dest.ref_dv_type_don = sourc.type_don,
        dest.postn = sourc.postn,
        dest.valr_deft = sourc.deft,
        dest.sens = sourc.sens,
        dest.indic_publc = sourc.indic_publc,
        dest.indic_retr = 'O'
    when not matched then
      insert       (ref_dv_type_don, ref_modl, nom_organ, postn, valr_deft, sens, indic_publc, indic_retr)
          values   (sourc.type_don,
                    sourc.seqnc_modl,
                    'Variable de retour',
                    sourc.postn,
                    sourc.deft,
                    sourc.sens,
                    sourc.indic_publc,
                    'O');
  end maj_modls_refrn;

  function obten_modl_formt (pnu_seqnc in number)
    return varchar2 is
    vva_nom                                 varchar2 (61);
    vnu_modl                                number (10);
  begin
    select   nom_organ,
             ref_modl
      into   vva_nom,
             vnu_modl
      from   vd_sie_20_modl
     where   seqnc = pnu_seqnc;

    /*if vnu_modl is not null then
      select nom_organ || '.' || vva_nom
        into vva_nom
        from vd_sie_20_modl
       where seqnc = vnu_modl;
    end if;*/

    return vva_nom;
  end obten_modl_formt;

  function obten_propr_sous_modl_formt (pnu_seqnc in number)
    return varchar2 is
    vva_nom                                 varchar2 (61);
    vnu_modl                                number (10);
  begin
    select   nom_organ,
             ref_modl
      into   vva_nom,
             vnu_modl
      from   vd_sie_20_modl
     where   seqnc = (select   d.ref_seqnc_struc_aplic
                        from   vd_i_sie_20_docmn d,
                               vd_i_sie_12_struc_aplic sa
                       where   sa.seqnc = d.ref_struc_aplic and d.seqnc = pnu_seqnc);

    if vnu_modl is not null then
      select   nom_organ
        into   vva_nom
        from   vd_sie_20_modl
       where   seqnc = vnu_modl;
    end if;

    return vva_nom;
  end obten_propr_sous_modl_formt;

  function obten_modl_parmt_formt (pnu_seqnc in number)
    return varchar2 is
    vva_nom                                 varchar2 (61);
    vnu_modl                                number (10);
  begin
    select   nom_organ,
             ref_modl
      into   vva_nom,
             vnu_modl
      from   vd_sie_20_modl_parmt
     where   seqnc = pnu_seqnc;

    /*if vnu_modl is not null then
      select nom_organ || '.' || vva_nom
        into vva_nom
        from vd_sie_20_modl
       where seqnc = vnu_modl;
    end if;*/

    return vva_nom;
  end obten_modl_parmt_formt;
end sie_20_modl_pkg;
/

Prompt Package Body SIE_21_ACTIO_DYNMQ_PKG;
/* Formatted on 04/12/2013 11:35:37 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_actio_dynmq_pkg is
  function valdr_prise_charg (pva_code_plugn in varchar2)
    return boolean is
    vnu_page_sesn                           vd_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_sesn;
    vnu_page_zero_sesn                      vd_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_zero_sesn;
    vva_indic_prise_charg                   varchar2 (1);
    vbo_valr_retr                           boolean := false;
    vnu_nombr                               number (3);
  begin
    case pva_code_plugn
      when gta_code_plugn ('SIE_13_CONFR_SAUVG') then
        begin
          if sie_07_util_pkg.v ('A_SIE_13_MODE_RECHR') = 'O' then
            vva_indic_prise_charg := 'N';
          else
            select   p.indic_prise_charg_sie13_confr
              into   vva_indic_prise_charg
              from   vd_sie_13_page p
             where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
          end if;
        end;
      when gta_code_plugn ('SIE_18') then
        begin
          select   p.indic_prise_charg_sie18
            into   vva_indic_prise_charg
            from   vd_sie_13_page p
           where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
        end; /*
 when gta_code_plugn ('SIE_14_POPUP_LOV_ITEM') then
   begin
     select   count (1)
       into   vnu_nombr
       from   vd_sie_13_page_item pi,
              vd_sie_14_popup_lov_ir pli,
              vd_sie_13_page p,
              apex_item_page aip
      where   pi.ref_page in (vnu_page_sesn, vnu_page_zero_sesn)
              and aip.id = pi.id_apex
              and aip.lov is not null
              and pli.ref_page_item = pi.seqnc
              and pli.ref_page = p.seqnc;
   end;
 when gta_code_plugn ('SIE_14_POPUP_LOV') then
   begin
     select   p.indic_prise_charg_sie14_popup
       into   vva_indic_prise_charg
       from   vd_sie_13_page p
      where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
     select   count (1)
       into   vnu_nombr
       from   vd_sie_14_popup_lov_ir pli,
              vd_sie_14_popup_lov_ir_retr plir,
              vd_sie_13_page_ir_coln pic
      where   pli.ref_page = vnu_page_sesn
              and pli.seqnc = plir.ref_popup_lov_ir
              and plir.ref_page_ir_coln = pic.seqnc;
   end;*/
      else
        null;
    end case;

    if (vnu_nombr is null
     or (vnu_nombr is not null and vnu_nombr > 0))
   and vva_indic_prise_charg = 'O' then
      vbo_valr_retr := true;
    end if;

    return vbo_valr_retr;
  end valdr_prise_charg;

  function obten_id_regn_afect (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return number is
    vnu_id_regn_afect                       apex_actio_dynmq_actio.affected_region_id%type;
  begin
    select   aada.affected_region_id
      into   vnu_id_regn_afect
      from   apex_actio_dynmq_actio aada
     where   aada.id = pnu_actio_dynmq;

    return vnu_id_regn_afect;
  exception
    when no_data_found then
      return null;
  end obten_id_regn_afect;

  function obten_elemn_afect (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return varchar2 is
    vva_elemn_afect                         apex_actio_dynmq_actio.affected_elements%type;
  begin
    select   aada.affected_elements
      into   vva_elemn_afect
      from   apex_actio_dynmq_actio aada
     where   aada.id = pnu_actio_dynmq;

    return vva_elemn_afect;
  exception
    when no_data_found then
      return null;
  end obten_elemn_afect;

  function obten_elemn_decln (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return varchar2 is
    vva_elemn_decln                         apex_actio_dynmq_evenm.triggering_element%type;
  begin
    select   aade.triggering_element
      into   vva_elemn_decln
      from   apex_actio_dynmq_evenm aade,
             apex_actio_dynmq_actio aada
     where   aade.id = aada.event_id and aada.id = pnu_actio_dynmq;

    return vva_elemn_decln;
  exception
    when no_data_found then
      return null;
  end obten_elemn_decln;

  function obten_boutn_decln (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return varchar2 is
    vva_boutn_decln                         apex_boutn_page.button_name%type;
  begin
    select   abp.button_name
      into   vva_boutn_decln
      from   apex_boutn_page abp,
             apex_actio_dynmq_evenm aade,
             apex_actio_dynmq_actio aada
     where   abp.id = aade.triggering_button_id
         and aade.triggering_element_type = 'BUTTON'
         and aade.id = aada.event_id
         and aada.id = pnu_actio_dynmq;

    return vva_boutn_decln;
  exception
    when no_data_found then
      return null;
  end obten_boutn_decln;

  function genr_plugn_confr_sauvg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_mesg_confr                          varchar2 (2000);
  begin
    if valdr_prise_charg (gta_code_plugn ('SIE_13_CONFR_SAUVG')) then
      vva_mesg_confr := nvl (sie_21_plugn_confr_sauvg_pkg.obten_mesg_confr, p_dynamic_action.attribute_01);

      sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                         p_plugin);

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.confr_sauvg',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      rec_actn_dynmq.javascript_function :=
           'function(){'
        || 'afw.sie_21.actio_dynmq.confr_sauvg.insta.push('
        || 'new afw.sie_21.actio_dynmq.confr_sauvg.confr_sauvg('
        || '{'
        || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                          to_char (p_dynamic_action.id))
        || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                          'actio_dynmq_' || p_dynamic_action.id)
        || apex_javascript.add_attribute ('vva_nom_plugn',
                                          p_plugin.name)
        || apex_javascript.add_attribute ('vva_plugn_ajax',
                                          apex_plugin.get_ajax_identifier)
        || apex_javascript.add_attribute ('vva_mesg_confr',
                                          vva_mesg_confr,
                                          p_add_comma                => false)
        || '}));}';

      return rec_actn_dynmq;
    else
      rec_actn_dynmq.javascript_function := 'false';
    end if;

    return rec_actn_dynmq;
  exception
    when others then
      raise;
  end genr_plugn_confr_sauvg;

  function ajax_plugn_confr_sauvg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_JSON_ITEM' then
        sie_21_plugn_confr_sauvg_pkg.obten_json_item_confr ();
      when 'OBTEN_JSON_REQT' then
        sie_21_plugn_confr_sauvg_pkg.obten_json_reqt_sauvg ();
      else
        null;
    end case;

    return rec_actio_dynmq;
  end ajax_plugn_confr_sauvg;

  function genr_plugn_confr_sauvg_reint (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    rec_actn_dynmq.javascript_function := 'function(){' || 'afw.sie_13.plugn_confr_sauvg.reint();' || '}';
    return rec_actn_dynmq;
  end genr_plugn_confr_sauvg_reint;

  function genr_sie_18_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;

    function valdr_prise_charg
      return boolean is
      vbo_valdr_prise_charg                   boolean default false;
      vnu_nombr                               number;
    begin
      select   count (*)
        into   vnu_nombr
        from   apex_regn_coln arc,
               apex_regn ar,
               vd_sie_13_page_item pi,
               vd_sie_11_aplic ap,
               vd_sie_13_page p
       where   arc.column_alias = pi.depsm_alias_coln
           and arc.flow_id = ar.flow_id
           and arc.region_id = ar.id
           and ar.plug_source_type = 'UPDATABLE_SQL_QUERY'
           and ar.flow_id = ap.numr_aplic_apex
           and ar.page_id = p.numr_apex
           and pi.ref_page = p.seqnc
           and ap.seqnc = p.ref_aplic
           and p.indic_prise_charg_sie18 = 'O'
           and p.seqnc = sie_13_page_pkg.obten_page_sesn;

      vbo_valdr_prise_charg := case when vnu_nombr > 0 then true else false end;

      return vbo_valdr_prise_charg;
    end valdr_prise_charg;
  begin
    if valdr_prise_charg then
      sie_07_util_pkg.ajout_info_debug (sie_01_gestn_mesg_pkg.obten_mesg (sie_01_gestn_mesg_pkg.obten_seqnc_mesg (
                                                                            'DEB.000001',
                                                                            'AFW'
                                                                          )));
      sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                         p_plugin);

      sie_21_util_pkg.ajout_libr_css ('afw.sie_21.actio_dynmq.sie_18_depsm_tablr_form',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.sie_18_depsm_tablr_form',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      rec_actn_dynmq.javascript_function :=
           'function(){'
        || 'afw.sie_21.actio_dynmq.sie_18_depsm_tablr_form.insta.push('
        || 'new afw.sie_21.actio_dynmq.sie_18_depsm_tablr_form.sie_18_depsm_tablr_form('
        || '{'
        || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                          to_char (p_dynamic_action.id))
        || apex_javascript.add_attribute ('vva_nom_plugn',
                                          p_plugin.name)
        || apex_javascript.add_attribute ('vva_plugn_ajax',
                                          apex_plugin.get_ajax_identifier)
        || apex_javascript.add_attribute ('vva_nom_coln_cle_primr',
                                          sie_18_tablr_form_pkg.obten_nom_coln_cle_primr,
                                          p_add_comma                => false)
        || '}));}';
    else
      rec_actn_dynmq.javascript_function := 'false';
    end if;

    return rec_actn_dynmq;
  end genr_sie_18_depsm_tablr_form;

  function ajax_sie_18_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_ITEM_DEPSM_TABLR_FORM' then
        sie_18_tablr_form_pkg.obten_json_item_depsm ();
      else
        null;
    end case;

    return rec_actio_dynmq;
  end ajax_sie_18_depsm_tablr_form;

  function genr_plugn_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
  begin
    return genr_sie_18_depsm_tablr_form (p_dynamic_action,
                                         p_plugin);
  end genr_plugn_depsm_tablr_form;

  function ajax_plugn_depsm_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
  begin
    return ajax_sie_18_depsm_tablr_form (p_dynamic_action,
                                         p_plugin);
  end ajax_plugn_depsm_tablr_form;

  function genr_plugn_navgt_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    if valdr_prise_charg (gta_code_plugn ('SIE_18')) then
      sie_07_util_pkg.ajout_info_debug (sie_01_gestn_mesg_pkg.obten_mesg (sie_01_gestn_mesg_pkg.obten_seqnc_mesg (
                                                                            'DEB.000002',
                                                                            'AFW'
                                                                          )));

      sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                         p_plugin);

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.navgt_tablr_form',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      rec_actn_dynmq.javascript_function := 'function(){' || 'afw.sie_21.actio_dynmq.navgt_tablr_form.initl();' || '}';
    else
      rec_actn_dynmq.javascript_function := 'false';
    end if;

    return rec_actn_dynmq;
  end genr_plugn_navgt_tablr_form;

  function genr_plugn_gestn_tablr_form (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    if valdr_prise_charg (gta_code_plugn ('SIE_18')) then
      sie_07_util_pkg.ajout_info_debug (sie_01_gestn_mesg_pkg.obten_mesg (sie_01_gestn_mesg_pkg.obten_seqnc_mesg (
                                                                            'DEB.000003',
                                                                            'AFW'
                                                                          )));

      sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                         p_plugin);

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.gestn_tablr_form',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      rec_actn_dynmq.javascript_function := 'function(){' || 'afw.sie_21.actio_dynmq.gestn_tablr_form.initl();' || '}';
    else
      rec_actn_dynmq.javascript_function := 'false';
    end if;

    return rec_actn_dynmq;
  end genr_plugn_gestn_tablr_form;

  function genr_plugn_popup_lov_ir (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Plugin - SIE 14 - Popup LOV IR');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.popup_lov_raprt_inter',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.popup_lov_raprt_inter.initl({'
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '});}';

    return rec_actn_dynmq;
  end genr_plugn_popup_lov_ir;

  --Deprecated
  function ajax_plugn_popup_lov_ir (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_JSON_VALR_PAGE_ITEM' then
        null;                                                    --sie_14_popup_lov_ir_pkg.obten_json_valr_page_item ();
      else
        null;
    end case;

    return rec_actio_dynmq;
  end ajax_plugn_popup_lov_ir;

  function genr_plugn_cliqr_selct_texte (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_elemn_decln                         apex_actio_dynmq_evenm.triggering_element%type;
    vvc_liste_elemn_afect                   apex_application_global.vc_arr2;
    vva_liste_elemn_afect                   varchar2 (4000);
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Cliquer pour selectioner tout le texte');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.cliqr_selct_texte',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    vva_elemn_decln := obten_elemn_decln (p_dynamic_action.id);

    vvc_liste_elemn_afect :=
      sie_07_util_pkg.string_to_table (obten_elemn_afect (p_dynamic_action.id),
                                       ',');

    if vvc_liste_elemn_afect.count > 0 then
      vva_liste_elemn_afect := '[';

      for i in 1 .. vvc_liste_elemn_afect.count loop
        vva_liste_elemn_afect := vva_liste_elemn_afect || '"' || vvc_liste_elemn_afect (i) || '",';
      end loop;

      vva_liste_elemn_afect :=
           rtrim (vva_liste_elemn_afect,
                  ',')
        || ']';

      --Initialiser le plugin
      rec_actn_dynmq.javascript_function :=
           'function(){'
        || 'afw.sie_21.actio_dynmq.cliqr_selct_texte.insta.push('
        || 'new afw.sie_21.actio_dynmq.cliqr_selct_texte.cliqr_selct_texte({'
        || apex_javascript.add_attribute ('vva_item_sourc',
                                          vva_elemn_decln)
        || sie_21_util_pkg.ajout_atrib_tabl_javsc ('vjs_cible',
                                                   vva_liste_elemn_afect,
                                                   pbo_afich_virgl            => false)
        || '}));}';
    else
      rec_actn_dynmq.javascript_function := 'false';
    end if;

    return rec_actn_dynmq;
  end genr_plugn_cliqr_selct_texte;

  function genr_matrc_raprt_sql (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_id_regn_reprt_catch                 varchar2 (400);
    vva_id_regn_reprt                       varchar2 (400);
    vva_surlg_ligne                         varchar2 (1000);

    function obten_tabl_javsc (pva_liste in varchar2)
      return varchar2 is
      vvc_liste                               apex_application_global.vc_arr2;
      vva_tabl_javsc                          varchar2 (1000);
    begin
      vvc_liste :=
        sie_07_util_pkg.string_to_table (pva_liste,
                                         ',');

      vva_tabl_javsc := '[';

      if vvc_liste.count > 0 then
        for i in vvc_liste.first .. vvc_liste.last loop
          vva_tabl_javsc := vva_tabl_javsc || '"' || vvc_liste (i) || '",';
        end loop;
      end if;

      vva_tabl_javsc :=
           rtrim (vva_tabl_javsc,
                  ',')
        || ']';

      return vva_tabl_javsc;
    end obten_tabl_javsc;
  begin
    sie_07_util_pkg.ajout_info_debug ('Plugin Action Dynamique - SIE 21 - genr_matrc_raprt_sql');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    vva_id_regn_reprt_catch := 'report_' || obten_id_regn_afect (p_dynamic_action.id) || '_catch';
    vva_id_regn_reprt := 'report_R' || obten_id_regn_afect (p_dynamic_action.id);

    vva_surlg_ligne := obten_tabl_javsc (p_dynamic_action.attribute_02);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.trans_raprt_sql',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.matrc_raprt_sql',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.matrc_raprt_sql.insta.push('
      || 'new afw.sie_21.actio_dynmq.matrc_raprt_sql.matrc_raprt_sql({'
      || apex_javascript.add_attribute ('vva_id_regn_reprt_catch',
                                        vva_id_regn_reprt_catch)
      || apex_javascript.add_attribute ('vva_id_regn_reprt',
                                        vva_id_regn_reprt)
      || apex_javascript.add_attribute ('vva_id_regn',
                                        obten_id_regn_afect (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vnu_nombr_coln_gauch',
                                        p_dynamic_action.attribute_01)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_surlg_ligne',
                                                 vva_surlg_ligne,
                                                 pbo_afich_virgl            => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_matrc_raprt_sql;

  function genr_group_entet_raprt_sql (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_id_regn_reprt_catch                 varchar2 (400);
    vva_id_regn_reprt                       varchar2 (400);
    vva_ligne_1                             varchar2 (1000);
    vva_ligne_2                             varchar2 (1000);
    vva_ligne_3                             varchar2 (1000);

    function obten_tabl_javsc (pva_liste_libl in varchar2,
                               pva_liste_formt in varchar2)
      return varchar2 is
      vvc_liste_libl                          apex_application_global.vc_arr2;
      vvc_liste_formt                         apex_application_global.vc_arr2;
      vvc_liste_sous_formt                    apex_application_global.vc_arr2;
      vva_tabl_javsc                          varchar2 (1000);
      vnu_colsp                               number (2);
      vnu_rowsp                               number (2);
    begin
      vvc_liste_libl :=
        sie_07_util_pkg.string_to_table (pva_liste_libl,
                                         ',');
      vvc_liste_formt :=
        sie_07_util_pkg.string_to_table (pva_liste_formt,
                                         ',');

      vva_tabl_javsc := '[';

      if vvc_liste_libl.count > 0 and vvc_liste_formt.count > 0 and vvc_liste_libl.count = vvc_liste_formt.count then
        for i in vvc_liste_libl.first .. vvc_liste_libl.last loop
          vvc_liste_sous_formt :=
            sie_07_util_pkg.string_to_table (vvc_liste_formt (i),
                                             ';');

          if vvc_liste_sous_formt.count = 2 then
            vnu_colsp := vvc_liste_sous_formt (1);
            vnu_rowsp := vvc_liste_sous_formt (2);
          else
            vnu_colsp := 1;
            vnu_rowsp := 1;
          end if;

          vva_tabl_javsc :=
               vva_tabl_javsc
            || '{'
            || '"libl":"'
            || trim (vvc_liste_libl (i))
            || '","colsp":'
            || vnu_colsp
            || ',"rowsp":'
            || vnu_rowsp
            || '},';
        end loop;
      end if;

      vva_tabl_javsc :=
           rtrim (vva_tabl_javsc,
                  ',')
        || ']';

      return vva_tabl_javsc;
    end obten_tabl_javsc;
  begin
    sie_07_util_pkg.ajout_info_debug ('Plugin Action Dynamique - SIE 21 - genr_group_entet_raprt_sql');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_PLUGN_GROUP_ENTET_RAPRT_SQL',
                                     p_plugin.name);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_ACTIO_DYNMQ_GROUP_ENTET_RAPRT_SQL',
                                     p_dynamic_action.id);

    vva_id_regn_reprt_catch := 'report_' || obten_id_regn_afect (p_dynamic_action.id) || '_catch';
    vva_id_regn_reprt := 'report_R' || obten_id_regn_afect (p_dynamic_action.id);

    vva_ligne_1 :=
      obten_tabl_javsc (p_dynamic_action.attribute_01,
                        p_dynamic_action.attribute_02);
    vva_ligne_2 :=
      obten_tabl_javsc (p_dynamic_action.attribute_03,
                        p_dynamic_action.attribute_04);
    vva_ligne_3 :=
      obten_tabl_javsc (p_dynamic_action.attribute_05,
                        p_dynamic_action.attribute_06);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.trans_raprt_sql',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.group_entet_raprt_sql',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.group_entet_raprt_sql.insta.push('
      || 'new afw.sie_21.actio_dynmq.group_entet_raprt_sql.group_entet_raprt_sql({'
      || apex_javascript.add_attribute ('vva_id_regn_reprt_catch',
                                        vva_id_regn_reprt_catch)
      || apex_javascript.add_attribute ('vva_id_regn_reprt',
                                        vva_id_regn_reprt)
      || apex_javascript.add_attribute ('vva_id_regn',
                                        obten_id_regn_afect (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_clas_css_surlg',
                                        p_dynamic_action.attribute_07)
      || apex_javascript.add_attribute ('vva_selct_surlg',
                                        p_dynamic_action.attribute_08)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_ligne_1',
                                                 vva_ligne_1)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_ligne_2',
                                                 vva_ligne_2)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_ligne_3',
                                                 vva_ligne_3,
                                                 pbo_afich_virgl            => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_group_entet_raprt_sql;

  function genr_group_entet_raprt_inter (p_dynamic_action in apex_plugin.t_dynamic_action,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_ligne_1                             varchar2 (1000);
    vva_ligne_2                             varchar2 (1000);
    vva_ligne_3                             varchar2 (1000);
    vva_trans_libl                          varchar2 (32767);
    vnu_nombr_coln_gauch                    number (5) default 1;
    vnu_nombr_coln_seprt                    number (5) default 1;                                        --a gerer CONAL
    vnu_nombr_coln_ventl                    number (5) default 0;

    function obten_tabl_javsc (pva_liste in varchar2)
      return varchar2 is
      vvc_liste_group                         apex_application_global.vc_arr2;
      vvc_liste_sous_group                    apex_application_global.vc_arr2;
      vva_tabl_javsc                          varchar2 (1000);
      vnu_colsp                               number (2);
      vnu_rowsp                               number (2);
    begin
      vvc_liste_group :=
        sie_07_util_pkg.string_to_table (pva_liste,
                                         ',');

      vva_tabl_javsc := '[';

      if vvc_liste_group.count > 0 then
        for i in vvc_liste_group.first .. vvc_liste_group.last loop
          vvc_liste_sous_group :=
            sie_07_util_pkg.string_to_table (vvc_liste_group (i),
                                             ';');

          vnu_colsp := vvc_liste_sous_group (2);
          vnu_rowsp := vvc_liste_sous_group (3);

          vva_tabl_javsc :=
               vva_tabl_javsc
            || '{'
            || '"libl":"'
            || trim (vvc_liste_sous_group (1))
            || '","colsp":'
            || vnu_colsp
            || ',"rowsp":'
            || vnu_rowsp
            || '},';
        end loop;
      end if;

      vva_tabl_javsc :=
           rtrim (vva_tabl_javsc,
                  ',')
        || ']';

      return vva_tabl_javsc;
    end obten_tabl_javsc;

    function obten_tabl_javsc_trans_libl (pva_liste_a_trans in varchar2)
      return varchar2 is
      vva_tabl_javsc                          varchar2 (32767);
      vvc_liste_a_trans                       apex_application_global.vc_arr2;
      vvc_liste_coupl                         apex_application_global.vc_arr2;
    begin
      vvc_liste_a_trans :=
        sie_07_util_pkg.string_to_table (pva_liste_a_trans,
                                         ',');
      vva_tabl_javsc := '[';

      if vvc_liste_a_trans.count > 0 then
        for i in vvc_liste_a_trans.first .. vvc_liste_a_trans.last loop
          vvc_liste_coupl :=
            sie_07_util_pkg.string_to_table (vvc_liste_a_trans (i),
                                             ';');

          vva_tabl_javsc :=
               vva_tabl_javsc
            || '{'
            || '"id":"'
            || trim (vvc_liste_coupl (1))
            || '","nouv_libl":"'
            || trim (vvc_liste_coupl (2))
            || '"},';
        end loop;
      end if;

      vva_tabl_javsc :=
           rtrim (vva_tabl_javsc,
                  ',')
        || ']';

      return vva_tabl_javsc;
    end obten_tabl_javsc_trans_libl;
  begin
    sie_07_util_pkg.ajout_info_debug ('Plugin Action Dynamique - SIE 21 - genr_group_entet_raprt_inter');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_PLUGN_GROUP_ENTET_RAPRT_INTER',
                                     p_plugin.name);
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_ACTIO_DYNMQ_GROUP_ENTET_RAPRT_INTER',
                                     p_dynamic_action.id);

    vva_ligne_1 := obten_tabl_javsc (p_dynamic_action.attribute_01);
    vva_ligne_2 := obten_tabl_javsc (p_dynamic_action.attribute_02);
    vva_ligne_3 := obten_tabl_javsc (p_dynamic_action.attribute_03);
    vva_trans_libl := obten_tabl_javsc_trans_libl (p_dynamic_action.attribute_04);

    if p_dynamic_action.attribute_10 > 1 then
      vnu_nombr_coln_gauch := p_dynamic_action.attribute_10;
      vnu_nombr_coln_ventl := p_dynamic_action.attribute_10 - 1;
    end if;

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.group_entet_raprt_inter',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.group_entet_raprt_inter.suprm("'
      || 'R'
      || obten_id_regn_afect (p_dynamic_action.id)
      || '");'
      || 'afw.sie_21.actio_dynmq.group_entet_raprt_inter.insta.push('
      || 'new afw.sie_21.actio_dynmq.group_entet_raprt_inter.group_entet_raprt_inter({'
      || apex_javascript.add_attribute ('vva_id_regn',
                                        'R' || obten_id_regn_afect (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vbo_gerer_ventl',
                                        case p_dynamic_action.attribute_05 when 'Y' then true else false end)
      || apex_javascript.add_attribute ('vva_clas_css_ventl',
                                        p_dynamic_action.attribute_06)
      || apex_javascript.add_attribute ('vva_clas_css_ventl_horzn',
                                        p_dynamic_action.attribute_07)
      || apex_javascript.add_attribute ('vva_clas_css_ventl_vertc',
                                        p_dynamic_action.attribute_08)
      || apex_javascript.add_attribute ('vva_clas_css_ventl_gauch',
                                        p_dynamic_action.attribute_09)
      || apex_javascript.add_attribute ('vva_clas_css_surlg',
                                        p_dynamic_action.attribute_11)
      || apex_javascript.add_attribute ('vva_selct_surlg',
                                        p_dynamic_action.attribute_12)
      || apex_javascript.add_attribute ('vnu_nombr_coln_gauch',
                                        vnu_nombr_coln_gauch)
      || apex_javascript.add_attribute ('vnu_nombr_coln_ventl',
                                        vnu_nombr_coln_ventl)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_ligne_1',
                                                 vva_ligne_1,
                                                 false)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_ligne_2',
                                                 vva_ligne_2,
                                                 false)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_ligne_3',
                                                 vva_ligne_3,
                                                 false)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc ('var_trans_libl_raprt',
                                                 vva_trans_libl,
                                                 false,
                                                 pbo_afich_virgl            => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_group_entet_raprt_inter;

  function genr_boutn_jquer_ui (p_dynamic_action in apex_plugin.t_dynamic_action,
                                p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Ajouter un groupe d''entete dans un rapport SQL');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Initialiser le plugin
    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.jQuery(".ui-state-default").hover(function(){afw.jQuery(this).addClass("ui-state-hover");},function(){afw.jQuery(this).removeClass("ui-state-hover");});'
      || 'afw.jQuery(".ui-state-default").click(function(){afw.jQuery(this).toggleClass("ui-state-active");});'
      || '}';

    return rec_actn_dynmq;
  end genr_boutn_jquer_ui;

  function genr_raprt_sql_rang_drag (p_dynamic_action in apex_plugin.t_dynamic_action,
                                     p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_id_regn_reprt_catch                 varchar2 (400);
    vva_id_regn_reprt                       varchar2 (400);
  begin
    sie_07_util_pkg.ajout_info_debug (
      'SIE 21 Plugin - Transformer les rangees d''un rapport SQL en objets deplacables'
    );

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    vva_id_regn_reprt_catch := 'report_' || obten_id_regn_afect (p_dynamic_action.id) || '_catch';
    vva_id_regn_reprt := 'report_R' || obten_id_regn_afect (p_dynamic_action.id);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.trans_raprt_sql',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.raprt_sql_rang_drag',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.raprt_sql_rang_drag.insta.push('
      || 'new afw.sie_21.actio_dynmq.raprt_sql_rang_drag.raprt_sql_rang_drag({'
      || apex_javascript.add_attribute ('vva_id_regn_reprt_catch',
                                        vva_id_regn_reprt_catch)
      || apex_javascript.add_attribute ('vva_id_regn_reprt',
                                        vva_id_regn_reprt)
      || apex_javascript.add_attribute ('vva_id_regn',
                                        obten_id_regn_afect (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_aide',
                                        'clone')
      || apex_javascript.add_attribute (
           'vva_revnr',
           case p_dynamic_action.attribute_01 when 'Y' then 'true' when 'N' then 'false' else 'true' end
         )
      || apex_javascript.add_attribute ('vnu_duree_revnr',
                                        p_dynamic_action.attribute_02)
      || apex_javascript.add_attribute ('vva_clas_css_rang_drag',
                                        p_dynamic_action.attribute_05)
      || apex_javascript.add_attribute ('vva_selct_jquer_regn_drop',
                                        p_dynamic_action.attribute_06,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_raprt_sql_rang_drag;

  function genr_raprt_inter_rang_drag (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_id_regn_reprt                       varchar2 (400);
  begin
    sie_07_util_pkg.ajout_info_debug (
      'SIE 21 Plugin - Transformer les rangees d''un rapport ineractif en objets deplacables'
    );

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    vva_id_regn_reprt := 'R' || obten_id_regn_afect (p_dynamic_action.id);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.raprt_inter_rang_drag',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.raprt_inter_rang_drag.insta.push('
      || 'new afw.sie_21.actio_dynmq.raprt_inter_rang_drag.raprt_inter_rang_drag({'
      || apex_javascript.add_attribute ('vva_id_regn_reprt',
                                        vva_id_regn_reprt)
      || apex_javascript.add_attribute ('vva_aide',
                                        'clone')
      || apex_javascript.add_attribute (
           'vva_revnr',
           case p_dynamic_action.attribute_01 when 'Y' then 'true' when 'N' then 'false' else 'true' end
         )
      || apex_javascript.add_attribute ('vnu_duree_revnr',
                                        p_dynamic_action.attribute_02)
      || apex_javascript.add_attribute ('vva_clas_css_rang_drag',
                                        p_dynamic_action.attribute_05)
      || apex_javascript.add_attribute ('vva_selct_jquer_regn_drop',
                                        p_dynamic_action.attribute_06,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_raprt_inter_rang_drag;

  function genr_afich_dialg_ifram (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_url                                 varchar2 (1000);
    vnu_numr_apex_aplic                     number;
    vnu_numr_apex_page                      number;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Afficher un dialogue avec un iframe');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.actio_dynmq.dialg',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.dialg',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    vnu_numr_apex_aplic := sie_21_util_pkg.obten_reslt_expre_plsql (p_dynamic_action.attribute_14);

    vnu_numr_apex_page := sie_21_util_pkg.obten_reslt_expre_plsql (p_dynamic_action.attribute_15);

    vva_url :=
      sie_08_url_pkg.genr_url (vnu_numr_apex_aplic,
                               vnu_numr_apex_page,
                               'SIDF',
                               sie_07_util_pkg.v ('SIDF'),
                               'SSPC',
                               case when p_dynamic_action.attribute_10 is not null then '#SSPC#' else null end,
                               'SAPC',
                               p_dynamic_action.attribute_06,
                               'SCPI',
                               p_dynamic_action.attribute_02,
                               'SSPI',
                               case when p_dynamic_action.attribute_11 is not null then '#SSPI#' else null end,
                               pva_mode_debg              => sie_07_util_pkg.v ('DEBUG'));

    sie_12_dialg_ifram_pkg.defnr_item_cle_etran (p_dynamic_action.id,
                                                 p_dynamic_action.attribute_12);

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.dialg.insta.push('
      || 'new afw.sie_21.actio_dynmq.dialg.dialg('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_titre',
                                        p_dynamic_action.attribute_01)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier)
      || apex_javascript.add_attribute ('vva_url',
                                        vva_url)
      || apex_javascript.add_attribute ('vnu_numr_apex_aplic',
                                        vnu_numr_apex_aplic)
      || apex_javascript.add_attribute ('vnu_numr_apex_page',
                                        vnu_numr_apex_page)
      || apex_javascript.add_attribute ('vva_url',
                                        vva_url)
      || apex_javascript.add_attribute ('vva_item_sspc',
                                        to_char (p_dynamic_action.attribute_10))
      || apex_javascript.add_attribute ('vva_item_sspi',
                                        to_char (p_dynamic_action.attribute_11))
      || apex_javascript.add_attribute ('vbo_redmn',
                                        sie_21_util_pkg.formt_plugn_atrib_boln (p_dynamic_action.attribute_07))
      || apex_javascript.add_attribute ('vbo_fermr_echap',
                                        sie_21_util_pkg.formt_plugn_atrib_boln (p_dynamic_action.attribute_08))
      || apex_javascript.add_attribute ('vbo_deplc',
                                        sie_21_util_pkg.formt_plugn_atrib_boln (p_dynamic_action.attribute_09))
      || apex_javascript.add_attribute ('vva_clas_css',
                                        p_dynamic_action.attribute_05)
      || apex_javascript.add_attribute ('vnu_largr',
                                        p_dynamic_action.attribute_03)
      || apex_javascript.add_attribute ('vnu_hautr',
                                        p_dynamic_action.attribute_04,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_afich_dialg_ifram;

  function ajax_afich_dialg_ifram (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OUVRI_DIALG' then
        sie_12_dialg_ifram_pkg.ouvri_dialg (aa.g_x01,
                                            aa.g_x02,
                                            aa.g_x03);
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_afich_dialg_ifram;

  function genr_fermr_dialg_ifram (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Fermer un dialogue iframe');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'parent.afw.jQuery("#"+parent.afw.jQuery(frameElement).parent().attr("id")).trigger("dialogclose_actio_dynmq");'
      || '}';

    return rec_actn_dynmq;
  end genr_fermr_dialg_ifram;

  function genr_afich_regn_dialg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Afficher une region dialogue');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'vjs_dialg = afw.sie_21.regn.dialg.obten("R'
      || obten_id_regn_afect (p_dynamic_action.id)
      || '");'
      || case
           when p_dynamic_action.attribute_01 is not null then
             'vjs_dialg.defnr_largr(' || p_dynamic_action.attribute_01 || ');'
           else
             null
         end
      || 'vjs_dialg.ouvri();'
      || '}';

    return rec_actn_dynmq;
  end genr_afich_regn_dialg;

  function genr_fermr_regn_dialg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Fermer une region dialogue');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);


    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'vjs_dialg = afw.sie_21.regn.dialg.obten("R'
      || obten_id_regn_afect (p_dynamic_action.id)
      || '");'
      || 'vjs_dialg.fermr();'
      || '}';

    return rec_actn_dynmq;
  end genr_fermr_regn_dialg;

  function genr_soumt_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Soumettre des items (CLOB)');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.soumt_clob',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.soumt_clob.insta.push('
      || 'new afw.sie_21.actio_dynmq.soumt_clob.soumt_clob('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_reqt_soums_page',
                                        lower (obten_boutn_decln (p_dynamic_action.id)))
      || sie_21_util_pkg.ajout_atrib_tabl_javsc (
           'var_liste_items',
           sie_21_util_pkg.obten_tabl_javsc_liste_items (p_dynamic_action.attribute_01),
           false
         )
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_soumt_clob;

  function ajax_soumt_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
    vva_nom_colct_clob                      varchar2 (255) default 'CA_SIESOLUTIONS_SIE21_COLCT_CLOB';
  begin
    case aa.g_widget_action
      when 'CREER_COLCT_CLOB' then
        apex_collection.create_or_truncate_collection (vva_nom_colct_clob);
        htp.p ('{"stat":"colct_cree"}');
      when 'TELVS_CLOB' then
        if apex_collection.collection_exists (vva_nom_colct_clob) then
          if aa.g_f01.count > 0 then
            sie_07_clob_pkg.creer_nouv ();

            for i in 1 .. aa.g_f01.count loop
              sie_07_clob_pkg.ajout (aa.g_f01 (i));
            end loop;

            apex_collection.add_member (p_collection_name          => vva_nom_colct_clob,
                                        p_c001                     => aa.g_x01,
                                        p_clob001                  => sie_07_clob_pkg.obten ());

            sie_07_clob_pkg.termn ();
          end if;

          htp.p ('La sauvegarde de "' || aa.g_x01 || '" est termine.');
        end if;
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      ete ();
  end ajax_soumt_clob;

  function genr_suprm_item_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Supprimer le contenu des items (CLOB)');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.suprm_item_clob',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.suprm_item_clob.insta.push('
      || 'new afw.sie_21.actio_dynmq.suprm_item_clob.suprm_item_clob('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_reqt_soums_page',
                                        lower (obten_boutn_decln (p_dynamic_action.id)))
      || sie_21_util_pkg.ajout_atrib_tabl_javsc (
           'var_liste_items',
           sie_21_util_pkg.obten_tabl_javsc_liste_items (p_dynamic_action.attribute_01),
           false,
           false
         )
      || '}));}';

    return rec_actn_dynmq;
  end genr_suprm_item_clob;

  function genr_dml_obten_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                                p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Obtenir des CLOB');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.dml_obten_clob',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.dml_obten_clob.insta.push('
      || 'new afw.sie_21.actio_dynmq.dml_obten_clob.dml_obten_clob('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_table',
                                        p_dynamic_action.attribute_01)
      || apex_javascript.add_attribute ('vva_item_cle_primr_1',
                                        p_dynamic_action.attribute_02)
      || apex_javascript.add_attribute ('vva_coln_cle_primr_1',
                                        p_dynamic_action.attribute_03)
      || apex_javascript.add_attribute ('vva_item_cle_primr_2',
                                        p_dynamic_action.attribute_04)
      || apex_javascript.add_attribute ('vva_coln_cle_primr_2',
                                        p_dynamic_action.attribute_05)
      || sie_21_util_pkg.ajout_atrib_tabl_javsc (
           'var_liste_items',
           sie_21_util_pkg.obten_tabl_javsc_liste_items (p_dynamic_action.attribute_06),
           false
         )
      || sie_21_util_pkg.ajout_atrib_tabl_javsc (
           'var_liste_coln',
           sie_21_util_pkg.obten_tabl_javsc_liste_items (p_dynamic_action.attribute_07),
           false
         )
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_dml_obten_clob;

  function ajax_dml_obten_clob (p_dynamic_action in apex_plugin.t_dynamic_action,
                                p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
    vva_nom_colct_clob                      varchar2 (255) default p_plugin.name;

    procedure obten_clob_table (pva_table in varchar2,
                                pva_coln_cle_primr_1 in varchar2,
                                pva_item_cle_primr_1 in varchar2,
                                pva_coln_cle_primr_2 in varchar2 default null,
                                pva_item_cle_primr_2 in varchar2 default null,
                                pva_coln in varchar2) is
      vva_squel_progr_a_lancr                 varchar2 (4000)
        default 'declare
         vcl_contn clob;
         vnu_cle_primr_1 number default :p1;
         vnu_cle_primr_2 number default :p2;
       begin
         dbms_lob.createtemporary(vcl_contn, true);
         
         select  %COLN%
            into  vcl_contn
           from  %TABLE%
         where  %COLN% is not null and %COLN_CLE_PRIMR_1% = vnu_cle_primr_1%ENONC_CLE_PRIMR_2%;
         
         sie_15_htp_pkg.ecrir_clob(vcl_contn);
         
       exception
         when no_data_found then
           null;
         when others then
           ete ();
       end;';
      vva_progr_a_lancr                       varchar2 (4000)
                                                default sie_07_util_pkg.multi_replc (
                                                          vva_squel_progr_a_lancr,
                                                          '%TABLE%',
                                                          pva_table,
                                                          '%COLN_CLE_PRIMR_1%',
                                                          pva_coln_cle_primr_1,
                                                          '%ENONC_CLE_PRIMR_2%',
                                                          case
                                                            when pva_coln_cle_primr_2 is not null then
                                                              ' and ' || pva_coln_cle_primr_2 || ' = :p2'
                                                            else
                                                              null
                                                          end,
                                                          '%COLN%',
                                                          pva_coln
                                                        );
    begin
      execute immediate vva_progr_a_lancr
        using sie_07_util_pkg.v (pva_item_cle_primr_1),
              sie_07_util_pkg.v (pva_item_cle_primr_2);
    exception
      when others then
        ete ();
    end obten_clob_table;

    function valdt_colct_exist
      return boolean is
      vva_nom_colct_clob                      varchar2 (255) default 'CA_SIESOLUTIONS_SIE21_COLCT_CLOB';
      vnu_exist                               number;
      vbo_exist                               boolean;
    begin
      select   count (1)
        into   vnu_exist
        from   apex_collections
       where   collection_name = vva_nom_colct_clob;

      if vnu_exist > 0 then
        vbo_exist := true;
      else
        vbo_exist := false;
      end if;

      return vbo_exist;
    end valdt_colct_exist;

    procedure obten_clob_colct (pva_item in varchar2) is
      vva_nom_colct_clob                      varchar2 (255) default 'CA_SIESOLUTIONS_SIE21_COLCT_CLOB';
      vcl_contn                               clob;
    begin
      dbms_lob.createtemporary (vcl_contn,
                                true);

      select   clob001
        into   vcl_contn
        from   apex_collections
       where   collection_name = vva_nom_colct_clob and c001 = pva_item;

      sie_15_htp_pkg.ecrir_clob (vcl_contn);
    exception
      when no_data_found then
        null;
      when others then
        ete ();
    end obten_clob_colct;
  begin
    case aa.g_widget_action
      when 'DML_OBTEN_CLOB' then
        if not valdt_colct_exist and sie_07_util_pkg.v (aa.g_x03) is not null then
          obten_clob_table (aa.g_x01,
                            aa.g_x02,
                            aa.g_x03,
                            aa.g_x04,
                            aa.g_x05,
                            aa.g_x06);
        else
          obten_clob_colct (aa.g_x07);
        end if;
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      ete ();
  end ajax_dml_obten_clob;

  function genr_afich_mesg_procs (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Affiche message des processus');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.afich_mesg_procs',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.afich_mesg_procs.insta.push('
      || 'new afw.sie_21.actio_dynmq.afich_mesg_procs.afich_mesg_procs('
      || '{'
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_afich_mesg_procs;

  function ajax_afich_mesg_procs (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;

    procedure genr_mesg_sucs is
    begin
      if sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_21_MESG_SUCS') is not null then
        sie_15_htp_pkg.ecrir (sie_07_util_pkg.multi_replc (sie_13_page_pkg.obten_modl_mesg_sucs,
                                                           '#SUCCESS_MESSAGE#',
                                                           sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_21_MESG_SUCS')),
                              false);

        sie_07_sesn_pkg.suprm_valr_sesn ('S_SIE_21_MESG_SUCS');
      end if;
    end genr_mesg_sucs;

    procedure genr_mesg_ereur is
    begin
      if sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_21_MESG_EREUR') is not null then
        sie_15_htp_pkg.ecrir (sie_07_util_pkg.multi_replc (sie_13_page_pkg.obten_modl_mesg_ereur,
                                                           '#MESSAGE#',
                                                           sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_21_MESG_EREUR')),
                              false);

        sie_07_sesn_pkg.suprm_valr_sesn ('S_SIE_21_MESG_EREUR');
      end if;
    end genr_mesg_ereur;
  begin
    case aa.g_widget_action
      when 'OBTEN_MESG' then
        genr_mesg_sucs;
        genr_mesg_ereur;
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      ete ();
  end ajax_afich_mesg_procs;

  function genr_afich_mesg_infor (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Affiche message informatif');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.afich_mesg_infor',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.afich_mesg_infor.insta.push('
      || 'new afw.sie_21.actio_dynmq.afich_mesg_infor.afich_mesg_infor('
      || '{'
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_afich_mesg_infor;

  function ajax_afich_mesg_infor (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_MESG' then
        sie_01_err_apex_pkg.afich_mesg_infor_apex;
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_afich_mesg_infor;

  function genr_sie_13_menu_redrc (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - SIE 13 menu redirection');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.sie_13_menu_redrc',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actio_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.sie_13_menu_redrc.vva_plugn_ajax = "'
      || apex_plugin.get_ajax_identifier
      || '";}';

    return rec_actio_dynmq;
  end genr_sie_13_menu_redrc;

  function ajax_sie_13_menu_redrc (p_dynamic_action in apex_plugin.t_dynamic_action,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'DEFNR_ITEM_RACN' then
        sie_12_menu_pkg.defnr_item_racn (sie_13_menu_pkg.obten_menu_part_item_menu (aa.g_x01),
                                         aa.g_x01);

        htp.p ('');
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_sie_13_menu_redrc;

  function genr_sie_13_aide_page_item (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_render_result;
    vbo_afich_multp                         boolean default true;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - SIE 13 aide item page');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.sie_13_aide_page_item',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actio_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.sie_13_aide_page_item.vva_plugn_ajax = "'
      || apex_plugin.get_ajax_identifier
      || '";'
      || 'afw.sie_21.actio_dynmq.sie_13_aide_page_item.vbo_afich_multp = '
      || case p_dynamic_action.attribute_01 when 'Y' then 'false' else 'true' end
      || ';}';

    return rec_actio_dynmq;
  end genr_sie_13_aide_page_item;

  function ajax_sie_13_aide_page_item (p_dynamic_action in apex_plugin.t_dynamic_action,
                                       p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_AIDE' then
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'class',
                                   'ui-widget-content');

        sie_15_htp_pkg.ecrir (sie_01_gestn_mesg_aide_pkg.obten_aide_page_item (aa.g_x01));

        sie_15_htp_pkg.fermr_bals ('div');
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_sie_13_aide_page_item;

  function genr_sie_13_aide_page (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_render_result;
    vbo_afich_multp                         boolean default true;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - SIE 13 aide page');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.actio_dynmq.sie_13_aide_page',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.sie_13_aide_page',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    rec_actio_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.sie_13_aide_page.insta.push('
      || 'new afw.sie_21.actio_dynmq.sie_13_aide_page.sie_13_aide_page({'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_titre',
                                        p_dynamic_action.attribute_01)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actio_dynmq;
  end genr_sie_13_aide_page;

  function ajax_sie_13_aide_page (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_AIDE_PAGE' then
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'class',
                                   'ui-widget-content');
        sie_15_htp_pkg.ecrir (sie_13_regn_piltb_pkg.obten_contn_aide_page (sie_13_page_pkg.obten_page_sesn,
                                                                           sie_01_lang_pkg.obten_lang_sesn));

        -- TODO::CARLO
        --if wwv_flow_api.p_ALLOW_FEEDBACK_YN = 'Y' then
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'id',
                                   'boutn_comnt_bogue',
                                   'class',
                                   'ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icons');

        sie_15_htp_pkg.ouvri_bals ('a',
                                   'href',
                                   '#',
                                   'alt',
                                   'Page de feedback',
                                   'title',
                                   'Page de feedback');

        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-icon-primary ui-icon fff-icon-bug-add');
        sie_15_htp_pkg.fermr_bals ('span');

        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-text icon-left');
        sie_15_htp_pkg.ecrir ('Commentaires / Bogues');
        sie_15_htp_pkg.fermr_bals ('span');

        sie_15_htp_pkg.fermr_bals ('a');

        sie_15_htp_pkg.fermr_bals ('span');
        --end if;

        sie_15_htp_pkg.fermr_bals ('div');
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_sie_13_aide_page;

  function genr_redrc_url (p_dynamic_action in apex_plugin.t_dynamic_action,
                           p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Redirection vers un URL');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.redrc_url',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.redrc_url.insta.push('
      || 'new afw.sie_21.actio_dynmq.redrc_url.redrc_url('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_url',
                                        sie_21_util_pkg.obten_reslt_expre_plsql (p_dynamic_action.attribute_01),
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_redrc_url;

  function genr_redrc_url_dynmq (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Redirection vers un URL Dynamique');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.redrc_url_dynmq',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.redrc_url_dynmq.insta.push('
      || 'new afw.sie_21.actio_dynmq.redrc_url_dynmq.redrc_url_dynmq('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier)
      || apex_javascript.add_attribute ('vva_fonct_url',
                                        p_dynamic_action.attribute_01,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_redrc_url_dynmq;

  function ajax_redrc_url_dynmq (p_dynamic_action in apex_plugin.t_dynamic_action,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
    vva_progr_a_lancr                       varchar2 (4000)
      default    'begin sie_21_actio_dynmq_pkg.gva_redrc_url_dynmq :='
              || '  %PROCD_PERSN%; '
              || '  exception when others then ete();'
              || 'end;';
  begin
    case aa.g_widget_action
      when 'OBTEN_URL' then
        vva_progr_a_lancr :=
          replace (vva_progr_a_lancr,
                   '%PROCD_PERSN%',
                   aa.g_x01);

        execute immediate vva_progr_a_lancr;

        sie_15_htp_pkg.ecrir ('{"url":"' || gva_redrc_url_dynmq || '"}');
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_redrc_url_dynmq;

  function genr_trans_ident_coln_ir (p_dynamic_action in apex_plugin.t_dynamic_action,
                                     p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Transformer les identifiants de colonnes d''un IR');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.trans_ident_coln_raprt_inter',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.trans_ident_coln_raprt_inter.insta.push('
      || 'new afw.sie_21.actio_dynmq.trans_ident_coln_raprt_inter.trans_ident_coln_raprt_inter('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || 'vjs_ident_coln:{'
      || p_dynamic_action.attribute_01
      || '}'
      || '}));}';

    return rec_actn_dynmq;
  end genr_trans_ident_coln_ir;

  function genr_pris_charg_navgt (p_dynamic_action in apex_plugin.t_dynamic_action,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Avertissement navigateur non pris en charge');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.avert_navgt_pris_charg',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.avert_navgt_pris_charg.insta.push('
      || 'new afw.sie_21.actio_dynmq.avert_navgt_pris_charg.avert_navgt_pris_charg('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_titre',
                                        p_dynamic_action.attribute_01)
      || apex_javascript.add_attribute ('vva_mesg',
                                        p_dynamic_action.attribute_02)
      || apex_javascript.add_attribute ('vnu_largr',
                                        p_dynamic_action.attribute_03)
      || apex_javascript.add_attribute ('vnu_hautr',
                                        p_dynamic_action.attribute_04,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  end genr_pris_charg_navgt;

  function genr_sie_41_forml_repns (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
    vva_url                                 varchar2 (1000);
    vnu_numr_apex_aplic                     number;
    vnu_numr_apex_page                      number;
  begin
    sie_07_util_pkg.ajout_info_debug (
      'SIE 21 Plugin - Afficher un dialogue avec une question et son formulaire de reponse'
    );

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.actio_dynmq.sie_41_forml_repns',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.sie_41_forml_repns',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --TODO::ERIC
    -- Gerer les "return values" en session (sie_12_
    /*
                sie_12_gabrt_forml_repns.defnr_item_cle_etran (p_dynamic_action.id,
                                                 p_dynamic_action.attribute_12);
    */

    --TODO::ERIC
    -- Coder le fichier CSS
    -- Code le fichier JS

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.sie_41_forml_repns.insta.push('
      || 'new afw.sie_21.actio_dynmq.sie_41_forml_repns.sie_41_forml_repns('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name,
                                        p_add_comma                => false) /*|| apex_javascript.add_attribute ('vva_item_gabrt_detl_forml',
                                                  p_dynamic_action.attribute_01)
         || apex_javascript.add_attribute ('vva_item_procd_persn_repns',
                                      p_dynamic_action.attribute_03,
                                      )
         || apex_javascript.add_attribute ('vva_titre',
                                     p_dynamic_action.attribute_02
                                     )
          || apex_javascript.add_attribute ('vbo_fermr_echap',
                                      sie_21_util_pkg.formt_plugn_atrib_boln (p_dynamic_action.attribute_02))
         || apex_javascript.add_attribute ('vbo_deplc',
                                      sie_21_util_pkg.formt_plugn_atrib_boln (p_dynamic_action.attribute_03))
         || apex_javascript.add_attribute ('vva_clas_css',
                                      p_dynamic_action.attribute_04)
         || apex_javascript.add_attribute ('vnu_largr',
                                      p_dynamic_action.attribute_05)
         || apex_javascript.add_attribute ('vnu_hautr',
                                      p_dynamic_action.attribute_06,
                                      p_add_comma                => false)*/
      || '}));}';

    return rec_actn_dynmq;
  end genr_sie_41_forml_repns;

  function ajax_sie_41_forml_repns (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'OUVRI_FORML_REPNS' then
        --TODO::BOIER
        --sie_12_gabrt_detl_forml_pkg.initl(...);
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'id',
                                   'actio_dynmq_' || p_dynamic_action.id,
                                   'class',
                                   'afw_sie_21_actio_dynmq_sie_41_forml_repns');


        /*sie_21_plugn_forml_pkg.genr_forml_html (
          sie_07_util_pkg.v (p_dynamic_action.attribute_01),
          sie_07_util_pkg.v (p_dynamic_action.attribute_02),
          sie_07_util_pkg.v (p_dynamic_action.attribute_03));*/


        sie_15_htp_pkg.fermr_bals ('div');
      when 'OBTEN_TITRE' then
        sie_15_htp_pkg.ecrir ( /*sie_21_plugn_forml_pkg.obten_titre_forml (
                                 sie_07_util_pkg.v (p_dynamic_action.attribute_01),
                                 sie_07_util_pkg.v (p_dynamic_action.attribute_04))*/
                              null);
      when 'ENREG_REPNS' then
        /*sie_21_plugn_forml_pkg.enreg_repns (
          sie_07_util_pkg.v (p_dynamic_action.attribute_01),
          aa.g_x01,
          aa.g_x02,
          aa.g_x03,
          aa.g_x04);*/
        null;
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_sie_41_forml_repns;

  function genr_sie_12_modfr_mot_passe (p_dynamic_action in apex_plugin.t_dynamic_action,
                                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_render_result;
    vbo_afich_multp                         boolean default true;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - SIE 12 modifier mot de passe');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies CSS
    /*sie_21_util_pkg.ajout_libr_css ('afw.sie_21.actio_dynmq.sie_12_modfr_mot_passe',
                                                sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');*/

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.sie_12_modfr_mot_passe',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    rec_actio_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.sie_12_modfr_mot_passe.insta.push('
      || 'new afw.sie_21.actio_dynmq.sie_12_modfr_mot_passe.sie_12_modfr_mot_passe({'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_titre',
                                        p_dynamic_action.attribute_01)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actio_dynmq;
  end genr_sie_12_modfr_mot_passe;

  function genr_soumt_blob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actn_dynmq                          apex_plugin.t_dynamic_action_render_result;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Soumettre des fichiers (BLOB)');

    sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                       p_plugin);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.soumt_blob',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    rec_actn_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_21.actio_dynmq.soumt_blob.insta.push('
      || 'new afw.sie_21.actio_dynmq.soumt_blob.soumt_blob('
      || '{'
      || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                        to_char (p_dynamic_action.id))
      || apex_javascript.add_attribute ('vva_html_id_actio_dynmq',
                                        'actio_dynmq_' || p_dynamic_action.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));}';

    return rec_actn_dynmq;
  exception
    when others then
      rec_actn_dynmq.javascript_function := 'false';
  end genr_soumt_blob;

  function ajax_soumt_blob (p_dynamic_action in apex_plugin.t_dynamic_action,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
    vbl_fichr_tempr                         blob;
    vbl_fichr                               blob;
    vva_chain_tempr                         varchar2 (8000);
    vra_chain_tempr                         raw (32767);
  begin
    case aa.g_widget_action
      when 'CREER_COLCT_BLOB' then
        ete ('CREER_COLCT_BLOB');
        sie_21_plugn_blob_pkg.creer_colct;
        htp.p ('{"stat":"colct_cree"}');
      when 'TELVR_BLOB' then
        ete ('TELVR_BLOB');

        if sie_21_plugn_blob_pkg.colct_exist then
          if aa.g_f01.count > 0 then
            dbms_lob.createtemporary (vbl_fichr,
                                      true);
            dbms_lob.createtemporary (vbl_fichr_tempr,
                                      true);

            for i in 1 .. aa.g_f01.count loop
              vva_chain_tempr := aa.g_f01 (i);

              vva_chain_tempr :=
                sie_07_util_pkg.multi_replc (vva_chain_tempr,
                                             '%2B',
                                             '+',
                                             '%2F',
                                             '/',
                                             '%3D',
                                             '=');

              vra_chain_tempr := utl_encode.base64_decode (utl_raw.cast_to_raw (vva_chain_tempr));

              vbl_fichr_tempr := to_blob (vra_chain_tempr);

              dbms_lob.append (vbl_fichr,
                               vbl_fichr_tempr);
            end loop;

            sie_21_plugn_blob_pkg.ajout_membr_colct (pva_nom_fichr              => aa.g_x01,
                                                     pva_mime_type              => aa.g_x02,
                                                     pbl_fichr                  => vbl_fichr);

            ete ('fichier',
                 pbl_blob                   => vbl_fichr);

            dbms_lob.freetemporary (vbl_fichr);
            dbms_lob.freetemporary (vbl_fichr_tempr);
          end if;

          htp.p ('La sauvegarde du fichier  "' || aa.g_x01 || '" est terminée.');
        end if;
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      ete ();
  end ajax_soumt_blob;

  function genr_initl_comps (p_dynamic_action in apex_plugin.t_dynamic_action,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_render_result;
    vbo_afich_multp                         boolean default true;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Initialisation de composant');
    --Initialiser le plugin
    rec_actio_dynmq.javascript_function :=
         'function(){'
      || 'afw.sie_01.mesg.gestn_err_apex();'
      || 'afw.sie_13.page.item.genr_poubl();'
      || 'afw.sie_13.page.boutn.cachr_boots_dropdown();'
      || '}';

    return rec_actio_dynmq;
  end genr_initl_comps;

  function genr_sie_21_navgt_enreg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_render_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_render_result;
  begin
    if sie_21_plugn_navgt_enreg_pkg.valdr_prise_charg then
      sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - Navigation par enregistrement');

      sie_21_util_pkg.debug_actio_dynmq (p_dynamic_action,
                                         p_plugin);

      --Ajouter les librairies CSS
      sie_21_util_pkg.ajout_libr_css ('afw.sie_21.actio_dynmq.sie_21_navgt_enreg',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

      --Ajouter les librairies JavaScript
      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.actio_dynmq.sie_21_navgt_enreg',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      rec_actio_dynmq.javascript_function :=
           'function(){'
        || 'afw.sie_21.actio_dynmq.sie_21_navgt_enreg.insta.push('
        || 'new afw.sie_21.actio_dynmq.sie_21_navgt_enreg.sie_21_navgt_enreg('
        || '{'
        || apex_javascript.add_attribute ('vnu_id_actio_dynmq',
                                          to_char (p_dynamic_action.id))
        || apex_javascript.add_attribute ('vva_nom_plugn',
                                          p_plugin.name)
        || apex_javascript.add_attribute ('vva_regn_gauch',
                                          sie_21_plugn_navgt_enreg_pkg.obten_regn_gauch)
        || apex_javascript.add_attribute ('vva_regn_droit',
                                          sie_21_plugn_navgt_enreg_pkg.obten_regn_droit)
        || apex_javascript.add_attribute ('vva_url_precd',
                                          sie_21_plugn_navgt_enreg_pkg.obten_url_precd_enreg)
        || apex_javascript.add_attribute ('vva_url_suivn',
                                          sie_21_plugn_navgt_enreg_pkg.obten_url_suivn_enreg)
        || apex_javascript.add_attribute ('vva_plugn_ajax',
                                          apex_plugin.get_ajax_identifier,
                                          p_add_comma                => false)
        || '}));}';
    else
      rec_actio_dynmq.javascript_function := 'false';
    end if;

    return rec_actio_dynmq;
  end genr_sie_21_navgt_enreg;

  function ajax_sie_21_navgt_enreg (p_dynamic_action in apex_plugin.t_dynamic_action,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_dynamic_action_ajax_result is
    rec_actio_dynmq                         apex_plugin.t_dynamic_action_ajax_result;
  begin
    case aa.g_widget_action
      when 'NAVGT_PREMR_ENREG' then
        null;
      else
        null;
    end case;

    return rec_actio_dynmq;
  exception
    when others then
      return rec_actio_dynmq;
  end ajax_sie_21_navgt_enreg;
begin
  gta_code_plugn ('SIE_13_CONFR_SAUVG') := 'SIE_13_CONFR_SAUVG';
  gta_code_plugn ('SIE_18') := 'SIE_18';
  gta_code_plugn ('SIE_14_POPUP_LOV_ITEM') := 'SIE_14_POPUP_LOV_ITEM';
  gta_code_plugn ('SIE_14_POPUP_LOV') := 'SIE_14_POPUP_LOV';
end sie_21_actio_dynmq_pkg;
/

Prompt Package Body SIE_21_AUTHE_PKG;
/* Formatted on 04/12/2013 11:35:37 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_authe_pkg is
  function sentn (p_authentication in apex_plugin.t_authentication,
                  p_plugin in apex_plugin.t_plugin,
                  p_is_public_page in boolean)
    return apex_plugin.t_authentication_sentry_result is
    rec_sentn                               apex_plugin.t_authentication_sentry_result;
  begin
    if p_is_public_page then
      rec_sentn.is_valid := true;
    else
      rec_sentn.is_valid := sie_12_authe_apex_pkg.valdr_sesn_sentr;
    end if;

    return rec_sentn;
  end sentn;

  function authe_11_utils (p_authentication in apex_plugin.t_authentication,
                           p_plugin in apex_plugin.t_plugin,
                           p_password in varchar2)
    return apex_plugin.t_authentication_auth_result is
    rec_authe                               apex_plugin.t_authentication_auth_result;
  begin
    rec_authe.is_authenticated :=
      sie_11_authe_apex_pkg.valid_utils (p_authentication.username,
                                         p_password);

    return rec_authe;
  end authe_11_utils;

  function authe_12_utils (p_authentication in apex_plugin.t_authentication,
                           p_plugin in apex_plugin.t_plugin,
                           p_password in varchar2)
    return apex_plugin.t_authentication_auth_result is
    rec_authe                               apex_plugin.t_authentication_auth_result;
    vbo_ignor_indic_actif                   boolean;
    vbo_forcr_authe                         boolean;
  begin
    vbo_ignor_indic_actif :=
      case when sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_AUTHE_IGNOR_INDIC_ACTIF') = 'O' then true else false end;

    vbo_forcr_authe :=
      case when sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_AUTHE_FORCR_AUTHE') = 'O' then true else false end;

    rec_authe.is_authenticated :=
      sie_12_authe_apex_pkg.authe_utils (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_12_UTILS'),
                                         p_password,
                                         sie_12_domn_pkg.obten_domn_sesn_authe,
                                         vbo_ignor_indic_actif,
                                         vbo_forcr_authe);
    return rec_authe;
  end authe_12_utils;
end sie_21_authe_pkg;
/

Prompt Package Body SIE_21_AUTOR_PKG;
/* Formatted on 04/12/2013 11:35:37 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_autor_pkg is
  function genr_autor_acces_page (p_authorization in apex_plugin.t_authorization,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized :=
      sie_12_secrt_pkg.verfc_droit_acces_schem_apex (pbo_indic_acces            => true,
                                                     pbo_indic_creat            => null,
                                                     pbo_indic_modfc            => null,
                                                     pbo_indic_suprs            => null);
    return rec_auto;
  end genr_autor_acces_page;

  function genr_autor_creat (p_authorization in apex_plugin.t_authorization,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized :=
      sie_12_secrt_pkg.verfc_droit_acces_schem_apex (pbo_indic_acces            => null,
                                                     pbo_indic_creat            => true,
                                                     pbo_indic_modfc            => null,
                                                     pbo_indic_suprs            => null);
    return rec_auto;
  end genr_autor_creat;

  function genr_autor_modfc (p_authorization in apex_plugin.t_authorization,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized :=
      sie_12_secrt_pkg.verfc_droit_acces_schem_apex (pbo_indic_acces            => null,
                                                     pbo_indic_creat            => null,
                                                     pbo_indic_modfc            => true,
                                                     pbo_indic_suprs            => null);
    return rec_auto;
  end genr_autor_modfc;

  function genr_autor_suprs (p_authorization in apex_plugin.t_authorization,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized :=
      sie_12_secrt_pkg.verfc_droit_acces_schem_apex (pbo_indic_acces            => null,
                                                     pbo_indic_creat            => null,
                                                     pbo_indic_modfc            => null,
                                                     pbo_indic_suprs            => true);
    return rec_auto;
  end genr_autor_suprs;


  function genr_autor_super_utils (p_authorization in apex_plugin.t_authorization,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized := sie_12_secrt_pkg.verfr_presn_utils_group ('SUPER_UTILS');
    return rec_auto;
  end genr_autor_super_utils;


  function genr_autor_opert_dml (p_authorization in apex_plugin.t_authorization,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
    vva_opert_dml                           varchar2 (1) default sie_13_page_pkg.obten_opert_dml ();
  begin
    rec_auto.is_authorized :=
      sie_12_secrt_pkg.verfc_droit_acces_schem_apex (                                                        /*Lecture*/
                                                     null,
                                                     /*Création*/
                                                     case when vva_opert_dml = 'I' then true else null end,
                                                     /*Modification*/
                                                     case when vva_opert_dml = 'U' then true else null end,
                                                     /*Suppression*/
                                                     case when vva_opert_dml = 'D' then true else null end);

    return rec_auto;
  end genr_autor_opert_dml;


  function genr_autor_admin_prodt (p_authorization in apex_plugin.t_authorization,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized :=
      sie_11_utils_pkg.verfc_role_prodt (sie_12_utils_pkg.obten_usagr_conct,
                                         sie_11_prodt_pkg.obten_prodt_sesn,
                                         'ADMIN');
    return rec_auto;
  end genr_autor_admin_prodt;


  function genr_autor_admin_domn (p_authorization in apex_plugin.t_authorization,
                                  p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized :=
      sie_11_utils_pkg.verfc_role_prodt (sie_12_utils_pkg.obten_usagr_conct,
                                         'SAFD',
                                         'ADMIN');
    return rec_auto;
  end genr_autor_admin_domn;


  function genr_autor_devlp_prodt (p_authorization in apex_plugin.t_authorization,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_authorization_exec_result is
    rec_auto                                apex_plugin.t_authorization_exec_result;
  begin
    rec_auto.is_authorized :=
      sie_11_utils_pkg.verfc_role_prodt (sie_12_utils_pkg.obten_usagr_conct,
                                         sie_11_prodt_pkg.obten_prodt_sesn,
                                         'DEVLP');
    return rec_auto;
  end genr_autor_devlp_prodt;
end sie_21_autor_pkg;
/

Prompt Package Body SIE_21_ITEM_PKG;
/* Formatted on 04/12/2013 11:35:38 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_item_pkg is
  function valdr_prise_charg (pva_code_plugn in varchar2)
    return boolean is
    vnu_page_sesn                           vd_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_sesn;
    vnu_page_zero_sesn                      vd_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_zero_sesn;
    vva_indic_prise_charg                   varchar2 (1);
    vbo_valr_retr                           boolean := false;
    vnu_nombr                               number (3);
  begin
    case pva_code_plugn
      when gta_code_plugn ('SIE_13_CONFR_SAUVG') then
        begin
          if sie_07_util_pkg.v ('A_SIE_13_MODE_RECHR') = 'O' then
            vva_indic_prise_charg := 'N';
          else
            select   p.indic_prise_charg_sie13_confr
              into   vva_indic_prise_charg
              from   vd_sie_13_page p
             where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
          end if;
        end;
      when gta_code_plugn ('SIE_18_DEPSM_TABLR_FORM') then
        begin
          select   p.indic_prise_charg_sie18
            into   vva_indic_prise_charg
            from   vd_sie_13_page p
           where   p.seqnc = sie_13_page_pkg.obten_page_sesn;

          select   count (1)
            into   vnu_nombr
            from   vd_sie_13_page_item pi,
                   apex_regn_coln arc,
                   apex_regn ar
           where   pi.ref_page = sie_13_page_pkg.obten_page_sesn
               and arc.column_alias = pi.depsm_alias_coln
               and arc.flow_id = ar.flow_id
               and arc.region_id = ar.id
               and ar.flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic
               and ar.page_id = sie_13_page_pkg.obten_numr_apex_page
               and ar.plug_source_type = 'UPDATABLE_SQL_QUERY';
        end;
      when gta_code_plugn ('SIE_18') then
        begin
          select   p.indic_prise_charg_sie18
            into   vva_indic_prise_charg
            from   vd_sie_13_page p
           where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
        end;
      /*
      when gta_code_plugn ('SIE_14_POPUP_LOV_ITEM') then
        begin
          select   count (1)
            into   vnu_nombr
            from   vd_sie_13_page_item pi,
                   vd_sie_14_popup_lov_ir pli,
                   vd_sie_13_page p,
                   apex_item_page aip
           where       pi.ref_page in (vnu_page_sesn, vnu_page_zero_sesn)
                   and aip.id = pi.id_apex
                   and aip.lov is not null
                   and pli.ref_page_item = pi.seqnc
                   and pli.ref_page = p.seqnc;
        end;
      when gta_code_plugn ('SIE_14_POPUP_LOV') then
        begin
          select   p.indic_prise_charg_sie14_popup
            into   vva_indic_prise_charg
            from   vd_sie_13_page p
           where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
          select   count (1)
            into   vnu_nombr
            from   vd_sie_14_popup_lov_ir pli,
                   vd_sie_14_popup_lov_ir_retr plir,
                   vd_sie_13_page_ir_coln pic
           where       pli.ref_page = vnu_page_sesn
                   and pli.seqnc = plir.ref_popup_lov_ir
                   and plir.ref_page_ir_coln = pic.seqnc;
        end;*/
      else
        null;
    end case;

    if (vnu_nombr is null
     or (vnu_nombr is not null and vnu_nombr > 0))
   and vva_indic_prise_charg = 'O' then
      vbo_valr_retr := true;
    end if;

    return vbo_valr_retr;
  end valdr_prise_charg;

  function genr_plugn_item_masq (p_item in apex_plugin.t_page_item,
                                 p_plugin in apex_plugin.t_plugin,
                                 p_value in varchar2,
                                 p_is_readonly in boolean,
                                 p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result is
    rec_page_item                           apex_plugin.t_page_item_render_result;
    vvc_clas_css                            apex_application_global.vc_arr2;
    vva_nom_page_item                       p_item.name%type;
    vva_masq                                p_item.attribute_02%type;
    vva_type_masq                           p_item.attribute_01%type;
    vva_masq_persn                          p_item.attribute_02%type;
    vva_carct_espcm                         p_item.attribute_03%type;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Plugin - SIE 13 - Item masqué');
    sie_21_util_pkg.debug_page_item (p_item,
                                     p_plugin,
                                     p_value,
                                     p_is_readonly,
                                     p_is_printer_friendly);
    vva_nom_page_item := p_item.name;
    vva_type_masq := p_item.attribute_01;
    vva_masq_persn := p_item.attribute_02;
    vva_carct_espcm := nvl (p_item.attribute_03, '');

    vvc_clas_css (1) := 'text_field';

    if p_is_printer_friendly then
      sie_21_util_pkg.ecrir_item_input_mode_imprs (p_item,
                                                   p_plugin,
                                                   p_value);
    elsif p_is_readonly then
      sie_21_util_pkg.ecrir_item_input_lectr_seule (p_item,
                                                    p_plugin,
                                                    p_value,
                                                    vvc_clas_css);
    else
      sie_21_util_pkg.ecrir_item_input (p_item,
                                        p_plugin,
                                        p_value,
                                        'text',
                                        vvc_clas_css);

      rec_page_item.is_navigable := true;
    end if;

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('jquery.maskedinput-1.2.2',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || '/javascript/jquery/plugin/');

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.item.masq',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');


    if vva_type_masq = 'PERSN' then
      vva_masq := vva_masq_persn;
    else
      vva_masq := vva_type_masq;
    end if;

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.item.masq.insta.push(new afw.sie_21.item.masq.masq({vva_id_item:"'
      || vva_nom_page_item
      || '",vva_masq:"'
      || vva_masq
      || '",vva_carct_espcm:"'
      || vva_carct_espcm
      || '"}));'
    );

    return rec_page_item;
  end genr_plugn_item_masq;

  --Deprecated

  function genr_plugn_item_popup_lov_ir (p_item in apex_plugin.t_page_item,
                                         p_plugin in apex_plugin.t_plugin,
                                         p_value in varchar2,
                                         p_is_readonly in boolean,
                                         p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result is
    rec_page_item                           apex_plugin.t_page_item_render_result;
    vvc_clas_css_input                      apex_application_global.vc_arr2;
    vvc_clas_css_logo_ouvr_popup            apex_application_global.vc_arr2;
    vva_nom_page_item                       p_item.name%type;
    vva_reprt_fichr_javsc                   varchar2 (255);
    vva_nom_fichr_javsc                     varchar2 (50);
    vva_extns_fichr_javsc                   varchar2 (10);
    vva_reprt_fichr_css                     varchar2 (255);
    vva_nom_fichr_css                       varchar2 (50);
    vva_extns_fichr_css                     varchar2 (10);
    vva_logo_ouvr_popup                     varchar (255);

    procedure ecrir_item_input_popup_lov_ir (p_item in sie_21_util_pkg.t_page_item,
                                             p_plugin in sie_21_util_pkg.t_plugn,
                                             pva_value in varchar2,
                                             pva_type_input in varchar2,
                                             pvc_clas_css_input in apex_application_global.vc_arr2,
                                             pva_logo_ouvr_popup in varchar2,
                                             pvc_clas_css_logo_ouvr_popup in apex_application_global.vc_arr2) is
      vva_display_value                       varchar2 (4000);
      --vnu_seqnc_popup_lov_ir                  vd_sie_14_popup_lov_ir.seqnc%type;
      vnu_numr_aplic_apex                     vd_sie_13_page.app_id_formt%type;
      vnu_numr_page_apex                      vd_sie_13_page.numr_apex%type;
      vva_actio_onclc                         varchar2 (1000);
      vva_contx                               varchar2 (200);
      vva_mode_gestn                          varchar2 (23);
    begin
      vva_mode_gestn := p_item.attribute_03;

      -- item caché qui contient généralement la séquence
      sie_15_htp_pkg.ouvri_bals ('input/',
                                 'type',
                                 'hidden',
                                 'id',
                                 p_item.name || '_HIDDENVALUE',
                                 'name',
                                 apex_plugin.get_input_name_for_page_item (false),
                                 'value',
                                 pva_value,
                                 'class',
                                 sie_07_util_pkg.table_to_string (pvc_clas_css_input,
                                                                  ' '),
                                 'size',
                                 p_item.element_width,
                                 'maxlength',
                                 p_item.element_max_length,
                                 'height',
                                 p_item.element_height,
                                 pva_extra                  => p_item.element_attributes);


      sie_15_htp_pkg.ouvri_bals ('fieldset',
                                 'id',
                                 p_item.name || '_fieldset',
                                 'class',
                                 'lov');

      sie_15_htp_pkg.ouvri_bals ('table',
                                 'cellspacing',
                                 '0',
                                 'cellpadding',
                                 '0',
                                 'border',
                                 '0',
                                 'id',
                                 p_item.name || '_holder',
                                 'class',
                                 'lov',
                                 'summary',
                                 '');

      sie_15_htp_pkg.ouvri_bals ('tbody');

      sie_15_htp_pkg.ouvri_bals ('tr');

      sie_15_htp_pkg.ouvri_bals ('td',
                                 'class',
                                 'lov');

      vva_display_value :=
        apex_plugin_util.get_display_data (p_sql_statement            => p_item.lov_definition,
                                           p_min_columns              => 1,
                                           p_max_columns              => 2,
                                           p_component_name           => p_item.name,
                                           p_display_column_no        => 1,
                                           p_search_column_no         => 2,
                                           p_search_string            => pva_value,
                                           p_display_extra            => true,
                                           p_support_legacy_lov       => false);

      sie_15_htp_pkg.ouvri_bals (
        'input/',
        'type',
        pva_type_input,
        'id',
        p_item.name,
        'value',
        vva_display_value,
        'class',
        sie_07_util_pkg.table_to_string (pvc_clas_css_input,
                                         ' '),
        'size',
        p_item.element_width,
        'maxlength',
        p_item.element_max_length,
        'height',
        p_item.element_height,
        pva_extra                  => 'disabled="disabled" onfocus="this.blur();" ' || p_item.element_attributes
      );

      sie_15_htp_pkg.fermr_bals ('td');
      sie_15_htp_pkg.ouvri_bals ('td');

      case
        when vva_mode_gestn in ('SIMPL', 'AVANC') then
          --On prend les configurations au niveau de l'item
          vnu_numr_aplic_apex := p_item.attribute_08;
          vnu_numr_page_apex := p_item.attribute_02;

          select   '::::SCPI,SSPI:ITEM,' || pi.seqnc
            into   vva_contx
            from   vd_sie_13_page_item pi,
                   vd_sie_13_page p
           where   pi.nom_apex = p_item.name and pi.ref_page = p.seqnc and p.seqnc = sie_13_page_pkg.obten_page_sesn;
        when vva_mode_gestn = 'APEXF' then
          --On prend les configurations au niveau d'APEXFramework (SIE 14)
          /*
                                                  select   pli.seqnc,
                   p2.numr_apex,
                   p.app_id_formt,
                   '::::SCPI,SSPI:ITEM,' || pi.seqnc
            into   vnu_seqnc_popup_lov_ir,
                   vnu_numr_page_apex,
                   vnu_numr_aplic_apex,
                   vva_contx
            from   vd_sie_14_popup_lov_ir pli,
                   vd_sie_13_page_item pi,
                   vd_sie_13_page p,
                   vd_sie_13_page p2
           where       pli.ref_page_item = pi.seqnc
                   and pi.nom_apex = p_item.name
                   and pi.ref_page = p.seqnc
                   and p.seqnc = sie_13_page_pkg.obten_page_sesn
                   and pli.ref_page = p2.seqnc;*/
          null;
        else
          null;
      end case;

      vva_actio_onclc :=
           'sie_PopUp(''f?p='
        || vnu_numr_aplic_apex
        || ':'
        || vnu_numr_page_apex
        || ':'
        || sie_07_util_pkg.nv ('SESSION')
        || vva_contx
        || ''', '''', '
        || p_item.attribute_06
        || ', '
        || p_item.attribute_07
        || ');';
      sie_15_htp_pkg.ouvri_bals ('a',
                                 'href',
                                 '#',
                                 'onclick',
                                 vva_actio_onclc);
      sie_15_htp_pkg.ouvri_bals ('img/',
                                 'src',
                                 pva_logo_ouvr_popup,
                                 'class',
                                 sie_07_util_pkg.table_to_string (pvc_clas_css_logo_ouvr_popup,
                                                                  ' '),
                                 pva_extra                  => p_item.element_attributes);
      sie_15_htp_pkg.fermr_bals ('a');
      sie_15_htp_pkg.fermr_bals ('td');
      sie_15_htp_pkg.fermr_bals ('tr');
      sie_15_htp_pkg.fermr_bals ('tbody');
      sie_15_htp_pkg.fermr_bals ('table');
      sie_15_htp_pkg.fermr_bals ('fieldset');
    end ecrir_item_input_popup_lov_ir;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Plugin - SIE 13 - Item Popup LOV IR');
    sie_21_util_pkg.debug_page_item (p_item,
                                     p_plugin,
                                     p_value,
                                     p_is_readonly,
                                     p_is_printer_friendly);

    vva_nom_page_item := p_item.name;
    vva_logo_ouvr_popup := p_item.attribute_01;

    vvc_clas_css_input (1) := 'text_field';

    vvc_clas_css_logo_ouvr_popup (1) := 'ouvr_popup_lov_ir';

    if p_is_printer_friendly then
      sie_21_util_pkg.ecrir_item_input_mode_imprs (p_item,
                                                   p_plugin,
                                                   p_value);
    elsif p_is_readonly then
      sie_21_util_pkg.ecrir_item_input_lectr_seule (p_item,
                                                    p_plugin,
                                                    p_value,
                                                    vvc_clas_css_input);
    else
      ecrir_item_input_popup_lov_ir (p_item,
                                     p_plugin,
                                     p_value,
                                     'text',
                                     vvc_clas_css_input,
                                     vva_logo_ouvr_popup,
                                     vvc_clas_css_logo_ouvr_popup);

      rec_page_item.is_navigable := true;
    end if;

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.formt_url_fichr (p_plugin.attribute_01,
                                     vva_reprt_fichr_javsc,
                                     vva_nom_fichr_javsc,
                                     vva_extns_fichr_javsc);
    sie_21_util_pkg.ajout_libr_javsc (vva_nom_fichr_javsc,
                                      vva_reprt_fichr_javsc,
                                      pva_saut_extns             => true);

    --Ajouter les librairies CSS
    sie_21_util_pkg.formt_url_fichr (p_plugin.attribute_02,
                                     vva_reprt_fichr_css,
                                     vva_nom_fichr_css,
                                     vva_extns_fichr_css);
    sie_21_util_pkg.ajout_libr_css (vva_nom_fichr_css,
                                    vva_reprt_fichr_css,
                                    pva_saut_extns             => true);

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.item.popup_lov_raprt_inter',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.item.popup_lov_raprt_inter.insta.push(new afw.sie_21.item.popup_lov_raprt_inter.popup_lov_raprt_inter({vva_id_item:"'
      || p_item.name
      || '"}));'
    );

    return rec_page_item;
  end genr_plugn_item_popup_lov_ir;

  function genr_plugn_item_popup_arbor (p_item in apex_plugin.t_page_item,
                                        p_plugin in apex_plugin.t_plugin,
                                        p_value in varchar2,
                                        p_is_readonly in boolean,
                                        p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result is
    rec_page_item                           apex_plugin.t_page_item_render_result;
    vvc_clas_css_input                      apex_application_global.vc_arr2;
    vvc_clas_css_logo_ouvr_popup            apex_application_global.vc_arr2;
    vva_nom_page_item                       p_item.name%type;
    vva_reprt_fichr_javsc                   varchar2 (255);
    vva_nom_fichr_javsc                     varchar2 (50);
    vva_extns_fichr_javsc                   varchar2 (10);
    vva_reprt_fichr_css                     varchar2 (255);
    vva_nom_fichr_css                       varchar2 (50);
    vva_extns_fichr_css                     varchar2 (10);
    vva_logo_ouvr_popup                     varchar (30);
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 13 Plugin - SIE 13 - Item Popup LOV Arborescence');
    sie_21_util_pkg.debug_page_item (p_item,
                                     p_plugin,
                                     p_value,
                                     p_is_readonly,
                                     p_is_printer_friendly);

    vva_nom_page_item := p_item.name;
    vva_logo_ouvr_popup := p_item.attribute_01;

    sie_21_util_pkg.formt_url_fichr (p_plugin.attribute_01,
                                     vva_reprt_fichr_javsc,
                                     vva_nom_fichr_javsc,
                                     vva_extns_fichr_javsc);
    sie_21_util_pkg.formt_url_fichr (p_plugin.attribute_02,
                                     vva_reprt_fichr_css,
                                     vva_nom_fichr_css,
                                     vva_extns_fichr_css);

    vvc_clas_css_input (1) := 'text_field';

    vvc_clas_css_logo_ouvr_popup (1) := 'ouvr_popup_lov_arbor';

    if p_is_printer_friendly then
      sie_21_util_pkg.ecrir_item_input_mode_imprs (p_item,
                                                   p_plugin,
                                                   p_value);
    elsif p_is_readonly then
      sie_21_util_pkg.ecrir_item_input_lectr_seule (p_item,
                                                    p_plugin,
                                                    p_value,
                                                    vvc_clas_css_input);
    else
      sie_21_util_pkg.ecrir_item_input_popup_arbor (p_item,
                                                    p_plugin,
                                                    p_value,
                                                    'text',
                                                    vvc_clas_css_input,
                                                    vva_logo_ouvr_popup,
                                                    vvc_clas_css_logo_ouvr_popup);

      rec_page_item.is_navigable := true;
    end if;

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc (vva_nom_fichr_javsc,
                                      vva_reprt_fichr_javsc,
                                      pva_saut_extns             => true);

    sie_21_util_pkg.ajout_libr_css (vva_nom_fichr_css,
                                    vva_reprt_fichr_css,
                                    pva_saut_extns             => true);

    return rec_page_item;
  end genr_plugn_item_popup_arbor;

  function genr_tokn_input (p_item in apex_plugin.t_page_item,
                            p_plugin in apex_plugin.t_plugin,
                            p_value in varchar2,
                            p_is_readonly in boolean,
                            p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result is
    rec_page_item                           apex_plugin.t_page_item_render_result;
    vvc_clas_css_input                      apex_application_global.vc_arr2;
    vva_pre_popl                            varchar2 (32767);

    function genr_pre_popl (p_item in apex_plugin.t_page_item)
      return varchar2 is
      vta_coln_liste                          apex_plugin_util.t_column_value_list2;
      vva_liste                               varchar2 (32767) default '[';
      vta_strin_rechr                         apex_application_global.vc_arr2;
    /*default sie_07_util_pkg.string_to_table (
                              sie_07_util_pkg.v (p_item.name), ',');*/
    begin
      vta_strin_rechr :=
        sie_07_util_pkg.string_to_table (sie_07_util_pkg.v (p_item.name),
                                         ',');

      for i in 1 .. vta_strin_rechr.count () loop
        if i != 1 then
          vva_liste := vva_liste || ',';
        end if;

        vta_coln_liste :=
          apex_plugin_util.get_data2 (p_sql_statement            => p_item.lov_definition,
                                      p_min_columns              => 1,
                                      p_max_columns              => 2,
                                      p_component_name           => p_item.name,
                                      p_search_type              => apex_plugin_util.c_search_lookup,
                                      p_search_column_no         => 2,
                                      p_search_string            => vta_strin_rechr (i));

        for j in 1 .. vta_coln_liste (1).value_list.count loop
          case vta_coln_liste (2).data_type
            when apex_plugin_util.c_data_type_varchar2 then
              vva_liste :=
                   vva_liste
                || '{"id":"'
                || sie_07_util_pkg.echap_text_json (vta_coln_liste (2).value_list (j).varchar2_value)
                || '","name":"'
                || sie_07_util_pkg.echap_text_json (vta_coln_liste (1).value_list (j).varchar2_value)
                || '"}';
            when apex_plugin_util.c_data_type_number then
              vva_liste :=
                   vva_liste
                || '{"id":'
                || vta_coln_liste (2).value_list (j).number_value
                || ',"name":"'
                || sie_07_util_pkg.echap_text_json (vta_coln_liste (1).value_list (j).varchar2_value)
                || '"}';
          end case;
        end loop;
      end loop;

      vva_liste := vva_liste || ']';
      return vva_liste;
    exception
      when others then
        ete ();
    end genr_pre_popl;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin - SIE 21 - Item Token Input');
    sie_21_util_pkg.debug_page_item (p_item,
                                     p_plugin,
                                     p_value,
                                     p_is_readonly,
                                     p_is_printer_friendly);

    if p_is_printer_friendly then
      null;
    --  sie_13_plugn_util_pkg.ecrir_item_input_mode_imprs (p_item,
    --                   p_plugin,
    --                   p_value);
    elsif p_is_readonly then
      null;
    --  sie_13_plugn_util_pkg.ecrir_item_input_lectr_seule (p_item,
    --                   p_plugin,
    --                   p_value,
    --                   vvc_clas_css_input);
    else
      vvc_clas_css_input (1) := 'text_field';

      sie_21_util_pkg.ecrir_item_input (p_item,
                                        p_plugin,
                                        p_value,
                                        'text',
                                        vvc_clas_css_input);

      rec_page_item.is_navigable := true;
    end if;

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css (
      'token-input',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/loopj-jquery-tokeninput-201d2d1/css/'
    );

    sie_21_util_pkg.ajout_libr_css (
      'token-input-facebook',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/loopj-jquery-tokeninput-201d2d1/css/'
    );

    sie_21_util_pkg.ajout_libr_css (
      'token-input-mac',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/loopj-jquery-tokeninput-201d2d1/css/'
    );


    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc (
      'jquery.tokeninput',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/loopj-jquery-tokeninput-201d2d1/'
    );

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.item.tokn_input',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --      || case sie_07_util_pkg.v (p_item.name)
    --           when null then null
    --           else genr_pre_popl (p_item)
    --         end

    if sie_07_util_pkg.v (p_item.name) is not null then
      --      vva_pre_popl := genr_pre_popl (p_item);
      vva_pre_popl := 'null';
    else
      vva_pre_popl := 'null';
    end if;

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.item.tokn_input.insta.push(new afw.sie_21.item.tokn_input.tokn_input({'
      || '"vva_id_item":"'
      || p_item.name
      || '","vnu_nombr_carct_minm":'
      || p_item.attribute_01
      || ',"var_pre_popl":'
      || vva_pre_popl
      || ',"vva_texte_aide":"'
      || p_item.attribute_03
      || '","vva_texte_aucun_reslt":"'
      || p_item.attribute_04
      || '","vva_texte_rechr_activ":"'
      || p_item.attribute_05
      || '","vnu_nombr_tokn_maxm":'
      || nvl (p_item.attribute_06, 'null')
      || ',"vbo_prevn_doubl":'
      || case when p_item.attribute_07 = 'N' then 'false' else 'true' end
      || ',"vva_plugn_ajax":"'
      || apex_plugin.get_ajax_identifier
      || '"'
      || '}));'
    );

    return rec_page_item;
  end genr_tokn_input;

  function ajax_tokn_input (p_item in apex_plugin.t_page_item,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result is
    rec_page_item                           apex_plugin.t_page_item_ajax_result;

    procedure genr_lov (p_item in apex_plugin.t_page_item) is
      vta_coln_liste                          apex_plugin_util.t_column_value_list2;
      vva_liste                               varchar2 (32767) default '[';
    begin
      vta_coln_liste :=
        apex_plugin_util.get_data2 (p_sql_statement            => p_item.lov_definition,
                                    p_min_columns              => 1,
                                    p_max_columns              => 2,
                                    p_component_name           => p_item.name,
                                    p_search_type              => apex_plugin_util.c_search_like_ignore,
                                    p_search_column_no         => 1,
                                    p_search_string            => replace (substr (upper (aa.g_x01),
                                                                                   instr (aa.g_x01,
                                                                                          '=',
                                                                                          -1) +
                                                                                   1),
                                                                           ' ',
                                                                           '%'));

      for i in 1 .. vta_coln_liste (1).value_list.count loop
        if i != 1 then
          vva_liste := vva_liste || ',';
        end if;

        case vta_coln_liste (2).data_type
          when apex_plugin_util.c_data_type_varchar2 then
            vva_liste :=
                 vva_liste
              || '{"id":"'
              || sie_07_util_pkg.echap_text_json (vta_coln_liste (2).value_list (i).varchar2_value)
              || '","name":"'
              || sie_07_util_pkg.echap_text_json (vta_coln_liste (1).value_list (i).varchar2_value)
              || '"}';
          when apex_plugin_util.c_data_type_number then
            vva_liste :=
                 vva_liste
              || '{"id":'
              || vta_coln_liste (2).value_list (i).number_value
              || ',"name":"'
              || sie_07_util_pkg.echap_text_json (vta_coln_liste (1).value_list (i).varchar2_value)
              || '"}';
        end case;
      end loop;

      vva_liste := vva_liste || ']';

      sie_15_htp_pkg.ecrir (vva_liste,
                            false);
    end genr_lov;
  begin
    case aa.g_widget_action
      when 'OBTEN_LOV' then
        genr_lov (p_item);
      else
        null;
    end case;

    return rec_page_item;
  end ajax_tokn_input;

  function genr_champ_rechr (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin,
                             p_value in varchar2,
                             p_is_readonly in boolean,
                             p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result is
    rec_page_item                           apex_plugin.t_page_item_render_result;
    vvc_clas_css                            apex_application_global.vc_arr2;
    vva_nom_page_item                       p_item.name%type;
    vva_place_holdr                         p_item.attribute_01%type;
    vnu_nombr_reslt                         p_item.attribute_02%type;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin Item - Champ de recherche webkit');
    sie_21_util_pkg.debug_page_item (p_item,
                                     p_plugin,
                                     p_value,
                                     p_is_readonly,
                                     p_is_printer_friendly);
    vva_nom_page_item := p_item.name;

    vva_place_holdr := p_item.attribute_01;
    vnu_nombr_reslt := p_item.attribute_02;

    vvc_clas_css (1) := 'sie_21_champ_rechr';

    if not p_is_printer_friendly and not p_is_readonly then
      sie_21_util_pkg.ecrir_item_input (p_item,
                                        p_plugin,
                                        p_value,
                                        'search',
                                        vvc_clas_css,
                                        vva_place_holdr,
                                        vnu_nombr_reslt);

      rec_page_item.is_navigable := true;
    end if;

    --Ajouter les librairies JavaScript
    /*sie_21_util_pkg.ajout_libr_javsc (
                      'jquery.watermark.min',
      sie_11_prodt_pkg.obten_dosr_fichr_afw
      || '/javascript/jquery/plugin/jquery.watermark-3.1.3/');*/

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.item.champ_rechr',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.item.champ_rechr.insta.push(new afw.sie_21.item.champ_rechr.champ_rechr({'
      || '"vva_id_item":"'
      || p_item.name
      || '","vva_plugn_ajax":"'
      || apex_plugin.get_ajax_identifier
      || '"'
      || '}));'
    );

    return rec_page_item;
  end genr_champ_rechr;

  function ajax_champ_rechr (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result is
    rec_page_item                           apex_plugin.t_page_item_ajax_result;

    procedure exect_rechr (pva_valr_rechr in varchar2,
                           p_item in apex_plugin.t_page_item) is
    begin
      sie_23_rechr_pkg.exect_rechr_apex (pva_valr_rechr);
      sie_15_htp_pkg.ecrir (sie_08_url_pkg.genr_url (sie_11_aplic_pkg.obten_numr_apex_aplic ('SAFU'),
                                                     6,
                                                     'SIDF',
                                                     null),
                            false);
    end;
  begin
    case aa.g_widget_action
      when 'EXECT_RECHR' then
        exect_rechr (aa.g_x01,
                     p_item);
      else
        null;
    end case;

    return rec_page_item;
  end ajax_champ_rechr;

  function genr_plugn_chosn (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin,
                             p_value in varchar2,
                             p_is_readonly in boolean,
                             p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result is
    vva_read_only                           varchar2 (4000);
    rec_page_item                           apex_plugin.t_page_item_render_result;

    procedure genr_item (p_item in apex_plugin.t_page_item) is
      vta_coln_liste                          apex_plugin_util.t_column_value_list;
      vva_item                                varchar2 (32767);
      vta_item_selct                          apex_application_global.vc_arr2;
      vva_displ_id                            varchar2 (32767);
      vva_retrn_id                            varchar2 (32767);
      vva_nom_page_item                       p_item.name%type;
      vbo_multp                               boolean := case p_item.attribute_02 when 'MULTP' then true else false end;
      vva_tail                                p_item.attribute_02%type
                                                := case p_item.attribute_02 when 'MULTP' then 'multiple' else null end;

      procedure ajout_optio (pva_valr_retr in varchar2,
                             pva_valr_afich in varchar2,
                             pva_extra in varchar2 default null) is
      begin
        sie_15_htp_pkg.ouvri_bals ('option',
                                   'value',
                                   pva_valr_retr,
                                   pva_extra                  => pva_extra);
        sie_15_htp_pkg.ecrir (pva_valr_afich,
                              false);
        sie_15_htp_pkg.fermr_bals ('option');
      end ajout_optio;
    begin
      -- Multiple or not
      vva_nom_page_item := apex_plugin.get_input_name_for_page_item (vbo_multp);

      if vva_tail is not null then
        vva_tail := vva_tail || ' ' || p_item.element_attributes;
      else
        vva_tail := p_item.element_attributes;
      end if;

      sie_15_htp_pkg.ouvri_bals ('select',
                                 'data-placeholder',
                                 p_item.lov_null_text,
                                 'name',
                                 vva_nom_page_item,
                                 'class',
                                 'selectlist',
                                 'id',
                                 p_item.name,
                                 'style',
                                 'width:' || p_item.element_width || 'px;',
                                 pva_extra                  => vva_tail);

      -- Pour faire afficher l'icone X pour supprimer la sélection
      if (not vbo_multp and not p_item.is_required) then
        sie_15_htp_pkg.ouvri_bals ('option');
        sie_15_htp_pkg.fermr_bals ('option');
      end if;

      /*
      --On ne veut pas voir le NULL VALUE dans les options

       IF (p_item.lov_display_null IS NOT NULL)
       THEN
          ajout_optio (p_item.lov_null_value, p_item.lov_null_text);
       END IF;
      */

      vta_coln_liste :=
        apex_plugin_util.get_data (p_sql_statement            => p_item.lov_definition,
                                   p_min_columns              => 2,
                                   p_max_columns              => 2,
                                   p_component_name           => p_item.name);

      for i in 1 .. vta_coln_liste (1).count loop
        vva_displ_id := vta_coln_liste (1) (i);
        vva_retrn_id := vta_coln_liste (2) (i);
        vta_item_selct := sie_07_util_pkg.string_to_table (p_value);

        if vva_retrn_id = p_value then
          ajout_optio (vva_retrn_id,
                       vva_displ_id,
                       'selected');
        else
          if p_value is not null then
            --Pour gérer le multiselect
            for j in 1 .. vta_item_selct.count loop
              if vva_retrn_id = vta_item_selct (j) then
                ajout_optio (vva_retrn_id,
                             vva_displ_id,
                             'selected');
              else
                ajout_optio (vva_retrn_id,
                             vva_displ_id);
              end if;
            end loop;
          else
            ajout_optio (vva_retrn_id,
                         vva_displ_id);
          end if;
        end if;
      end loop;

      sie_15_htp_pkg.fermr_bals ('select');
    end genr_item;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin Item - Chosen one');
    sie_21_util_pkg.debug_page_item (p_item,
                                     p_plugin,
                                     p_value,
                                     p_is_readonly,
                                     p_is_printer_friendly);

    if p_is_readonly
    or p_is_printer_friendly then
      vva_read_only :=
        apex_plugin_util.get_display_data (p_sql_statement            => p_item.lov_definition,
                                           p_min_columns              => 2,
                                           p_max_columns              => 2,
                                           p_component_name           => p_item.name,
                                           p_search_string            => p_value);
      apex_plugin_util.print_hidden_if_readonly (
        p_item_name                => p_item.name,
        p_value                    => case p_item.attribute_02 when 'SIMPL' then p_value else vva_read_only end,
        p_is_readonly              => p_is_readonly,
        p_is_printer_friendly      => p_is_printer_friendly
      );
      apex_plugin_util.print_display_only (p_item_name                => p_item.name,
                                           p_display_value            => vva_read_only,
                                           p_show_line_breaks         => false,
                                           p_escape                   => true,
                                           p_attributes               => p_item.element_attributes);
    else
      genr_item (p_item);

      rec_page_item.is_navigable := true;

      --Ajouter les librairies js CSS
      sie_21_util_pkg.ajout_libr_css (
        'chosen',
        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/chosen_v1.0.0/'
      );

      --Ajouter les librairies JavaScript
      sie_21_util_pkg.ajout_libr_javsc (
        'chosen.jquery',
        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/chosen_v1.0.0/'
      );

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.widget.selectList',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.item.chosn',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      sie_21_util_pkg.ajout_libr_javsc (
        'bindWithDelay',
        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/bindWithDelay/'
      );

      --Initialiser le plugin
      sie_21_util_pkg.ajout_code_javsc_charg (
           'afw.sie_21.item.chosn.insta.push(new afw.sie_21.item.chosn.chosn({'
        || 'vva_id_item:"'
        || p_item.name
        || '",vva_mesg_aucun_don_trouv:"'
        || p_item.attribute_03
        || '",vbo_permt_deslc:'
        || case when not p_item.is_required and p_item.attribute_02 = 'SIMPL' then 'true' else 'false' end
        || ',vbo_rafrc_optim:'
        || case when p_item.ajax_optimize_refresh then 'true' else 'false' end
        || ',vbo_rechr_contn:'
        || case when p_item.attribute_04 = 'Y' then 'true' else 'false' end
        || ',vva_id_item_parnt:"'
        || p_item.lov_cascade_parent_items
        || '",vva_id_item_submt:"'
        || p_item.ajax_items_to_submit
        || '",vva_plugn_ajax:"'
        || apex_plugin.get_ajax_identifier
        || '"'
        || '}));'
      );
    end if;

    return rec_page_item;
  end genr_plugn_chosn;

  function ajax_plugn_chosn (p_item in apex_plugin.t_page_item,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result is
    rec_page_item                           apex_plugin.t_page_item_ajax_result;

    procedure rafrc_lov (p_item in apex_plugin.t_page_item) is
      vta_coln_liste                          apex_plugin_util.t_column_value_list;
      vva_liste                               varchar2 (32767) default '{"values":[';
      vbo_multp                               boolean := case p_item.attribute_02 when 'MULTP' then true else false end;
    begin
      vta_coln_liste :=
        apex_plugin_util.get_data (p_sql_statement            => p_item.lov_definition,
                                   p_min_columns              => 2,
                                   p_max_columns              => 2,
                                   p_component_name           => p_item.name,
                                   p_max_rows                 => p_item.attribute_04);

      sie_15_htp_pkg.ecrir (vva_liste);
      vva_liste := null;

      /* IF (p_item.lov_null_text IS NOT NULL)
       THEN
          vva_liste :=
                vva_liste
             || '{"r":"'
             || sie_07_util_pkg.echap_text_json (p_item.lov_null_value)
             || '","d":"'
             || sie_07_util_pkg.echap_text_json (p_item.lov_null_text)
             || '"}';

          sie_15_htp_pkg.ecrir (vva_liste);
       END IF;*/

      for i in 1 .. vta_coln_liste (1).count loop
        if i != 1 then
          vva_liste := ',';
        /* ELSIF i = 1 AND p_item.lov_null_text IS NOT NULL
         THEN
            vva_liste := ',';*/
        end if;

        vva_liste :=
             vva_liste
          || '{"r":"'
          || sie_07_util_pkg.echap_text_json (vta_coln_liste (2) (i))
          || '","d":"'
          || sie_07_util_pkg.echap_text_json (vta_coln_liste (1) (i))
          || '"}';

        sie_15_htp_pkg.ecrir (vva_liste);
      end loop;

      vva_liste := '], "default":""}';

      sie_15_htp_pkg.ecrir (vva_liste,
                            false);
    end rafrc_lov;

    procedure ajout_optio (pva_valr_retr in varchar2,
                           pva_valr_afich in varchar2,
                           pva_extra in varchar2 default null) is
    begin
      sie_15_htp_pkg.ouvri_bals ('option',
                                 'value',
                                 pva_valr_retr,
                                 pva_extra                  => pva_extra);
      sie_15_htp_pkg.ecrir (pva_valr_afich,
                            false);
      sie_15_htp_pkg.fermr_bals ('option');
    end ajout_optio;

    procedure filtr_lov (p_item in apex_plugin.t_page_item) is
      vta_coln_liste                          apex_plugin_util.t_column_value_list2;
      vva_liste                               varchar2 (32767) default null;
      vva_valr                                varchar2 (4000)
        := case when aa.g_x01 is not null then '%' || upper (aa.g_x01) || '%' else '%' end;
      vbo_multp                               boolean := case p_item.attribute_02 when 'MULTP' then true else false end;
    begin
      vta_coln_liste :=
        apex_plugin_util.get_data2 (p_sql_statement            => p_item.lov_definition,
                                    p_min_columns              => 1,
                                    p_max_columns              => 2,
                                    p_component_name           => p_item.name,
                                    p_search_type              => apex_plugin_util.c_search_like_ignore,
                                    p_search_column_no         => 1,
                                    p_search_string            => vva_valr,
                                    p_max_rows                 => p_item.attribute_04);

      -- Pour faire afficher l'icone X pour supprimer la sélection
      if (not vbo_multp and not p_item.is_required) then
        sie_15_htp_pkg.ouvri_bals ('option');
        sie_15_htp_pkg.fermr_bals ('option');
      end if;

      for i in 1 .. vta_coln_liste (1).value_list.count loop
        case vta_coln_liste (2).data_type
          when apex_plugin_util.c_data_type_varchar2 then
            ajout_optio (vta_coln_liste (2).value_list (i).varchar2_value,
                         vta_coln_liste (1).value_list (i).varchar2_value);
          /*  vva_liste :=
               vva_liste || '{"r":"'
               || sie_07_util_pkg.echap_text_json (
                     vta_coln_liste (2).value_list (i).varchar2_value)
               || '","d":"'
               || sie_07_util_pkg.echap_text_json (
                     vta_coln_liste (1).value_list (i).varchar2_value)
               || '"}';*/
          when apex_plugin_util.c_data_type_number then
            ajout_optio (vta_coln_liste (2).value_list (i).number_value,
                         vta_coln_liste (1).value_list (i).varchar2_value);
        /* vva_liste :=
               vva_liste
            || '{"r":'
            || vta_coln_liste (2).value_list (i).number_value
            || ',"d":"'
            || sie_07_util_pkg.echap_text_json (
                  vta_coln_liste (1).value_list (i).varchar2_value)
            || '"}';*/
        end case;
      end loop;
    exception
      when others then
        raise;
    end filtr_lov;
  begin
    case
      when aa.g_widget_action = 'RAFRC_LOV' then                                               --Cas de la cascading lov
        rafrc_lov (p_item);
      when aa.g_widget_action = 'FILTR_LOV' then
        filtr_lov (p_item);
      else
        null;
    end case;

    return rec_page_item;
  end ajax_plugn_chosn;

  function genr_selct_2 (p_item in apex_plugin.t_page_item,
                         p_plugin in apex_plugin.t_plugin,
                         p_value in varchar2,
                         p_is_readonly in boolean,
                         p_is_printer_friendly in boolean)
    return apex_plugin.t_page_item_render_result is
    rec_page_item                           apex_plugin.t_page_item_render_result;
    vbo_singl_value                         boolean;
    vbo_multp_value                         boolean;
    vva_indic_allow_clear                   varchar2 (1) default 'N';
    vva_indic_load_remt_data                varchar2 (1) default p_item.attribute_03;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 21 Plugin Item - Chosen one');
    sie_21_util_pkg.debug_page_item (p_item,
                                     p_plugin,
                                     p_value,
                                     p_is_readonly,
                                     p_is_printer_friendly);

    -- Single-value and Multiple-value
    vbo_singl_value := case p_item.attribute_01 when 'SINGL_VALUE' then true else false end;
    vbo_multp_value := case p_item.attribute_01 when 'MULTP_VALUE' then true else false end;

    if p_is_readonly
    or p_is_printer_friendly then
      sie_21_plugn_selct_2_pkg.genr_item_lectr_seule (p_item,
                                                      p_value,
                                                      p_is_readonly,
                                                      p_is_printer_friendly);
    else
      if vbo_multp_value then
        vva_indic_allow_clear := null;
      elsif (vbo_singl_value and p_item.placeholder is not null) then
        vva_indic_allow_clear := p_item.attribute_02;
      end if;

      if vva_indic_load_remt_data = 'N' then
        sie_21_plugn_selct_2_pkg.genr_item_selct (p_item,
                                                  p_value);
      else
        sie_21_plugn_selct_2_pkg.genr_item_tag (p_item,
                                                p_value);
      end if;

      rec_page_item.is_navigable := true;

      --Ajouter les librairies js CSS
      sie_21_util_pkg.ajout_libr_css (
        'select2',
        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/select2-master/'
      );

      sie_21_util_pkg.ajout_libr_css (
        'select2-bootstrap',
        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/select2-master/'
      );

      --Ajouter les librairies JavaScript
      sie_21_util_pkg.ajout_libr_javsc (
        'select2',
        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/select2-master/'
      );

      sie_21_util_pkg.ajout_libr_javsc (
        'select2_locale_fr',
        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/select2-master/'
      );

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.widget.selectList',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.item.selct_2',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

      --Initialiser le plugin
      sie_21_util_pkg.ajout_code_javsc_charg (   'afw.sie_21.item.selct_2.insta.push('
                                              || 'new afw.sie_21.item.selct_2.selct_2('
                                              || '{'
                                              || apex_javascript.add_attribute ('vva_nom_plugn',
                                                                                p_plugin.name)
                                              || apex_javascript.add_attribute ('vva_id_item',
                                                                                p_item.name)
                                              || apex_javascript.add_attribute ('vbo_multp',
                                                                                vbo_multp_value)
                                              || apex_javascript.add_attribute (
                                                   'vbo_load_remt_data',
                                                   sie_21_util_pkg.formt_plugn_atrib_boln (p_item.attribute_03)
                                                 )
                                              || apex_javascript.add_attribute ('vva_place_holdr',
                                                                                p_item.placeholder)
                                              || apex_javascript.add_attribute (
                                                   'vbo_allow_clear',
                                                   case
                                                     when vva_indic_allow_clear is not null then
                                                       sie_21_util_pkg.formt_plugn_atrib_boln (vva_indic_allow_clear)
                                                     else
                                                       null
                                                   end
                                                 )
                                              || apex_javascript.add_attribute ('vnu_minm_reslt_for_searc',
                                                                                to_number (p_item.attribute_04))
                                              || apex_javascript.add_attribute ('vnu_maxm_selct_size',
                                                                                to_number (p_item.attribute_06))
                                              || apex_javascript.add_attribute ('vnu_minm_input_length',
                                                                                to_number (p_item.attribute_07))
                                              || apex_javascript.add_attribute ('vnu_maxm_input_length',
                                                                                to_number (p_item.attribute_08))
                                              || apex_javascript.add_attribute ('vva_seprt',
                                                                                p_item.attribute_09)
                                              || apex_javascript.add_attribute (
                                                   'vva_liste_item_parnt',
                                                   apex_plugin_util.page_item_names_to_jquery (
                                                     p_item.lov_cascade_parent_items
                                                   )
                                                 )
                                              || apex_javascript.add_attribute (
                                                   'vva_liste_item_submt',
                                                   apex_plugin_util.page_item_names_to_jquery (
                                                     p_item.ajax_items_to_submit
                                                   )
                                                 )
                                              || apex_javascript.add_attribute ('vbo_rafrc_optim',
                                                                                p_item.ajax_optimize_refresh)
                                              || apex_javascript.add_attribute ('vva_plugn_ajax',
                                                                                apex_plugin.get_ajax_identifier,
                                                                                p_add_comma                => false)
                                              || '}));');
    end if;

    return rec_page_item;
  end genr_selct_2;

  function ajax_selct_2 (p_item in apex_plugin.t_page_item,
                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_page_item_ajax_result is
    rec_page_item                           apex_plugin.t_page_item_ajax_result;

    vbo_singl_value                         boolean;
    vbo_multp_value                         boolean;

    vnu_minm_lov_colmn                      number (1) default 2;
    vnu_maxm_lov_colmn                      number (1) default 3;

    vnu_lov_displ_colmn                     number (1) default 1;
    vnu_lov_retrn_colmn                     number (1) default 2;
    vnu_lov_group_colmn                     number (1) default 3;

    procedure ajout_optio (pva_valr_afich in varchar2,
                           pva_valr_retr in varchar2,
                           pva_extra in varchar2 default null) is
    begin
      sie_15_htp_pkg.ouvri_bals ('option',
                                 'value',
                                 pva_valr_retr,
                                 pva_extra                  => pva_extra);
      sie_15_htp_pkg.ecrir (pva_valr_afich,
                            false);
      sie_15_htp_pkg.fermr_bals ('option');
    end ajout_optio;

    procedure initl_lov (p_item in apex_plugin.t_page_item) is
      vta_coln_liste                          apex_plugin_util.t_column_value_list2;
      vva_liste                               varchar2 (32767) default null;
      vva_valr_rechr                          varchar2 (4000)
                                                := case when aa.g_x01 is not null then upper (aa.g_x01) else '%' end;
    begin
      vta_coln_liste :=
        apex_plugin_util.get_data2 (p_sql_statement            => p_item.lov_definition,
                                    p_min_columns              => vnu_lov_retrn_colmn,
                                    p_max_columns              => vnu_lov_group_colmn,
                                    p_component_name           => p_item.name,
                                    p_search_type              => p_item.attribute_10,
                                    p_search_column_no         => vnu_lov_displ_colmn,
                                    p_search_string            => vva_valr_rechr,
                                    p_max_rows                 => p_item.attribute_05);

      --placeholder

      if (vbo_singl_value and p_item.placeholder is not null) then
        sie_15_htp_pkg.ecrir (sie_15_htp_pkg.ouvri_bals ('option'),
                              false);
        sie_15_htp_pkg.fermr_bals ('option');
      end if;

      for i in 1 .. vta_coln_liste (1).value_list.count loop
        apex_plugin_util.print_option (
          p_display_value            => vta_coln_liste (1).value_list (i).varchar2_value,
          p_return_value             => case vta_coln_liste (2).data_type
                                         when apex_plugin_util.c_data_type_varchar2 then
                                           vta_coln_liste (2).value_list (i).varchar2_value
                                         when apex_plugin_util.c_data_type_number then
                                           vta_coln_liste (2).value_list (i).number_value
                                         else
                                           vta_coln_liste (2).value_list (i).varchar2_value
                                       end,
          p_is_selected              => false,
          p_attributes               => p_item.element_option_attributes,
          p_escape                   => p_item.escape_output
        );
      end loop;
    exception
      when others then
        raise;
    end initl_lov;
  begin
    -- Single-value and Multiple-value
    vbo_singl_value := case p_item.attribute_01 when 'SINGL_VALUE' then true else false end;
    vbo_multp_value := case p_item.attribute_01 when 'MULTP_VALUE' then true else false end;

    case
      when aa.g_widget_action = 'RAFRC_CASCD_LOV' then
        htp.prn ();
      when aa.g_widget_action = 'VALR_SELCT_INITL' then
        -- Est utilisé si l'item doit se rafraîchir à cuse d'un cascading lov
        sie_21_plugn_selct_2_pkg.genr_json_initl_selct_lov (p_item);
      when aa.g_widget_action = 'RECHR_LOV' then
        sie_21_plugn_selct_2_pkg.genr_json_rechr_lov (p_item);
      else
        null;
    end case;

    return rec_page_item;
  end ajax_selct_2;
begin
  gta_code_plugn ('SIE_13_CONFR_SAUVG') := 'SIE_13_CONFR_SAUVG';
  gta_code_plugn ('SIE_18_DEPSM_TABLR_FORM') := 'SIE_18_DEPSM_TABLR_FORM';
  gta_code_plugn ('SIE_18') := 'SIE_18';
  gta_code_plugn ('SIE_14_POPUP_LOV_ITEM') := 'SIE_14_POPUP_LOV_ITEM';
  gta_code_plugn ('SIE_14_POPUP_LOV') := 'SIE_14_POPUP_LOV';
end sie_21_item_pkg;
/

Prompt Package Body SIE_21_PLUGN_ARBRE_PKG;
/* Formatted on 04/12/2013 11:35:39 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_arbre_pkg as
  gva_progm_a_lancr                       varchar2 (4000)
    default 'declare
         vre_glisr_elemn sie_21_plugn_arbre_pkg.typ_rec_glisr_elemn;
       begin
         vre_glisr_elemn.vva_glisr_elemn             := :p1;
         vre_glisr_elemn.vva_depsr_elemn             := :p2;
         
         %PROCD_PERSN%(vre_glisr_elemn);
         sie_21_plugn_arbre_pkg.gre_glisr_elemn := vre_glisr_elemn;
       end;';

  type typ_rec_arbre is record
  (
    vnu_stat                                number,
    vnu_level                               number,
    vva_titre                               varchar2 (200),
    vva_type                                varchar2 (30),
    vva_valr                                varchar2 (200),
    vva_titre_aide_insta                    varchar2 (4000) default null,
    vva_aide_insta                          varchar2 (4000) default null,
    vva_lien                                varchar2 (4000)
  );

  type tab_rec_arbre is table of typ_rec_arbre
                          index by pls_integer;

  function obten_plugn_arbre_noeud_deft (pnu_numr_apex_regn in number)
    return varchar2 is
    vva_code                                vd_sie_21_plugn_arbre_noeud.code%type;
  begin
    select   lower (pan.code)
      into   vva_code
      from   vd_sie_21_plugn_arbre_noeud pan,
             vd_sie_21_plugn_arbre pa,
             apex_regn ar
     where   pan.seqnc = pa.ref_plugn_arbre_noeud
         and pa.ref_prodt in (select   ref_prodt
                                from   sie_11_aplic
                               where   numr_aplic_apex = ar.flow_id)
         and ar.id = pnu_numr_apex_regn
         and pa.code = ar.attribute_05;

    return vva_code;
  exception
    when others then
      return null;
  end obten_plugn_arbre_noeud_deft;

  function obten_enreg_confg_plugn (pnu_numr_apex_regn in number)
    return typ_rec_confg_plugn is
    cursor cur_confg_plugn is
      select   pa.seqnc,
               enonc_pre_reqt,
               pa.code,
               nom_table,
               coln_titre,
               coln_type,
               coln_valr,
               coln_titre_aide_insta,
               coln_aide_insta,
               coln_lien,
               coln_id,
               coln_id_parnt,
               enonc_condt,
               indic_comnc_par_racn,
               indic_comnc_par_coln_parnt_nul,
               enonc_condt_comnc_par,
               enonc_trier_par,
               indic_renmr,
               indic_deplc,
               image_sprit,
               largr_regn_arbre,
               hautr_regn_arbre,
               ar.attribute_01,
               obten_json_arbre_nombr_niv,
               obten_json_noeud_nombr_niv,
               mode_cache,
               pag.numr_apex,
               pa.indic_charg_progr,
               pa.nom_procd_glisr_elemn_arbre,
               pa.nom_procd_depsr_elemn_arbre
        from   vd_sie_21_plugn_arbre pa,
               vd_sie_13_page pag,
               --vd_sie_13_page_regn pr,
               apex_regn ar
       /*where pa.ref_page_regn = pr.seqnc
         and pr.seqnc =
               sie_13_page_regn_pkg.obten_page_regn (pnu_numr_apex_regn)
         and pag.seqnc = pr.ref_page
         and ar.id = pnu_numr_apex_regn;*/
       where   pa.code = ar.attribute_05
           and ar.id = pnu_numr_apex_regn
           and pag.numr_apex = ar.page_id
           and pag.app_id_formt = ar.flow_id;

    rec_confg_plugn                         typ_rec_confg_plugn;
  begin
    open cur_confg_plugn;

    fetch cur_confg_plugn
    into rec_confg_plugn;

    close cur_confg_plugn;

    return rec_confg_plugn;
  end obten_enreg_confg_plugn;

  procedure maj_arbre_contx_noeud (pnu_numr_apex_regn in number,
                                   pty_rec_confg_plugn in typ_rec_confg_plugn) is
    cur_arbre                               sys_refcursor;
    vta_tab_rec_arbre                       tab_rec_arbre;
    vta_tab_noeud                           sie_12_arbre_pkg.tab_noeud;

    function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
    begin
      vva_reqt_sql :=
           'select '
        || pty_rec_confg_plugn.coln_valr
        || ' value'
        || ' from '
        || pty_rec_confg_plugn.nom_table
        || case
             when pty_rec_confg_plugn.enonc_condt is not null then ' where ' || pty_rec_confg_plugn.enonc_condt
             else null
           end
        || ' start with '
        || pty_rec_confg_plugn.coln_id
        || ' = (select tab2.'
        || pty_rec_confg_plugn.coln_id_parnt
        || ' from '
        || pty_rec_confg_plugn.nom_table
        || ' tab2 where tab2.'
        || pty_rec_confg_plugn.coln_id
        || ' = :noeud)'
        || case
             when pty_rec_confg_plugn.enonc_condt_comnc_par is not null then
               ' and ' || pty_rec_confg_plugn.enonc_condt_comnc_par
             else
               null
           end
        || ' connect by prior '
        || pty_rec_confg_plugn.coln_id
        || ' = '
        || pty_rec_confg_plugn.coln_id_parnt;

      return vva_reqt_sql;
    end genr_reqt_sql;

    function enlev_carct_suprf_docmn (pnu_numr_regn_apex in number,
                                      pva_valr in varchar2)
      return number is
    begin
      return to_number (substr (pva_valr,
                                length ('R' || pnu_numr_regn_apex || '_') + 1));
    end enlev_carct_suprf_docmn;
  begin
    open cur_arbre for genr_reqt_sql (pty_rec_confg_plugn)
      using enlev_carct_suprf_docmn (pnu_numr_apex_regn,
                                     sie_07_util_pkg.v (pty_rec_confg_plugn.item_noeud));

    fetch cur_arbre
    bulk collect into vta_tab_noeud;

    close cur_arbre;

    sie_12_arbre_pkg.ajout_liste_noeud (pnu_numr_apex_regn,
                                        vta_tab_noeud);
  end maj_arbre_contx_noeud;

  function formt_chain (pva_valr in varchar2)
    return varchar2 is
  begin
    if pva_valr is null then
      return 'null';
    else
      return pva_valr;
    end if;
  end formt_chain;

  function formt_chain_2 (pva_valr in varchar2)
    return varchar2 is
  begin
    if pva_valr is null then
      return 'null';
    else
      return '''' || pva_valr || '''';
    end if;
  end formt_chain_2;

  procedure ouvri_atrib_enfan is
  begin
    htp.prn (',"children":');
  end ouvri_atrib_enfan;

  procedure ouvri_liste_noeud is
  begin
    htp.prn ('[');
  end ouvri_liste_noeud;

  procedure fermr_liste_noeud is
  begin
    htp.prn (']');
  end fermr_liste_noeud;

  procedure ouvri_noeud is
  begin
    htp.prn ('{');
  end ouvri_noeud;

  procedure fermr_noeud is
  begin
    htp.prn ('}');
  end fermr_noeud;

  procedure sepr_noeud is
  begin
    htp.prn (',');
  end sepr_noeud;

  procedure genr_json_arbre (pnu_numr_apex_regn in number) is
    rec_confg_plugn                         typ_rec_confg_plugn;
  begin
    rec_confg_plugn := obten_enreg_confg_plugn (pnu_numr_apex_regn);

    if rec_confg_plugn.indic_charg_progr = 'N' then
      genr_json_arbre_compl (pnu_numr_apex_regn);
    else
      if sie_12_arbre_pkg.verfr_presn (pnu_numr_apex_regn) then
        genr_json_arbre_contx (pnu_numr_apex_regn);
      else
        genr_json_racn_arbre (pnu_numr_apex_regn);
      end if;
    end if;
  end genr_json_arbre;

  procedure genr_json_racn_arbre (pnu_numr_apex_regn in number) is
    cur_racn_arbre                          sys_refcursor;
    rec_confg_plugn                         typ_rec_confg_plugn;
    vta_tab_rec_arbre                       tab_rec_arbre;
    vnu_nombr_noeud_arbre                   number;
    vnu_nombr_itert                         number;

    procedure formt_noeud (p_rec_arbre in typ_rec_arbre) is
    begin
      htp.prn (
           '"attr":{"id":"'
        || 'R'
        || rec_confg_plugn.seqnc
        --|| pnu_numr_apex_regn
        || '_'
        || p_rec_arbre.vva_valr
        || '"'
        || ',"rel":"'
        || case
             when p_rec_arbre.vva_type is not null then p_rec_arbre.vva_type
             else obten_plugn_arbre_noeud_deft (pnu_numr_apex_regn)
           end
        || '"'
        || '},'
        || '"data":{"title":"'
        || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre)
        || '",'
        || '"attr":{'
        || case
             when p_rec_arbre.vva_aide_insta is not null then
                  '"title":"'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre_aide_insta)
               || '|'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_aide_insta)
               || '",'
             else
               null
           end
        || '"href":"'
        || p_rec_arbre.vva_lien
        || '"'
        || '}'
        || '}'
        || case
             when p_rec_arbre.vnu_stat = 1 then ',"state":"open"'
             when p_rec_arbre.vnu_stat <> 0 then ',"state":"closed"'
             else null
           end
      );
    end formt_noeud;

    function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
      vva_indic_enonc_condt                   varchar2 (1) := 'N';
      vva_indic_enonc_condt_comnc_pa          varchar2 (1) := 'N';
      vva_indic_enonc_trier_par               varchar2 (1) := 'N';
    begin
      if pty_rec_confg_plugn.enonc_condt is not null then
        vva_indic_enonc_condt := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_condt_comnc_par is not null then
        vva_indic_enonc_condt_comnc_pa := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_trier_par is not null then
        vva_indic_enonc_trier_par := 'O';
      end if;

      vva_reqt_sql :=
           'select case'
        || '         when connect_by_isleaf = 1 then'
        || '           0'
        || '         when '
        || '           level <= '
        || pty_rec_confg_plugn.obten_json_arbre_nombr_niv
        || '         then'
        || '            1'
        ||                                                                           --'         when level = 1 then' ||
           --'           1' ||
           '         else'
        || '           -1'
        || '       end stat,'
        || ' level,'
        || pty_rec_confg_plugn.coln_titre
        || ' titre,'
        || ' lower('
        || formt_chain (pty_rec_confg_plugn.coln_type)
        || ')'
        || ' type,'
        || pty_rec_confg_plugn.coln_valr
        || ' valr,'
        || formt_chain (pty_rec_confg_plugn.coln_titre_aide_insta)
        || ' titre_aide_insta,'
        || formt_chain (pty_rec_confg_plugn.coln_aide_insta)
        || ' aide_insta,'
        || formt_chain (pty_rec_confg_plugn.coln_lien)
        || ' link'
        || '  from '
        || pty_rec_confg_plugn.nom_table
        || ' where level <= '
        || pty_rec_confg_plugn.obten_json_arbre_nombr_niv
        || case when vva_indic_enonc_condt = 'O' then ' and ' || pty_rec_confg_plugn.enonc_condt else null end
        || ' start with '
        || pty_rec_confg_plugn.coln_id_parnt
        || case
             when pty_rec_confg_plugn.indic_comnc_par_racn = 'O' then
               ' is null '
             else
                  ' in (select '
               || pty_rec_confg_plugn.coln_id
               || ' from '
               || pty_rec_confg_plugn.nom_table
               || ' where '
               || pty_rec_confg_plugn.coln_id_parnt
               || ' is null)'
           end
        || case
             when vva_indic_enonc_condt_comnc_pa = 'O' then ' and ' || pty_rec_confg_plugn.enonc_condt_comnc_par
             else null
           end
        || ' connect by prior '
        || pty_rec_confg_plugn.coln_id
        || ' = '
        || pty_rec_confg_plugn.coln_id_parnt
        || '                  and level <= '
        || pty_rec_confg_plugn.obten_json_arbre_nombr_niv
        || case vva_indic_enonc_trier_par
             when 'O' then ' order siblings by ' || pty_rec_confg_plugn.enonc_trier_par
             else null
           end;

      return vva_reqt_sql;
    end genr_reqt_sql;
  begin
    initl_arbre (pnu_numr_apex_regn);

    rec_confg_plugn := obten_enreg_confg_plugn (pnu_numr_apex_regn);

    if length (rec_confg_plugn.enonc_pre_reqt) > 0 then
      execute immediate rec_confg_plugn.enonc_pre_reqt;
    end if;

    open cur_racn_arbre for genr_reqt_sql (rec_confg_plugn);

    fetch cur_racn_arbre
    bulk collect into vta_tab_rec_arbre;

    close cur_racn_arbre;

    vnu_nombr_noeud_arbre := vta_tab_rec_arbre.count ();
    vnu_nombr_itert := vnu_nombr_noeud_arbre + 1;

    if vnu_nombr_noeud_arbre > 0 then
      ouvri_liste_noeud ();

      for i in 1 .. vnu_nombr_itert loop
        if i <> vnu_nombr_itert then
          if vta_tab_rec_arbre.exists (i - 1) and vta_tab_rec_arbre (i).vnu_level = vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();
            sepr_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level > vta_tab_rec_arbre (i - 1).vnu_level then
            ouvri_atrib_enfan ();
            ouvri_liste_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level < vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();

            for j in vta_tab_rec_arbre (i).vnu_level .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;

            sepr_noeud ();
          end if;

          ouvri_noeud ();
          formt_noeud (vta_tab_rec_arbre (i));
        else
          fermr_noeud ();

          if vta_tab_rec_arbre (i - 1).vnu_level > 1 then
            for j in 1 .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;
          end if;
        end if;
      end loop;

      fermr_liste_noeud ();
    else
      ouvri_liste_noeud ();
      ouvri_noeud ();
      fermr_noeud ();
      fermr_liste_noeud ();
    end if;
  exception
    when others then
      htp.prn ('[{}]');
  end genr_json_racn_arbre;

  procedure genr_json_arbre_contx (pnu_numr_apex_regn in number) is
    cur_arbre_contx                         sys_refcursor;
    rec_confg_plugn                         typ_rec_confg_plugn;
    vta_tab_rec_arbre                       tab_rec_arbre;
    vnu_nombr_noeud_arbre                   number;
    vnu_nombr_itert                         number;

    procedure formt_noeud (p_rec_arbre in typ_rec_arbre) is
    begin
      htp.prn (
           '"attr":{"id":"'
        || 'R'
        || rec_confg_plugn.seqnc
        --|| pnu_numr_apex_regn
        || '_'
        || p_rec_arbre.vva_valr
        || '"'
        || ',"rel":"'
        || case
             when p_rec_arbre.vva_type is not null then p_rec_arbre.vva_type
             else obten_plugn_arbre_noeud_deft (pnu_numr_apex_regn)
           end
        || '"'
        || '},'
        || '"data":{"title":"'
        || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre)
        || '",'
        || '"attr":{'
        || case
             when p_rec_arbre.vva_aide_insta is not null then
                  '"title":"'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre_aide_insta)
               || '|'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_aide_insta)
               || '",'
             else
               null
           end
        || '"href":"'
        || p_rec_arbre.vva_lien
        || '"'
        || '}'
        || '}'
        || case when p_rec_arbre.vnu_stat <> 0 then ',"state":"open"' else ',"state":"closed"' end
      );
    end formt_noeud;

    function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
      vva_indic_enonc_condt                   varchar2 (1) := 'N';
      vva_indic_enonc_condt_comnc_pa          varchar2 (1) := 'N';
      vva_indic_enonc_trier_par               varchar2 (1) := 'N';
      vnu_niv                                 number := 2;
    begin
      if pty_rec_confg_plugn.enonc_condt is not null then
        vva_indic_enonc_condt := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_condt_comnc_par is not null then
        vva_indic_enonc_condt_comnc_pa := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_trier_par is not null then
        vva_indic_enonc_trier_par := 'O';
      end if;

      vva_reqt_sql :=
           'select case
           when connect_by_isleaf = 1 then
             0
           when level <= '
        || pty_rec_confg_plugn.obten_json_arbre_nombr_niv
        || ' then 
             1
           else
             -1
         end stat,
         level,'
        || pty_rec_confg_plugn.coln_titre
        || ' titre,'
        || ' lower('
        || formt_chain (pty_rec_confg_plugn.coln_type)
        || ')'
        || ' type,'
        || pty_rec_confg_plugn.coln_valr
        || ' valr,'
        || formt_chain (pty_rec_confg_plugn.coln_titre_aide_insta)
        || ' titre_aide_insta,'
        || formt_chain (pty_rec_confg_plugn.coln_aide_insta)
        || ' aide_insta,'
        || formt_chain (pty_rec_confg_plugn.coln_lien)
        || ' lien'
        || '  from '
        || ' (select * from '
        || pty_rec_confg_plugn.nom_table
        || ' where '
        || '('
        || pty_rec_confg_plugn.coln_id_parnt
        || ' is null or '
        || pty_rec_confg_plugn.coln_id_parnt
        || ' in (select an.noeud_ouver from vd_sie_12_arbre_noeud an where an.ref_arbre = :vnu_arbre)) '
        || case vva_indic_enonc_condt when 'O' then ' and ' || pty_rec_confg_plugn.enonc_condt else null end
        || ')'
        || ' start with '
        || pty_rec_confg_plugn.coln_id_parnt
        || case
             when pty_rec_confg_plugn.indic_comnc_par_racn = 'O' then
               ' is null '
             else
                  ' in (select '
               || pty_rec_confg_plugn.coln_id
               || ' from '
               || pty_rec_confg_plugn.nom_table
               || ' where '
               || pty_rec_confg_plugn.coln_id_parnt
               || ' is null)'
           end
        || case
             when vva_indic_enonc_condt_comnc_pa = 'O' then ' and ' || pty_rec_confg_plugn.enonc_condt_comnc_par
             else null
           end
        || ' connect by prior '
        || pty_rec_confg_plugn.coln_id
        || ' = '
        || pty_rec_confg_plugn.coln_id_parnt
        || '                  and level <= '
        || pty_rec_confg_plugn.obten_json_arbre_nombr_niv
        || case vva_indic_enonc_trier_par
             when 'O' then ' order siblings by ' || pty_rec_confg_plugn.enonc_trier_par
             else null
           end;

      return vva_reqt_sql;
    end genr_reqt_sql;
  begin
    initl_arbre (pnu_numr_apex_regn);

    rec_confg_plugn := obten_enreg_confg_plugn (pnu_numr_apex_regn);

    maj_arbre_contx_noeud (pnu_numr_apex_regn,
                           rec_confg_plugn);

    --générer l'arbre en contexte du noeud sélectionné et des noeuds ouverts
    if length (rec_confg_plugn.enonc_pre_reqt) > 0 then
      execute immediate rec_confg_plugn.enonc_pre_reqt;                                                    --USING NOEUD
    end if;

    open cur_arbre_contx for genr_reqt_sql (rec_confg_plugn) using sie_12_arbre_pkg.obten_arbre (pnu_numr_apex_regn);

    fetch cur_arbre_contx
    bulk collect into vta_tab_rec_arbre;

    close cur_arbre_contx;

    vnu_nombr_noeud_arbre := vta_tab_rec_arbre.count ();
    vnu_nombr_itert := vnu_nombr_noeud_arbre + 1;

    if vnu_nombr_noeud_arbre > 0 then
      ouvri_liste_noeud ();

      for i in 1 .. vnu_nombr_itert loop
        if i <> vnu_nombr_itert then
          if vta_tab_rec_arbre.exists (i - 1) and vta_tab_rec_arbre (i).vnu_level = vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();
            sepr_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level > vta_tab_rec_arbre (i - 1).vnu_level then
            ouvri_atrib_enfan ();
            ouvri_liste_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level < vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();

            for j in vta_tab_rec_arbre (i).vnu_level .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;

            sepr_noeud ();
          end if;

          ouvri_noeud ();
          formt_noeud (vta_tab_rec_arbre (i));
        else
          fermr_noeud ();

          if vta_tab_rec_arbre (i - 1).vnu_level > 1 then
            for j in 1 .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;
          end if;
        end if;
      end loop;

      fermr_liste_noeud ();
    else
      ouvri_liste_noeud ();
      ouvri_noeud ();
      fermr_noeud ();
      fermr_liste_noeud ();
    end if;
  exception
    when others then
      ouvri_liste_noeud ();
      ouvri_noeud ();
      fermr_noeud ();
      fermr_liste_noeud ();
  end genr_json_arbre_contx;

  procedure genr_json_arbre_compl (pnu_numr_apex_regn in number) is
    cur_arbre_compl                         sys_refcursor;
    rec_confg_plugn                         typ_rec_confg_plugn;
    vta_tab_rec_arbre                       tab_rec_arbre;
    vnu_nombr_noeud_arbre                   number;
    vnu_nombr_itert                         number;

    procedure formt_noeud (p_rec_arbre in typ_rec_arbre) is
    begin
      htp.prn (
           '"attr":{"id":"'
        || 'R'
        || rec_confg_plugn.seqnc
        --|| pnu_numr_apex_regn
        || '_'
        || p_rec_arbre.vva_valr
        || '"'
        || ',"rel":"'
        || case
             when p_rec_arbre.vva_type is not null then p_rec_arbre.vva_type
             else obten_plugn_arbre_noeud_deft (pnu_numr_apex_regn)
           end
        || '"'
        || '},'
        || '"data":{"title":"'
        || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre)
        || '",'
        || '"attr":{'
        || case
             when p_rec_arbre.vva_aide_insta is not null then
                  '"title":"'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre_aide_insta)
               || '|'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_aide_insta)
               || '",'
             else
               null
           end
        || '"href":"'
        || p_rec_arbre.vva_lien
        || '"'
        || '}'
        || '}'
        || case
             when p_rec_arbre.vnu_stat = 1 then ',"state":"open"'
             when p_rec_arbre.vnu_stat <> 0 then ',"state":"closed"'
             else null
           end
      );
    end formt_noeud;

    function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
      vva_indic_enonc_condt                   varchar2 (1) := 'N';
      vva_indic_enonc_condt_comnc_pa          varchar2 (1) := 'N';
      vva_indic_enonc_trier_par               varchar2 (1) := 'N';
    begin
      if pty_rec_confg_plugn.enonc_condt is not null then
        vva_indic_enonc_condt := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_condt_comnc_par is not null then
        vva_indic_enonc_condt_comnc_pa := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_trier_par is not null then
        vva_indic_enonc_trier_par := 'O';
      end if;

      vva_reqt_sql :=
           'select case'
        || '         when connect_by_isleaf = 1 then'
        || '           0'
        || '         when '
        || '           level <= '
        || pty_rec_confg_plugn.obten_json_arbre_nombr_niv
        || '          then'
        || '           1'
        || '         when (select 1 from vd_sie_12_arbre_noeud an where an.ref_arbre = :vnu_arbre and an.noeud_ouver = '
        || pty_rec_confg_plugn.coln_id
        || ') = 1 then'
        || '           1'
        || '         else'
        || '           -1'
        || '       end stat,'
        || ' level,'
        || pty_rec_confg_plugn.coln_titre
        || ' titre,'
        || ' lower('
        || formt_chain (pty_rec_confg_plugn.coln_type)
        || ')'
        || ' type,'
        || pty_rec_confg_plugn.coln_valr
        || ' valr,'
        || formt_chain (pty_rec_confg_plugn.coln_titre_aide_insta)
        || ' titre_aide_insta,'
        || formt_chain (pty_rec_confg_plugn.coln_aide_insta)
        || ' aide_insta,'
        || formt_chain (pty_rec_confg_plugn.coln_lien)
        || ' link'
        || '  from '
        || pty_rec_confg_plugn.nom_table
        || case when vva_indic_enonc_condt = 'O' then ' where ' || pty_rec_confg_plugn.enonc_condt else null end
        || ' start with '
        || pty_rec_confg_plugn.coln_id_parnt
        || case
             when pty_rec_confg_plugn.indic_comnc_par_racn = 'O' then
               ' is null '
             else
                  ' in (select '
               || pty_rec_confg_plugn.coln_id
               || ' from '
               || pty_rec_confg_plugn.nom_table
               || ' where '
               || pty_rec_confg_plugn.coln_id_parnt
               || ' is null)'
           end
        || case
             when vva_indic_enonc_condt_comnc_pa = 'O' then ' and ' || pty_rec_confg_plugn.enonc_condt_comnc_par
             else null
           end
        || ' connect by prior '
        || pty_rec_confg_plugn.coln_id
        || ' = '
        || pty_rec_confg_plugn.coln_id_parnt
        || case vva_indic_enonc_trier_par
             when 'O' then ' order siblings by ' || pty_rec_confg_plugn.enonc_trier_par
             else null
           end;



      return vva_reqt_sql;
    end genr_reqt_sql;
  begin
    initl_arbre (pnu_numr_apex_regn);
    rec_confg_plugn := obten_enreg_confg_plugn (pnu_numr_apex_regn);

    if length (rec_confg_plugn.enonc_pre_reqt) > 0 then
      execute immediate rec_confg_plugn.enonc_pre_reqt;
    end if;

    open cur_arbre_compl for genr_reqt_sql (rec_confg_plugn) using sie_12_arbre_pkg.obten_arbre (pnu_numr_apex_regn);

    fetch cur_arbre_compl
    bulk collect into vta_tab_rec_arbre;

    close cur_arbre_compl;

    vnu_nombr_noeud_arbre := vta_tab_rec_arbre.count ();
    vnu_nombr_itert := vnu_nombr_noeud_arbre + 1;

    if vnu_nombr_noeud_arbre > 0 then
      ouvri_liste_noeud ();

      for i in 1 .. vnu_nombr_itert loop
        if i <> vnu_nombr_itert then
          if vta_tab_rec_arbre.exists (i - 1) and vta_tab_rec_arbre (i).vnu_level = vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();
            sepr_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level > vta_tab_rec_arbre (i - 1).vnu_level then
            ouvri_atrib_enfan ();
            ouvri_liste_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level < vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();

            for j in vta_tab_rec_arbre (i).vnu_level .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;

            sepr_noeud ();
          end if;

          ouvri_noeud ();
          formt_noeud (vta_tab_rec_arbre (i));
        else
          fermr_noeud ();

          if vta_tab_rec_arbre (i - 1).vnu_level > 1 then
            for j in 1 .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;
          end if;
        end if;
      end loop;

      fermr_liste_noeud ();
    else
      ouvri_liste_noeud ();
      ouvri_noeud ();
      fermr_noeud ();
      fermr_liste_noeud ();
    end if;
  exception
    when others then
      htp.prn ('[{}]');
  end genr_json_arbre_compl;

  procedure genr_json_noeud (pnu_numr_apex_regn in number,
                             pva_noeud in varchar2) is
    cur_arbre_noeud                         sys_refcursor;
    rec_confg_plugn                         typ_rec_confg_plugn;
    vta_tab_rec_arbre                       tab_rec_arbre;
    vnu_nombr_noeud_arbre                   number;
    vnu_nombr_itert                         number;

    procedure formt_noeud (p_rec_arbre in typ_rec_arbre) is
    begin
      htp.prn (
           '"attr":{"id":"'
        || 'R'
        || rec_confg_plugn.seqnc
        --|| pnu_numr_apex_regn
        || '_'
        || p_rec_arbre.vva_valr
        || '"'
        || ',"rel":"'
        || case
             when p_rec_arbre.vva_type is not null then p_rec_arbre.vva_type
             else obten_plugn_arbre_noeud_deft (pnu_numr_apex_regn)
           end
        || '"'
        || '},'
        || '"data":{"title":"'
        || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre)
        || '",'
        || '"attr":{'
        || case
             when p_rec_arbre.vva_aide_insta is not null then
                  '"title":"'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_titre_aide_insta)
               || '|'
               || sie_07_util_pkg.echap_text_json (p_rec_arbre.vva_aide_insta)
               || '",'
             else
               null
           end
        || '"href":"'
        || p_rec_arbre.vva_lien
        || '"'
        || '}'
        || '}'
        || case when p_rec_arbre.vnu_stat <> 0 then ',"state":"closed"' else null end
      );
    end formt_noeud;

    function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
      vva_indic_enonc_condt                   varchar2 (1) := 'N';
      vva_indic_enonc_condt_comnc_pa          varchar2 (1) := 'N';
      vva_indic_enonc_trier_par               varchar2 (1) := 'N';
    begin
      if pty_rec_confg_plugn.enonc_condt is not null then
        vva_indic_enonc_condt := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_condt_comnc_par is not null then
        vva_indic_enonc_condt_comnc_pa := 'O';
      end if;

      if pty_rec_confg_plugn.enonc_trier_par is not null then
        vva_indic_enonc_trier_par := 'O';
      end if;

      vva_reqt_sql :=
           'select '
        || '  case '
        || '    when connect_by_isleaf = 1 then '
        || '      0 '
        || '    when level = 1 then '
        || '      1 '
        || '    else '
        || '      -1 '
        || ' end stat, '
        || ' level, '
        || pty_rec_confg_plugn.coln_titre
        || ' titre, '
        || ' lower('
        || formt_chain (pty_rec_confg_plugn.coln_type)
        || ') '
        || ' type, '
        || pty_rec_confg_plugn.coln_valr
        || ' valr, '
        || formt_chain (pty_rec_confg_plugn.coln_titre_aide_insta)
        || ' titre_aide_insta, '
        || formt_chain (pty_rec_confg_plugn.coln_aide_insta)
        || ' aide_insta, '
        || formt_chain (pty_rec_confg_plugn.coln_lien)
        || ' lien '
        || '  from '
        || pty_rec_confg_plugn.nom_table
        || ' where level <= '
        || pty_rec_confg_plugn.obten_json_noeud_nombr_niv
        ||      --case when vva_indic_enonc_condt = 'O' then ' and ' || pty_rec_confg_plugn.enonc_condt else null end ||
          ' start with '
        || pty_rec_confg_plugn.coln_id_parnt
        || ' = '
        || formt_chain_2 (pva_noeud)
        || --case when vva_indic_enonc_comnc_par = 'O' then ' and ' || pty_rec_confg_plugn.enonc_comnc_par else null end ||
          ' connect by prior '
        || pty_rec_confg_plugn.coln_id
        || ' = '
        || pty_rec_confg_plugn.coln_id_parnt
        || '                  and level <= '
        || (pty_rec_confg_plugn.obten_json_noeud_nombr_niv + 1)
        || case vva_indic_enonc_trier_par
             when 'O' then ' order siblings by ' || pty_rec_confg_plugn.enonc_trier_par
             else null
           end;

      return vva_reqt_sql;
    end genr_reqt_sql;
  begin
    rec_confg_plugn := obten_enreg_confg_plugn (pnu_numr_apex_regn);

    if length (rec_confg_plugn.enonc_pre_reqt) > 0 then
      execute immediate rec_confg_plugn.enonc_pre_reqt;
    end if;

    open cur_arbre_noeud for genr_reqt_sql (rec_confg_plugn);

    fetch cur_arbre_noeud
    bulk collect into vta_tab_rec_arbre;

    close cur_arbre_noeud;

    vnu_nombr_noeud_arbre := vta_tab_rec_arbre.count ();
    vnu_nombr_itert := vnu_nombr_noeud_arbre + 1;

    if vnu_nombr_noeud_arbre > 0 then
      actio_ouvri_noeud (pnu_numr_apex_regn,
                         pva_noeud);
      ouvri_liste_noeud ();

      for i in 1 .. vnu_nombr_itert loop
        if i <> vnu_nombr_itert then
          if vta_tab_rec_arbre.exists (i - 1) and vta_tab_rec_arbre (i).vnu_level = vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();
            sepr_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level > vta_tab_rec_arbre (i - 1).vnu_level then
            ouvri_atrib_enfan ();
            ouvri_liste_noeud ();
          elsif vta_tab_rec_arbre.exists (i - 1)
            and vta_tab_rec_arbre (i).vnu_level < vta_tab_rec_arbre (i - 1).vnu_level then
            fermr_noeud ();

            for j in vta_tab_rec_arbre (i).vnu_level .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;

            sepr_noeud ();
          end if;

          ouvri_noeud ();
          formt_noeud (vta_tab_rec_arbre (i));
        else
          fermr_noeud ();

          if vta_tab_rec_arbre (i - 1).vnu_level > 1 then
            for j in 1 .. (vta_tab_rec_arbre (i - 1).vnu_level - 1) loop
              fermr_liste_noeud ();
              fermr_noeud ();
            end loop;
          end if;
        end if;
      end loop;

      fermr_liste_noeud ();
    end if;
  exception
    when others then
      ete ();
      ete (sqlerrm);
  end genr_json_noeud;

  procedure actio_ouvri_noeud (pnu_numr_apex_regn in number,
                               pva_noeud in varchar2) is
  begin
    sie_12_arbre_pkg.ouvri_noeud (pnu_numr_apex_regn,
                                  pva_noeud);
  end actio_ouvri_noeud;

  procedure actio_fermr_noeud (pnu_numr_apex_regn in number,
                               pva_noeud in varchar2) is
  begin
    sie_12_arbre_pkg.fermr_noeud (pnu_numr_apex_regn,
                                  pva_noeud);
  end actio_fermr_noeud;

  procedure actio_selct_noeud (pnu_numr_apex_regn in number,
                               pva_noeud in varchar2) is
    rec_confg_plugn                         typ_rec_confg_plugn;

    cursor cur_item_noeud is
      select   ar.attribute_01 item_noeud
        from   apex_regn ar
       where   ar.id = pnu_numr_apex_regn; /*exists
                  (select null
                     from vd_sie_21_plugn_arbre pa
                    where pa.code = ar.attribute_05
                      and ar.id = pnu_numr_apex_regn
                      and exists
                            (select null
                               from vd_sie_13_page p, vd_sie_13_page_regn pr2
                              where pr.ref_page = p.seqnc
                                and pr2.ref_page = p.seqnc
                                and pr2.seqnc =
                                      sie_13_page_regn_pkg.obten_page_regn (
                                        pnu_numr_apex_regn)));*/
  begin
    for rec_item_noeud in cur_item_noeud loop
      sie_07_util_pkg.defnr_etat_sessn (rec_item_noeud.item_noeud,
                                        null);
    end loop;

    rec_confg_plugn := obten_enreg_confg_plugn (pnu_numr_apex_regn);

    sie_07_sesn_pkg.defnr_valr_sesn (sie_21_plugn_arbre_pkg.kva_s_noeud_actif,
                                     pva_noeud);
  end actio_selct_noeud;

  procedure actio_glisr_elemn_arbre (pnu_numr_apex_regn in number,
                                     pva_glisr_elemn in varchar2,
                                     pva_depsr_elemn in varchar2) is
    rec_confg_plugn                         typ_rec_confg_plugn;

    procedure lancr_procd_persn (pva_nom_procd in varchar2,
                                 pva_glisr_elemn in varchar2,
                                 pva_depsr_elemn in varchar2) is
      vva_progr_a_lancr                       varchar2 (4000)
                                                default replace (gva_progm_a_lancr,
                                                                 '%PROCD_PERSN%',
                                                                 pva_nom_procd);
    begin
      execute immediate vva_progr_a_lancr
        using pva_glisr_elemn,
              pva_depsr_elemn;
    exception
      when others then
        raise;
    end lancr_procd_persn;
  begin
    rec_confg_plugn := obten_enreg_confg_plugn (pnu_numr_apex_regn);

    lancr_procd_persn (rec_confg_plugn.nom_procd_glisr_elemn_arbre,
                       pva_glisr_elemn,
                       substr (pva_depsr_elemn,
                               instr (pva_depsr_elemn,
                                      '_') +
                               1));
  end actio_glisr_elemn_arbre;

  procedure genr_json_type_noeud (pnu_numr_apex_regn in number) is
    vva_json_optio_type_noeud               varchar2 (32767);
    vva_enfan_vald                          varchar2 (400);

    cursor cur_type_noeud is
      select   lower (pan.code) code,
               edv.empla || ore.nom_physq icone,
               ore.cordn_x_debut image_sprit_postn_pixel_gauch,
               ore.cordn_y_debut image_sprit_postn_pixel_haut,
               pan.indic_selct_noeud,
               pan.indic_ouvri_noeud,
               pan.indic_fermr_noeud,
               pan.indic_creer_noeud,
               pan.indic_suprm_noeud
        from   vd_sie_13_empla_dosr_virtl edv,
               vd_sie_13_resrc r,
               vd_sie_13_ocurn_resrc ore,
               vd_sie_21_plugn_arbre_noeud pan,
               vd_sie_21_plugn_arbre pa,
               vd_sie_11_prodt p2,
               apex_regn ar
       where   edv.ref_versn = p2.ref_versn
           and edv.ref_dosr_virtl = r.ref_dosr_virtl
           and r.indic_stock_meme_reprt = 'O'
           and ore.ref_resrc = r.seqnc
           and ore.ref_versn = p2.ref_versn
           and ore.ref_resrc = pan.ref_resrc
           and pan.ref_plugn_arbre = pa.seqnc
           --and pa.ref_page_regn = pr.seqnc
           and pa.code = ar.attribute_05
           and ar.id = pnu_numr_apex_regn
      union all
      select   lower (pan.code) code,
               edv.empla || ore.nom_physq icone,
               ore.cordn_x_debut image_sprit_postn_pixel_gauch,
               ore.cordn_y_debut image_sprit_postn_pixel_haut,
               pan.indic_selct_noeud,
               pan.indic_ouvri_noeud,
               pan.indic_fermr_noeud,
               pan.indic_creer_noeud,
               pan.indic_suprm_noeud
        from   vd_sie_13_empla_dosr_virtl edv,
               vd_sie_13_resrc r,
               vd_sie_13_ocurn_resrc ore,
               vd_sie_21_plugn_arbre_noeud pan,
               vd_sie_21_plugn_arbre pa,
               vd_sie_11_prodt p2,
               apex_regn ar
       where   edv.ref_versn = p2.ref_versn
           and edv.ref_dosr_virtl = ore.ref_dosr_virtl
           and r.indic_stock_meme_reprt = 'N'
           and ore.ref_resrc = r.seqnc
           and ore.ref_versn = p2.ref_versn
           and ore.ref_resrc = pan.ref_resrc
           and pan.ref_plugn_arbre = pa.seqnc
           --and pa.ref_page_regn = pr.seqnc
           and pa.code = ar.attribute_05
           and ar.id = pnu_numr_apex_regn
           and pa.ref_formt_resrc = ore.ref_formt_resrc;
  begin
    vva_enfan_vald := '"all"';

    vva_enfan_vald :=
      rtrim (vva_enfan_vald,
             ',');

    htp.prn ('{"valid_children":' || vva_enfan_vald || ',"type_attr":"rel","types":{');

    for rec_type_noeud in cur_type_noeud loop
      if vva_json_optio_type_noeud is not null then
        htp.prn (vva_json_optio_type_noeud || ',');
        vva_json_optio_type_noeud := null;
      end if;

      vva_json_optio_type_noeud :=
           '"'
        || rec_type_noeud.code
        || '":{'
        || '"valid_children":'
        || vva_enfan_vald
        || ','
        || '"select_node":'
        || case when rec_type_noeud.indic_selct_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"open_node":'
        || case when rec_type_noeud.indic_ouvri_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"close_node":'
        || case when rec_type_noeud.indic_fermr_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"create_node":'
        || case when rec_type_noeud.indic_creer_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"delete_node":'
        || case when rec_type_noeud.indic_suprm_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"icon":{'
        || case
             when rec_type_noeud.icone is not null then
               '"image":"' || rec_type_noeud.icone || '"'
             else
                  '"position":"'
               || rec_type_noeud.image_sprit_postn_pixel_gauch
               || 'px '
               || rec_type_noeud.image_sprit_postn_pixel_haut
               || 'px"'
           end
        || '}'
        || '}';
    end loop;

    htp.prn (vva_json_optio_type_noeud || '}}');
  end genr_json_type_noeud;

  procedure genr_json_type_noeud2 (pnu_numr_apex_regn in number) is
    vva_json_optio_type_noeud               varchar2 (32767);
    vva_enfan_vald                          varchar2 (400);

    cursor cur_type_noeud is
      select   lower (pan.code) code,
               edv.empla || ore.nom_physq icone,
               ore.cordn_x_debut image_sprit_postn_pixel_gauch,
               ore.cordn_y_debut image_sprit_postn_pixel_haut,
               pan.indic_selct_noeud,
               pan.indic_ouvri_noeud,
               pan.indic_fermr_noeud,
               pan.indic_creer_noeud,
               pan.indic_suprm_noeud
        from   vd_sie_13_empla_dosr_virtl edv,
               vd_sie_13_resrc r,
               vd_sie_13_ocurn_resrc ore,
               vd_sie_21_plugn_arbre_noeud pan,
               vd_sie_21_plugn_arbre pa,
               vd_sie_11_prodt p2,
               vd_sie_11_aplic p3,
               vd_sie_13_page p1,
               apex_regn ar
       where   edv.ref_versn = p2.ref_versn
           and edv.ref_dosr_virtl = r.ref_dosr_virtl
           and r.indic_stock_meme_reprt = 'O'
           and ore.ref_resrc = r.seqnc
           and ore.ref_versn = p2.ref_versn
           and ore.ref_resrc = pan.ref_resrc
           and pan.ref_plugn_arbre = pa.seqnc
           --and pa.ref_page_regn = pr.seqnc
           and pa.code = ar.attribute_05
           and ar.id = pnu_numr_apex_regn
           and p2.seqnc = p3.ref_prodt
           and p3.seqnc = p1.ref_aplic
      union all
      select   lower (pan.code) code,
               edv.empla || ore.nom_physq icone,
               ore.cordn_x_debut image_sprit_postn_pixel_gauch,
               ore.cordn_y_debut image_sprit_postn_pixel_haut,
               pan.indic_selct_noeud,
               pan.indic_ouvri_noeud,
               pan.indic_fermr_noeud,
               pan.indic_creer_noeud,
               pan.indic_suprm_noeud
        from   vd_sie_13_empla_dosr_virtl edv,
               vd_sie_13_resrc r,
               vd_sie_13_ocurn_resrc ore,
               vd_sie_21_plugn_arbre_noeud pan,
               vd_sie_21_plugn_arbre pa,
               vd_sie_11_prodt p2,
               vd_sie_11_aplic p3,
               vd_sie_13_page p1,
               apex_regn ar
       where   edv.ref_versn = p2.ref_versn
           and edv.ref_dosr_virtl = ore.ref_dosr_virtl
           and r.indic_stock_meme_reprt = 'N'
           and ore.ref_resrc = r.seqnc
           and ore.ref_versn = p2.ref_versn
           and ore.ref_resrc = pan.ref_resrc
           and pan.ref_plugn_arbre = pa.seqnc
           --and pa.ref_page_regn = pr.seqnc
           and pa.code = ar.attribute_05
           and ar.id = pnu_numr_apex_regn
           and p2.seqnc = p3.ref_prodt
           and p3.seqnc = p1.ref_aplic
           and pa.ref_formt_resrc = ore.ref_formt_resrc;
  begin
    vva_enfan_vald := '"all"';

    vva_enfan_vald :=
      rtrim (vva_enfan_vald,
             ',');

    htp.prn ('{"valid_children":' || vva_enfan_vald || ',"type_attr":"rel","types":{');

    for rec_type_noeud in cur_type_noeud loop
      if vva_json_optio_type_noeud is not null then
        htp.prn (vva_json_optio_type_noeud || ',');
        vva_json_optio_type_noeud := null;
      end if;

      vva_json_optio_type_noeud :=
           '"'
        || rec_type_noeud.code
        || '":{'
        || '"valid_children":'
        || vva_enfan_vald
        || ','
        || '"select_node":'
        || case when rec_type_noeud.indic_selct_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"open_node":'
        || case when rec_type_noeud.indic_ouvri_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"close_node":'
        || case when rec_type_noeud.indic_fermr_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"create_node":'
        || case when rec_type_noeud.indic_creer_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"delete_node":'
        || case when rec_type_noeud.indic_suprm_noeud = 'O' then 'true' else 'false' end
        || ','
        || '"icon":{'
        || case
             when rec_type_noeud.icone is not null then
               '"image":"' || rec_type_noeud.icone || '"'
             else
                  '"position":"'
               || rec_type_noeud.image_sprit_postn_pixel_gauch
               || 'px '
               || rec_type_noeud.image_sprit_postn_pixel_haut
               || 'px"'
           end
        || '}'
        || '}';
    end loop;

    htp.prn (vva_json_optio_type_noeud || '}}');
  end genr_json_type_noeud2;

  procedure initl_arbre (pnu_numr_apex_regn in number) is
  begin
    sie_12_arbre_pkg.initl_arbre (pnu_numr_apex_regn);
  end initl_arbre;

  procedure forcr_rafrc (pva_code in varchar2,
                         pnu_numr_page_apex in number,
                         pnu_utils in number default null) is
    vnu_page_regn                           apex_regn.id%type;
  begin
    select   ar.id
      into   vnu_page_regn
      from   vd_sie_21_plugn_arbre pa,
             apex_regn ar
     where   pa.code = ar.attribute_05
         and pa.code = pva_code
         and pa.ref_prodt = sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic_sesn)
         and ar.page_id = pnu_numr_page_apex
         and ar.flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic;

    /*select pr.seqnc
      into vnu_page_regn
      from vd_sie_21_plugn_arbre pa, vd_sie_13_page_regn pr, vd_sie_13_page p
     where pa.code = pva_code
       and pa.ref_page_regn = pr.seqnc
       and pr.ref_page = p.seqnc
       and p.numr_apex = pnu_numr_page_apex;*/

    sie_12_arbre_pkg.forcr_rafrc (vnu_page_regn,
                                  pnu_utils);
  exception
    when others then
      ete ();
  end forcr_rafrc;

  procedure rafrc_efect (pva_code in varchar2,
                         pnu_numr_page_apex in number,
                         pnu_utils in number default null,
                         pnu_numr_apex in number default sie_11_aplic_pkg.obten_numr_apex_aplic) is
    vnu_page_regn                           apex_regn.id%type;
  begin
    select   ar.id
      into   vnu_page_regn
      from   vd_sie_21_plugn_arbre pa,
             apex_regn ar
     where   pa.code = ar.attribute_05
         and pa.code = pva_code
         and pa.ref_prodt = sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic_sesn)
         and ar.page_id = pnu_numr_page_apex
         and ar.flow_id = pnu_numr_apex;

    /*select pr.seqnc
      into vnu_page_regn
      from vd_sie_21_plugn_arbre pa, vd_sie_13_page_regn pr, vd_sie_13_page p, vd_sie_11_aplic a
     where pa.code = pva_code
       and pa.ref_page_regn = pr.seqnc
       and pr.ref_page = p.seqnc
       and p.numr_apex = pnu_numr_page_apex
       and p.ref_aplic = a.seqnc
       and a.seqnc = pnu_numr_apex;*/

    sie_12_arbre_pkg.rafrc_efect (vnu_page_regn,
                                  pnu_utils);
  exception
    when others then
      ete ();
  end rafrc_efect;

  function obten_chemn_resrc_simpl_noeud (pnu_noeud in number,
                                          pva_formt_bals_img in varchar2 default 'N')
    return varchar2 is
    vva_resrc                               varchar2 (60);
    vva_code_formt                          varchar2 (23);
    vva_propr                               varchar2 (11);
  begin
    select   r.code,
             fr.code,
             case
               when r.ref_prodt is not null then 'PRODT'
               when r.ref_struc_aplic is not null then 'STRUC_APLIC'
               else 'PLUGN'
             end
      into   vva_resrc,
             vva_code_formt,
             vva_propr
      from   vd_sie_21_plugn_arbre_noeud pan,
             vd_sie_21_plugn_arbre pa,
             vd_sie_13_formt_resrc fr,
             vd_sie_13_resrc r
     where   pan.seqnc = pnu_noeud
         and pa.seqnc = pan.ref_plugn_arbre
         and fr.seqnc = pa.ref_formt_resrc
         and r.seqnc = pan.ref_resrc;

    if pva_formt_bals_img = 'N' then
      return sie_13_resrc_pkg.obten_chemn_resrc (vva_propr,
                                                 vva_resrc,
                                                 vva_code_formt);
    else
      return    '<img src="'
             || sie_13_resrc_pkg.obten_chemn_resrc (vva_propr,
                                                    vva_resrc,
                                                    vva_code_formt)
             || '" />';
    end if;
  end obten_chemn_resrc_simpl_noeud;

  --CONAL : revoir le fonctionnement avec la refonte
  procedure bascl_arbre_sesn (pnu_numr_apex_regn in number) is
    cursor cur_group_arbre_prodt (pnu_prodt in number,
                                  pnu_numr_apex_page in number,
                                  pva_code_plugn_arbre in varchar2) is
      select   ar.id id_page_regn,
               pa.seqnc
        from   vd_sie_11_prodt pro,
               vd_sie_11_aplic ap,
               apex_regn ar,
               vd_sie_21_plugn_arbre pa,
               vd_sie_12_arbre a
       where   pro.seqnc = ap.ref_prodt
           and pa.ref_prodt in (select   ref_prodt
                                  from   vd_sie_11_aplic
                                 where   numr_aplic_apex = ar.flow_id)
           and pa.code = ar.attribute_05
           and pro.seqnc = pnu_prodt
           and ar.page_id = pnu_numr_apex_page
           and pa.code = pva_code_plugn_arbre
           and ar.id = a.id_apex_regn
           and ar.flow_id = ap.numr_aplic_apex
           and a.ref_sesn = sie_12_sesn_pkg.obten_sesn;

    vva_code_plugn_arbre                    vd_sie_21_plugn_arbre.code%type;
    vnu_prodt                               vd_sie_11_aplic.seqnc%type;
    vnu_numr_apex_page                      vd_sie_13_page.numr_apex%type;
    rec_confg_plugn                         sie_21_plugn_arbre_pkg.typ_rec_confg_plugn;
    vva_valr_noeud_actif                    vd_sie_12_arbre.noeud_actif%type;
  begin
    --vérifier si présence darbre pour la session
    if sie_12_arbre_pkg.verfr_presn_sesn then
      --On veut basculer vers pnu_numr_apex_regn
      --trouver le code du plugin correspondant à la région
      select   pro.seqnc,
               p.numr_apex,
               pa.code
        into   vnu_prodt,
               vnu_numr_apex_page,
               vva_code_plugn_arbre
        from   vd_sie_11_prodt pro,
               vd_sie_11_aplic ap,
               vd_sie_13_page p,
               vd_sie_21_plugn_arbre pa,
               apex_regn ar
       where   ar.id = pnu_numr_apex_regn
           and pro.seqnc = ap.ref_prodt
           and ap.seqnc = p.ref_aplic
           and p.numr_apex = ar.page_id
           and ap.numr_aplic_apex = ar.flow_id
           and pa.code = ar.attribute_05
           and pa.ref_prodt = pro.seqnc;

      for rec_group_arbre_prodt in cur_group_arbre_prodt (vnu_prodt,
                                                          vnu_numr_apex_page,
                                                          vva_code_plugn_arbre) loop
        vva_valr_noeud_actif := sie_12_arbre_pkg.obten_noeud_actif;

        update   vd_sie_12_arbre
           set   id_apex_regn = pnu_numr_apex_regn,
                 noeud_actif =
                   case
                     when vva_valr_noeud_actif is null then
                       null
                     else
                          'R'
                       || rec_group_arbre_prodt.seqnc
                       || substr (vva_valr_noeud_actif,
                                  instr (vva_valr_noeud_actif,
                                         '_'))
                   end
         where   ref_sesn = sie_12_sesn_pkg.obten_sesn and id_apex_regn = rec_group_arbre_prodt.id_page_regn;

        if sql%found then
          --Ne devrait avoir qu'une seule ligne
          select   noeud_actif
            into   vva_valr_noeud_actif
            from   vd_sie_12_arbre
           where   ref_sesn = sie_12_sesn_pkg.obten_sesn and id_apex_regn = pnu_numr_apex_regn and rownum <= 1;

          sie_07_sesn_pkg.defnr_valr_sesn (sie_21_plugn_arbre_pkg.kva_s_noeud_actif,
                                           vva_valr_noeud_actif);
        end if;
      end loop;
    end if;
  end bascl_arbre_sesn;

  procedure creer_noeud_deft (pnu_seqnc in number) is
  begin
    insert into   sie_21_plugn_arbre_noeud pan (code, nom, descr, ref_plugn_arbre, dnr_ref_prodt)
      select   'DEFT',
               'Défaut',
               'Le type par défaut s''affiche comme un répertoire',
               pnu_seqnc,
               pa.ref_prodt
        from   vd_i_sie_21_plugn_arbre pa
       where   pa.seqnc = pnu_seqnc;
  end;
end sie_21_plugn_arbre_pkg;
/

Prompt Package Body SIE_21_PLUGN_BLOB_PKG;
/* Formatted on 04/12/2013 11:35:39 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_blob_pkg is
  function obten_nom_colct
    return varchar2 is
  begin
    return kva_nom_colct_blob;
  end obten_nom_colct;

  procedure creer_colct is
  begin
    sie_07_apex_colct_pkg.creer_colct (kva_nom_colct_blob);
  end creer_colct;

  procedure suprm_colct is
  begin
    sie_07_apex_colct_pkg.suprm_colct (kva_nom_colct_blob);
  end suprm_colct;

  function colct_exist
    return boolean is
  begin
    return sie_07_apex_colct_pkg.exist (kva_nom_colct_blob);
  end colct_exist;

  procedure ajout_membr_colct (pva_nom_fichr in varchar2,
                               pva_mime_type in varchar2,
                               pbl_fichr in out nocopy blob) is
  begin
    sie_07_apex_colct_pkg.re_seqnc_colct (kva_nom_colct_blob);
    ete ('dup_val_on_index1',
         pva_nom_fichr);
    sie_07_apex_colct_pkg.ajout_membr (pva_colct_name             => kva_nom_colct_blob,
                                       pva_c001                   => pva_nom_fichr,
                                       pva_c002                   => pva_mime_type,
                                       pbl_bl001                  => pbl_fichr);
  exception
    when dup_val_on_index then
      ete ('dup_val_on_index',
           pva_nom_fichr);
      ajout_membr_colct (pva_nom_fichr              => pva_nom_fichr,
                         pva_mime_type              => pva_mime_type,
                         pbl_fichr                  => pbl_fichr);
  end ajout_membr_colct;
end sie_21_plugn_blob_pkg;
/

Prompt Package Body SIE_21_PLUGN_CALND_COULR_PKG;
/* Formatted on 04/12/2013 11:35:39 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_calnd_coulr_pkg as
  function obten_image_aperc_coulr (pnu_ordre_presn in number,
                                    pva_libl in varchar2 default null,
                                    pva_titre in varchar2 default null)
    return varchar2 is
    vva_img                                 varchar2 (500)
      default '<img align="absmiddle" style="background: none repeat scroll 0% 0% %coulr%;" alt="" class="colorpreview" 
         src="/i/1px_trans.gif" title="%titre%">';
    vva_coulr                               varchar2 (7);
    vva_titre                               varchar2 (30) default null;
  begin
    select   gca.coulr
      into   vva_coulr
      from   vd_i_sie_21_plugn_calnd_coulr gca
     where   gca.ordre_presn = pnu_ordre_presn;

    vva_img :=
      sie_07_util_pkg.multi_replc (vva_img,
                                   '%coulr%',
                                   vva_coulr,
                                   '%titre%',
                                   pva_titre);
    return vva_img;
  exception
    when no_data_found then
      return null;
  end obten_image_aperc_coulr;

  procedure defnr_css is
    vva_style                               varchar2 (32767);

    cursor cur_calnd_coulr is
      select     ordre_presn,
                 coulr,
                 coulr_text
          from   vd_sie_21_plugn_calnd_coulr
      order by   ordre_presn;
  begin
    for rec_calnd_coulr in cur_calnd_coulr loop
      vva_style :=
           vva_style
        || '.fc-event-skin.agend_'
        || rec_calnd_coulr.ordre_presn
        || ', .fc-event-skin.agend_'
        || rec_calnd_coulr.ordre_presn
        || ' .fc-event-skin {'
        || 'background-color:'
        || rec_calnd_coulr.coulr
        || ';'
        || 'border-color:'
        || rec_calnd_coulr.coulr
        || ';'
        || 'color:'
        || rec_calnd_coulr.coulr_text
        || ';'
        || '}';
    end loop;

    sie_21_util_pkg.ajout_css (vva_style);
  end defnr_css;
end sie_21_plugn_calnd_coulr_pkg;
/

Prompt Package Body SIE_21_PLUGN_CALND_PKG;
/* Formatted on 04/12/2013 11:35:39 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_calnd_pkg as
  function obten_enreg_config_plugn (pnu_numr_apex_regn in number)
    return typ_rec_config_plugn is
    cursor cur_config_plugn is
      select   enonc_pre_reqt,
               ref_dv_vue_deft,
               conct_propr_entet_gauch,
               conct_propr_entet_centr,
               conct_propr_entet_droit,
               conct_propr_entet_gauch_formt,
               conct_propr_entet_centr_formt,
               conct_propr_entet_droit_formt,
               indic_evenm_modfb,
               nombr_mints_inter,
               heure_debut_norml,
               heure_fin_norml,
               heure_debut_exten,
               heure_fin_exten,
               nom_table,
               coln_ident,
               coln_agend,
               coln_indic_journ_compl,
               coln_indic_evenm_modfb,
               coln_date_journ_compl,
               coln_date_fin_journ_compl,
               coln_date_debut,
               coln_date_fin,
               coln_titre,
               coln_descr,
               coln_type,
               coln_titre_aide_insta,
               coln_aide_insta,
               coln_lien,
               pc.largr_regn_calnd,
               agend_nom_table
        from   vd_sie_21_plugn_calnd pc,
               apex_regn ar
       where   pc.code = ar.attribute_01
           and ar.id = pnu_numr_apex_regn
           and ar.flow_id in (select   numr_aplic_apex
                                from   vd_sie_11_aplic
                               where   ref_prodt = pc.ref_prodt);

    /*from vd_sie_21_plugn_calnd pc, vd_sie_13_page_regn pr, apex_regn ar
    where pc.ref_page_regn = pr.seqnc
          and pr.seqnc =
                sie_13_page_regn_pkg.obten_page_regn (pnu_numr_apex_regn)
          and ar.id = pnu_numr_apex_regn;*/

    rec_config_plugn                        typ_rec_config_plugn;
  begin
    open cur_config_plugn;

    fetch cur_config_plugn
    into rec_config_plugn;

    close cur_config_plugn;

    return rec_config_plugn;
  end obten_enreg_config_plugn;

  function formt_chain (pva_valr in varchar2)
    return varchar2 is
  begin
    if pva_valr is null then
      return 'null';
    else
      return pva_valr;
    end if;
  end formt_chain;

  function formt_chain_2 (pva_valr in varchar2)
    return varchar2 is
  begin
    if pva_valr is null then
      return 'null';
    else
      return '''' || pva_valr || '''';
    end if;
  end formt_chain_2;

  function formt_date (pda_date in date)
    return varchar2 is
  begin
    if pda_date is null then
      return 'null';
    else
      return    to_char (pda_date,
                         'YYYY-MM-DD')
             || 'T'
             || to_char (pda_date,
                         'HH24:MI');
    end if;
  end formt_date;

  function formt_chain_json (pva_chain in varchar2)
    return varchar2 is
  begin
    return sie_07_util_pkg.multi_replc (pva_chain,
                                        '''',
                                        '''''');
  end formt_chain_json;

  procedure ouvri_table_javsc is
  begin
    htp.prn ('[');
  end ouvri_table_javsc;

  procedure fermr_table_javsc is
  begin
    htp.prn (']');
  end fermr_table_javsc;

  procedure ouvri_objet_javsc is
  begin
    htp.prn ('{');
  end ouvri_objet_javsc;

  procedure fermr_objet_javsc is
  begin
    htp.prn ('}');
  end fermr_objet_javsc;

  procedure sepr_objet is
  begin
    htp.prn (',');
  end sepr_objet;

  function obten_clas_css (pnu_numr_apex_regn in number,
                           pva_agend in varchar2)
    return varchar2 is
    rec_config_plugn                        typ_rec_config_plugn;
    cur_agend                               sys_refcursor;
    vva_agend                               varchar2 (100);
    vnu_rownum                              number;
    vnu_ordre_presn                         number;

    function genr_reqt_sql (pty_rec_config_plugn in typ_rec_config_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
      vva_type_agend                          varchar2 (30);
    begin
      vva_type_agend := sie_12_calnd_pkg.obten_type_agend;

      vva_reqt_sql :=
           'select agend, rownum '
        || '  from '
        || pty_rec_config_plugn.agend_nom_table
        || case when vva_type_agend is not null then ' where type_agend = ''' || vva_type_agend || '''' else null end;

      return vva_reqt_sql;
    end genr_reqt_sql;
  begin
    rec_config_plugn := obten_enreg_config_plugn (pnu_numr_apex_regn);

    open cur_agend for genr_reqt_sql (rec_config_plugn);

    loop
      fetch cur_agend
      into vva_agend, vnu_rownum;

      if pva_agend = vva_agend then
        vnu_ordre_presn := vnu_rownum;
        exit;
      end if;

      exit when cur_agend%notfound;
    end loop;

    close cur_agend;

    return 'agend_' || to_char (vnu_ordre_presn);
  end obten_clas_css;

  procedure obten_json_evenm_agend (pnu_numr_apex_regn in number,
                                    pnu_date_debut_milsc in number,
                                    pnu_date_fin_milsc in number,
                                    pva_agend in varchar2) is
    cur_calnd                               sys_refcursor;
    rec_config_plugn                        typ_rec_config_plugn;
    vta_tab_rec_evenm                       typ_tab_rec_evenm;
    vnu_nombr_evenm_calnd                   number;

    function genr_reqt_sql (pty_rec_config_plugn in typ_rec_config_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
      vva_clas_css                            varchar2 (100);
    begin
      vva_clas_css :=
        obten_clas_css (pnu_numr_apex_regn,
                        pva_agend);

      vva_reqt_sql :=
           'select '
        || pty_rec_config_plugn.coln_ident
        || ' ident,'
        || pty_rec_config_plugn.coln_agend
        || ' agend,'
        || formt_chain (pty_rec_config_plugn.coln_indic_journ_compl)
        || ' indic_journ_compl,'
        || formt_chain (pty_rec_config_plugn.coln_indic_evenm_modfb)
        || ' indic_modfb,'
        || formt_chain (pty_rec_config_plugn.coln_date_journ_compl)
        || ' date_journ_compl,'
        || formt_chain (pty_rec_config_plugn.coln_date_fin_journ_compl)
        || ' date_fin_journ_compl,'
        || formt_chain (pty_rec_config_plugn.coln_date_debut)
        || ' date_debut,'
        || formt_chain (pty_rec_config_plugn.coln_date_fin)
        || ' date_fin,'
        || pty_rec_config_plugn.coln_titre
        || ' titre,'
        || formt_chain (pty_rec_config_plugn.coln_descr)
        || ' descr,'
        --|| pty_rec_config_plugn.coln_type
        || ''''
        || vva_clas_css
        || ''''
        || ' clas_css,'
        || formt_chain (pty_rec_config_plugn.coln_titre_aide_insta)
        || ' titre_aide_insta,'
        || formt_chain (pty_rec_config_plugn.coln_aide_insta)
        || ' aide_insta,'
        || formt_chain (pty_rec_config_plugn.coln_lien)
        || ' lien'
        || '  from '
        || pty_rec_config_plugn.nom_table
        || '  where '
        || pty_rec_config_plugn.coln_agend
        || ' = :pva_agend'
        || ' and trunc('
        || formt_chain (pty_rec_config_plugn.coln_date_debut)
        || ') >= :pda_date_debut'
        || ' and trunc('
        || formt_chain (pty_rec_config_plugn.coln_date_fin)
        || ') < :pda_date_fin';

      return vva_reqt_sql;
    end genr_reqt_sql;

    procedure formt_objet_javsc (p_rec_evenm in typ_rec_evenm) is
    begin
      ouvri_objet_javsc ();

      htp.prn (
           '"ident":"'
        || p_rec_evenm.vva_ident
        || '","agend":"'
        || p_rec_evenm.vva_agend
        || '","indic_journ_compl":'
        || case when p_rec_evenm.vva_indic_journ_compl in ('O', 'Y') then 'true' else 'false' end
        || ',"indic_modfb":'
        || case when p_rec_evenm.vva_indic_modfb in ('O', 'Y') then 'true' else 'false' end
        || ',"date_journ_compl":"'
        || formt_date (p_rec_evenm.vda_date_journ_compl)
        || '","date_fin_journ_compl":"'
        || formt_date (p_rec_evenm.vda_date_fin_journ_compl)
        || '","date_debut":"'
        || formt_date (p_rec_evenm.vda_date_debut)
        || '","date_fin":"'
        || formt_date (p_rec_evenm.vda_date_fin)
        || '","titre":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_titre)
        || '","descr":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_descr)
        || '","clas_css":"'
        || p_rec_evenm.vva_clas_css
        || '","titre_aide_insta":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_titre_aide_insta)
        || '","aide_insta":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_aide_insta)
        || '","lien":"'
        || '"'
      );

      fermr_objet_javsc ();
    end formt_objet_javsc;
  begin
    rec_config_plugn := obten_enreg_config_plugn (pnu_numr_apex_regn);

    if length (rec_config_plugn.enonc_pre_reqt) > 0 then
      execute immediate rec_config_plugn.enonc_pre_reqt;
    end if;

    open cur_calnd for genr_reqt_sql (rec_config_plugn)
      using pva_agend,
            trunc (sie_07_javsc_pkg.obten_date_oracl_calnd_javsc (pnu_date_debut_milsc)),
            trunc (sie_07_javsc_pkg.obten_date_oracl_calnd_javsc (pnu_date_fin_milsc));

    fetch cur_calnd
    bulk collect into vta_tab_rec_evenm;

    close cur_calnd;

    vnu_nombr_evenm_calnd := vta_tab_rec_evenm.count ();

    if vnu_nombr_evenm_calnd > 0 then
      ouvri_objet_javsc ();
      htp.prn ('"row":');
      ouvri_table_javsc ();

      for i in 1 .. vta_tab_rec_evenm.count loop
        formt_objet_javsc (vta_tab_rec_evenm (i));

        if i < vta_tab_rec_evenm.count then
          sepr_objet ();
        end if;
      end loop;

      fermr_table_javsc ();

      fermr_objet_javsc ();
    else
      ouvri_objet_javsc ();
      htp.prn ('"row":');
      ouvri_table_javsc ();
      fermr_table_javsc ();
      fermr_objet_javsc ();
    end if;
  exception
    when others then
      ouvri_objet_javsc ();
      htp.prn ('"row":');
      ouvri_table_javsc ();
      fermr_table_javsc ();
      fermr_objet_javsc ();
  end obten_json_evenm_agend;

  procedure obten_json_evenm (pnu_numr_apex_regn in number,
                              pva_ident in varchar2) is
    cur_calnd                               sys_refcursor;
    rec_config_plugn                        typ_rec_config_plugn;
    vta_tab_rec_evenm                       typ_tab_rec_evenm;
    vnu_nombr_evenm_calnd                   number;

    function genr_reqt_sql (pty_rec_config_plugn in typ_rec_config_plugn)
      return varchar2 is
      vva_reqt_sql                            varchar2 (32767);
    begin
      vva_reqt_sql :=
           'select '
        || pty_rec_config_plugn.coln_ident
        || ' ident,'
        || pty_rec_config_plugn.coln_agend
        || ' agend,'
        || formt_chain (pty_rec_config_plugn.coln_indic_journ_compl)
        || ' indic_journ_compl,'
        || formt_chain (pty_rec_config_plugn.coln_indic_evenm_modfb)
        || ' indic_modfb,'
        || formt_chain (pty_rec_config_plugn.coln_date_journ_compl)
        || ' date_journ_compl,'
        || formt_chain (pty_rec_config_plugn.coln_date_fin_journ_compl)
        || ' date_fin_journ_compl,'
        || formt_chain (pty_rec_config_plugn.coln_date_debut)
        || ' date_debut,'
        || formt_chain (pty_rec_config_plugn.coln_date_fin)
        || ' date_fin,'
        || pty_rec_config_plugn.coln_titre
        || ' titre,'
        || formt_chain (pty_rec_config_plugn.coln_descr)
        || ' descr,'
        --|| pty_rec_config_plugn.coln_type
        || ' sie_21_plugn_calnd_pkg.obten_clas_css (:pnu_numr_apex_regn, '
        || pty_rec_config_plugn.coln_agend
        || ')'
        || ' clas_css,'
        || formt_chain (pty_rec_config_plugn.coln_titre_aide_insta)
        || ' titre_aide_insta,'
        || formt_chain (pty_rec_config_plugn.coln_aide_insta)
        || ' aide_insta,'
        || formt_chain (pty_rec_config_plugn.coln_lien)
        || ' lien'
        || '  from '
        || pty_rec_config_plugn.nom_table
        || '  where '
        || pty_rec_config_plugn.coln_ident
        || ' = :pva_ident';

      return vva_reqt_sql;
    end genr_reqt_sql;

    procedure formt_objet_javsc (p_rec_evenm in typ_rec_evenm) is
    begin
      ouvri_objet_javsc ();

      htp.prn (
           '"ident":"'
        || p_rec_evenm.vva_ident
        || '","agend":"'
        || p_rec_evenm.vva_agend
        || '","indic_journ_compl":'
        || case when p_rec_evenm.vva_indic_journ_compl in ('O', 'Y') then 'true' else 'false' end
        || ',"indic_modfb":'
        || case when p_rec_evenm.vva_indic_modfb in ('O', 'Y') then 'true' else 'false' end
        || ',"date_journ_compl":"'
        || formt_date (p_rec_evenm.vda_date_journ_compl)
        || '","date_fin_journ_compl":"'
        || formt_date (p_rec_evenm.vda_date_fin_journ_compl)
        || '","date_debut":"'
        || formt_date (p_rec_evenm.vda_date_debut)
        || '","date_fin":"'
        || formt_date (p_rec_evenm.vda_date_fin)
        || '","titre":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_titre)
        || '","descr":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_descr)
        || '","clas_css":"'
        || p_rec_evenm.vva_clas_css
        || '","titre_aide_insta":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_titre_aide_insta)
        || '","aide_insta":"'
        || sie_07_util_pkg.echap_text_json (p_rec_evenm.vva_aide_insta)
        || '","lien":"'
        || p_rec_evenm.vva_lien
        || '"'
      );

      fermr_objet_javsc ();
    end formt_objet_javsc;
  begin
    rec_config_plugn := obten_enreg_config_plugn (pnu_numr_apex_regn);

    if length (rec_config_plugn.enonc_pre_reqt) > 0 then
      execute immediate rec_config_plugn.enonc_pre_reqt;
    end if;

    open cur_calnd for genr_reqt_sql (rec_config_plugn)
      using pnu_numr_apex_regn,
            pva_ident;

    fetch cur_calnd
    bulk collect into vta_tab_rec_evenm;

    close cur_calnd;

    vnu_nombr_evenm_calnd := vta_tab_rec_evenm.count ();

    if vnu_nombr_evenm_calnd > 0 then
      ouvri_objet_javsc ();
      htp.prn ('"row":');
      ouvri_table_javsc ();

      for i in 1 .. vta_tab_rec_evenm.count loop
        formt_objet_javsc (vta_tab_rec_evenm (i));

        if i < vta_tab_rec_evenm.count then
          sepr_objet ();
        end if;
      end loop;

      fermr_table_javsc ();

      fermr_objet_javsc ();
    else
      ouvri_objet_javsc ();
      htp.prn ('"row":');
      ouvri_table_javsc ();
      fermr_table_javsc ();
      fermr_objet_javsc ();
    end if;
  exception
    when others then
      ouvri_objet_javsc ();
      htp.prn ('"row":');
      ouvri_table_javsc ();
      fermr_table_javsc ();
      fermr_objet_javsc ();
  end obten_json_evenm;

  function obten_prop_entet_formt (pva_conct_enten in varchar2)
    return varchar2 is
    vta_elemn                               apex_application_global.vc_arr2;
    vva_retr                                varchar2 (500);
    vva_code_domn                           varchar2 (23);
    vva_code_detl                           varchar2 (23);

    function est_nombr (pva_valr in varchar2)
      return boolean is
      vnu_void                                number;
    begin
      vnu_void := to_number (pva_valr);
      return true;
    exception
      when others then
        return false;
    end est_nombr;

    procedure obten_domn_valr (pva_valr in varchar2,
                               pva_code_domn   out varchar2,
                               pva_code_detl   out varchar2) is
      vta_elemn_valr                          apex_application_global.vc_arr2;
    begin
      vta_elemn_valr :=
        sie_07_util_pkg.string_to_table (pva_valr,
                                         ',');

      if vta_elemn_valr.count () != 0 then
        pva_code_domn := vta_elemn_valr (1);
        pva_code_detl := vta_elemn_valr (2);
      end if;
    end obten_domn_valr;
  begin
    vta_elemn := sie_07_util_pkg.string_to_table (pva_conct_enten);

    if vta_elemn.count () != 0 then
      for i in vta_elemn.first () .. vta_elemn.last () loop
        obten_domn_valr (vta_elemn (i),
                         vva_code_domn,
                         vva_code_detl);

        if est_nombr (vva_code_detl)
       and to_number (vva_code_detl) < 0
       and i != vta_elemn.first ()
       and i != vta_elemn.last () then
          vva_retr :=
               rtrim (rtrim (vva_retr,
                             ','),
                      ' ')
            || ' ';
        elsif not est_nombr (vva_code_detl) then
          vva_retr :=
               vva_retr
            || sie_14_domn_valr_pkg.obten_valr_organ (sie_14_domn_valr_pkg.obten_seqnc (vva_code_domn,
                                                                                        vva_code_detl,
                                                                                        'AFW'))
            || ',';
        end if;
      end loop;
    end if;

    return ltrim (rtrim (vva_retr,
                         ', '),
                  ', ');
  exception
    when others then
      raise;
  end obten_prop_entet_formt;

  procedure defnr_etat_calnd (pnu_numr_apex_regn in number,
                              pva_mode in varchar2,
                              pnu_date_debut_milsc in number) is
  begin
    sie_12_calnd_pkg.defnr_mode (pnu_numr_apex_regn,
                                 pva_mode);

    sie_12_calnd_pkg.defnr_date (pnu_numr_apex_regn,
                                 to_char (sie_07_javsc_pkg.obten_date_oracl_calnd_javsc (pnu_date_debut_milsc),
                                          'YYYY/MM/DD'));
  end defnr_etat_calnd;

  procedure initl_actio_sesn is
  begin
    sie_07_sesn_pkg.suprm_valr_sesn (kva_s_selct_indic_journ_compl);
    sie_07_sesn_pkg.suprm_valr_sesn (kva_s_selct_date_debut);
    sie_07_sesn_pkg.suprm_valr_sesn (kva_s_selct_date_fin);
    sie_07_sesn_pkg.suprm_valr_sesn (kva_s_choix_evenm_ident);
  end initl_actio_sesn;

  procedure defnr_actio_selct (pva_indic_journ_compl in varchar2,
                               pva_date_debut in varchar2,
                               pva_date_fin in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_selct_indic_journ_compl,
                                     pva_indic_journ_compl);
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_selct_date_debut,
                                     pva_date_debut);
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_selct_date_fin,
                                     pva_date_fin);
  end defnr_actio_selct;

  procedure defnr_actio_choix_evenm (pva_ident in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_choix_evenm_ident,
                                     pva_ident);
  end defnr_actio_choix_evenm;

  procedure defnr_actio_deplc_evenm (pva_ident in varchar2,
                                     pva_indic_journ_compl in varchar2,
                                     pva_date_debut in varchar2,
                                     pva_date_fin in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_deplc_ident,
                                     pva_ident);
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_deplc_indic_journ_compl,
                                     pva_indic_journ_compl);
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_deplc_date_debut,
                                     pva_date_debut);
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_deplc_date_fin,
                                     pva_date_fin);
  end defnr_actio_deplc_evenm;

  procedure defnr_actio_ajust_evenm (pva_ident in varchar2,
                                     pva_date_fin in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_ajust_ident,
                                     pva_ident);
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_ajust_date_fin,
                                     pva_date_fin);
  end defnr_actio_ajust_evenm;

  procedure genr_json_evenm is
  begin
    -- Objet JSON qui permet de générer le nouvel événement dans le calendrier
    sie_15_ajax_pkg.obten_json_sql (
         'select '
      || ''''
      || gre_evenm.vva_ident
      || ''' ident,'
      || ''''
      || gre_evenm.vva_agend
      || ''' agend,'
      || ''''
      || case when gre_evenm.vva_indic_journ_compl is not null then 'true' else 'false' end
      || ''' indic_journ_compl,'
      || ''''
      || to_char (gre_evenm.vda_date_journ_compl,
                  'YYYY-MM-DD')
      || ''' date_journ_compl,'
      || ''''
      || to_char (gre_evenm.vda_date_fin_journ_compl,
                  'YYYY-MM-DD')
      || ''' date_fin_journ_compl,'
      || ''''
      || to_char (gre_evenm.vda_date_debut,
                  'YYYY-MM-DD')
      || 'T'
      || to_char (gre_evenm.vda_date_debut,
                  'HH24:MI')
      || ''' date_debut,'
      || ''''
      || to_char (gre_evenm.vda_date_fin,
                  'YYYY-MM-DD')
      || 'T'
      || to_char (gre_evenm.vda_date_fin,
                  'HH24:MI')
      || ''' date_fin,'
      || ''''
      || formt_chain_json (gre_evenm.vva_titre)
      || ''' titre,'
      || ''''
      || formt_chain_json (gre_evenm.vva_descr)
      || ''' descr,'
      || ''''
      || formt_chain_json (gre_evenm.vva_clas_css)
      || ''' clas_css,'
      || ''''
      || formt_chain_json (gre_evenm.vva_titre_aide_insta)
      || ''' titre_aide_insta,'
      || ''''
      || formt_chain_json (gre_evenm.vva_aide_insta)
      || ''' aide_insta,'
      || ''''
      || gre_evenm.vva_lien
      || ''' lien'
      || ' from dual'
    );
  end genr_json_evenm;

  procedure valdr_heure (pva_heure_debut in varchar2,
                         pva_heure_fin in varchar2,
                         pva_heure_debut_exten in varchar2 default null,
                         pva_heure_fin_exten in varchar2 default null) is
    vnu_heure_debut                         number;
    vnu_heure_fin                           number;
    vnu_heure_debut_exten                   number;
    vnu_heure_fin_exten                     number;
    vnu_mints_debut                         number;
    vnu_mints_fin                           number;
    vnu_mints_debut_exten                   number;
    vnu_mints_fin_exten                     number;

    function detrm_champ_ern (pbo_indic_fin in boolean default false,
                              pbo_indic_exten in boolean default false)
      return varchar2 is
      vva_libl_champ                          varchar2 (30);
    begin
      vva_libl_champ := 'Heure';

      if not pbo_indic_fin then
        vva_libl_champ := vva_libl_champ || ' début';
      else
        vva_libl_champ := vva_libl_champ || ' fin';
      end if;

      if pbo_indic_exten then
        vva_libl_champ := vva_libl_champ || ' extensionnée';
      end if;

      return vva_libl_champ;
    end detrm_champ_ern;

    function obten_heure (pva_valr in varchar2,
                          pbo_indic_fin in boolean default false,
                          pbo_indic_exten in boolean default false)
      return number is
      vnu_heure                               number (2);
      vva_valr                                varchar2 (10) default pva_valr;
      vbo_presn_24                            boolean;                           --Déterminer si on est en 24 ou 12am/pm
      vva_mode                                varchar2 (2);
    begin
      --Déterminer le bon mode
      if pva_valr is null then
        return null;
      end if;

      vva_mode :=
        substr (vva_valr,
                -2);

      if vva_mode in ('am', 'pm') then
        vbo_presn_24 := false;
      else
        vbo_presn_24 := true;
        vva_mode := ' ';
      end if;

      if instr (vva_valr,
                ':') > 0 then
        vva_valr :=
          substr (vva_valr,
                  1,
                  instr (vva_valr,
                         ':') -
                  1);
      else
        vva_valr :=
          rtrim (vva_valr,
                 vva_mode);
      end if;

      vnu_heure := to_number (vva_valr);

      --Valider si l'heure est invalide
      if (vnu_heure > 24
       or vnu_heure < 0)
     and vbo_presn_24
      or (vnu_heure > 12
       or vnu_heure < 0)
     and not vbo_presn_24 then
        --Déterminer le champs erroné
        sie_01_err_apex_pkg.lever_err_apex_code ('CAL.000001',
                                                 detrm_champ_ern (pbo_indic_fin,
                                                                  pbo_indic_exten),
                                                 pva_code_prodt             => 'AFW');
      end if;

      --Transformer les heures en 24 si elles sont en 12
      if not vbo_presn_24 and vva_mode = 'pm' then
        vnu_heure := vnu_heure + 12;
      end if;

      return vnu_heure;
    end obten_heure;

    function obten_mints (pva_valr in varchar2,
                          pbo_indic_fin in boolean default false,
                          pbo_indic_exten in boolean default false)
      return number is
      vnu_mints                               number (2) default 0;
      vva_valr                                varchar2 (10)
                                                default rtrim (pva_valr,
                                                               'apm');
    begin
      if pva_valr is null then
        return null;
      end if;

      if instr (vva_valr,
                ':') > 0 then
        vnu_mints :=
          to_number (substr (vva_valr,
                             instr (vva_valr,
                                    ':') +
                             1));
      end if;

      if vnu_mints < 0
      or vnu_mints > 59 then
        sie_01_err_apex_pkg.lever_err_apex_code ('CAL.000002',
                                                 detrm_champ_ern (pbo_indic_fin,
                                                                  pbo_indic_exten),
                                                 pva_code_prodt             => 'AFW');          --Raise message d'erreur
      end if;

      return vnu_mints;
    end obten_mints;
  begin
    vnu_heure_debut := obten_heure (pva_heure_debut);
    vnu_heure_fin :=
      obten_heure (pva_heure_fin,
                   true);
    vnu_heure_debut_exten :=
      obten_heure (pva_heure_debut_exten,
                   false,
                   true);
    vnu_heure_fin_exten :=
      obten_heure (pva_heure_fin_exten,
                   true,
                   true);
    vnu_mints_debut := obten_mints (pva_heure_debut);
    vnu_mints_fin :=
      obten_mints (pva_heure_fin,
                   true);
    vnu_mints_debut_exten :=
      obten_mints (pva_heure_debut_exten,
                   false,
                   true);
    vnu_mints_fin_exten :=
      obten_mints (pva_heure_fin_exten,
                   true,
                   true);

    --Valider si l'heure de début est inférieure à l'heure de fin
    if (vnu_heure_fin < vnu_heure_debut)
    or (vnu_heure_fin = vnu_heure_debut and vnu_mints_fin <= vnu_mints_debut) then
      sie_01_err_apex_pkg.lever_err_apex_code ('CAL.000004',
                                               'heure de fin',
                                               'heure de début',
                                               pva_code_prodt             => 'AFW');
    end if;

    --Valider si l'heure de début extensionnée est inférieure à l'heure de fin extensionnée, à condition que les deux soient présente
    if vnu_heure_debut_exten is not null
   and vnu_heure_fin_exten is not null
   and ( (vnu_heure_fin_exten < vnu_heure_debut_exten)
     or (vnu_heure_fin_exten = vnu_heure_debut_exten and vnu_mints_fin_exten <= vnu_mints_debut_exten)) then
      sie_01_err_apex_pkg.lever_err_apex_code ('CAL.000004',
                                               'heure de fin extensionnée',
                                               'heure de début extensionnée',
                                               pva_code_prodt             => 'AFW');
    end if;

    --Valider si l'heure de début extensionnée est inférieure à l'heure de début normale, à condition que
    --l'heure de début extensionnée n'est pas vide
    if vnu_heure_debut_exten is not null
   and ( (vnu_heure_debut < vnu_heure_debut_exten)
     or (vnu_heure_debut = vnu_heure_debut_exten and vnu_mints_debut <= vnu_mints_debut_exten)) then
      sie_01_err_apex_pkg.lever_err_apex_code ('CAL.000004',
                                               'heure de début',
                                               'heure de début extensionnée',
                                               pva_code_prodt             => 'AFW');
    end if;

    --Valider si l'heure de fin est inférieure à l'heure de fin extensionnée, à condition que
    --l'heure de fin extensionnée n'est pas vide
    if vnu_heure_fin_exten is not null
   and ( (vnu_heure_fin_exten < vnu_heure_fin)
     or (vnu_heure_fin_exten = vnu_heure_fin and vnu_mints_fin_exten <= vnu_mints_fin)) then
      sie_01_err_apex_pkg.lever_err_apex_code ('CAL.000004',
                                               'heure de fin extensionnée',
                                               'heure de fin',
                                               pva_code_prodt             => 'AFW');
    end if;
  end valdr_heure;

  function obten_vue (pva_code in varchar2)
    return varchar2 is
  begin
    return sie_14_domn_valr_pkg.obten_valr_organ (sie_14_domn_valr_pkg.obten_seqnc ('VUE_DISPN_CALND',
                                                                                    pva_code,
                                                                                    'AFW'));
  end obten_vue;

  function obten_vue_jour
    return varchar2 is
  begin
    return obten_vue ('JOUR');
  end obten_vue_jour;

  function obten_vue_jour_simpl
    return varchar2 is
  begin
    return obten_vue ('JOUR_SIMPL');
  end obten_vue_jour_simpl;

  function obten_vue_semn
    return varchar2 is
  begin
    return obten_vue ('SEMN');
  end obten_vue_semn;

  function obten_vue_semn_simpl
    return varchar2 is
  begin
    return obten_vue ('SEMN_SIMPL');
  end obten_vue_semn_simpl;

  function obten_vue_mois
    return varchar2 is
  begin
    return obten_vue ('MOIS');
  end obten_vue_mois;
end sie_21_plugn_calnd_pkg;
/

Prompt Package Body SIE_21_PLUGN_CALND_TYPE_PKG;
/* Formatted on 04/12/2013 11:35:39 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_calnd_type_pkg as
  function obten_image_aperc_coulr (pnu_type_afich in number,
                                    pva_titre in varchar2 default null,
                                    pva_id_distn in varchar2 default null)
    return varchar2 is
    vva_img                                 varchar2 (500)
      default '<img align="absmiddle" style="background: none repeat scroll 0% 0% %coulr%;" alt="" class="colorpreview" 
         id="P%num_page%_PRN_BORDER_COLOR_PREVIEW%id%" src="/i/1px_trans.gif" title="%titre%">';
    vva_coulr                               varchar2 (7);
  begin
    select   coulr_arier_plan
      into   vva_coulr
      from   vd_i_sie_21_plugn_calnd_type pct
     where   pct.seqnc = pnu_type_afich;

    vva_img :=
      sie_07_util_pkg.multi_replc (vva_img,
                                   '%coulr%',
                                   vva_coulr,
                                   '%num_page%',
                                   sie_08_url_pkg.knu_app_page_id,
                                   '%id%',
                                   pva_id_distn,
                                   '%titre%',
                                   pva_titre);
    return vva_img;
  exception
    when no_data_found then
      return null;
  end obten_image_aperc_coulr;
end sie_21_plugn_calnd_type_pkg;
/

Prompt Package Body SIE_21_PLUGN_CONFR_SAUVG_PKG;
/* Formatted on 04/12/2013 11:35:39 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_confr_sauvg_pkg is
  function obten_mesg_confr
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (kva_s_mesg);
  end obten_mesg_confr;

  procedure defnr_mesg_confr (pva_mesg in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_mesg,
                                     pva_mesg);
  end defnr_mesg_confr;

  function obten_reqt_sauvg
    return varchar2 is
  begin
    return sie_07_sesn_pkg.obten_valr_sesn (kva_s_reqt);
  end obten_reqt_sauvg;

  procedure defnr_reqt_sauvg (pva_liste_reqt in varchar2) is
  begin
    sie_07_sesn_pkg.defnr_valr_sesn (kva_s_reqt,
                                     replace (pva_liste_reqt,
                                              ',',
                                              ':'));
  end defnr_reqt_sauvg;

  procedure obten_json_item_confr is
    vnu_page_sesn                           vd_i_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_sesn;
    vnu_page_zero_sesn                      vd_i_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_zero_sesn;
  begin
    -- génère l'objet JSON
    sie_15_ajax_pkg.obten_json_sql (
         'select  pi.nom_apex
                                       from  vd_sie_13_page_item pi,
                                             vd_sie_13_page p
                                      where       p.seqnc in ('
      || vnu_page_sesn
      || ', '
      || vnu_page_zero_sesn
      || ')
                                             and  p.seqnc = pi.ref_page
                                             and  pi.type_item = ''ITEM''
                                             and  pi.indic_confr_sauvg = ''O''
                                       order by 1'
    );
  end obten_json_item_confr;

  procedure obten_json_reqt_sauvg is
    vnu_page_sesn                           vd_i_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_sesn;
    vnu_page_zero_sesn                      vd_i_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_zero_sesn;
  begin
    -- génère l'objet JSON
    sie_15_ajax_pkg.obten_json_sql (
         'select  pi.nom_apex
                                       from  vd_sie_13_page_item pi,
                                             vd_sie_13_page p
                                      where       p.seqnc in ('
      || vnu_page_sesn
      || ', '
      || vnu_page_zero_sesn
      || ')
                                             and  p.seqnc = pi.ref_page
                                             and  pi.type_item = ''BOUTN''
                                             and  pi.indic_confr_sauvg = ''N''
                                     union all  
                                     select aip.source nom_apex
                                     from   apex_item_page aip,
                                            vd_sie_13_page_item pi,
                                            vd_sie_13_page p
                                      where       aip.id = pi.id_apex
                                             and  aip.display_as = ''BUTTON''
                                             and  p.seqnc in ('
      || vnu_page_sesn
      || ', '
      || vnu_page_zero_sesn
      || ')
                                             and  p.seqnc = pi.ref_page
                                             and  pi.type_item = ''ITEM''
                                             and  pi.indic_confr_sauvg = ''N''
                                      union all
                                      select column_value nom_apex
                                       from table(sie_07_util_pkg.strin_to_table_va(sie_21_plugn_confr_sauvg_pkg.obten_reqt_sauvg))
                                       order by 1'
    );
  end obten_json_reqt_sauvg;
end sie_21_plugn_confr_sauvg_pkg;
/

Prompt Package Body SIE_21_PLUGN_DIALG_IFRAM_PKG;
/* Formatted on 04/12/2013 11:35:39 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_dialg_ifram_pkg is
  gbo_mode_debug                          boolean default false;

  procedure defnr_contx_apres_fermt_dialg is
    vnu_fa_courn                            number;
  begin
    vnu_fa_courn := sie_04_fil_arian_pkg.obten_seqnc_fa_de_page_dest (sie_13_page_pkg.obten_numr_apex_page);

    -- Supprimer les éléments du fil d'ariane qui suivent la
    sie_04_fil_arian_pkg.suprm_elemn_apres (vnu_fa_courn);

    -- Synchroniser les variables
    sie_07_util_pkg.defnr_etat_sesn ('SIDF',
                                     vnu_fa_courn);

    sie_04_fil_arian_pkg.synch_varbl (pnu_fa_courn => vnu_fa_courn);
    sie_04_contx_pkg.synch_varbl (pnu_fa_courn => vnu_fa_courn);

    sie_12_dialg_ifram_pkg.fermr_dialg_ouver ();
  end defnr_contx_apres_fermt_dialg;

  procedure fermr_dialg is
  begin
    sie_15_htp_pkg.ouvri_bals ('body');
    sie_15_htp_pkg.ouvri_bals ('script',
                               'type',
                               'text/javascript');

    --fermer le dialogue
    sie_15_htp_pkg.ecrir (
      'parent.afw.jQuery("#"+parent.afw.jQuery(frameElement).parent().attr("id")).trigger("dialogclose_procs");'
    );

    sie_15_htp_pkg.fermr_bals ('script');
    sie_15_htp_pkg.fermr_bals ('body');
  end fermr_dialg;

  procedure redrg_page_acuei_js is
  begin
    sie_15_htp_pkg.ouvri_bals ('body');
    sie_15_htp_pkg.ouvri_bals ('script',
                               'type',
                               'text/javascript');

    sie_15_htp_pkg.ecrir ('console.log(parent);');
    sie_15_htp_pkg.ecrir ('console.log(parent.location);');

    -- Rediriger vers la page d'accueil
    sie_15_htp_pkg.ecrir (
         'parent.location.href = "'
      || 'f?p='
      || sie_11_prodt_pkg.obten_numr_apex_aplic_acuei
      || ':'
      || sie_11_prodt_pkg.obten_numr_apex_page_acuei
      || ':'
      || sie_12_sesn_pkg.obten_sesn
      || '";'
    );

    sie_15_htp_pkg.fermr_bals ('script');
    sie_15_htp_pkg.fermr_bals ('body');

    sie_07_util_pkg.aret_trait_page_apex;
  end redrg_page_acuei_js;
end sie_21_plugn_dialg_ifram_pkg;
/

Prompt Package Body SIE_21_PLUGN_MENU_PKG;
/* Formatted on 04/12/2013 11:35:40 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_menu_pkg as
  function obten_enreg_confg_plugn (pnu_numr_apex_regn in number)
    return typ_rec_confg_plugn is
    cursor cur_plugn_menu is
      select   pm.seqnc,
               ref_dv_type_menu_code,
               ref_dv_orien_menu_code,
               ref_dv_coulr_theme_code,
               ref_dv_coulr_princ_code,
               ref_dv_formt_menu_code,
               ref_menu
        from   vd_sie_21_plugn_menu pm,
               apex_regn ar
       where   ar.attribute_01 = pm.code
           and ar.id = pnu_numr_apex_regn
           and ar.flow_id in (select   numr_aplic_apex
                                from   vd_sie_11_aplic
                               where   ref_prodt = pm.ref_prodt)
           and sie_12_menu_pkg.obten_menu_actif is null
            or sie_12_menu_pkg.obten_menu_actif is not null and sie_12_menu_pkg.obten_menu_actif = pm.seqnc;

    rec_confg_plugn                         typ_rec_confg_plugn;
  begin
    open cur_plugn_menu;

    fetch cur_plugn_menu
    into rec_confg_plugn;

    close cur_plugn_menu;

    return rec_confg_plugn;
  end obten_enreg_confg_plugn;

  function obten_enreg_confg_plugn_item (pnu_plugn_menu in number,
                                         pnu_item_menu in number)
    return typ_rec_confg_plugn_item is
    rec_confg_plugn_item                    typ_rec_confg_plugn_item;

    cursor cur_plugn_item_menu is
      select   pim.seqnc,
               clas_css_racn,
               clas_css_elemn,
               etend_nombr_coln,
               ref_item_menu,
               ref_plugn_menu,
               ref_dv_align_valr_organ
        from   vd_sie_21_plugn_item_menu pim
       where   pim.ref_plugn_menu = pnu_plugn_menu and pim.ref_item_menu = pnu_item_menu;
  begin
    open cur_plugn_item_menu;

    fetch cur_plugn_item_menu
    into rec_confg_plugn_item;

    close cur_plugn_item_menu;

    return rec_confg_plugn_item;
  end obten_enreg_confg_plugn_item;

  function obten_plugn_menu (pva_code_prodt in vd_i_sie_11_prodt.code%type,
                             pva_code_menu in vd_i_sie_21_plugn_menu.code%type)
    return number is
    vnu_seqnc                               vd_i_sie_21_plugn_menu.seqnc%type;
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_21_plugn_menu
     where   ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt) and code = pva_code_menu;

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_plugn_menu;

  function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
    return varchar2 is
    vva_reqt                                varchar2 (4000);
  begin
    vva_reqt :=
         'select seqnc,
                        libl label,
                        sie_13_menu_pkg.obten_url_cible(im.seqnc) target,
                        sie_13_menu_pkg.obten_etat_libl(im.seqnc) is_current
                   from vd_sie_13_item_menu im
                  where ref_menu = '
      || pty_rec_confg_plugn.ref_menu
      || '
                    and sie_13_menu_pkg.verfr_droit_acces(im.seqnc) = 1
                    and sie_13_menu_pkg.trait_condt_afich(im.seqnc)
                    and im.ref_item_menu is null
               order by im.ordre_presn';

    return vva_reqt;
  end genr_reqt_sql;

  procedure maj_plugn_item_menu (pnu_plugn_menu in number) is
  begin
    delete from   vd_i_sie_21_plugn_item_menu pim
          where   not exists
                    (select   1
                       from   vd_i_sie_13_item_menu im
                      where   im.seqnc = pim.ref_item_menu)
              and pim.ref_plugn_menu = pnu_plugn_menu;

    merge into   vd_i_sie_21_plugn_item_menu dest
         using   (select              level niv_item,
                                      im.seqnc ref_item_menu,
                                      pnu_plugn_menu ref_plugn_menu
                               from   vd_i_sie_13_item_menu im
                              where   ref_menu = (select   ref_menu
                                                    from   vd_i_sie_21_plugn_menu pm
                                                   where   pm.seqnc = pnu_plugn_menu)
                         start with   im.ref_item_menu is null
                         connect by   prior seqnc = ref_item_menu
                  order siblings by   im.ordre_presn) sourc
            on   (sourc.ref_item_menu = dest.ref_item_menu and sourc.ref_plugn_menu = dest.ref_plugn_menu)
    when matched then
      update set dest.niv_item = sourc.niv_item
    when not matched then
      insert       (ref_item_menu, ref_plugn_menu, niv_item)
          values   (sourc.ref_item_menu,
                    sourc.ref_plugn_menu,
                    sourc.niv_item);
  end maj_plugn_item_menu;

  procedure creer_entet (pva_encap_menu in varchar2,
                         pva_coulr_menu in varchar2,
                         pva_mode in varchar2 default 'COLN') is
  begin
    creer_sectn (pva_encap_menu,
                 case when pva_mode = 'COMPL' then pva_coulr_menu else null end);

    creer_liste_desrd ('menu' || case when pva_mode = 'COLN' then ' ' || pva_coulr_menu else null end);
  end creer_entet;

  procedure fermr_entet is
  begin
    fermr_liste_desrd;
    fermr_sectn;
  end fermr_entet;

  procedure creer_sectn (pva_id in varchar2 default null,
                         pva_clas in varchar2 default null,
                         pva_align in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('div',
                               case when pva_id is not null then 'id' else null end,
                               pva_id,
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas || case when pva_align is not null then ' ' || pva_align else null end);
  end creer_sectn;

  procedure fermr_sectn is
  begin
    sie_15_htp_pkg.fermr_bals ('div');
  end fermr_sectn;

  procedure creer_liste (pva_clas in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('li',
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas);
  end creer_liste;

  procedure fermr_liste is
  begin
    sie_15_htp_pkg.fermr_bals ('li');
  end fermr_liste;

  procedure creer_liste_desrd (pva_clas in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('ul',
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas);
  end creer_liste_desrd;

  procedure fermr_liste_desrd is
  begin
    sie_15_htp_pkg.fermr_bals ('ul');
  end fermr_liste_desrd;

  procedure ecrir (pva_libl in varchar2,
                   pva_type_bals in varchar2 default 'a',
                   pva_clas in varchar2 default null,
                   pva_url_cible in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals (pva_type_bals,
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas,
                               case when pva_url_cible is not null then 'href' else null end,
                               pva_url_cible);
    sie_15_htp_pkg.ecrir (pva_libl);
    sie_15_htp_pkg.fermr_bals (pva_type_bals);
  end ecrir;

  function obten_clas_css_elemn (pnu_plugn_item_menu in number)
    return varchar2 is
    vva_clas                                varchar2 (60);
    vnu_etend_nombr_coln                    number (3);
    vnu_coln_item                           number (3);
    vva_align                               varchar2 (60);
  begin
    select   etend_nombr_coln,
             coln_item,
             ref_dv_align_valr_organ
      into   vnu_etend_nombr_coln,
             vnu_coln_item,
             vva_align
      from   vd_sie_21_plugn_item_menu
     where   seqnc = pnu_plugn_item_menu;

    if vnu_etend_nombr_coln between 1 and 6 then
      vva_clas := vva_clas || 'col_' || vnu_etend_nombr_coln;

      if vnu_coln_item = 1 then
        vva_clas := vva_clas || ' firstcolumn';
      end if;
    end if;

    return vva_clas;
  end obten_clas_css_elemn;

  function obten_clas_css_racn (pnu_plugn_item_menu in number)
    return varchar2 is
  begin
    return obten_contn (pnu_plugn_item_menu);
  end obten_clas_css_racn;

  procedure genr_elemn_no_drop (pva_libl in varchar2,
                                pva_url_cible in varchar2 default null) is
  begin
    creer_liste ('nodrop');
    ecrir (pva_libl,
           pva_url_cible              => pva_url_cible);
    fermr_liste;
  end genr_elemn_no_drop;

  procedure creer_elemn_drop (pva_libl in varchar2,
                              pva_url_cible in varchar2 default null,
                              pva_clas_liste in varchar2 default null,
                              pva_align in varchar2 default null) is
  begin
    creer_liste (   case when pva_clas_liste like '%fullwidth' then 'fullwidth ' else null end
                 || case
                      when pva_align is not null then
                        substr (pva_align,
                                7)
                      else
                        null
                    end);
    ecrir (pva_libl,
           pva_clas                   => 'drop',
           pva_url_cible              => pva_url_cible);
  end creer_elemn_drop;

  procedure fermr_elemn_drop is
  begin
    fermr_liste;
  end fermr_elemn_drop;

  procedure creer_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item) is
  begin
    creer_sectn (null,
                 pty_rec_plugn_item.clas_css_elemn);
  end creer_contn_item;

  procedure fermr_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item) is
  begin
    fermr_sectn;
  end fermr_contn_item;

  procedure genr_tabl (pty_rec_plugn_item in typ_rec_confg_plugn_item) is
    cursor cur_item_menu is
      select     seqnc,
                 null niv,
                 forml_libl,
                 sie_13_menu_pkg.obten_url_cible (im.seqnc) url_cible,
                 null est_actif
          from   vd_sie_13_item_menu im
         where   im.seqnc = pty_rec_plugn_item.ref_item_menu
      order by   ordre_presn;
  begin
    if sie_13_menu_pkg.verfr_enfan_exist (pty_rec_plugn_item.ref_item_menu) then
      creer_liste_desrd;

      for rec_im in cur_item_menu loop
        creer_liste;

        ecrir (rec_im.forml_libl,
               pva_url_cible              => rec_im.url_cible);

        genr_tabl (obten_enreg_confg_plugn_item (pty_rec_plugn_item.ref_plugn_menu,
                                                 rec_im.seqnc));

        fermr_liste;
      end loop;

      fermr_liste_desrd;
    end if;
  end genr_tabl;

  function obten_contn (pnu_plugn_item_menu in number)
    return varchar2 is
    vva_contn                               varchar2 (60);
  begin
    select   ref_dv_contn_im_valr_organ
      into   vva_contn
      from   vd_sie_21_plugn_item_menu
     where   seqnc = pnu_plugn_item_menu;

    return vva_contn;
  end obten_contn;

  function obten_align (pnu_plugn_item_menu in number)
    return varchar2 is
    vva_align                               varchar2 (60);
  begin
    select   ref_dv_align_valr_organ
      into   vva_align
      from   vd_sie_21_plugn_item_menu
     where   seqnc = pnu_plugn_item_menu;

    return vva_align;
  end obten_align;

  function obten_formt_menu (pnu_plugn_menu in number)
    return varchar2 is
    vva_formt                               varchar2 (60);
  begin
    select   sie_14_domn_valr_pkg.obten_valr_organ (ref_dv_formt_menu)
      into   vva_formt
      from   vd_sie_21_plugn_menu
     where   seqnc = pnu_plugn_menu;

    return vva_formt;
  end obten_formt_menu;

  function obten_coulr_menu (pnu_plugn_menu in number)
    return varchar2 is
    vva_coulr                               varchar2 (60);
  begin
    select   sie_14_domn_valr_pkg.obten_valr_organ (ref_dv_coulr_princ)
      into   vva_coulr
      from   vd_sie_21_plugn_menu
     where   seqnc = pnu_plugn_menu;

    return vva_coulr;
  end obten_coulr_menu;

  function obten_usagr_formt_sesn
    return varchar2 is
    vva_utils                               varchar2 (200);
  begin
    return sie_12_utils_pkg.obten_nom_formt (sie_12_utils_pkg.obten_usagr_conct);
  end obten_usagr_formt_sesn;
end sie_21_plugn_menu_pkg;
/

Prompt Package Body SIE_21_PLUGN_NAVGT_ENREG_PKG;
/* Formatted on 04/12/2013 11:35:40 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_navgt_enreg_pkg as
  --mode possible: PAGE | DIALG


  gbo_plugn_activ                         boolean default true;

  gva_mode                                varchar2 (23) default 'PAGE';

  kva_regn_gauch_premr           constant varchar2 (200)
    default '<div class="sie_21_navgt_enreg gauch"><i class="icon-fast-backward navgt_enreg_precd"></i></div>' ;
  kva_regn_gauch                 constant varchar2 (200)
    default '<div class="sie_21_navgt_enreg gauch"><i class="icon-backward navgt_enreg_precd"></i></div>' ;

  kva_regn_droit_dernr           constant varchar2 (200)
    default '<div class="sie_21_navgt_enreg droit"><i class="icon-fast-forward navgt_enreg_suivn"></i></div>' ;
  kva_regn_droit                 constant varchar2 (200)
    default '<div class="sie_21_navgt_enreg droit"><i class="icon-forward navgt_enreg_suivn"></i></div>' ;

  function valdr_prise_charg
    return boolean is
    vbo_retr                                boolean default false;
    vva_navgt                               varchar2 (1);
    vnu_nombr_enreg                         number default 0;
  begin
    --Vérifier si sur page venant d'un IR et qu'il contient plus de 1 enregistrement

    --Vérifier si sur page venant d'un rapport SQL et qu'il contient plus de 1 enregistrement

    --Vérifier si dialogue et le rapport parent (SQL ou IR) contient plus de 1 enregistrement
    select   p.indic_prise_charg_sie13_navgt
      into   vva_navgt
      from   vd_sie_13_page p
     where   p.seqnc = sie_13_page_pkg.obten_page_sesn ();

    select   count (1)
      into   vnu_nombr_enreg
      from   vd_sie_13_navgt_elemn;

    if vva_navgt = 'O' and vnu_nombr_enreg > 1 then
      vbo_retr := true;
    end if;

    return vbo_retr and gbo_plugn_activ;
  end valdr_prise_charg;

  function obten_si_dernr_enreg
    return boolean is
    vnu_numr_courn                          number;
  begin
    select   max (numr_elemn)
      into   vnu_numr_courn
      from   vd_sie_13_navgt_elemn;

    return vnu_numr_courn = sie_13_navgt_pkg.obten_numr_courn;
  end obten_si_dernr_enreg;

  function obten_si_premr_enreg
    return boolean is
  begin
    return sie_13_navgt_pkg.obten_numr_courn = 1;
  end obten_si_premr_enreg;

  function obten_url_premr_enreg
    return varchar2 is
  begin
    return sie_13_navgt_pkg.obten_url_premr;
  end obten_url_premr_enreg;

  function obten_url_dernr_enreg
    return varchar2 is
  begin
    return sie_13_navgt_pkg.obten_url_dernr (1);
  end obten_url_dernr_enreg;

  function obten_url_suivn_enreg
    return varchar2 is
  begin
    if obten_si_dernr_enreg then
      return obten_url_premr_enreg;
    else
      return sie_13_navgt_pkg.obten_url_suivn;
    end if;
  end obten_url_suivn_enreg;

  function obten_url_precd_enreg
    return varchar2 is
  begin
    if obten_si_premr_enreg then
      return obten_url_dernr_enreg;
    else
      return sie_13_navgt_pkg.obten_url_precd;
    end if;
  end obten_url_precd_enreg;

  function obten_regn_gauch
    return varchar2 is
  begin
    if obten_si_premr_enreg then
      return kva_regn_gauch_premr;
    else
      return kva_regn_gauch;
    end if;
  end obten_regn_gauch;

  function obten_regn_droit
    return varchar2 is
  begin
    if obten_si_dernr_enreg then
      return kva_regn_droit_dernr;
    else
      return kva_regn_droit;
    end if;
  end obten_regn_droit;

  procedure desct_navgt_enreg is
  begin
    gbo_plugn_activ := false;
  end desct_navgt_enreg;

  function valdr_plugn_activ
    return boolean is
  begin
    return gbo_plugn_activ;
  end valdr_plugn_activ;
end sie_21_plugn_navgt_enreg_pkg;
/

Prompt Package Body SIE_21_PLUGN_SELCT_2_PKG;
/* Formatted on 04/12/2013 11:35:40 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_plugn_selct_2_pkg is
  knu_minm_lov_colmn             constant number (1) default 2;
  knu_maxm_lov_colmn             constant number (1) default 3;

  knu_lov_displ_colmn            constant number (1) default 1;
  knu_lov_retrn_colmn            constant number (1) default 2;
  knu_lov_group_colmn            constant number (1) default 3;

  procedure genr_item_tag (p_item in apex_plugin.t_page_item,
                           p_value in varchar2) is
  begin
    apex_plugin_util.print_hidden (p_item_name                => p_item.name,
                                   p_value                    => p_value,
                                   p_id_postfix               => null);
  end genr_item_tag;

  procedure genr_item_selct (p_item in apex_plugin.t_page_item,
                             p_value in varchar2) is
    vta_coln_liste                          apex_plugin_util.t_column_value_list;
    vva_item                                varchar2 (32767);
    vta_item_selct                          apex_application_global.vc_arr2;
    vva_displ_id                            varchar2 (32767);
    vva_retrn_id                            varchar2 (32767);
    vva_nom_page_item                       p_item.name%type;

    vbo_singl_value                         boolean;
    vbo_multp_value                         boolean;

    procedure ajout_optio (pva_valr_retr in varchar2,
                           pva_valr_afich in varchar2,
                           pva_extra in varchar2 default null) is
    begin
      sie_15_htp_pkg.ecrir (sie_15_htp_pkg.ouvri_bals ('option',
                                                       'value',
                                                       pva_valr_retr,
                                                       pva_extra                  => pva_extra),
                            false);
      sie_15_htp_pkg.ecrir (pva_valr_afich,
                            false);
      sie_15_htp_pkg.fermr_bals ('option');
    end ajout_optio;

    function exist_valr_selct (pva_valr in varchar2,
                               pva_valr_selct in varchar2)
      return boolean is
      vvc_valr_selct                          apex_application_global.vc_arr2;
    begin
      vvc_valr_selct :=
        sie_07_util_pkg.string_to_table (pva_valr_selct,
                                         p_item.attribute_09);

      for i in 1 .. vvc_valr_selct.count loop
        if (pva_valr = vvc_valr_selct (i)) then
          return true;
        end if;
      end loop;

      return false;
    end exist_valr_selct;
  begin
    -- Single-value and Multiple-value
    vbo_singl_value := case p_item.attribute_01 when 'SINGL_VALUE' then true else false end;
    vbo_multp_value := case p_item.attribute_01 when 'MULTP_VALUE' then true else false end;


    vva_nom_page_item := apex_plugin.get_input_name_for_page_item (vbo_multp_value);

    sie_15_htp_pkg.ouvri_bals (
      'select',
      'name',
      vva_nom_page_item,
      'id',
      p_item.name,
      pva_extra                  => p_item.element_attributes || case when vbo_multp_value then 'multiple' else null end
    );
    vta_coln_liste :=
      apex_plugin_util.get_data (p_sql_statement            => p_item.lov_definition,
                                 p_min_columns              => knu_minm_lov_colmn,
                                 p_max_columns              => knu_maxm_lov_colmn,
                                 p_component_name           => p_item.name,
                                 p_max_rows                 => p_item.attribute_05);



    if (vbo_singl_value and p_item.placeholder is not null) then
      sie_15_htp_pkg.ecrir (sie_15_htp_pkg.ouvri_bals ('option'),
                            false);
      sie_15_htp_pkg.fermr_bals ('option');
    end if;

    if (p_item.lov_display_null
    and (p_item.lov_null_text is not null
      or p_item.lov_null_value is not null)) then
      apex_plugin_util.print_option (p_display_value            => p_item.lov_null_text,
                                     p_return_value             => p_item.lov_null_value,
                                     p_is_selected              => false,
                                     p_attributes               => p_item.element_option_attributes,
                                     p_escape                   => p_item.escape_output);
    end if;

    for i in 1 .. vta_coln_liste (knu_lov_displ_colmn).count loop
      apex_plugin_util.print_option (
        p_display_value            => vta_coln_liste (knu_lov_displ_colmn) (i),
        p_return_value             => vta_coln_liste (knu_lov_retrn_colmn) (i),
        p_is_selected              => exist_valr_selct (vta_coln_liste (knu_lov_retrn_colmn) (i),
                                                        p_value),
        p_attributes               => p_item.element_option_attributes,
        p_escape                   => p_item.escape_output
      );
    end loop;

    sie_15_htp_pkg.fermr_bals ('select');
  end genr_item_selct;


  procedure genr_item_lectr_seule (p_item in apex_plugin.t_page_item,
                                   p_value in varchar2,
                                   p_is_readonly in boolean,
                                   p_is_printer_friendly in boolean) is
    vva_read_only                           varchar2 (4000);
  begin
    vva_read_only :=
      apex_plugin_util.get_display_data (p_sql_statement            => p_item.lov_definition,
                                         p_min_columns              => knu_minm_lov_colmn,
                                         p_max_columns              => knu_maxm_lov_colmn,
                                         p_component_name           => p_item.name,
                                         p_search_string            => p_value);

    apex_plugin_util.print_hidden_if_readonly (
      p_item_name                => p_item.name,
      p_value                    => case p_item.attribute_01 when 'SINGL_VALUE' then p_value else vva_read_only end,
      p_is_readonly              => p_is_readonly,
      p_is_printer_friendly      => p_is_printer_friendly
    );

    apex_plugin_util.print_display_only (p_item_name                => p_item.name,
                                         p_display_value            => vva_read_only,
                                         p_show_line_breaks         => false,
                                         p_escape                   => true,
                                         p_attributes               => p_item.element_attributes);
  end genr_item_lectr_seule;


  procedure genr_json_rechr_lov (p_item in apex_plugin.t_page_item) is
    vta_coln_liste                          apex_plugin_util.t_column_value_list2;
    vva_liste                               varchar2 (32767) default null;
    vva_valr                                varchar2 (4000)
                                              := case when aa.g_x01 is not null then upper (aa.g_x01) else '%' end;

    vbo_singl_value                         boolean;
    vbo_multp_value                         boolean;
  begin
    -- Single-value and Multiple-value
    vbo_singl_value := case p_item.attribute_01 when 'SINGL_VALUE' then true else false end;
    vbo_multp_value := case p_item.attribute_01 when 'MULTP_VALUE' then true else false end;

    ete ('p_item.attribute_10',
         p_item.attribute_10);
    ete ('p_item.attribute_05',
         p_item.attribute_05);
    ete ('vva_valr',
         vva_valr);


    vta_coln_liste :=
      apex_plugin_util.get_data2 (p_sql_statement            => p_item.lov_definition,
                                  p_min_columns              => knu_lov_retrn_colmn,
                                  p_max_columns              => knu_lov_group_colmn,
                                  p_component_name           => p_item.name,
                                  p_search_type              => p_item.attribute_10,
                                  p_search_column_no         => knu_lov_displ_colmn,
                                  p_search_string            => vva_valr,
                                  p_max_rows                 => p_item.attribute_05);
    ete ('vta_coln_liste (1).value_list.count',
         vta_coln_liste (1).value_list.count);
    htp.prn ('{"liste_valr":[');

    for i in 1 .. vta_coln_liste (1).value_list.count loop
      if i > 1 then
        htp.prn (',');
      end if;

      htp.prn (
           '{"id":"'
        || case vta_coln_liste (2).data_type
             when apex_plugin_util.c_data_type_varchar2 then vta_coln_liste (2).value_list (i).varchar2_value
             when apex_plugin_util.c_data_type_number then to_char (vta_coln_liste (2).value_list (i).number_value)
             else vta_coln_liste (2).value_list (i).varchar2_value
           end
        || '","text":"'
        || vta_coln_liste (1).value_list (i).varchar2_value
        || '"}'
      );
    end loop;


    htp.prn (']}');
  exception
    when others then
      raise;
  end genr_json_rechr_lov;

  procedure genr_json_initl_selct_lov (p_item in apex_plugin.t_page_item) is
    vta_coln_liste                          apex_plugin_util.t_column_value_list2;
    vva_liste                               varchar2 (32767) default null;
    vva_valr                                varchar2 (4000)
                                              := case when aa.g_x01 is not null then aa.g_x01 else null end;

    vbo_singl_value                         boolean;
    vbo_multp_value                         boolean;
    vvc_valr_selct                          apex_application_global.vc_arr2;
  begin
    -- Single-value and Multiple-value
    vbo_singl_value := case p_item.attribute_01 when 'SINGL_VALUE' then true else false end;
    vbo_multp_value := case p_item.attribute_01 when 'MULTP_VALUE' then true else false end;

    vvc_valr_selct :=
      sie_07_util_pkg.string_to_table (vva_valr,
                                       p_item.attribute_09);

    if vvc_valr_selct.count > 1 then
      htp.prn ('[');
    end if;

    for i in 1 .. vvc_valr_selct.count loop
      vta_coln_liste :=
        apex_plugin_util.get_data2 (p_sql_statement            => nvl (p_item.attribute_11, null),
                                    p_min_columns              => knu_lov_retrn_colmn,
                                    p_max_columns              => knu_lov_group_colmn,
                                    p_component_name           => p_item.name,
                                    p_search_type              => apex_plugin_util.c_search_lookup,
                                    p_search_column_no         => knu_lov_retrn_colmn,
                                    p_search_string            => vvc_valr_selct (i),
                                    p_max_rows                 => 1);

      if vta_coln_liste (1).value_list.count > 0 then
        if i > 1 then
          htp.prn (',');
        end if;

        htp.prn (
             '{"id":"'
          || case vta_coln_liste (2).data_type
               when apex_plugin_util.c_data_type_varchar2 then vta_coln_liste (2).value_list (1).varchar2_value
               when apex_plugin_util.c_data_type_number then to_char (vta_coln_liste (2).value_list (1).number_value)
               else vta_coln_liste (2).value_list (1).varchar2_value
             end
          || '","text":"'
          || vta_coln_liste (1).value_list (1).varchar2_value
          || '"}'
        );
      end if;
    end loop;

    if vvc_valr_selct.count > 1 then
      htp.prn (']');
    end if;
  exception
    when others then
      raise;
  end genr_json_initl_selct_lov;
end sie_21_plugn_selct_2_pkg;
/

Prompt Package Body SIE_21_PROCS_PKG;
/* Formatted on 04/12/2013 11:35:40 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_procs_pkg is
  function inser_trace (p_process in apex_plugin.t_process,
                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    -- Cet appel à la procédure ETE n'est pas une trace pour le débogage
    return rec_procs;
  end inser_trace;

  function authe_redrg (p_process in apex_plugin.t_process,
                        p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    sie_12_authe_apex_pkg.authe_redrg (pva_code_utils             => p_process.attribute_02,
                                       pva_mot_passe              => p_process.attribute_03,
                                       pva_domn                   => p_process.attribute_01,
                                       pnu_numr_apex_aplic        => p_process.attribute_04,
                                       pnu_numr_apex_page         => p_process.attribute_05);
    return rec_procs;
  end authe_redrg;

  function fermr_dialg_ifram (p_process in apex_plugin.t_process,
                              p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    vva_templ_mesg_sucs                     apex_flow_templ.success_message%type;

    vva_mesg_sucs                           varchar2 (4000);
    vva_item_cle_etran                      varchar2 (60);

    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    vva_item_cle_etran := sie_12_dialg_ifram_pkg.obten_item_cle_etran (sie_12_dialg_ifram_pkg.obten_dialg_ouver);

    if vva_item_cle_etran is not null then
      sie_07_util_pkg.defnr_etat_sesn (vva_item_cle_etran,
                                       p_process.attribute_01);
    end if;

    vva_mesg_sucs := ltrim (aa.g_print_success_message || ' ' || aa.g_notification || ' ' || p_process.success_message);

    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_21_MESG_SUCS',
                                     vva_mesg_sucs);

    sie_21_plugn_dialg_ifram_pkg.fermr_dialg;

    sie_07_util_pkg.aret_trait_page_apex;

    return rec_procs;
  exception
    when others then
      return rec_procs;
  end fermr_dialg_ifram;

  function defnr_item_page (p_process in apex_plugin.t_process,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    vnu_indx_courn                          pls_integer;
    vvc_elemn                               apex_application_global.vc_arr2;
    vvc_valr                                apex_application_global.vc_arr2;

    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    vvc_elemn :=
      sie_07_util_pkg.string_to_table (p_process.attribute_01,
                                       ',');
    vvc_valr :=
      sie_07_util_pkg.string_to_table (p_process.attribute_02,
                                       ',');

    if vvc_elemn.count () != 0 then
      vnu_indx_courn := vvc_elemn.first ();

      while vnu_indx_courn is not null loop
        sie_07_util_pkg.defnr_etat_sesn (vvc_elemn (vnu_indx_courn),
                                         vvc_valr (vnu_indx_courn));
        vnu_indx_courn := vvc_elemn.next (vnu_indx_courn);
      end loop;
    end if;

    return rec_procs;
  end defnr_item_page;

  function defnr_contx_sie_04_fil_arian (p_process in apex_plugin.t_process,
                                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    vnu_fil_arian                           number default sie_07_util_pkg.nv ('SIDF');
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    update   vd_sie_04_contx c
       set   c.infor_suplm = p_process.attribute_01, c.nom_procd_infor_suplm = p_process.attribute_02
     where   c.ref_fil_arian = vnu_fil_arian;

    return rec_procs;
  end defnr_contx_sie_04_fil_arian;

  function suprm_sie_21_colct_clob (p_process in apex_plugin.t_process,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
    vva_nom_colct_clob                      varchar2 (255) default 'CA_SIESOLUTIONS_SIE21_COLCT_CLOB';
  begin
    if apex_collection.collection_exists (vva_nom_colct_clob) then
      apex_collection.delete_collection (vva_nom_colct_clob);
    end if;

    return rec_procs;
  end suprm_sie_21_colct_clob;

  function dml_maj_clob (p_process in apex_plugin.t_process,
                         p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
    vva_nom_colct_clob                      varchar2 (255) default 'CA_SIESOLUTIONS_SIE21_COLCT_CLOB';

    procedure maj_clob (pva_table in varchar2,
                        pva_item_cle_primr_1 in varchar2,
                        pva_coln_cle_primr_1 in varchar2,
                        pva_item_cle_primr_2 in varchar2 default null,
                        pva_coln_cle_primr_2 in varchar2 default null,
                        pva_liste_item in varchar2,
                        pva_liste_coln in varchar2) is
      vva_squel_progr_a_lancr                 varchar2 (32767)
        default 'declare
         vnu_cle_primr_1 number default :p1;
         vnu_cle_primr_2 number default :p2;
         vva_nom_colct varchar2(255) default ''%NOM_COLCT_CLOB%'';
         %DECLR_ITEM%
       begin
         update  %TABLE% 
         set %DEFNR_COLN%
         where  %COLN_CLE_PRIMR_1% = vnu_cle_primr_1%ENONC_CLE_PRIMR_2%;
       end;';

      vva_progr_a_lancr                       varchar2 (32767);

      vva_declr_item                          varchar2 (4000);
      vva_defnr_coln                          varchar2 (4000);

      vvc_liste_item                          apex_application_global.vc_arr2;
      vvc_liste_coln                          apex_application_global.vc_arr2;
    begin
      vvc_liste_item :=
        sie_07_util_pkg.string_to_table (pva_liste_item,
                                         ',');
      vvc_liste_coln :=
        sie_07_util_pkg.string_to_table (pva_liste_coln,
                                         ',');

      if vvc_liste_coln.count > 0 and vvc_liste_coln.count = vvc_liste_item.count then
        for i in 1 .. vvc_liste_coln.count loop
          vva_defnr_coln :=
               vva_defnr_coln
            || vvc_liste_coln (i)
            || ' = '
            || ' (select ac.clob001 from apex_collections ac where ac.collection_name = vva_nom_colct and ac.c001 = vva_'
            || vvc_liste_item (i)
            || '),';

          vva_declr_item :=
               vva_declr_item
            || 'vva_'
            || lower (vvc_liste_item (i))
            || ' varchar2(30) default '''
            || vvc_liste_item (i)
            || ''';';
        end loop;
      end if;

      vva_progr_a_lancr :=
        sie_07_util_pkg.multi_replc (
          vva_squel_progr_a_lancr,
          '%TABLE%',
          pva_table,
          '%COLN_CLE_PRIMR_1%',
          pva_coln_cle_primr_1,
          '%ENONC_CLE_PRIMR_2%',
          case when pva_coln_cle_primr_2 is not null then ' and ' || pva_coln_cle_primr_2 || ' = :p2' else null end,
          '%NOM_COLCT_CLOB%',
          vva_nom_colct_clob,
          '%DECLR_ITEM%',
          vva_declr_item,
          '%DEFNR_COLN%',
          rtrim (vva_defnr_coln,
                 ',')
        );

      execute immediate vva_progr_a_lancr
        using sie_07_util_pkg.v (pva_item_cle_primr_1),
              sie_07_util_pkg.v (pva_item_cle_primr_2);
    exception
      when others then
        raise;
    end maj_clob;
  begin
    maj_clob (p_process.attribute_01,
              p_process.attribute_02,
              p_process.attribute_03,
              p_process.attribute_04,
              p_process.attribute_05,
              p_process.attribute_06,
              p_process.attribute_07);

    return rec_procs;
  end dml_maj_clob;

  function valdt_sie_21_colct_clob (p_process in apex_plugin.t_process,
                                    p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
    vva_nom_colct_clob                      varchar2 (255) default 'CA_SIESOLUTIONS_SIE21_COLCT_CLOB';

    procedure valdt_clob (pva_code_valdt in varchar2,
                          pva_numr_mesg in varchar2,
                          pva_item in varchar2,
                          pva_coln in varchar2) is
      vva_declr_item                          varchar2 (4000);
      vva_defnr_coln                          varchar2 (4000);
      vnu_tail_clob                           pls_integer;
    begin
      case pva_code_valdt
        when 'NOT_NULL' then
          begin
            select   dbms_lob.getlength (ac.clob001)
              into   vnu_tail_clob
              from   apex_collections ac
             where   ac.collection_name = vva_nom_colct_clob and ac.c001 = pva_item;

            if vnu_tail_clob = 0 then
              sie_01_err_apex_pkg.lever_err_apex_code (pva_numr_mesg);
            end if;
          exception
            when others then
              raise;
          end;
        else
          null;
      end case;
    end valdt_clob;
  begin
    valdt_clob (p_process.attribute_01,
                p_process.attribute_02,
                p_process.attribute_03,
                p_process.attribute_04);

    return rec_procs;
  end valdt_sie_21_colct_clob;

  function defnr_sie_04_mode_page (p_process in apex_plugin.t_process,
                                   p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    if sie_07_util_pkg.exist_item (p_process.attribute_01) then
      if sie_07_util_pkg.v ('A_SIE_04_ACTIO') is not null then
        sie_07_util_pkg.defnr_etat_sesn (p_process.attribute_01,
                                         sie_07_util_pkg.v ('A_SIE_04_ACTIO'));
      elsif p_process.attribute_02 is not null then
        sie_07_util_pkg.defnr_etat_sesn (p_process.attribute_01,
                                         p_process.attribute_02);
      end if;
    end if;

    return rec_procs;
  end defnr_sie_04_mode_page;

  --OBSOLETE::CARLO
  /*function defnr_aplic_safp (p_process in apex_plugin.t_process,
                             p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    sie_11_aplic_pkg.defnr_aplic_safp (null);
    return rec_procs;
  end defnr_aplic_safp;*/

  function trait_mesgs_err (p_process in apex_plugin.t_process,
                            p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_TRAIT_MESGS_ERR',
                                     case p_process.attribute_01 when 'Y' then 1 else 0 end);
    return rec_procs;
  end trait_mesgs_err;


  function defnr_sie_21_confr_sauvg (p_process in apex_plugin.t_process,
                                     p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    sie_21_plugn_confr_sauvg_pkg.defnr_mesg_confr (p_process.attribute_01);
    sie_21_plugn_confr_sauvg_pkg.defnr_reqt_sauvg (p_process.attribute_02);

    return rec_procs;
  end defnr_sie_21_confr_sauvg;

  function reint_sie_13_menu (p_process in apex_plugin.t_process,
                              p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    sie_12_menu_pkg.defnr_item_racn (sie_13_menu_pkg.obten_menu_sesn (p_process.attribute_01,
                                                                      p_process.attribute_02),
                                     null);

    return rec_procs;
  end reint_sie_13_menu;

  function chang_libl_fil_arian (p_process in apex_plugin.t_process,
                                 p_plugin in apex_plugin.t_plugin)
    return apex_plugin.t_process_exec_result is
    rec_procs                               apex_plugin.t_process_exec_result;
  begin
    sie_04_fil_arian_pkg.persn (sie_21_util_pkg.obten_reslt_expre_plsql (p_process.attribute_01));

    return rec_procs;
  end chang_libl_fil_arian;
end sie_21_procs_pkg;
/

Prompt Package Body SIE_21_REGN_PKG;
/* Formatted on 04/12/2013 11:35:41 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_regn_pkg is
  function valdr_prise_charg (pva_code_plugn in varchar2)
    return boolean is
    vnu_page_sesn                           vd_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_sesn;
    vnu_page_zero_sesn                      vd_sie_13_page.seqnc%type := sie_13_page_pkg.obten_page_zero_sesn;
    vva_indic_prise_charg                   varchar2 (1);
    vbo_valr_retr                           boolean := false;
    vnu_nombr                               number (3);
  begin
    case pva_code_plugn
      when gta_code_plugn ('SIE_13_CONFR_SAUVG') then
        begin
          if sie_07_util_pkg.v ('A_SIE_13_MODE_RECHR') = 'O' then
            vva_indic_prise_charg := 'N';
          else
            select   p.indic_prise_charg_sie13_confr
              into   vva_indic_prise_charg
              from   vd_sie_13_page p
             where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
          end if;
        end;
      when gta_code_plugn ('SIE_18_DEPSM_TABLR_FORM') then
        begin
          select   p.indic_prise_charg_sie18
            into   vva_indic_prise_charg
            from   vd_sie_13_page p
           where   p.seqnc = sie_13_page_pkg.obten_page_sesn;

          select   count (1)
            into   vnu_nombr
            from   vd_sie_13_page_item pi,
                   apex_regn_coln arc,
                   apex_regn ar
           where   pi.ref_page = sie_13_page_pkg.obten_page_sesn
               and arc.column_alias = pi.depsm_alias_coln
               and arc.flow_id = ar.flow_id
               and arc.region_id = ar.id
               and ar.flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic
               and ar.page_id = sie_13_page_pkg.obten_numr_apex_page
               and ar.plug_source_type = 'UPDATABLE_SQL_QUERY';
        end;
      when gta_code_plugn ('SIE_18') then
        begin
          select   p.indic_prise_charg_sie18
            into   vva_indic_prise_charg
            from   vd_sie_13_page p
           where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
        end;
      /*
    when gta_code_plugn ('SIE_14_POPUP_LOV_ITEM') then
      begin
        select   count (1)
          into   vnu_nombr
          from   vd_sie_13_page_item pi,
                 vd_sie_14_popup_lov_ir pli,
                 vd_sie_13_page p,
                 apex_item_page aip
         where   pi.ref_page in (vnu_page_sesn, vnu_page_zero_sesn)
                 and aip.id = pi.id_apex
                 and aip.lov is not null
                 and pli.ref_page_item = pi.seqnc
                 and pli.ref_page = p.seqnc;
      end;
    when gta_code_plugn ('SIE_14_POPUP_LOV') then
      begin
        select   p.indic_prise_charg_sie14_popup
          into   vva_indic_prise_charg
          from   vd_sie_13_page p
         where   p.seqnc = sie_13_page_pkg.obten_page_sesn;
        select   count (1)
          into   vnu_nombr
          from   vd_sie_14_popup_lov_ir pli,
                 vd_sie_14_popup_lov_ir_retr plir,
                 vd_sie_13_page_ir_coln pic
         where   pli.ref_page = vnu_page_sesn
                 and pli.seqnc = plir.ref_popup_lov_ir
                 and plir.ref_page_ir_coln = pic.seqnc;
      end;*/
      else
        null;
    end case;

    if (vnu_nombr is null
     or (vnu_nombr is not null and vnu_nombr > 0))
   and vva_indic_prise_charg = 'O' then
      vbo_valr_retr := true;
    end if;

    return vbo_valr_retr;
  end valdr_prise_charg;

  function genr_plugn_regn_arbre (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
    rec_confg_plugn                         sie_21_plugn_arbre_pkg.typ_rec_confg_plugn;
    vva_rafrc_arbre                         varchar2 (5) default 'false';
    vva_charg_progr                         varchar2 (5) default 'true';

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
    begin
      htp.p ('<div id="arbre_ajax_' || p_regn.id || '" class="sie_13_plugn_regn_arbre_ajax"></div>');
    end genr_regn;
  begin
    sie_21_plugn_arbre_pkg.bascl_arbre_sesn (p_region.id);

    genr_regn (p_region);

    rec_confg_plugn := sie_21_plugn_arbre_pkg.obten_enreg_confg_plugn (p_region.id);

    --Poru définir la valeur de l'item lors d,un changement d'application OU d'une redirection a l'intérieur d'une meme application
    sie_07_util_pkg.defnr_etat_sessn (rec_confg_plugn.item_noeud,
                                      sie_12_arbre_pkg.obten_noeud_actif);
    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('jquery.cluetip',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/cluetip-1.2.5/');


    sie_21_util_pkg.ajout_css (
         '#arbre_ajax_'
      || p_region.id
      || ' {width:'
      || rec_confg_plugn.largr_regn_arbre
      || 'px; height:'
      || rec_confg_plugn.hautr_regn_arbre
      || 'px;'
      || '}'
      || chr (10)
      || '#arbre_ajax_'
      || p_region.id
      || ' ul {width:'
      || (rec_confg_plugn.largr_regn_arbre - 20)
      || 'px; }'
    );

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('json2',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/json/');

    sie_21_util_pkg.ajout_libr_javsc ('jquery.cookie',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/cookie/');

    sie_21_util_pkg.ajout_libr_javsc ('jquery.jsoncookie',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/jsoncookie/');

    sie_21_util_pkg.ajout_libr_javsc ('jquery.hoverIntent.r6',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/');

    sie_21_util_pkg.ajout_libr_javsc (
      'jquery.cluetip',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/cluetip-1.2.5/'
    );

    sie_21_util_pkg.ajout_libr_javsc (
      'jquery.jstree',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/jstree_pre1.0_fix_1/'
    );

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.arbre',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    vva_rafrc_arbre :=
      case sie_12_arbre_pkg.obten_indic_rafrc (p_region.id)
        when 'O' then 'true'
        when 'N' then 'false'
        else vva_rafrc_arbre
      end;

    vva_charg_progr :=
      case rec_confg_plugn.indic_charg_progr when 'O' then 'true' when 'N' then 'false' else vva_charg_progr end;

    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.arbre.insta.push(new afw.sie_21.regn.arbre.arbre({vva_id_div_regn:"'
      || 'arbre_ajax_'
      || p_region.id
      || '",vva_id_regn:"'
      || p_region.id
      || '",vva_seqnc_plugn:"'
      || rec_confg_plugn.seqnc
      || '",vva_plugn_ajax:"'
      || apex_plugin.get_ajax_identifier
      || '",vva_item_noeud:"'
      || p_region.attribute_01
      || '",vjs_noeud_actif:"'
      || sie_07_util_pkg.v (p_region.attribute_01)
      || '",vbo_rafrc_arbre:'
      || vva_rafrc_arbre
      || ',vva_mode_cache:'
      || '"'
      || rec_confg_plugn.mode_cache
      || '"'
      || ',vbo_charg_progr:'
      || vva_charg_progr
      || ',vva_selct_jquer_depsr_elemn:'
      || case when p_region.attribute_02 is not null then '"' || p_region.attribute_02 || '"' else 'false' end
      || ',vva_selct_jquer_glisr_elemn:'
      || case when p_region.attribute_03 is not null then '"' || p_region.attribute_03 || '"' else 'false' end
      || ',vva_item_fin_actio_glisr_elemn_arbre:"'
      || p_region.attribute_04
      || '"}));'
    );

    sie_21_plugn_arbre_pkg.rafrc_efect (rec_confg_plugn.code,
                                        rec_confg_plugn.numr_page_apex,
                                        sie_12_utils_pkg.obten_usagr_conct ());

    return rec_regn;
  end genr_plugn_regn_arbre;

  function ajax_plugn_regn_arbre (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt is
    rec_regn_ajax                           apex_plugin.t_region_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_JSON_TYPE_NOEUD' then
        sie_21_plugn_arbre_pkg.genr_json_type_noeud (p_region.id);
      when 'OBTEN_JSON_ARBRE' then
        sie_21_plugn_arbre_pkg.genr_json_arbre (p_region.id);
      when 'OBTEN_JSON_NOEUD' then
        sie_21_plugn_arbre_pkg.genr_json_noeud (p_region.id,
                                                aa.g_x01);
      when 'OUVRI_NOEUD' then
        sie_21_plugn_arbre_pkg.actio_ouvri_noeud (p_region.id,
                                                  aa.g_x01);
      when 'FERMR_NOEUD' then
        sie_21_plugn_arbre_pkg.actio_fermr_noeud (p_region.id,
                                                  aa.g_x01);
      when 'SELCT_NOEUD' then
        sie_21_plugn_arbre_pkg.actio_selct_noeud (p_region.id,
                                                  aa.g_x01);
      when 'GLISR_ELEMN_ARBRE' then
        sie_21_plugn_arbre_pkg.actio_glisr_elemn_arbre (p_region.id,
                                                        aa.g_x01,
                                                        aa.g_x02);
      else
        null;
    end case;

    return rec_regn_ajax;
  end ajax_plugn_regn_arbre;

  function genr_plugn_regn_calnd (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
    rec_config_plugn                        sie_21_plugn_calnd_pkg.typ_rec_config_plugn;
    vda_date_calnd                          date;
    vva_mode_calnd                          varchar2 (30);

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
    begin
      htp.p ('<div id="' || p_regn.static_id || '" class="sie_21_plugn_calnd"></div>');
    end;
  begin
    genr_regn (p_region);

    rec_config_plugn := sie_21_plugn_calnd_pkg.obten_enreg_config_plugn (p_region.id);

    -- Obtenir la date du calendrier
    vda_date_calnd := sie_12_calnd_pkg.obten_date (p_region.id);

    -- Obtenir le mode du calendrier
    vva_mode_calnd := sie_12_calnd_pkg.obten_mode (p_region.id);

    sie_21_util_pkg.ajout_libr_css (
      'fullcalendar',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/fullcalendar-1.5.3/fullcalendar/'
    );

    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.calnd',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    sie_21_plugn_calnd_coulr_pkg.defnr_css;

    sie_21_util_pkg.ajout_css (
      '#' || p_region.static_id || ' {width: ' || rec_config_plugn.largr_regn_calnd || 'px; margin: 0 auto;}'
    );

    sie_21_util_pkg.ajout_libr_css ('jquery.cluetip',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/cluetip-1.2.5/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('jquery.hoverIntent.r6',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/');

    sie_21_util_pkg.ajout_libr_javsc (
      'jquery.cluetip',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/cluetip-1.2.5/'
    );

    sie_21_util_pkg.ajout_libr_javsc (
      'fullcalendar.min',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/fullcalendar-1.5.3/fullcalendar/'
    );

    sie_21_util_pkg.ajout_libr_javsc (
      'gcal',
      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/fullcalendar-1.5.3/fullcalendar/'
    );

    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.calnd',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (   'afw.sie_21.regn.calnd.insta.push(new afw.sie_21.regn.calnd.calnd('
                                            || '{'
                                            || apex_javascript.add_attribute ('vva_id_regn',
                                                                              p_region.static_id)
                                            || apex_javascript.add_attribute ('vva_nom_plugn',
                                                                              p_plugin.name)
                                            || apex_javascript.add_attribute ('vva_plugn_ajax',
                                                                              apex_plugin.get_ajax_identifier)
                                            || apex_javascript.add_attribute (
                                                 'vbo_modfb',
                                                 sie_21_util_pkg.formt_plugn_atrib_boln (
                                                   rec_config_plugn.indic_evenm_modfb
                                                 ),
                                                 p_add_comma                => false
                                               )
                                            || case
                                                 when vva_mode_calnd is not null then
                                                      ','
                                                   || apex_javascript.add_attribute (
                                                        'vva_mode_calnd',
                                                        vva_mode_calnd,
                                                        p_add_comma                => false
                                                      )
                                                 else
                                                   null
                                               end
                                            || case
                                                 when vda_date_calnd is not null then
                                                      ',vjs_date_calnd:'
                                                   || '{'
                                                   || apex_javascript.add_attribute ('vva_an',
                                                                                     to_char (vda_date_calnd,
                                                                                              'YYYY'))
                                                   || apex_javascript.add_attribute ('vva_mois',
                                                                                     (to_char (vda_date_calnd,
                                                                                               'MM') -
                                                                                      1))
                                                   || apex_javascript.add_attribute (
                                                        'vva_jour',
                                                        to_char (vda_date_calnd,
                                                                 'DD'),
                                                        p_add_comma                => false
                                                      )
                                                   || '}'
                                                 else
                                                   null
                                               end
                                            || ',vjs_entet:'
                                            || '{'
                                            || apex_javascript.add_attribute (
                                                 'gauch',
                                                 rec_config_plugn.conct_propr_entet_gauch_formt
                                               )
                                            || apex_javascript.add_attribute (
                                                 'centr',
                                                 rec_config_plugn.conct_propr_entet_centr_formt
                                               )
                                            || apex_javascript.add_attribute (
                                                 'droit',
                                                 rec_config_plugn.conct_propr_entet_droit_formt,
                                                 p_add_comma                => false
                                               )
                                            || '}'
                                            || ',vjs_formt:'
                                            || '{'
                                            || '  vjs_agend:'
                                            || '  {'
                                            || apex_javascript.add_attribute ('vnu_nombr_mints',
                                                                              rec_config_plugn.nombr_mints_inter)
                                            || apex_javascript.add_attribute ('vva_heure_debut',
                                                                              rec_config_plugn.heure_debut_norml)
                                            || apex_javascript.add_attribute ('vva_heure_fin',
                                                                              rec_config_plugn.heure_fin_norml)
                                            || apex_javascript.add_attribute ('vva_heure_debut_exten',
                                                                              rec_config_plugn.heure_debut_exten)
                                            || apex_javascript.add_attribute ('vva_heure_fin_exten',
                                                                              rec_config_plugn.heure_fin_exten,
                                                                              p_add_comma                => false)
                                            || '  }'
                                            || '}'
                                            || '}));');

    return rec_regn;
  end genr_plugn_regn_calnd;

  function ajax_plugn_regn_calnd (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt is
    rec_regn_ajax                           apex_plugin.t_region_ajax_result;
    rec_config_plugn                        sie_21_plugn_calnd_pkg.typ_rec_config_plugn;
  begin
    rec_config_plugn := sie_21_plugn_calnd_pkg.obten_enreg_config_plugn (p_region.id);

    case aa.g_widget_action
      when 'DEFNR_ETAT_CALND' then
        sie_21_plugn_calnd_pkg.defnr_etat_calnd (p_region.id,
                                                 aa.g_x01,
                                                 aa.g_x02);
      when 'DEFNR_ACTIO_SELCT' then
        sie_21_plugn_calnd_pkg.initl_actio_sesn;
        sie_21_plugn_calnd_pkg.defnr_actio_selct (aa.g_x01,
                                                  aa.g_x02,
                                                  aa.g_x03);
      when 'DEFNR_ACTIO_CHOIX_EVENM' then
        sie_21_plugn_calnd_pkg.initl_actio_sesn;
        sie_21_plugn_calnd_pkg.defnr_actio_choix_evenm (aa.g_x01);
      when 'DEFNR_ACTIO_DEPLC_EVENM' then
        sie_21_plugn_calnd_pkg.initl_actio_sesn;
        sie_21_plugn_calnd_pkg.defnr_actio_deplc_evenm (aa.g_x01,
                                                        aa.g_x02,
                                                        aa.g_x03,
                                                        aa.g_x04);
      when 'DEFNR_ACTIO_AJUST_EVENM' then
        sie_21_plugn_calnd_pkg.initl_actio_sesn;
        sie_21_plugn_calnd_pkg.defnr_actio_ajust_evenm (aa.g_x01,
                                                        aa.g_x02);
      when 'OBTEN_JSON_EVENM_AGEND' then
        sie_21_plugn_calnd_pkg.obten_json_evenm_agend (p_region.id,
                                                       aa.g_x01,
                                                       aa.g_x02,
                                                       aa.g_x03);
      when 'OBTEN_JSON_EVENM' then
        sie_21_plugn_calnd_pkg.obten_json_evenm (p_region.id,
                                                 aa.g_x01);
      else
        null;
    end case;

    return rec_regn_ajax;
  end ajax_plugn_regn_calnd;

  function genr_plugn_regn_barre_rechr_ir (p_region in sie_21_util_pkg.t_regn,
                                           p_plugin in sie_21_util_pkg.t_plugn,
                                           p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
  begin
    sie_21_util_pkg.ajout_css ('#' || p_region.static_id || ' {float: left; padding-top: 7px; display: none;}');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.barre_rechr_raprt_inter',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.barre_rechr_raprt_inter.insta.push(new afw.sie_21.regn.barre_rechr_raprt_inter.barre_rechr_raprt_inter({vva_id_div_regn:"'
      || p_region.static_id
      || '"}));'
    );

    return rec_regn;
  end genr_plugn_regn_barre_rechr_ir;

  function genr_plugn_regn_acord (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
    vnu_largr_regn                          number;
    vva_icone                               varchar2 (400);
  begin
    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.acord_menu',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    if sie_07_util_pkg.exist_item (p_region.attribute_01) then
      vnu_largr_regn := nvl (sie_07_util_pkg.nv (p_region.attribute_01), p_region.attribute_02);
    else
      begin
        vnu_largr_regn := to_number (p_region.attribute_01);
      exception
        when others then
          vnu_largr_regn := p_region.attribute_02;
      end;
    end if;

    if p_region.attribute_03 = 'N' then
      vva_icone := 'false';
    else
      vva_icone := '{"header":"' || p_region.attribute_04 || '","headerSelected":"' || p_region.attribute_05 || '"}';
    end if;

    sie_21_util_pkg.ajout_css (
         '#'
      || p_region.static_id
      || ' {height: inherit;}'
      || chr (10)
      || '#'
      || p_region.static_id
      || '_acord {height: inherit;}'
    );


    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.acord_menu',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.acord_menu.insta.push(new afw.sie_21.regn.acord_menu.acord_menu({'
      || '"vva_id_regn_acord":"'
      || p_region.static_id
      || '_acord'
      || '","vva_header":".acord_menu_enfan'
      || '","vjs_icone":'
      || vva_icone
      || '}));'
    );


    --debut plugin PANNEAU GAUCHE
    --ce code devrait aller dans un plugin de region panneau de gauche

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.pan_latrl_gauch',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');


    --Initialiser la poigne pour afficher/cacher le panneau de gauche
    sie_21_util_pkg.ajout_code_javsc_charg (
      'afw.sie_21.regn.pan_latrl_gauch.insta.push(afw.sie_21.regn.pan_latrl_gauch.pan_latrl_gauch());'
    );

    --fin plugin PANNEAU GAUCHE
    return rec_regn;
  end genr_plugn_regn_acord;

  function genr_plugn_regn_acord_enfan (p_region in sie_21_util_pkg.t_regn,
                                        p_plugin in sie_21_util_pkg.t_plugn,
                                        p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
  begin
    sie_15_htp_pkg.ouvri_bals ('div',
                               'class',
                               'acord_menu_enfan');

    if p_region.attribute_02 is not null then
      sie_15_htp_pkg.ouvri_bals (
        'span',
        'id',
        p_region.attribute_06,
        'class',
        'icon_acord_gauch ui-icon ' || p_region.attribute_02,
        'onclick',
        case
          when p_region.attribute_03 is not null then
            'window.location=''' || sie_21_util_pkg.obten_reslt_expre_plsql (p_region.attribute_03) || ''''
          else
            null
        end
      );
      sie_15_htp_pkg.fermr_bals ('span');
    end if;

    sie_15_htp_pkg.ouvri_bals ('a',
                               'href',
                               '#');
    sie_15_htp_pkg.ecrir (sie_21_util_pkg.obten_reslt_expre_plsql (p_region.attribute_01),
                          false);
    sie_15_htp_pkg.fermr_bals ('a');

    if p_region.attribute_04 is not null then
      sie_15_htp_pkg.ouvri_bals (
        'span',
        'id',
        p_region.attribute_07,
        'class',
        'icon_acord_droit ui-icon ' || p_region.attribute_04,
        'onclick',
        case
          when p_region.attribute_05 is not null then
            'window.location=''' || sie_21_util_pkg.obten_reslt_expre_plsql (p_region.attribute_05) || ''''
          else
            null
        end
      );
      sie_15_htp_pkg.fermr_bals ('span');
    end if;

    sie_15_htp_pkg.fermr_bals ('div');

    return rec_regn;
  end genr_plugn_regn_acord_enfan;

  function genr_plugn_regn_dialg (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
  begin
    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_css (
      '#' || p_region.static_id || ' {display:none;} .no-close .ui-dialog-titlebar-close {display:none;}'
    );

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.dialg',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (   'afw.sie_21.regn.dialg.insta.push(new afw.sie_21.regn.dialg.dialg('
                                            || '{'
                                            || apex_javascript.add_attribute ('vva_id_regn',
                                                                              p_region.static_id)
                                            || apex_javascript.add_attribute ('vva_titre',
                                                                              p_region.name)
                                            || apex_javascript.add_attribute (
                                                 'vbo_modal',
                                                 sie_21_util_pkg.formt_plugn_atrib_boln (p_region.attribute_01)
                                               )
                                            || apex_javascript.add_attribute (
                                                 'vbo_redmn',
                                                 sie_21_util_pkg.formt_plugn_atrib_boln (p_region.attribute_02)
                                               )
                                            || apex_javascript.add_attribute (
                                                 'vbo_fermr_echap',
                                                 sie_21_util_pkg.formt_plugn_atrib_boln (p_region.attribute_03)
                                               )
                                            || apex_javascript.add_attribute (
                                                 'vbo_ouvri_autom',
                                                 sie_21_util_pkg.formt_plugn_atrib_boln (p_region.attribute_05)
                                               )
                                            || apex_javascript.add_attribute (
                                                 'vbo_deplc',
                                                 sie_21_util_pkg.formt_plugn_atrib_boln (p_region.attribute_06)
                                               )
                                            || apex_javascript.add_attribute ('vva_clas_css',
                                                                              p_region.attribute_04)
                                            || apex_javascript.add_attribute ('vnu_largr',
                                                                              p_region.attribute_07,
                                                                              p_add_comma                => false)
                                            || '}));');

    return rec_regn;
  end genr_plugn_regn_dialg;

  function genr_plugn_regn_drop (p_region in sie_21_util_pkg.t_regn,
                                 p_plugin in sie_21_util_pkg.t_plugn,
                                 p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
    begin
      sie_15_htp_pkg.ouvri_bals ('div',
                                 'id',
                                 'drop_' || p_regn.id,
                                 'class',
                                 'ui-widget ui-widget-content ui-corner-all sie_21_regn_drop ' || p_regn.attribute_03);
      sie_15_htp_pkg.ouvri_bals ('p');

      if p_regn.attribute_05 = 'Y' then
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-icon ' || p_regn.attribute_06,
                                   'style',
                                   'float:left; margin-right:.3em;');
        sie_15_htp_pkg.fermr_bals ('span');
      end if;

      sie_15_htp_pkg.ecrir ('Deposer des fichiers ici pour attacher.',
                            false);
      sie_15_htp_pkg.fermr_bals ('p');
      sie_15_htp_pkg.fermr_bals ('div');
    end genr_regn;
  begin
    genr_regn (p_region);

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.drop',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.drop',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.drop.insta.push(new afw.sie_21.regn.drop.drop({'
      || '"vva_id_regn":"'
      || 'drop_'
      || p_region.id
      || '","vva_acept":"'
      || p_region.attribute_01
      || '","vva_id_item_drop":"'
      || p_region.attribute_02
      || '","vbo_cachr_regn":'
      || case p_region.attribute_04 when 'Y' then 'true' when 'N' then 'false' else 'true' end
      || '}));'
    );

    return rec_regn;
  end genr_plugn_regn_drop;

  --OBSOLETE::CARLO
  /*
          function genr_prodt_contx_autor (p_region in apex_plugin.t_region,
                                   p_plugin in apex_plugin.t_plugin,
                                   p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
      vnu_prodt                               number;
      procedure genr_lien_prodt_contx (pnu_prodt in number) is
        cursor cur_prodt (pnu_prodt in number) is
          select   p.code || ' - ' || p.nom abrev,
                   p.ref_numr_aplic_acuei,
                   p.ref_numr_page_acuei
            from   vd_sie_11_prodt p
           where   p.seqnc = pnu_prodt;
        rec_prodt                               cur_prodt%rowtype;
      begin
        open cur_prodt (pnu_prodt);
        fetch cur_prodt
        into rec_prodt;
        close cur_prodt;
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icons');
        sie_15_htp_pkg.ouvri_bals ('a',
                                   'href',
                                   '#',
                                   'alt',
                                   'Afficher les produits autorisés.',
                                   'title',
                                   'Afficher les produits autorisés.',
                                   'class',
                                   'afich_prodt_contx_autor');
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-icon-primary ui-icon ui-icon-newwin');
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-text');
        sie_15_htp_pkg.ecrir (rec_prodt.abrev);
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.fermr_bals ('a');
        sie_15_htp_pkg.ouvri_bals ('a',
                                   'href',
                                   sie_08_url_pkg.genr_url (
                                     pnu_numr_aplic             => rec_prodt.ref_numr_aplic_acuei,
                                     pnu_numr_page              => rec_prodt.ref_numr_page_acuei,
                                     pva_nom_varbl_1            => 'SIDF',
                                     pva_valr_varbl_1           => null,
                                     pva_sesn                   => sie_12_sesn_pkg.obten_sesn
                                   ),
                                   'alt',
                                   'Acceder au produit.',
                                   'title',
                                   'Acceder au produit.');
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-icon-secondary ui-icon ui-icon-extlink');
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.fermr_bals ('a');
        sie_15_htp_pkg.fermr_bals ('span');
      end genr_lien_prodt_contx;
    --CONAL, Probablement que cette procédure n'a plus lieu d'être
--          procedure genr_date_dernr_maj_prodt (pnu_prodt in number) is
--            cursor cur_prodt (pnu_prodt in number) is
--              select p.date_dernr_maj_refrn_apex
--                from vd_sie_11_prodt p
--               where p.seqnc = pnu_prodt;
--
--            rec_prodt   cur_prodt%rowtype;
--          begin
--            open cur_prodt (pnu_prodt);
--
--            fetch cur_prodt into rec_prodt;
--
--            close cur_prodt;
--
--            sie_15_htp_pkg.ouvri_bals ('span');
--
--            sie_15_htp_pkg.ecrir (
--              to_char (rec_prodt.date_dernr_maj_refrn_apex,
--                       'YYYY-MM-DD HH24:MI:SS'));
--
--            sie_15_htp_pkg.fermr_bals ('span');
--          end genr_date_dernr_maj_prodt;
    begin
      -- Exclure la page de connexion
      if sie_13_page_pkg.obten_page_sesn != sie_11_aplic_pkg.obten_page_conxn then
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'id',
                                   'prodt_contx_autor_R' || p_regn.id,
                                   'class',
                                   'prodt_contx_autor');
        vnu_prodt := sie_11_prodt_pkg.obten_prodt (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_11_PRODT_DEFT'));
        genr_lien_prodt_contx (vnu_prodt);
--                if p_regn.attribute_02 = 'Y' then
--                  genr_date_dernr_maj_prodt (vnu_prodt);
--                end if;
        sie_15_htp_pkg.fermr_bals ('div');
      end if;
    end genr_regn;
  begin
    genr_regn (p_region);
    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.prodt_contx_autor',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');
    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.prodt_contx_autor',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');
    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.prodt_contx_autor.insta.push(new afw.sie_21.regn.prodt_contx_autor.prodt_contx_autor({'
      || apex_javascript.add_attribute ('vva_id_regn',
                                   'prodt_contx_autor_R' || p_region.id)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                   apex_plugin.get_ajax_identifier,
                                   p_add_comma                => false)
      || '}));'
    );
    return rec_regn;
  end genr_prodt_contx_autor;
  function ajax_prodt_contx_autor (p_region in sie_21_util_pkg.t_regn,
                                   p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt is
    rec_regn_ajax                           apex_plugin.t_region_ajax_result;
    procedure genr_liste_prodt_autor (p_regn in sie_21_util_pkg.t_regn) is
      cursor cur_prodt is
        select     p.seqnc,
                   p.code || ' - ' || p.nom abrev,
                   p.ref_numr_aplic_acuei,
                   p.ref_numr_page_acuei
            from   vd_sie_11_prodt p
           where   (   sie_11_utils_pkg.verfc_role_prodt_nombr (sie_12_utils_pkg.obten_usagr_conct,
                                                                p.seqnc,
                                                                'DEVLP') = 1
                    or sie_12_utils_pkg.obten_code_utils (sie_12_utils_pkg.obten_usagr_conct) = 'AFW_ADMIN')
                   and 1 =
                         case
                           when p_regn.attribute_03 = 'TOUS' then 1
                           when p_regn.attribute_03 = 'EXCLU_AFW' then case when p.code = 'AFW' then 0 else 1 end
                           when p_regn.attribute_03 = 'SEULM_AFW' then case when p.code = 'AFW' then 1 else 0 end
--                         case
--                           when instr (':' || p_regn.attribute_04 || ':',
--                                       ':' || p.code || ':') > 0 then
--                             1
--                           else
--                             0
--                         end
                         end
        order by   case when code like 'AFW%' then 0 when code like 'SGA' then 1 else 2 end;
    begin
      sie_15_htp_pkg.ouvri_bals ('div',
                                 'class',
                                 'ui-widget-content liste_prodt_autor afw_sie_21_regn_prodt_contx_autor');
      sie_15_htp_pkg.ouvri_bals ('ul');
      --Loop sur les prodt autor
      for rec_prodt in cur_prodt loop
        sie_15_htp_pkg.ouvri_bals ('li');
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icons');
        if p_regn.attribute_01 = 'Y' then
          sie_15_htp_pkg.ouvri_bals ('a',
                                     'href',
                                     sie_08_url_pkg.genr_url (pnu_numr_page              => 1,
                                                              pva_nom_varbl_1            => 'SIDF',
                                                              pva_valr_varbl_1           => sie_07_util_pkg.nv ('SIDF'),
                                                              pva_nom_varbl_2            => 'SSPC',
                                                              pva_valr_varbl_2           => rec_prodt.seqnc,
                                                              pva_nom_varbl_3            => 'SAPC',
                                                              pva_valr_varbl_3           => 'CHANG_PRODT_SAFP',
                                                              pva_sesn                   => sie_12_sesn_pkg.obten_sesn),
                                     'alt',
                                     'Changer de produit.',
                                     'title',
                                     'Changer de produit.');
          sie_15_htp_pkg.ouvri_bals ('span',
                                     'class',
                                     'ui-button-icon-primary ui-icon ui-icon-refresh');
          sie_15_htp_pkg.fermr_bals ('span');
        else
          sie_15_htp_pkg.ouvri_bals ('a',
                                     'href',
                                     sie_08_url_pkg.genr_url (
                                       pnu_numr_aplic             => rec_prodt.ref_numr_aplic_acuei,
                                       pnu_numr_page              => rec_prodt.ref_numr_page_acuei,
                                       --pnu_numr_aplic    => rec_prodt.numr_aplic_apex,
                                       --pnu_numr_page     => rec_prodt.page_acuei,
                                       pva_nom_varbl_1            => 'SIDF',
                                       pva_valr_varbl_1           => null,
                                       pva_sesn                   => sie_12_sesn_pkg.obten_sesn
                                     ),
                                     'alt',
                                     'Acceder au produit.',
                                     'title',
                                     'Acceder au produit.');
          sie_15_htp_pkg.ouvri_bals ('span',
                                     'class',
                                     'ui-button-icon-primary ui-icon ui-icon-extlink');
          sie_15_htp_pkg.fermr_bals ('span');
        end if;
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-text');
        sie_15_htp_pkg.ecrir (rec_prodt.abrev);
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.fermr_bals ('a');
        if p_regn.attribute_01 = 'Y' then
          sie_15_htp_pkg.ouvri_bals ('a',
                                     'href',
                                     sie_08_url_pkg.genr_url (
                                       pnu_numr_aplic             => rec_prodt.ref_numr_aplic_acuei,
                                       pnu_numr_page              => rec_prodt.ref_numr_page_acuei,
                                       --pnu_numr_aplic    => rec_prodt.numr_aplic_apex,
                                       --pnu_numr_page     => rec_prodt.page_acuei,
                                       pva_nom_varbl_1            => 'SIDF',
                                       pva_valr_varbl_1           => null,
                                       pva_sesn                   => sie_12_sesn_pkg.obten_sesn
                                     ),
                                     'alt',
                                     'Acceder au produit.',
                                     'title',
                                     'Acceder au produit.');
          sie_15_htp_pkg.ouvri_bals ('span',
                                     'class',
                                     'ui-button-icon-secondary ui-icon ui-icon-extlink');
          sie_15_htp_pkg.fermr_bals ('span');
          sie_15_htp_pkg.fermr_bals ('a');
        end if;
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.fermr_bals ('li');
      end loop;
      sie_15_htp_pkg.fermr_bals ('ul');
      sie_15_htp_pkg.fermr_bals ('div');
    end genr_liste_prodt_autor;
  begin
    case aa.g_widget_action
      when 'OBTEN_LISTE_PRODT_AUTOR' then
        genr_liste_prodt_autor (p_region);
      else
        null;
    end case;
    return rec_regn_ajax;
  end ajax_prodt_contx_autor;*/

  function genr_domn_contx_autor (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
    vnu_domn                                number (10);

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
      vnu_domn                                number (10);

      procedure genr_lien_domn_contx (pnu_domn in number) is
        cursor cur_domn (pnu_domn in number) is
          select   d.code || ' - ' || d.nom abrev
            from   vd_i_sie_12_domn d
           where   d.seqnc = pnu_domn;

        rec_domn                                cur_domn%rowtype;
      begin
        open cur_domn (pnu_domn);

        fetch cur_domn
        into rec_domn;

        close cur_domn;

        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icons');

        sie_15_htp_pkg.ouvri_bals ('a',
                                   'href',
                                   '#',
                                   'alt',
                                   'Afficher les domaines autorisés.',
                                   'title',
                                   'Afficher les domaines autorisés.',
                                   'class',
                                   'afich_domn_contx_autor');

        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-icon-primary ui-icon ui-icon-newwin');
        sie_15_htp_pkg.fermr_bals ('span');

        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-text icon-left');
        sie_15_htp_pkg.ecrir (rec_domn.abrev);
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.fermr_bals ('a');

        sie_15_htp_pkg.fermr_bals ('span');
      end genr_lien_domn_contx;
    begin
      -- Exclure la page de connexion
      if sie_13_page_pkg.obten_page_sesn != sie_11_aplic_pkg.obten_page_conxn then
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'id',
                                   'domn_contx_autor_R' || p_regn.id,
                                   'class',
                                   'domn_contx_autor');

        vnu_domn := sie_12_domn_pkg.obten_domn_sesn;

        genr_lien_domn_contx (vnu_domn);

        sie_15_htp_pkg.fermr_bals ('div');
      end if;
    end genr_regn;
  begin
    genr_regn (p_region);

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.domn_contx_autor',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.domn_contx_autor',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.domn_contx_autor.insta.push(new afw.sie_21.regn.domn_contx_autor.domn_contx_autor({'
      || apex_javascript.add_attribute ('vva_id_regn',
                                        'domn_contx_autor_R' || p_region.id)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier)
      || apex_javascript.add_attribute ('vbo_ouvri_charg',
                                        case when sie_12_domn_pkg.obten_domn_sesn is null then true else false end,
                                        p_add_comma                => false)
      || '}));'
    );

    return rec_regn;
  end genr_domn_contx_autor;

  function ajax_domn_contx_autor (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt is
    rec_regn_ajax                           apex_plugin.t_region_ajax_result;

    procedure genr_liste_domn_autor is
      cursor cur_domn is
        select     d.seqnc,
                   d.code || ' :: ' || d.nom abrev
            from   vd_i_sie_12_domn d,
                   vd_i_sie_12_domn_utils du
           where   du.ref_domn = d.seqnc
               and du.ref_utils = sie_12_utils_pkg.obten_usagr_conct
               and du.date_debut_efect <= sysdate
               and (du.date_fin_efect is not null and du.date_fin_efect >= sysdate
                 or du.date_fin_efect is null)
        order by   d.code;
    --TODO
    --Filtrer cette liste
    begin
      sie_15_htp_pkg.ouvri_bals ('div',
                                 'class',
                                 'ui-widget-content liste_domn_autor afw_sie_21_regn_domn_contx_autor');
      sie_15_htp_pkg.ouvri_bals ('ul');

      --Loop sur les domn autor
      for rec_domn in cur_domn loop
        sie_15_htp_pkg.ouvri_bals ('li');
        sie_15_htp_pkg.ouvri_bals (
          'span',
          'class',
          'ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icons chang_domn'
        );
        sie_15_htp_pkg.ouvri_bals ('a',
                                   'href',
                                   sie_08_url_pkg.genr_url (pnu_numr_page              => 1,
                                                            pva_nom_varbl_1            => 'SIDF',
                                                            pva_valr_varbl_1           => sie_07_util_pkg.nv ('SIDF'),
                                                            pva_nom_varbl_2            => 'SSPC',
                                                            pva_valr_varbl_2           => rec_domn.seqnc,
                                                            pva_nom_varbl_3            => 'SAPC',
                                                            pva_valr_varbl_3           => 'SAFD_CHANG_DOMN',
                                                            pva_sesn                   => sie_12_sesn_pkg.obten_sesn),
                                   'alt',
                                   'Changer de domaine.',
                                   'title',
                                   'Changer de domaine.');
        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-icon-primary ui-icon ui-icon-refresh');
        sie_15_htp_pkg.fermr_bals ('span');

        sie_15_htp_pkg.ouvri_bals ('span',
                                   'class',
                                   'ui-button-text');
        sie_15_htp_pkg.ecrir (rec_domn.abrev);
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.fermr_bals ('a');
        sie_15_htp_pkg.fermr_bals ('span');
        sie_15_htp_pkg.fermr_bals ('li');
      end loop;

      sie_15_htp_pkg.fermr_bals ('ul');
      sie_15_htp_pkg.fermr_bals ('div');
    end genr_liste_domn_autor;
  begin
    case aa.g_widget_action
      when 'OBTEN_LISTE_DOMN_AUTOR' then
        genr_liste_domn_autor;
      else
        null;
    end case;

    return rec_regn_ajax;
  end ajax_domn_contx_autor;

  function genr_sie_04_fil_arian (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
      vbo_sous_liste_ouver                    boolean default false;

      procedure genr_ouvri_sous_liste_boots is
      begin
        if not vbo_sous_liste_ouver then
          sie_15_htp_pkg.ouvri_bals ('ul',
                                     'class',
                                     'dropdown-menu');
          vbo_sous_liste_ouver := true;
        end if;
      end genr_ouvri_sous_liste_boots;

      procedure genr_fermr_sous_liste_boots is
      begin
        if vbo_sous_liste_ouver then
          sie_15_htp_pkg.fermr_bals ('ul');
          vbo_sous_liste_ouver := false;
        end if;
      end genr_fermr_sous_liste_boots;

      procedure genr_fil_arian_twitr_boots is
        cursor cur_fil is
          select       count (1) over (partition by session_id) nb,
                       rank () over (order by timst) rg,
                       libl,
                       page,
                       seqnc,
                       app_id
                from   vd_sie_04_fil_arian fa
               where   fa.indic_afich = 'O'
          connect by   fa.ref_elemn_sup = prior fa.seqnc
          start with   (fa.ref_elemn_sup is null and nvl (p_regn.attribute_07, 'Y') = 'Y')
                    or (fa.ref_elemn_sup is not null and nvl (p_regn.attribute_07, 'Y') = 'N');

        cursor cur_contx (pnu_fil_arian in number) is
          select   ctx.contx,
                   ctx.actio,
                   ctx.seqnc_contx,
                   ctx.contx_inter,
                   ctx.actio_inter,
                   ctx.seqnc_contx_inter,
                   ctx.nom_procd_infor_suplm,
                   ctx.infor_suplm
            from   vd_sie_04_contx ctx
           where   ctx.ref_fil_arian = pnu_fil_arian;

        rec_contx                               cur_contx%rowtype;
        vva_lien                                varchar2 (150)
          default    'f?p=%app_id%'
                  || ':%page%:'
                  || sie_12_sesn_pkg.obten_sesn
                  || '::NO::SIDF,SAPC:'
                  || sie_07_util_pkg.nv ('SIDF')
                  || ',XFA%seqnc%';
        vva_lien_href                           varchar2 (1999);
        vva_lien_titre                          varchar2 (200);
        vva_lien_alt                            varchar2 (200);
        vva_libl                                varchar2 (1999);
        vnu_debut_subst                         pls_integer;
        vnu_fin_subst                           pls_integer;
        vva_icone_seprt                         varchar2 (30) default p_regn.attribute_01;
        vva_prefx                               varchar2 (50) default p_regn.attribute_03;
        vva_valr_formt                          varchar2 (4000);
      begin
        sie_15_htp_pkg.ouvri_bals ('ul',
                                   'class',
                                   'nav navbar-nav');

        for rec_fil in cur_fil loop
          vva_libl := apex_application.do_substitutions (rec_fil.libl);

          if rec_fil.rg = rec_fil.nb then
            vva_lien_href := null;
            vva_lien_titre := null;
            vva_lien_alt := null;
          else
            vva_lien_href :=
              apex_application.do_substitutions (replace (replace (replace (replace (vva_lien,
                                                                                     '%page%',
                                                                                     rec_fil.page),
                                                                            '%libl%',
                                                                            rec_fil.libl),
                                                                   '%seqnc%',
                                                                   rec_fil.seqnc),
                                                          '%app_id%',
                                                          rec_fil.app_id));

            -- TODO::CARLO
            -- Traduire
            vva_lien_titre := 'Naviguer vers ' || vva_libl;
            vva_lien_alt := 'Naviguer vers ' || vva_libl;
          end if;

          -- TODO::CARLO
          -- Traduire
          sie_15_htp_pkg.ouvri_bals ('li',
                                     'class',
                                     'dropdown' || case when vva_lien_href is null then ' active' else null end /*,'title'
                                                                                                                ,case
                                                                                                                    when vva_lien_href is null then 'Vous-êtes ici'
                                                                                                                    else null
                                                                                                                 end*/
                                                                                                               );

          if vva_lien_href is not null then
            sie_15_htp_pkg.ouvri_bals ('a',
                                       'href',
                                       vva_lien_href,
                                       'alt',
                                       vva_lien_alt /*,'title'
                                                    ,vva_lien_titre*/
                                                   );
            sie_15_htp_pkg.ouvri_bals ('i',
                                       'class',
                                       'icon-arrow-right');
            sie_15_htp_pkg.fermr_bals ('i');

            sie_15_htp_pkg.ecrir (' ' || vva_libl);

            sie_15_htp_pkg.fermr_bals ('a');
          else
            sie_15_htp_pkg.ouvri_bals ('a',
                                       'href',
                                       '#');


            sie_15_htp_pkg.ecrir (vva_libl);
            sie_15_htp_pkg.fermr_bals ('a');
          end if;


          -- Afficher informations supplementaires
          if p_regn.attribute_05 = 'Y' then
            open cur_contx (rec_fil.seqnc);

            fetch cur_contx
            into rec_contx;

            close cur_contx;

            if rec_contx.nom_procd_infor_suplm is not null then
              vva_valr_formt := sie_21_util_pkg.obten_reslt_expre_plsql (rec_contx.nom_procd_infor_suplm);


              if vva_valr_formt is not null then
                genr_ouvri_sous_liste_boots;
                sie_15_htp_pkg.ouvri_bals ('li');
                sie_15_htp_pkg.ecrir (vva_valr_formt);
                sie_15_htp_pkg.fermr_bals ('li');
                vva_valr_formt := null;
              end if;
            end if;

            if rec_contx.seqnc_contx is not null then
              vva_valr_formt :=
                sie_21_util_pkg.obten_reslt_expre_plsql (
                     'sie_12_struc_aplic_cu_pkg.obten_valr_formt('''
                  || sie_12_struc_aplic_pkg.obten_seqnc (rec_contx.contx)
                  || ''','
                  || rec_contx.seqnc_contx
                  || ')'
                );

              if vva_valr_formt is not null then
                genr_ouvri_sous_liste_boots;
                sie_15_htp_pkg.ouvri_bals ('li');

                sie_15_htp_pkg.ecrir (vva_valr_formt);

                sie_15_htp_pkg.fermr_bals ('li');
                vva_valr_formt := null;
              end if;
            end if;

            if rec_contx.infor_suplm is not null then
              genr_ouvri_sous_liste_boots;
              sie_15_htp_pkg.ouvri_bals ('li');
              sie_15_htp_pkg.ecrir (rec_contx.infor_suplm);
              sie_15_htp_pkg.fermr_bals ('li');
            end if;

            -- Afficher contexte
            if p_regn.attribute_06 = 'Y' then
              genr_ouvri_sous_liste_boots;
              sie_15_htp_pkg.ouvri_bals ('li');

              sie_15_htp_pkg.ecrir (
                   '<span>Contexte: '
                || rec_contx.contx
                || '</span><br />'
                || '<span>Sequence: '
                || rec_contx.seqnc_contx
                || '</span><br />'
                || '<span>Action: '
                || rec_contx.actio
                || '</span>'
              );

              if rec_contx.contx_inter is not null
              or rec_contx.actio_inter is not null
              or rec_contx.seqnc_contx_inter is not null then
                sie_15_htp_pkg.ecrir (
                     '<br /><span>***** Intermédiaire *****</span><br />'
                  || '<span>Contexte: '
                  || rec_contx.contx_inter
                  || '</span><br />'
                  || '<span>Sequence: '
                  || rec_contx.seqnc_contx_inter
                  || '</span><br />'
                  || '<span>Action: '
                  || rec_contx.actio_inter
                  || '</span>'
                );
              end if;

              sie_15_htp_pkg.fermr_bals ('li');
            end if;

            genr_fermr_sous_liste_boots;
          end if;

          sie_15_htp_pkg.fermr_bals ('li');
        end loop;

        sie_15_htp_pkg.fermr_bals ('ul');
      end genr_fil_arian_twitr_boots;
    begin
      -- Exclure la page de connexion
      if sie_04_fil_arian_pkg.trait_page () and sie_13_page_pkg.obten_page_sesn != sie_11_aplic_pkg.obten_page_conxn then
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'id',
                                   'sie_04_fil_arian_R' || p_regn.id,
                                   'class',
                                   'sie_04_fil_arian');

        case p_regn.attribute_04
          when 'CLASQ' then
            -- Générer le prefixe
            if p_regn.attribute_03 is not null then
              sie_15_htp_pkg.ecrir (p_regn.attribute_03 || ':');
            end if;

            -- Générer le fil ariane classique
            sie_15_htp_pkg.ecrir (sie_04_fil_arian_pkg.afich);
          when 'AVANC' then
            -- Générer le fil ariane avancé
            -- genr_fil_arian ();
            genr_fil_arian_twitr_boots ();
          when 'TWITR_BOOTS' then
            -- Générer le fil ariane avancé
            genr_fil_arian_twitr_boots ();
          else
            null;
        end case;

        sie_15_htp_pkg.fermr_bals ('div');

        sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_AUTOR_DUPLQ_PAGE',
                                         'N');
      end if;
    end genr_regn;
  begin
    genr_regn (p_region);

    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.sie_04_fil_arian',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.sie_04_fil_arian',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    return rec_regn;
  end genr_sie_04_fil_arian;

  function genr_sie_01_err_apex (p_region in sie_21_util_pkg.t_regn,
                                 p_plugin in sie_21_util_pkg.t_plugn,
                                 p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
    begin
      sie_01_err_apex_pkg.afich_mesg_infor_apex ();
    end genr_regn;
  begin
    genr_regn (p_region);

    return rec_regn;
  end genr_sie_01_err_apex;

  function genr_sie_01_afich_mesg (p_region in sie_21_util_pkg.t_regn,
                                   p_plugin in sie_21_util_pkg.t_plugn,
                                   p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
    begin
      sie_01_gestn_mesg_pkg.afich_mesg_par_numr (p_regn.attribute_01);
    end genr_regn;
  begin
    genr_regn (p_region);
    return rec_regn;
  end genr_sie_01_afich_mesg;

  function genr_sie_13_menu (p_region in sie_21_util_pkg.t_regn,
                             p_plugin in sie_21_util_pkg.t_plugn,
                             p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;
    rec_confg_plugn_menu                    sie_24_navbr_pkg.typ_rec_confg_plugn;
    rec_confg_plugn_item_racn               sie_24_navbr_pkg.typ_rec_confg_plugn_item;
    rec_confg_plugn_item                    sie_24_navbr_pkg.typ_rec_confg_plugn_item;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
      vnu_page_regn                           number (10);

      procedure genr_menu is
        vva_reqt                                varchar2 (4000);
        vnu_niv                                 number (3);
        vva_libl                                varchar2 (4000);
        vva_url_cible                           varchar2 (200);
        vva_etat_libl                           varchar2 (3);
        vnu_item_parnt                          number (10);
        vnu_seqnc                               number (10);
        vva_clas_racn                           varchar2 (60);
        vva_indic_premr_full                    varchar2 (1) default 'O';

        --TODO::CARLO im.code
        cursor cur_item_menu is
          select     seqnc,
                     forml_libl_formt,
                     sie_13_menu_pkg.obten_url_cible (im.seqnc) url_cible,
                     null est_actif,
                     im.code
              from   vd_sie_13_item_menu im
             where   sie_13_menu_pkg.verfr_droit_acces (im.seqnc) = 1
                 and sie_13_menu_pkg.trait_condt_afich_numbr (im.seqnc) = 1
                 and im.ref_item_menu is null
                 and im.ref_menu = rec_confg_plugn_menu.ref_menu
          order by   im.ordre_presn;

        procedure genr_item_menu (pnu_item_menu in number,
                                  pbo_genr_tabl in boolean default false) is
          cursor cur_item_menu_enfan is
            select     seqnc,
                       niv,
                       forml_libl_formt,
                       url_cible,
                       est_actif
                from   (select   seqnc,
                                 null niv,
                                 forml_libl_formt,
                                 sie_13_menu_pkg.obten_url_cible (im.seqnc) url_cible,
                                 null est_actif,
                                 ordre_presn
                          from   vd_sie_13_item_menu im
                         where   sie_13_menu_pkg.verfr_droit_acces (im.seqnc) = 1
                             and sie_13_menu_pkg.trait_condt_afich_numbr (im.seqnc) = 1
                             and im.ref_item_menu = pnu_item_menu
                             and rec_confg_plugn_item_racn.etend_nombr_coln = 1
                        union all
                        select   seqnc,
                                 1 niv,
                                 forml_libl_formt,
                                 sie_13_menu_pkg.obten_url_cible (im.seqnc) url_cible,
                                 null est_actif,
                                 ordre_presn
                          from   vd_sie_13_item_menu im
                         where   sie_13_menu_pkg.verfr_droit_acces (im.seqnc) = 1
                             and sie_13_menu_pkg.trait_condt_afich_numbr (im.seqnc) = 1
                             and rec_confg_plugn_item_racn.etend_nombr_coln > 1
                             and im.ref_item_menu = pnu_item_menu) sourc
            order by   sourc.ordre_presn;

          vbo_enfan_exist                         boolean default false;
          vva_clas                                varchar2 (200) default null;
        begin
          for rec_ime in cur_item_menu_enfan loop
            rec_confg_plugn_item :=
              sie_24_navbr_pkg.obten_enreg_confg_plugn_item (rec_confg_plugn_menu.seqnc,
                                                             rec_ime.seqnc);


            vbo_enfan_exist := sie_13_menu_pkg.verfr_enfan_exist (rec_ime.seqnc);

            if vbo_enfan_exist then
              -- li
              sie_24_navbr_pkg.creer_liste ('dropdown-header');

              -- a

              case
                when rec_ime.url_cible is not null then
                  sie_15_htp_pkg.ouvri_bals ('a',
                                             'href',
                                             rec_ime.url_cible);
                  sie_15_htp_pkg.ecrir (rec_ime.forml_libl_formt);
                  sie_15_htp_pkg.fermr_bals ('a');
                else
                  sie_15_htp_pkg.ecrir (rec_ime.forml_libl_formt);
              end case;

              --li
              sie_24_navbr_pkg.fermr_liste;
            else
              -- li
              sie_24_navbr_pkg.creer_liste;
              -- a
              sie_24_navbr_pkg.ecrir_lien (rec_ime.forml_libl_formt,
                                           vva_clas,
                                           rec_ime.url_cible);
            end if;

            --FIX::ALEX, Bizarrement, la classe s'applique aux autres
            vva_clas := null;

            if vbo_enfan_exist then
              -- ul
              --sie_24_navbr_pkg.creer_liste_desrd ('dropdown-menu');
              null;
            end if;

            genr_item_menu (rec_ime.seqnc);

            if vbo_enfan_exist then
              -- ul
              --sie_24_navbr_pkg.fermr_liste_desrd;

              -- li
              sie_24_navbr_pkg.creer_liste ('divider');
            --li
            --sie_24_navbr_pkg.fermr_liste;
            end if;

            --li
            sie_24_navbr_pkg.fermr_liste;
          end loop;
        exception
          when others then
            raise;
        end genr_item_menu;
      begin
        -- creation entete
        -- ul
        sie_24_navbr_pkg.creer_entet ();

        for rec_im in cur_item_menu loop
          rec_confg_plugn_item_racn :=
            sie_24_navbr_pkg.obten_enreg_confg_plugn_item (rec_confg_plugn_menu.seqnc,
                                                           rec_im.seqnc);

          if rec_confg_plugn_item_racn.etend_nombr_coln = 0 then
            sie_24_navbr_pkg.genr_elemn_no_drop (rec_im.forml_libl_formt,
                                                 rec_im.url_cible);
          else
            sie_24_navbr_pkg.creer_elemn_drop (rec_im.forml_libl_formt,
                                               rec_im.url_cible,
                                               rec_confg_plugn_item_racn.clas_css_racn,
                                               rec_confg_plugn_item_racn.ref_dv_align_valr_organ);

            if rec_confg_plugn_item_racn.etend_nombr_coln = 1 then
              -- ul
              sie_24_navbr_pkg.creer_liste_desrd ('dropdown-menu' || ' menu_' || lower (rec_im.code));
            end if;

            genr_item_menu (rec_im.seqnc);

            if rec_confg_plugn_item_racn.etend_nombr_coln = 1 then
              -- ul
              sie_24_navbr_pkg.fermr_liste_desrd;
            end if;

            -- li
            sie_24_navbr_pkg.fermr_elemn_drop;
          end if;
        end loop;

        -- ul
        sie_24_navbr_pkg.fermr_entet;
      exception
        when others then
          raise;
      end genr_menu;
    begin
      -- Exclure la page de connexion
      if sie_13_page_pkg.obten_page_sesn != sie_11_aplic_pkg.obten_page_conxn then
        genr_menu ();

        sie_07_util_pkg.defnr_etat_sesn ('A_SIE_04_AUTOR_DUPLQ_PAGE',
                                         'N');
      end if;
    exception
      when others then
        raise;
    end genr_regn;

    function genr_chemn_css (p_rec_confg_plugn in sie_24_navbr_pkg.typ_rec_confg_plugn)
      return varchar2 is
      vva_chemn                               varchar2 (200);
    begin
      case p_rec_confg_plugn.ref_dv_orien_menu_code
        when 'HORZT' then
          vva_chemn := vva_chemn || 'horizontal/';
        when 'VERTC' then
          vva_chemn := vva_chemn || 'vertical/';
        when 'VERTC_GAUCH' then
          vva_chemn := vva_chemn || 'vertical_left/';
        else
          null;
      end case;

      case p_rec_confg_plugn.ref_dv_coulr_theme_code
        when 'OBSCU' then
          vva_chemn := vva_chemn || 'dark_theme/';
        when 'CLAIR' then
          vva_chemn := vva_chemn || 'light_theme/';
        else
          null;
      end case;

      return vva_chemn;
    end genr_chemn_css;
  begin
    rec_confg_plugn_menu := sie_24_navbr_pkg.obten_enreg_confg_plugn (p_region.id);

    genr_regn (p_region);
    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css (
      'megamenu',
         sie_11_prodt_pkg.obten_dosr_fichr_prodt
      || 'theme/css3-mega-drop-down-menu/megadropdownmenu_files/HTML/'
      || genr_chemn_css (rec_confg_plugn_menu)
    );

    sie_21_util_pkg.ajout_libr_css (
      'megamenu',
         sie_11_prodt_pkg.obten_dosr_fichr_prodt
      || 'theme/css3-mega-drop-down-menu/megadropdownmenu_files/HTML/'
      || genr_chemn_css (rec_confg_plugn_menu)
      || 'custom/'
    );

    return rec_regn;
  exception
    when others then
      raise;
  end genr_sie_13_menu;

  function genr_sie_13_liste_navgt (p_region in sie_21_util_pkg.t_regn,
                                    p_plugin in sie_21_util_pkg.t_plugn,
                                    p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
      vva_optio_liste_navgt                   varchar2 (32767) default sie_13_page_pkg.genr_optio_liste_navgt;
    begin
      -- Ne pas generer si la liste est vide
      -- Exclure la page de connexion
      if vva_optio_liste_navgt is not null and sie_13_page_pkg.obten_page_sesn != sie_11_aplic_pkg.obten_page_conxn then
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'id',
                                   'sie_13_liste_navgt_R' || p_regn.id,
                                   'class',
                                   'sie_13_liste_navgt');
        -- PRINT select id="a_sie_13_defnt_liste_navgt"
        sie_15_htp_pkg.ecrir (vva_optio_liste_navgt);
        sie_15_htp_pkg.fermr_bals ('div');
      end if;
    end genr_regn;
  begin
    genr_regn (p_region);

    return rec_regn;
  end genr_sie_13_liste_navgt;

  function genr_sie_13_aide_page (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn,
                                  p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
      procedure genr_lien_aide_page is
      begin
        sie_15_htp_pkg.ouvri_bals ('a',
                                   'href',
                                   '#',
                                   'alt',
                                   'Afficher l''aide de la page',
                                   'title',
                                   'Afficher l''aide de la page',
                                   'class',
                                   'afich_sie_13_aide_page btn btn-info btn-mini');



        sie_15_htp_pkg.ouvri_bals ('i',
                                   'class',
                                   'icon-question');
        sie_15_htp_pkg.fermr_bals ('i');

        --TODO::CARLO
        -- traduction
        sie_15_htp_pkg.ecrir (' Aide');

        sie_15_htp_pkg.fermr_bals ('a');
      end genr_lien_aide_page;
    begin
      sie_15_htp_pkg.ouvri_bals ('div',
                                 'id',
                                 'sie_13_aide_page_R' || p_regn.id,
                                 'class',
                                 'sie_13_aide_page');
      genr_lien_aide_page;

      sie_15_htp_pkg.fermr_bals ('div');
    end genr_regn;
  begin
    genr_regn (p_region);

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.sie_13_aide_page',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.sie_13_aide_page',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.sie_13_aide_page.insta.push(new afw.sie_21.regn.sie_13_aide_page.sie_13_aide_page({'
      || apex_javascript.add_attribute ('vva_id_regn',
                                        'sie_13_aide_page_R' || p_region.id)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));'
    );

    return rec_regn;
  end genr_sie_13_aide_page;

  function ajax_sie_13_aide_page (p_region in sie_21_util_pkg.t_regn,
                                  p_plugin in sie_21_util_pkg.t_plugn)
    return sie_21_util_pkg.t_regn_ajax_reslt is
    rec_regn_ajax                           apex_plugin.t_region_ajax_result;
  begin
    case aa.g_widget_action
      when 'OBTEN_AIDE_PAGE' then
        sie_15_htp_pkg.ouvri_bals ('div',
                                   'class',
                                   'ui-widget-content');
        sie_15_htp_pkg.ecrir (sie_13_regn_piltb_pkg.obten_contn_aide_page (sie_13_page_pkg.obten_page_sesn,
                                                                           sie_01_lang_pkg.obten_lang_sesn));

        --if wwv_flow_api.p_ALLOW_FEEDBACK_YN = 'Y' then
        /*
        sie_15_htp_pkg.ouvri_bals ('a'
                                  ,'id'
                                  ,'boutn_comnt_bogue'
                                  ,'href'
                                  ,'#'
                                  ,'alt'
                                  ,'Page de feedback'
                                  ,'title'
                                  ,'Page de feedback'
                                  ,'class'
                                  ,'btn btn-primary btn-large');

        sie_15_htp_pkg.ouvri_bals ('i', 'class', 'icon-bug');
        sie_15_htp_pkg.fermr_bals ('i');

        sie_15_htp_pkg.ecrir ('Soumettre vos commentaires et bogues');
        sie_15_htp_pkg.fermr_bals ('a');
        */
        --end if;

        sie_15_htp_pkg.fermr_bals ('div');
      else
        null;
    end case;

    return rec_regn_ajax;
  end ajax_sie_13_aide_page;

  function genr_ifram (p_region in sie_21_util_pkg.t_regn,
                       p_plugin in sie_21_util_pkg.t_plugn,
                       p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
      vva_url                                 varchar2 (1000);
      vnu_numr_apex_aplic                     number;
      vnu_numr_apex_page                      number;
      vbo_url_apex                            boolean;
    begin
      if sie_21_util_pkg.formt_plugn_atrib_boln (p_regn.attribute_01) then
        vnu_numr_apex_aplic := sie_21_util_pkg.obten_reslt_expre_plsql (p_regn.attribute_02);

        vnu_numr_apex_page := sie_21_util_pkg.obten_reslt_expre_plsql (p_regn.attribute_03);

        vva_url :=
          sie_08_url_pkg.genr_url (vnu_numr_apex_aplic,
                                   vnu_numr_apex_page);
      else
        vva_url := sie_21_util_pkg.obten_reslt_expre_plsql (p_regn.attribute_04);
      end if;

      sie_15_htp_pkg.ouvri_bals ('div',
                                 'id',
                                 p_regn.static_id,
                                 'class',
                                 'sie_21_regn_ifram');
      sie_15_htp_pkg.ouvri_bals ('iframe',
                                 'src',
                                 vva_url);
      sie_15_htp_pkg.ouvri_bals ('p');
      sie_15_htp_pkg.fermr_bals ('p');
      sie_15_htp_pkg.fermr_bals ('iframe');
      sie_15_htp_pkg.fermr_bals ('div');
    end genr_regn;
  begin
    genr_regn (p_region);

    return rec_regn;
  end genr_ifram;

  function genr_telvr_fichr (p_region in sie_21_util_pkg.t_regn,
                             p_plugin in sie_21_util_pkg.t_plugn,
                             p_is_printer_friendly in boolean)
    return sie_21_util_pkg.t_regn_rendr_reslt is
    rec_regn                                sie_21_util_pkg.t_regn_rendr_reslt;

    procedure genr_regn (p_regn in sie_21_util_pkg.t_regn) is
    begin
      sie_15_htp_pkg.ouvri_bals ('div',
                                 'id',
                                 'sie_21_telvr_fichr_R' || p_regn.id,
                                 'class',
                                 'sie_21_telvr_fichr',
                                 'name',
                                 'files[]');

      -- INPUT
      sie_15_htp_pkg.ouvri_bals ('input/',
                                 'id',
                                 'selct_fichr',
                                 'type',
                                 'file',
                                 pva_extra                  => 'multiple');

      -- DROP ZONE
      sie_15_htp_pkg.ouvri_bals ('div',
                                 'class',
                                 'drop_zone');
      sie_15_htp_pkg.ecrir ('Déposer des fichiers ici');
      sie_15_htp_pkg.fermr_bals ('div');

      -- OUTPUT
      sie_15_htp_pkg.ouvri_bals ('output',
                                 'class',
                                 'liste_fichr');
      sie_15_htp_pkg.ouvri_bals ('ul');
      sie_15_htp_pkg.fermr_bals ('ul');
      sie_15_htp_pkg.fermr_bals ('output');

      sie_15_htp_pkg.fermr_bals ('div');
    end genr_regn;
  begin
    sie_21_plugn_blob_pkg.suprm_colct ();

    genr_regn (p_region);

    --Ajouter les librairies CSS
    sie_21_util_pkg.ajout_libr_css ('afw.sie_21.regn.telvr_fichr',
                                    sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/css/');

    --Ajouter les librairies JavaScript
    sie_21_util_pkg.ajout_libr_javsc ('afw.sie_21.regn.telvr_fichr',
                                      sie_11_prodt_pkg.obten_dosr_fichr_afw || 'plugin/javascript/');

    --Initialiser le plugin
    sie_21_util_pkg.ajout_code_javsc_charg (
         'afw.sie_21.regn.telvr_fichr.insta.push(new afw.sie_21.regn.telvr_fichr.telvr_fichr({'
      || apex_javascript.add_attribute ('vva_id_regn',
                                        'sie_21_telvr_fichr_R' || p_region.id)
      || apex_javascript.add_attribute ('vva_nom_plugn',
                                        p_plugin.name)
      || apex_javascript.add_attribute ('vva_plugn_ajax',
                                        apex_plugin.get_ajax_identifier,
                                        p_add_comma                => false)
      || '}));'
    );

    return rec_regn;
  end genr_telvr_fichr;
begin
  gta_code_plugn ('SIE_13_CONFR_SAUVG') := 'SIE_13_CONFR_SAUVG';
  gta_code_plugn ('SIE_18_DEPSM_TABLR_FORM') := 'SIE_18_DEPSM_TABLR_FORM';
  gta_code_plugn ('SIE_18') := 'SIE_18';
  gta_code_plugn ('SIE_14_POPUP_LOV_ITEM') := 'SIE_14_POPUP_LOV_ITEM';
  gta_code_plugn ('SIE_14_POPUP_LOV') := 'SIE_14_POPUP_LOV';
exception
  when others then
    sie_01_err_apex_pkg.lever_err_apex_mesg ('Initialisation de sie_13_plugn_pkg');
end sie_21_regn_pkg;
/

Prompt Package Body SIE_21_UTIL_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_21_util_pkg is
  gva_compteur                            number := 0;
  kva_exten_javsc                constant varchar2 (3) default '.js';
  kva_exten_css                  constant varchar2 (4) default '.css';

  procedure debug_actio_dynmq (p_dynamic_action in t_actn_dynmq,
                               p_plugin in t_plugn) is
  begin
    if aa.g_debug then
      apex_plugin_util.debug_dynamic_action (p_plugin,
                                             p_dynamic_action);
    end if;
  exception
    when others then
      ete ();
  end debug_actio_dynmq;

  procedure debug_page_item (p_page_item in t_page_item,
                             p_plugin in t_plugn,
                             pva_value in varchar2,
                             pbo_is_readonly in boolean,
                             pbo_is_printer_friendly in boolean) is
  begin
    if aa.g_debug then
      apex_plugin_util.debug_page_item (p_plugin,
                                        p_page_item,
                                        pva_value,
                                        pbo_is_readonly,
                                        pbo_is_printer_friendly);
    end if;
  end debug_page_item;

  procedure ajout_libr_javsc (pva_nom in varchar2,
                              pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                              pva_versn in varchar2 default '?v=' || sie_11_prodt_pkg.obten_numr_versn_prodt_afw,
                              pva_saut_extns in boolean default true) is
  begin
    sie_07_util_pkg.ajout_libr_javsc (pva_nom || kva_exten_javsc,
                                      pva_reprt,
                                      pva_versn,
                                      pva_saut_extns);
  end ajout_libr_javsc;

  procedure ajout_code_javsc_charg (pva_code in varchar2,
                                    pva_cle in varchar2 default null) is
  begin
    sie_07_util_pkg.ajout_code_javsc_charg (pva_code,
                                            pva_cle);
  end ajout_code_javsc_charg;

  procedure ajout_libr_css (pva_nom in varchar2,
                            pva_reprt in varchar2 default sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/',
                            pva_versn in varchar2 default '?v=' || sie_11_prodt_pkg.obten_numr_versn_prodt_afw,
                            pva_saut_extns in boolean default true) is
  begin
    sie_07_util_pkg.ajout_libr_css (pva_nom || kva_exten_css,
                                    pva_reprt,
                                    pva_versn,
                                    pva_saut_extns);
  end ajout_libr_css;


  procedure ajout_css (pva_style in varchar2,
                       pbo_inser_en_ligne in boolean default true) is
  begin
    sie_07_util_pkg.ajout_css (pva_style,
                               pbo_inser_en_ligne);
  end ajout_css;

  procedure formt_url_fichr (pva_url in varchar2,
                             pva_reprt in out varchar2,
                             pva_nom_fichr in out varchar2,
                             pva_extns in out varchar2) is
  begin
    pva_reprt :=
      substr (pva_url,
              1,
              instr (pva_url,
                     '/',
                     -1));
    pva_nom_fichr :=
      substr (pva_url,
              instr (pva_url,
                     '/',
                     -1) +
              1);

    pva_extns :=
      substr (pva_url,
              instr (pva_url,
                     '.',
                     -1) +
              1);
  end formt_url_fichr;

  procedure ecrir_item_input (p_item in t_page_item,
                              p_plugin in t_plugn,
                              pva_value in varchar2,
                              pva_type_input in varchar2,
                              pvc_clas_css in apex_application_global.vc_arr2,
                              pva_place_holdr in varchar2 default null,
                              pnu_nombr_reslt in number default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('input/',
                               'type',
                               pva_type_input,
                               'id',
                               p_item.name,
                               'name',
                               apex_plugin.get_input_name_for_page_item (false),
                               'value',
                               pva_value,
                               'class',
                               sie_07_util_pkg.table_to_string (pvc_clas_css,
                                                                ' '),
                               'size',
                               p_item.element_width,
                               'maxlength',
                               p_item.element_max_length,
                               'height',
                               p_item.element_height,
                               case when pva_place_holdr is not null then 'placeholder' else null end,
                               pva_place_holdr,
                               case when pnu_nombr_reslt is not null then 'results' else null end,
                               pnu_nombr_reslt,
                               pva_extra                  => p_item.element_attributes);
  end ecrir_item_input;

  procedure ecrir_item_input_lectr_seule (p_item in t_page_item,
                                          p_plugin in t_plugn,
                                          pva_value in varchar2,
                                          pvc_clas_css in apex_application_global.vc_arr2) is
  begin
    sie_15_htp_pkg.ouvri_bals ('input/',
                               'type',
                               'hidden',
                               'id',
                               p_item.name,
                               'name',
                               apex_plugin.get_input_name_for_page_item (false),
                               'value',
                               pva_value,
                               'class',
                               sie_07_util_pkg.table_to_string (pvc_clas_css,
                                                                ' '),
                               'maxlength',
                               p_item.element_max_length,
                               pva_extra                  => p_item.element_attributes);

    sie_15_htp_pkg.ouvri_bals ('span',
                               'id',
                               p_item.name || '_DISPLAY',
                               'class',
                               'display_only');

    if p_item.escape_output then
      sie_15_htp_pkg.ecrir (htf.escape_sc (pva_value));
    else
      sie_15_htp_pkg.ecrir (pva_value);
    end if;

    sie_15_htp_pkg.fermr_bals ('span');
  end ecrir_item_input_lectr_seule;

  procedure ecrir_item_input_mode_imprs (p_item in t_page_item,
                                         p_plugin in t_plugn,
                                         pva_value in varchar2) is
  begin
    sie_15_htp_pkg.ouvri_bals ('span',
                               'id',
                               p_item.name || '_DISPLAY',
                               'class',
                               'display_only');

    sie_15_htp_pkg.ecrir (apex_plugn_util.escape (pva_value,
                                                  p_item.escape_output));

    sie_15_htp_pkg.fermr_bals ('span');
  end ecrir_item_input_mode_imprs;

  --Deprecated
  procedure ecrir_item_input_popup_arbor (p_item in t_page_item,
                                          p_plugin in t_plugn,
                                          pva_value in varchar2,
                                          pva_type_input in varchar2,
                                          pvc_clas_css_input in apex_application_global.vc_arr2,
                                          pva_logo_ouvr_popup in varchar2,
                                          pvc_clas_css_logo_ouvr_popup in apex_application_global.vc_arr2) is
    vva_display_value                       varchar2 (4000);
    --vnu_seqnc_popup_lov_ir   vd_sie_14_popup_lov_ir.seqnc%type;
    vnu_numr_aplic_apex                     vd_sie_13_page.app_id_formt%type;
    vnu_numr_page_apex                      vd_sie_13_page.numr_apex%type;
    vva_actio_onclc                         varchar2 (1000);
    vva_contx                               varchar2 (200);
    vva_mode_gestn                          varchar2 (23);
  begin
    vva_mode_gestn := p_item.attribute_03;

    -- item cache qui contient generalement la sequence
    sie_15_htp_pkg.ouvri_bals ('input/',
                               'type',
                               'hidden',
                               'id',
                               p_item.name || '_HIDDENVALUE',
                               'name',
                               apex_plugin.get_input_name_for_page_item (false),
                               'value',
                               pva_value,
                               'class',
                               sie_07_util_pkg.table_to_string (pvc_clas_css_input,
                                                                ' '),
                               'size',
                               p_item.element_width,
                               'maxlength',
                               p_item.element_max_length,
                               'height',
                               p_item.element_height,
                               pva_extra                  => p_item.element_attributes);


    sie_15_htp_pkg.ouvri_bals ('fieldset',
                               'id',
                               p_item.name || '_fieldset',
                               'class',
                               'lov');

    sie_15_htp_pkg.ouvri_bals ('table',
                               'cellspacing',
                               '0',
                               'cellpadding',
                               '0',
                               'border',
                               '0',
                               'id',
                               p_item.name || '_holder',
                               'class',
                               'lov',
                               'summary',
                               '');

    sie_15_htp_pkg.ouvri_bals ('tbody');

    sie_15_htp_pkg.ouvri_bals ('tr');

    sie_15_htp_pkg.ouvri_bals ('td',
                               'class',
                               'lov');

    vva_display_value :=
      apex_plugn_util.get_display_data (p_sql_statement            => p_item.lov_definition,
                                        p_min_columns              => 1,
                                        p_max_columns              => 2,
                                        p_component_name           => p_item.name,
                                        p_display_column_no        => 1,
                                        p_search_column_no         => 2,
                                        p_search_string            => pva_value,
                                        p_display_extra            => true,
                                        p_support_legacy_lov       => false);

    sie_15_htp_pkg.ouvri_bals (
      'input/',
      'type',
      pva_type_input,
      'id',
      p_item.name,
      'value',
      vva_display_value,
      'class',
      sie_07_util_pkg.table_to_string (pvc_clas_css_input,
                                       ' '),
      'size',
      p_item.element_width,
      'maxlength',
      p_item.element_max_length,
      'height',
      p_item.element_height,
      pva_extra                  => 'disabled="disabled" onfocus="this.blur();" ' || p_item.element_attributes
    );

    sie_15_htp_pkg.fermr_bals ('td');
    sie_15_htp_pkg.ouvri_bals ('td');

    case
      when vva_mode_gestn in ('SIMPL', 'AVANC') then
        --On prend les configurations au niveau de l'item
        vnu_numr_aplic_apex := p_item.attribute_08;
        vnu_numr_page_apex := p_item.attribute_02;

        select   '::::SCPI,SSPI:ITEM,' || pi.seqnc
          into   vva_contx
          from   vd_sie_13_page_item pi,
                 vd_sie_13_page p
         where   pi.nom_apex = p_item.name and pi.ref_page = p.seqnc and p.seqnc = sie_13_page_pkg.obten_page_sesn;
      when vva_mode_gestn = 'APEXF' then
        --On prend les configurations au niveau d'APEXFramework (SIE 14)
        /*select pli.seqnc,
               p2.numr_apex,
               p.app_id_formt,
               '::::SCPI,SSPI:ITEM,' || pi.seqnc
        into vnu_seqnc_popup_lov_ir,
             vnu_numr_page_apex,
             vnu_numr_aplic_apex,
             vva_contx
        from vd_sie_14_popup_lov_ir pli,
             vd_sie_13_page_item pi,
             vd_sie_13_page p,
             vd_sie_13_page p2
        where     pli.ref_page_item = pi.seqnc
              and pi.nom_apex = p_item.name
              and pi.ref_page = p.seqnc
              and p.seqnc = sie_13_page_pkg.obten_page_sesn
              and pli.ref_page = p2.seqnc;*/
        null;
      else
        null;
    end case;

    vva_actio_onclc :=
         'sie_PopUp(''f?p='
      || vnu_numr_aplic_apex
      || ':'
      || vnu_numr_page_apex
      || ':'
      || sie_07_util_pkg.nv ('SESSION')
      || vva_contx
      || ''', '''', '
      || p_item.attribute_06
      || ', '
      || p_item.attribute_07
      || ');';
    sie_15_htp_pkg.ouvri_bals ('a',
                               'href',
                               '#',
                               'onclick',
                               vva_actio_onclc);
    sie_15_htp_pkg.ouvri_bals ('img/',
                               'src',
                               pva_logo_ouvr_popup,
                               'class',
                               sie_07_util_pkg.table_to_string (pvc_clas_css_logo_ouvr_popup,
                                                                ' '),
                               pva_extra                  => p_item.element_attributes);
    sie_15_htp_pkg.fermr_bals ('a');
    sie_15_htp_pkg.fermr_bals ('td');
    sie_15_htp_pkg.fermr_bals ('tr');
    sie_15_htp_pkg.fermr_bals ('tbody');
    sie_15_htp_pkg.fermr_bals ('table');
    sie_15_htp_pkg.fermr_bals ('fieldset');
  end ecrir_item_input_popup_arbor;

  function obten_actio_dynmq_elemn_afect (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return varchar2 is
    vva_elemn_afect                         apex_actio_dynmq_actio.affected_elements%type;
  begin
    select   aada.affected_elements
      into   vva_elemn_afect
      from   apex_actio_dynmq_actio aada
     where   aada.id = pnu_actio_dynmq;

    return vva_elemn_afect;
  end obten_actio_dynmq_elemn_afect;

  function obten_actio_dynmq_elemn_decln (pnu_actio_dynmq in apex_actio_dynmq_actio.id%type)
    return varchar2 is
    vva_elemn_decln                         apex_actio_dynmq_evenm.triggering_element%type;
  begin
    select   aade.triggering_element
      into   vva_elemn_decln
      from   apex_actio_dynmq_evenm aade,
             apex_actio_dynmq_actio aada
     where   aade.id = aada.event_id and aada.id = pnu_actio_dynmq;

    return vva_elemn_decln;
  end obten_actio_dynmq_elemn_decln;

  function obten_reslt_expre_plsql (pva_expre_plsql in varchar2)
    return varchar2 is
  begin
    return apex_plugn_util.get_plsql_expression_result (pva_expre_plsql);
  end obten_reslt_expre_plsql;


  function formt_plugn_atrib_boln (pva_atrib_boln in varchar2)
    return boolean is
    vbo_valr_formt                          boolean default true;
  begin
    return case pva_atrib_boln when 'N' then false else true end;
  end formt_plugn_atrib_boln;

  function obten_tabl_javsc_liste_items (pva_liste_items in varchar2,
                                         pva_seprt in varchar2 default ',')
    return varchar2 is
    vvc_items                               apex_application_global.vc_arr2;
    vva_tabl_javsc                          varchar2 (32767);
  begin
    vvc_items :=
      sie_07_util_pkg.string_to_table (pva_liste_items,
                                       pva_seprt);

    vva_tabl_javsc := '[';

    if vvc_items.count > 0 then
      for i in 1 .. vvc_items.count loop
        vva_tabl_javsc := vva_tabl_javsc || '"' || vvc_items (i) || '",';
      end loop;
    end if;

    vva_tabl_javsc :=
         rtrim (vva_tabl_javsc,
                ',')
      || ']';

    return vva_tabl_javsc;
  end obten_tabl_javsc_liste_items;

  function ajout_atrib_tabl_javsc (pva_nom_atrib in varchar2,
                                   pva_tabl_javsc in varchar2,
                                   pbo_pas_afich_si_nul in boolean default true,
                                   pbo_afich_virgl in boolean default true)
    return varchar2 is
    pva_atrib                               varchar2 (32767);
  begin
    if not (pbo_pas_afich_si_nul
        and (pva_tabl_javsc is null
          or pva_tabl_javsc = '[]')) then
      pva_atrib := '"' || pva_nom_atrib || '":' || pva_tabl_javsc;
    end if;

    return    pva_atrib
           || case
                when pbo_pas_afich_si_nul and pva_atrib is null and pbo_afich_virgl then null
                when pbo_afich_virgl then ','
                else null
              end;
  end ajout_atrib_tabl_javsc;

  procedure ecrir_json_ereur (pva_sourc in varchar2,
                              pva_code in varchar2,
                              pva_mesg in varchar2) is
  begin
    --source = plugin
    --code = internal ou user
    --mesg =

    sie_15_htp_pkg.ecrir ('{ereur:{"sourc":"","code":"","mesg":""}}',
                          false);
  end ecrir_json_ereur;
end sie_21_util_pkg;
/

Prompt Package Body SIE_23_RECHR_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_23_RECHR_PKG" as
  type typ_rec_mot is record
  (
    mot                                     varchar2 (100),
    seqnc_mot                               number (10)
  );

  type typ_tab_mot is table of typ_rec_mot
                        index by pls_integer;

  type typ_rec_reslt_trouv is record
  (
    vnu_seqnc                               number (10),
    vva_atrib                               varchar2 (100)
  );

  type typ_tab_reslt is table of typ_rec_reslt_trouv
                          index by pls_integer;

  procedure purgr_rechr (pnu_utils in number default null,
                         pnu_rechr in number default null) is
  begin
    if pnu_utils is not null then
      if pnu_rechr is not null then
        delete from   vd_sie_23_rechr cascade
              where   seqnc = pnu_rechr and ref_utils = pnu_utils;
      --TODO: LAVVA corriger les autres traitements de la procédure
      --else
      --delete from vd_sie_23_rechr cascade
      -- where  ref_utils = pnu_utils;
      end if;
    --else
    --effacement de toutes les recherches
    --delete from vd_sie_23_rechr cascade;
    end if;
  end purgr_rechr;

  function obten_enonc_rechr (pnu_rechr in number)
    return varchar2 is
    vva_enonc_rechr                         varchar (30);

    cursor cur_enonc_rechr is
      select   mot,
               seqnc
        from   vd_sie_23_enonc_rechr
       where   ref_rechr = pnu_rechr;
  begin
    for rec_enonc_rechr in cur_enonc_rechr loop
      vva_enonc_rechr := vva_enonc_rechr || ' ' || rec_enonc_rechr.mot || ' ';
    end loop;

    return vva_enonc_rechr;
  end obten_enonc_rechr;

  function calcl_pertn_ligne_rechr (pnu_rechr in number,
                                    pnu_seqnc_struc_aplic in number)
    return number is
    vnu_pertn_calcl                         number (5, 2);

    cursor cur_detl_reslt_rechr is
      select     drr.dnr_pertn
          from   vd_sie_23_detl_reslt_rechr drr
         where   drr.ref_rechr = pnu_rechr and drr.ref_seqnc_struc_aplic = pnu_seqnc_struc_aplic
      order by   dnr_pertn desc;
  begin
    for rec_detl_reslt in cur_detl_reslt_rechr loop
      if vnu_pertn_calcl is null then
        vnu_pertn_calcl := rec_detl_reslt.dnr_pertn;
      else
        if vnu_pertn_calcl = 100 then
          exit;
        end if;

        --On utilise la plus grande pertinence, et on ajoute le prorata des pertinences trouves
        --des résultats subséquents selon le manque à gagner entre la pertinence actuelle et 100%
        vnu_pertn_calcl := vnu_pertn_calcl + ( (rec_detl_reslt.dnr_pertn * (100 - vnu_pertn_calcl)) / 100);
      end if;
    end loop;

    return vnu_pertn_calcl;
  end calcl_pertn_ligne_rechr;

  procedure creer_ocurn_reslt_rechr (pnu_rechr in number) is
    vva_libl_struc_aplic                    varchar2 (4000);
    vva_libl_struc_aplic_html               varchar2 (4000);
    vva_lien                                varchar2 (100);
    --vva_mot                     varchar2 (30);
    vva_surbr                               varchar2 (100) default 'style="background-color:yellow;"';
    vnu_struc                               number (10) default 0;
    vnu_numr_aplic_apex                     number (10) default null;
    vnu_page_apex                           number (10) default null;

    cursor cur_reslt_rechr is
      select     rr.seqnc,
                 rr.dnr_ref_struc_aplic,
                 rr.ref_seqnc_struc_aplic,
                 rr.ref_aplic_modl_rechr
          from   vd_sie_23_reslt_rechr rr
         where   rr.ref_rechr = pnu_rechr
      order by   dnr_ref_struc_aplic;

    vnu_seqnc_reslt                         number (10);
    vnu_ref_struc_aplic                     number (10);
    vnu_seqnc_struc_aplic                   number (10);
    vnu_aplic_modl_rechr                    number (10);
    vnu_decmp                               number (4);
    vnu_pertn                               number (5, 2);
    vnu_atrib                               number (10);
  begin
    insert into   vd_sie_23_reslt_rechr (ref_seqnc_struc_aplic, ref_aplic_modl_rechr, dnr_ref_struc_aplic, ref_rechr)
      select   distinct drr.ref_seqnc_struc_aplic,
                        damr.ref_aplic_modl_rechr,
                        amr.ref_struc_aplic_rechr,
                        pnu_rechr
        from   vd_sie_23_detl_reslt_rechr drr,
               vd_sie_23_detl_aplic_modl_re damr,
               vd_sie_23_aplic_modl_rechr amr
       where   drr.ref_rechr = pnu_rechr
           and damr.seqnc = drr.ref_detl_aplic_modl_rechr
           and amr.seqnc = damr.ref_aplic_modl_rechr;


    open cur_reslt_rechr;

    loop
      fetch cur_reslt_rechr
      into vnu_seqnc_reslt, vnu_ref_struc_aplic, vnu_seqnc_struc_aplic, vnu_aplic_modl_rechr;

      exit when cur_reslt_rechr%notfound;


      vnu_pertn :=
        calcl_pertn_ligne_rechr (pnu_rechr,
                                 vnu_seqnc_struc_aplic);



      select   amr.ref_atrib_struc_aplic_afich
        into   vnu_atrib
        from   vd_sie_23_aplic_modl_rechr amr
       where   amr.seqnc = vnu_aplic_modl_rechr;

      vva_lien :=
        sie_12_struc_aplic_pkg.obten_url_acces (pnu_seqnc_struc            => vnu_ref_struc_aplic,
                                                pnu_sspc                   => vnu_seqnc_struc_aplic,
                                                pva_valr_sess              => '&SESSION.',
                                                pva_valr_sidf              => '#SIDF#');

      vva_libl_struc_aplic :=
        sie_12_struc_aplic_cu_pkg.obten_valr_atrib_formt (vnu_atrib,
                                                          vnu_seqnc_struc_aplic);
      --TODO: LAVVA: Surbrillance
      /* if vva_libl_struc_aplic_html is null then
                          vva_libl_struc_aplic_html :=
          replace (vva_libl_struc_aplic,
                   vva_mot,
                   '<span ' || vva_surbr || '>' || vva_mot || '</span>');
      else
        vva_libl_struc_aplic_html :=
          replace (vva_libl_struc_aplic_html,
                   vva_mot,
                   '<span ' || vva_surbr || '>' || vva_mot || '</span>');
      end if;*/
      vva_libl_struc_aplic_html := vva_libl_struc_aplic;

      select   count (rr.seqnc)
        into   vnu_decmp
        from   vd_sie_23_reslt_rechr rr
       where   rr.ref_rechr = pnu_rechr and rr.dnr_ref_struc_aplic = vnu_ref_struc_aplic;

      --Update des dnr des résultats
      update   vd_sie_23_reslt_rechr rr
         set   rr.dnr_decmp_reslt = vnu_decmp,
               rr.dnr_libl_struc_aplic = vva_libl_struc_aplic,
               rr.dnr_libl_struc_aplic_html = vva_libl_struc_aplic_html,
               rr.dnr_lien = vva_lien,
               rr.dnr_pertn = vnu_pertn
       where   rr.ref_rechr = pnu_rechr
           and rr.dnr_ref_struc_aplic = vnu_ref_struc_aplic
           and rr.ref_seqnc_struc_aplic = vnu_seqnc_struc_aplic;

      --Update ref_reslt_rechr
      update   vd_sie_23_detl_reslt_rechr drr
         set   drr.ref_reslt_rechr = vnu_seqnc_reslt
       where   drr.ref_rechr = pnu_rechr and drr.ref_seqnc_struc_aplic = vnu_seqnc_struc_aplic;
    end loop;

    close cur_reslt_rechr;
  end creer_ocurn_reslt_rechr;

  function est_date (pda_date in varchar)
    return date is
  begin
    return to_date (pda_date,
                    'YYYY-MM-DD');
  exception
    when others then
      return null;
  end est_date;

  function est_nombr (pva_nombr in varchar2)
    return number is
  begin
    return to_char (pva_nombr,
                    '9999999');
  exception
    when others then
      return null;
  end est_nombr;

  function rechr_mot (pnu_rechr in number,
                      pnu_detl_aplic_modl_rechr in number,
                      pnu_enonc_rechr in number,
                      pnu_nombr_max_reslt number)
    return number is
    vva_nom_atrib                           varchar2 (30);
    vva_opert                               varchar2 (10);
    vva_code                                varchar2 (30);
    vva_enonc_gauch                         varchar2 (200);
    vva_enonc_droit                         varchar2 (200);
    vva_nom_struc_acces                     varchar2 (30);
    vva_mot                                 varchar2 (100);
    vnu_pertn                               number (3);
    vva_sql                                 varchar2 (32767);
    vnu_nombr_restl                         pls_integer;
  begin
    select   pr.opert,
             pr.code,
             pr.enonc_plsql_gauch,
             pr.enonc_plsql_droit,
             asa.nom_coln,
             sa.nom_struc_acces_don,
             damr.pertn
      into   vva_opert,
             vva_code,
             vva_enonc_gauch,
             vva_enonc_droit,
             vva_nom_atrib,
             vva_nom_struc_acces,
             vnu_pertn
      from   vd_sie_23_patrn_rechr pr,
             vd_sie_23_detl_aplic_modl_re damr,
             vd_sie_12_atrib_struc_aplic asa,
             vd_sie_12_struc_aplic sa
     where   pr.seqnc = damr.ref_patrn_rechr
         and damr.seqnc = pnu_detl_aplic_modl_rechr
         and damr.ref_atrib_struc_aplic = asa.seqnc
         and asa.ref_struc_aplic = sa.seqnc;

    --Obtenir le mot
    select   mot
      into   vva_mot
      from   vd_sie_23_enonc_rechr en
     where   en.seqnc = pnu_enonc_rechr;

    vva_sql :=
      'insert into vd_sie_23_detl_reslt_rechr(ref_rechr,ref_enonc_rechr,ref_detl_aplic_modl_rechr, ref_seqnc_struc_aplic) ';
    vva_sql := vva_sql || 'select :pnu_rechr, :pnu_enonc_rechr, :pnu_detl_aplic_modl_rechr, sa.seqnc ';
    vva_sql := vva_sql || ' from ' || vva_nom_struc_acces || ' sa ';

    --Batir le filtre de recherche gauche (la référence à la colonne recherchée)
    vva_sql :=
         vva_sql
      || 'where '
      || replace (vva_enonc_gauch,
                  '#-VG-#',
                  'sa.' || vva_nom_atrib)
      || ' ';

    --Batir le filtre de recherche droit (la référence au mot saisi)
    vva_sql :=
         vva_sql
      || vva_opert
      || ' '
      || replace (vva_enonc_droit,
                  '#-VD-#',
                  ':vva_mot')
      || ' ';

    --Batir la non existence dans la table de résultats
    vva_sql :=
      vva_sql || 'and not exists(select 1 from vd_sie_23_detl_reslt_rechr drr where  drr.ref_rechr = :pnu_rechr and ';
    vva_sql :=
         vva_sql
      || 'drr.ref_detl_aplic_modl_rechr = :pnu_detl_aplic_modl_rechr and drr.ref_enonc_rechr = :pnu_enonc_rechr and drr.ref_seqnc_struc_aplic = sa.seqnc) ';

    --Batir le nombre maximal de rangées trouvées
    vva_sql := vva_sql || 'and rownum <= :pnu_nombr_max_reslt ';

    --Exécuter la recherche
    if (vva_code = 'NOMBR' and est_nombr (vva_mot) is not null)
    or (vva_nom_struc_acces = 'VD_TELPH' and est_nombr (vva_mot) is not null)
    or (vva_code = 'DATE' and est_date (vva_mot) is not null)
    or vva_code not in ('NOMBR', 'DATE') and vva_nom_struc_acces != 'VD_TELPH' then
      execute immediate vva_sql
        using pnu_rechr,
              pnu_enonc_rechr,
              pnu_detl_aplic_modl_rechr,
              vva_mot,
              pnu_rechr,
              pnu_detl_aplic_modl_rechr,
              pnu_enonc_rechr,
              pnu_nombr_max_reslt;
    end if;

    --update du dnr_pertn
    update   vd_sie_23_detl_reslt_rechr
       set   dnr_pertn = vnu_pertn
     where   ref_rechr = pnu_rechr
         and ref_detl_aplic_modl_rechr = pnu_detl_aplic_modl_rechr
         and ref_enonc_rechr = pnu_enonc_rechr;

    vnu_nombr_restl := sql%rowcount;

    return vnu_nombr_restl;
  end rechr_mot;

  procedure exect_rechr (pva_valr_rechr in varchar2,
                         pnu_modl in number default 25820) is
    vta_mot                                 typ_tab_mot;
    vnu_utils                               number (10);
    vda_date_jour                           date;
    vnu_seqnc_rechr                         number (10);
    vnu_modl_rechr                          number (10) default pnu_modl;
    vnu_nombr_mot                           number (2);
    vnu_reslt_trouv                         number (10);
    vnu_postn                               number (3);
    vva_valr_rechr                          varchar2 (1000);
    vnu_aplic                               number (10);
    vva_schem_rechr                         varchar2 (10);
    vva_schem_courn                         varchar2 (10);

    --Curseur des détails d'aplication du modèle de recherche
    cursor cur_detl_aplic_modl (pnu_aplic_modl_rechr in number) is
      select     damr.seqnc,
                 damr.ref_aplic_modl_rechr,
                 damr.ref_atrib_struc_aplic,
                 damr.ref_patrn_rechr,
                 damr.ordre_exect,
                 damr.pertn
          from   vd_sie_23_detl_aplic_modl_re damr
         where   damr.ref_aplic_modl_rechr = pnu_aplic_modl_rechr
      order by   damr.pertn desc;

    --Curseur des application du modèle de recherche
    cursor cur_aplic_modl is
      select   amd.seqnc,
               amd.ref_modl_rechr,
               amd.ref_struc_aplic_rechr,
               amd.nombr_maxim_reslt
        from   vd_sie_23_aplic_modl_rechr amd
       where   amd.ref_modl_rechr = pnu_modl;
  begin
    --Enlever les espaces à la fin de l'énoncé afin de s'assurer que celui-ci ne soit pas seulement des espaces
    vva_valr_rechr := trim (pva_valr_rechr);

    if vva_valr_rechr is not null then
      vnu_utils := sie_12_utils_pkg.obten_usagr_conct;
      vda_date_jour := sysdate;

      insert into   vd_sie_23_rechr (ref_utils, date_exect, ref_modl_rechr)
           values   (vnu_utils,
                     vda_date_jour,
                     vnu_modl_rechr)
        returning   seqnc
             into   vnu_seqnc_rechr;

      vnu_nombr_mot := 0;

      while vva_valr_rechr is not null loop
        vnu_postn :=
          instr (vva_valr_rechr,
                 ' ');

        --Gérer le cas d'un seul mot restant (donc pas d'espace)
        if length (vva_valr_rechr) > 0 and vnu_postn = 0 then
          vnu_postn := length (vva_valr_rechr) + 1;
        end if;

        vnu_nombr_mot := vnu_nombr_mot + 1;

        vta_mot (vnu_nombr_mot).mot :=
          substr (vva_valr_rechr,
                  1,
                  vnu_postn - 1);

        -- Creer l'occurence enonc_rechr
        insert into   vd_sie_23_enonc_rechr (ref_rechr, mot, ordre_apart)
             values   (vnu_seqnc_rechr,
                       vta_mot (vnu_nombr_mot).mot,
                       vnu_nombr_mot)
          returning   seqnc
               into   vta_mot (vnu_nombr_mot).seqnc_mot;

        vva_valr_rechr :=
          trim (substr (vva_valr_rechr,
                        vnu_postn + 1));
      end loop;

      --S'assurer qu'il y ai un mot
      if vta_mot.count > 0 then
        for i in vta_mot.first () .. vta_mot.last () loop
          for rec_aplic_modl in cur_aplic_modl loop
            vnu_reslt_trouv := 0;

            for rec_detl_aplic in cur_detl_aplic_modl (rec_aplic_modl.seqnc) loop
              select   pg.ref_aplic
                into   vnu_aplic
                from   vd_sie_13_page pg,
                       vd_sie_12_struc_aplic sa
               where   sa.seqnc = rec_aplic_modl.ref_struc_aplic_rechr and pg.seqnc = sa.ref_page_liste and rownum = 1;

              --Obtenir le schema de la recherche
              vva_schem_rechr := sie_11_aplic_pkg.obten_schem (vnu_aplic);

              execute immediate 'alter session set current_schema = ' || vva_schem_rechr;

              if vnu_reslt_trouv < rec_aplic_modl.nombr_maxim_reslt then
                --Effectuer la recherche
                vnu_reslt_trouv :=
                  vnu_reslt_trouv +
                  rechr_mot (vnu_seqnc_rechr,
                             rec_detl_aplic.seqnc,
                             vta_mot (i).seqnc_mot,
                             rec_aplic_modl.nombr_maxim_reslt - vnu_reslt_trouv);
              else
                --Arrêter la recherche si le nombre de résultat trouvé atteind le nombre maximum de résultat
                exit;
              end if;
            end loop;
          end loop;
        end loop;

        creer_ocurn_reslt_rechr (vnu_seqnc_rechr);
        --Remmettre le schema actif de la session
        vva_schem_courn := sie_11_aplic_pkg.obten_schem (sie_11_aplic_pkg.obten_aplic_sesn);

        execute immediate 'alter session set current_schema = ' || vva_schem_courn;
      end if;
    end if;
  exception
    when others then
      raise;
  end exect_rechr;

  procedure exect_rechr_apex (pva_valr_rechr in varchar2) is
    vnu_modl_rechr                          number (10);
    vnu_seqnc_domn                          number (10);
  --vnu_systm number(10);

  begin
    vnu_seqnc_domn := sie_12_domn_pkg.obten_domn_sesn;

    select   seqnc
      into   vnu_modl_rechr
      from   vd_sie_23_modl_rechr
     where   ref_domn = vnu_seqnc_domn and code like '%DEFT';

    if vnu_modl_rechr is not null then
      --Lancer la recherche
      exect_rechr (pva_valr_rechr,
                   vnu_modl_rechr);
    end if;
  end exect_rechr_apex;

  function obten_enonc_rechr_formt (pnu_rechr in number)
    return varchar2 is
    vva_mot_courn                           varchar2 (30);
    vva_mot_retr                            varchar2 (200);

    cursor cur_mot is
      select   mot
        from   vd_i_sie_23_enonc_rechr er
       where   er.ref_rechr = pnu_rechr;
  begin
    open cur_mot;

    fetch cur_mot
    into vva_mot_courn;

    while cur_mot%found loop
      if vva_mot_retr is null then
        vva_mot_retr := '"' || vva_mot_courn || '"';
      else
        vva_mot_retr := vva_mot_retr || ', "' || vva_mot_courn || '"';
      end if;

      fetch cur_mot
      into vva_mot_courn;
    end loop;

    close cur_mot;

    return vva_mot_retr;
  end obten_enonc_rechr_formt;

  function obten_prodt_rechr (pnu_rechr in number)
    return number is
    vnu_prodt                               number (10);
  begin
    select   mr.ref_prodt
      into   vnu_prodt
      from   vd_sie_23_rechr r,
             vd_sie_23_modl_rechr mr
     where   r.seqnc = pnu_rechr and mr.seqnc = r.ref_modl_rechr and rownum = 1;

    return vnu_prodt;
  exception
    when no_data_found then
      return null;
  end;

  function obten_lien_formt (pva_lien_non_formt in varchar2)
    return varchar2 is
  begin
    return sie_07_util_pkg.multi_replc (pva_lien_non_formt,
                                        '&SESSION.',
                                        sie_08_url_pkg.knu_sesn,
                                        '#SIDF#',
                                        sie_08_url_pkg.knu_sidf);
  end obten_lien_formt;

  procedure ajout_modl_rechr_domn (pnu_modl_rechr_sourc in vd_sie_23_modl_rechr.seqnc%type,
                                   pnu_domn_cible in vd_sie_12_domn.seqnc%type) is
    cursor cur_aplic_modl_rechr is
      select   seqnc,
               ref_modl_rechr,
               ref_struc_aplic_rechr,
               ref_struc_aplic_lien,
               nombr_maxim_reslt,
               ref_atrib_struc_aplic_afich
        from   vd_sie_23_aplic_modl_rechr amr
       where   amr.ref_modl_rechr = pnu_modl_rechr_sourc;

    cursor cur_detl_amr (pnu_amr in number) is
      select   seqnc,
               ref_aplic_modl_rechr,
               ref_atrib_struc_aplic,
               ref_patrn_rechr,
               ordre_exect,
               pertn
        from   vd_sie_23_detl_aplic_modl_re damr
       where   damr.ref_aplic_modl_rechr = pnu_amr;

    vnu_seqnc                               vd_sie_23_modl_rechr.seqnc%type;
    vnu_seqnc_aplic                         vd_sie_23_aplic_modl_rechr.seqnc%type;
  begin
    vnu_seqnc := sie_23_modl_rechr_seq.nextval;

    insert into   vd_sie_23_modl_rechr (seqnc, code, ref_domn, nom, descr, ref_prodt, dnr_ref_prodt)
      select   vnu_seqnc,
               code,
               pnu_domn_cible,
               nom,
               descr,
               ref_prodt,
               dnr_ref_prodt
        from   vd_sie_23_modl_rechr
       where   seqnc = pnu_modl_rechr_sourc;

    for rec_amr in cur_aplic_modl_rechr loop
      vnu_seqnc_aplic := sie_23_aplic_modl_rechr_seq.nextval;

      insert into   vd_sie_23_aplic_modl_rechr (seqnc,
                                                ref_modl_rechr,
                                                ref_struc_aplic_rechr,
                                                ref_struc_aplic_lien,
                                                nombr_maxim_reslt,
                                                ref_atrib_struc_aplic_afich)
        select   vnu_seqnc_aplic,
                 vnu_seqnc,
                 ref_struc_aplic_rechr,
                 ref_struc_aplic_lien,
                 nombr_maxim_reslt,
                 ref_atrib_struc_aplic_afich
          from   vd_sie_23_aplic_modl_rechr
         where   seqnc = rec_amr.seqnc;

      for rec_damr in cur_detl_amr (rec_amr.seqnc) loop
        insert into   vd_sie_23_detl_aplic_modl_re (ref_aplic_modl_rechr,
                                                    ref_atrib_struc_aplic,
                                                    ref_patrn_rechr,
                                                    ordre_exect,
                                                    pertn)
          select   vnu_seqnc_aplic,
                   ref_atrib_struc_aplic,
                   ref_patrn_rechr,
                   ordre_exect,
                   pertn
            from   vd_sie_23_detl_aplic_modl_re
           where   seqnc = rec_damr.seqnc;
      end loop;
    end loop;
  end ajout_modl_rechr_domn;
end sie_23_rechr_pkg;
/

Prompt Package Body SIE_24_NAVBR_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_24_navbr_pkg as
  function obten_enreg_confg_plugn (pnu_numr_apex_regn in number)
    return typ_rec_confg_plugn is
    cursor cur_plugn_menu is
      select   pm.seqnc,
               ref_dv_type_menu_code,
               ref_dv_orien_menu_code,
               ref_dv_coulr_theme_code,
               ref_dv_coulr_princ_code,
               ref_dv_formt_menu_code,
               ref_menu
        from   vd_sie_21_plugn_menu pm,
               apex_regn ar
       where   ar.attribute_01 = pm.code
           and ar.id = pnu_numr_apex_regn
           and ar.flow_id in (select   numr_aplic_apex
                                from   vd_sie_11_aplic
                               where   ref_prodt = pm.ref_prodt)
           and sie_12_menu_pkg.obten_menu_actif is null
            or sie_12_menu_pkg.obten_menu_actif is not null and sie_12_menu_pkg.obten_menu_actif = pm.seqnc;

    rec_confg_plugn                         typ_rec_confg_plugn;
  begin
    open cur_plugn_menu;

    fetch cur_plugn_menu
    into rec_confg_plugn;

    close cur_plugn_menu;

    return rec_confg_plugn;
  end obten_enreg_confg_plugn;

  function obten_enreg_confg_plugn_item (pnu_plugn_menu in number,
                                         pnu_item_menu in number)
    return typ_rec_confg_plugn_item is
    rec_confg_plugn_item                    typ_rec_confg_plugn_item;

    cursor cur_plugn_item_menu is
      select   pim.seqnc,
               clas_css_racn,
               clas_css_elemn,
               etend_nombr_coln,
               ref_item_menu,
               ref_plugn_menu,
               ref_dv_align_valr_organ
        from   vd_sie_21_plugn_item_menu pim
       where   pim.ref_plugn_menu = pnu_plugn_menu and pim.ref_item_menu = pnu_item_menu;
  begin
    open cur_plugn_item_menu;

    fetch cur_plugn_item_menu
    into rec_confg_plugn_item;

    close cur_plugn_item_menu;

    return rec_confg_plugn_item;
  end obten_enreg_confg_plugn_item;

  function obten_plugn_menu (pva_code_prodt in vd_i_sie_11_prodt.code%type,
                             pva_code_menu in vd_i_sie_21_plugn_menu.code%type)
    return number is
    vnu_seqnc                               vd_i_sie_21_plugn_menu.seqnc%type;
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_21_plugn_menu
     where   ref_prodt = sie_11_prodt_pkg.obten_prodt (pva_code_prodt) and code = pva_code_menu;

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_plugn_menu;

  function genr_reqt_sql (pty_rec_confg_plugn in typ_rec_confg_plugn)
    return varchar2 is
    vva_reqt                                varchar2 (4000);
  begin
    vva_reqt :=
         'select seqnc,
                        libl label,
                        sie_13_menu_pkg.obten_url_cible(im.seqnc) target,
                        sie_13_menu_pkg.obten_etat_libl(im.seqnc) is_current
                   from vd_sie_13_item_menu im
                  where ref_menu = '
      || pty_rec_confg_plugn.ref_menu
      || '
                    and sie_13_menu_pkg.verfr_droit_acces(im.seqnc) = 1
                    and sie_13_menu_pkg.trait_condt_afich(im.seqnc)
                    and im.ref_item_menu is null
               order by im.ordre_presn';

    return vva_reqt;
  end genr_reqt_sql;

  procedure maj_plugn_item_menu (pnu_plugn_menu in number) is
  begin
    delete from   vd_i_sie_21_plugn_item_menu pim
          where   not exists
                    (select   1
                       from   vd_i_sie_13_item_menu im
                      where   im.seqnc = pim.ref_item_menu)
              and pim.ref_plugn_menu = pnu_plugn_menu;

    merge into   vd_i_sie_21_plugn_item_menu dest
         using   (select              level niv_item,
                                      im.seqnc ref_item_menu,
                                      pnu_plugn_menu ref_plugn_menu
                               from   vd_i_sie_13_item_menu im
                              where   ref_menu = (select   ref_menu
                                                    from   vd_i_sie_21_plugn_menu pm
                                                   where   pm.seqnc = pnu_plugn_menu)
                         start with   im.ref_item_menu is null
                         connect by   prior seqnc = ref_item_menu
                  order siblings by   im.ordre_presn) sourc
            on   (sourc.ref_item_menu = dest.ref_item_menu and sourc.ref_plugn_menu = dest.ref_plugn_menu)
    when matched then
      update set dest.niv_item = sourc.niv_item
    when not matched then
      insert       (ref_item_menu, ref_plugn_menu, niv_item)
          values   (sourc.ref_item_menu,
                    sourc.ref_plugn_menu,
                    sourc.niv_item);
  end maj_plugn_item_menu;

  procedure creer_entet is
  begin
    -- ul
    creer_liste_desrd ('nav navbar-nav');
  end creer_entet;

  procedure fermr_entet is
  begin
    --ul
    fermr_liste_desrd;
  end fermr_entet;

  procedure creer_sectn (pva_id in varchar2 default null,
                         pva_clas in varchar2 default null,
                         pva_align in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('div',
                               case when pva_id is not null then 'id' else null end,
                               pva_id,
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas || case when pva_align is not null then ' ' || pva_align else null end);
  end creer_sectn;

  procedure fermr_sectn is
  begin
    sie_15_htp_pkg.fermr_bals ('div');
  end fermr_sectn;

  procedure creer_liste (pva_clas in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('li',
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas);
  end creer_liste;

  procedure fermr_liste is
  begin
    sie_15_htp_pkg.fermr_bals ('li');
  end fermr_liste;

  procedure creer_liste_desrd (pva_clas in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('ul',
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas);
  end creer_liste_desrd;

  procedure fermr_liste_desrd is
  begin
    sie_15_htp_pkg.fermr_bals ('ul');
  end fermr_liste_desrd;

  procedure ecrir_lien (pva_libl in varchar2,
                        pva_clas in varchar2 default null,
                        pva_url_cible in varchar2 default null) is
  begin
    sie_15_htp_pkg.ouvri_bals ('a',
                               case when pva_clas is not null then 'class' else null end,
                               pva_clas,
                               case when pva_url_cible is not null then 'href' else null end,
                               pva_url_cible);
    sie_15_htp_pkg.ecrir (pva_libl);
    sie_15_htp_pkg.fermr_bals ('a');
  end ecrir_lien;

  procedure genr_elemn_no_drop (pva_libl in varchar2,
                                pva_url_cible in varchar2 default null) is
  begin
    -- li
    creer_liste ();
    -- a
    ecrir_lien (pva_libl,
                pva_url_cible              => pva_url_cible);
    -- li
    fermr_liste;
  end genr_elemn_no_drop;

  procedure creer_elemn_drop (pva_libl in varchar2,
                              pva_url_cible in varchar2 default null,
                              pva_clas_liste in varchar2 default null,
                              pva_align in varchar2 default null) is
  begin
    -- li
    creer_liste ('dropdown');
    -- a

    sie_15_htp_pkg.ouvri_bals ('a',
                               'class',
                               'dropdown-toggle',
                               case when pva_url_cible is not null then 'href' else null end,
                               pva_url_cible,
                               'data-toggle',
                               'dropdown');
    sie_15_htp_pkg.ecrir (pva_libl || '&nbsp;<b class="caret"></b>');
    sie_15_htp_pkg.fermr_bals ('a');
  end creer_elemn_drop;

  procedure fermr_elemn_drop is
  begin
    -- li
    fermr_liste;
  end fermr_elemn_drop;

  procedure creer_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item) is
  begin
    -- div
    creer_sectn (null,
                 pty_rec_plugn_item.clas_css_elemn);
  end creer_contn_item;

  procedure fermr_contn_item (pty_rec_plugn_item in typ_rec_confg_plugn_item) is
  begin
    -- div
    fermr_sectn;
  end fermr_contn_item;

  procedure genr_tabl (pty_rec_plugn_item in typ_rec_confg_plugn_item) is
    cursor cur_item_menu is
      select     seqnc,
                 null niv,
                 forml_libl,
                 sie_13_menu_pkg.obten_url_cible (im.seqnc) url_cible,
                 null est_actif
          from   vd_sie_13_item_menu im
         where   im.seqnc = pty_rec_plugn_item.ref_item_menu
      order by   ordre_presn;
  begin
    if sie_13_menu_pkg.verfr_enfan_exist (pty_rec_plugn_item.ref_item_menu) then
      -- ul
      creer_liste_desrd;

      for rec_im in cur_item_menu loop
        -- li
        creer_liste;

        -- a
        ecrir_lien (rec_im.forml_libl,
                    pva_url_cible              => rec_im.url_cible);

        -- ul
        --  li
        --    a
        --  li
        -- ul
        genr_tabl (obten_enreg_confg_plugn_item (pty_rec_plugn_item.ref_plugn_menu,
                                                 rec_im.seqnc));

        -- li
        fermr_liste;
      end loop;

      -- ul
      fermr_liste_desrd;
    end if;
  end genr_tabl;

  function obten_contn (pnu_plugn_item_menu in number)
    return varchar2 is
    vva_contn                               varchar2 (60);
  begin
    -- dropdown_1column
    -- dropdown_2columns
    -- null
    select   ref_dv_contn_im_valr_organ
      into   vva_contn
      from   vd_sie_21_plugn_item_menu
     where   seqnc = pnu_plugn_item_menu;

    return vva_contn;
  end obten_contn;

  function obten_align (pnu_plugn_item_menu in number)
    return varchar2 is
    vva_align                               varchar2 (60);
  begin
    -- align_right
    -- align_left
    select   ref_dv_align_valr_organ
      into   vva_align
      from   vd_sie_21_plugn_item_menu
     where   seqnc = pnu_plugn_item_menu;

    return vva_align;
  end obten_align;

  function obten_formt_menu (pnu_plugn_menu in number)
    return varchar2 is
    vva_formt                               varchar2 (60);
  begin
    -- wrapper_menu_full
    select   sie_14_domn_valr_pkg.obten_valr_organ (ref_dv_formt_menu)
      into   vva_formt
      from   vd_sie_21_plugn_menu
     where   seqnc = pnu_plugn_menu;

    return vva_formt;
  end obten_formt_menu;

  function obten_coulr_menu (pnu_plugn_menu in number)
    return varchar2 is
    vva_coulr                               varchar2 (60);
  begin
    -- menu_blue_sie
    select   sie_14_domn_valr_pkg.obten_valr_organ (ref_dv_coulr_princ)
      into   vva_coulr
      from   vd_sie_21_plugn_menu
     where   seqnc = pnu_plugn_menu;

    return vva_coulr;
  end obten_coulr_menu;

  function obten_usagr_formt_sesn
    return varchar2 is
    vva_utils                               varchar2 (200);
  begin
    return sie_12_utils_pkg.obten_nom_formt (sie_12_utils_pkg.obten_usagr_conct);
  end obten_usagr_formt_sesn;
end sie_24_navbr_pkg;
/

Prompt Package Body SIE_25_APPEL_RAPRT_APEX_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_APPEL_RAPRT_APEX_PKG" as
  --NOTE: Ajouter parametres pour serveur et port de telechargement du rapport
  --      puisque l'appel depuis le client et le serveur BD peuvent etre differents

  procedure exect_raprt (pva_indic_secrs varchar2,
                         pva_servr varchar2,
                         pnu_port number,
                         pva_chemn varchar2,
                         pva_parmt varchar2,
                         pva_faml_motr in varchar2 default 'reports') is
    vva_prefx_url                           varchar2 (2000);
    vva_url                                 varchar2 (2000);
    vnu_pos                                 number;
    vnu_id_raprt                            number;
    vnu_code_stat                           number default 1;

    vre_reqt                                utl_http.req;
    vre_repns                               utl_http.resp;
    vva_ligne                               varchar2 (2000);
    vnu_compt                               number;
  begin
    -- Etape 1. Construire l'URL pour commander l'execution
    vva_prefx_url :=
         'http'
      || case when pva_indic_secrs = 'O' then 's' else null end
      || '://'
      || pva_servr
      || ':'
      || nvl (pnu_port, 80)
      || pva_chemn;

    vva_url := vva_prefx_url || '?background=yes&statusformat=xml&' || pva_parmt;

    -- Etape 2. Demarrer l'execution
    begin
      vre_reqt := utl_http.begin_request (vva_url);
      utl_http.set_header (vre_reqt,
                           'User-Agent',
                           'Oracle UTL_HTTP');

      vre_repns := utl_http.get_response (vre_reqt);

      loop
        utl_http.read_line (vre_repns,
                            vva_ligne,
                            true);

        vnu_pos :=
          instr (vva_ligne,
                 '<job id="');

        if vnu_pos > 0 then
          vnu_id_raprt :=
            substr (vva_ligne,
                    vnu_pos + 9,
                    instr (vva_ligne,
                           '"',
                           1,
                           2) -
                    (vnu_pos + 9));
        end if;
      end loop;

      utl_http.end_response (vre_repns);
    exception
      when utl_http.end_of_body then
        utl_http.end_response (vre_repns);
    end;

    if vnu_id_raprt is null then
      raise_application_error (-20501,
                               'Erreur au demarrage du rapport');
    end if;

    -- Etape 3. Verifier le statut de l'execution
    vva_url := vva_prefx_url || '/showjobid' || vnu_id_raprt || '?statusformat=xml';

    vnu_compt := 0;

    while vnu_code_stat > 0 and vnu_code_stat < 4 loop
      dbms_lock.sleep (1);                                                                   -- Pause de 1/10 de seconde

      begin
        vre_reqt := utl_http.begin_request (vva_url);
        utl_http.set_header (vre_reqt,
                             'User-Agent',
                             'Oracle UTL_HTTP');

        vre_repns := utl_http.get_response (vre_reqt);
        vnu_code_stat := 0;

        loop
          utl_http.read_line (vre_repns,
                              vva_ligne,
                              true);

          vnu_pos :=
            instr (vva_ligne,
                   '<status code="');

          if vnu_pos > 0 then
            vnu_code_stat :=
              substr (vva_ligne,
                      vnu_pos + 14,
                      instr (vva_ligne,
                             '"',
                             1,
                             2) -
                      (vnu_pos + 14));
          end if;
        end loop;

        utl_http.end_response (vre_repns);
      exception
        when utl_http.end_of_body then
          utl_http.end_response (vre_repns);
      end;

      vnu_compt := vnu_compt + 1;
    end loop;

    if vnu_code_stat = 4 then
      -- Etape 4. Transmettre l'adresse du rapport produit
      vva_url := vva_prefx_url || '/getjobid' || vnu_id_raprt;
      /*owa_util.redirect_url (vva_url);
      sie_07_util_pkg.aret_trait_page_apex;*/

      sie_07_util_pkg.defnr_etat_sessn ('A_SIE25_URL_RAPRT',
                                        vva_url);
    elsif vnu_code_stat = 5 then
      raise_application_error (-20502,
                               'Le rapport a termine en echec.');
    else
      raise_application_error (-20503,
                               'Erreur a la verification du statut du rapport: ' || vnu_code_stat);
    end if;
  end exect_raprt;

  /*procedure genr_script_popup_raprt is
  begin
    --a = horizontal
    --e = vertical
    htp.prn('
    <script>
  $().ready(function(){
    html_PopUp("' ||
            sie_07_util_pkg.v ('A_SIE25_URL_RAPRT') ||
            '","_blank","800","600");
  });
</script>');
    sie_07_util_pkg.defnr_etat_sessn ('A_SIE25_URL_RAPRT',
                                      null);
  end genr_script_popup_raprt;*/

  procedure genr_script_popup_raprt is
  begin
    --a = horizontal
    --e = vertical
    htp.prn ('
    <script>
  $().ready(function(){
    document.location.href = "' || sie_07_util_pkg.v ('A_SIE25_URL_RAPRT') || '";
  });
</script>');
    sie_07_util_pkg.defnr_etat_sessn ('A_SIE25_URL_RAPRT',
                                      null);
  end genr_script_popup_raprt;

  procedure defnr_url_impre (pnu_page in number,
                             pva_reqst in varchar2) is
  begin
    sie_07_util_pkg.defnr_etat_sessn (
      'A_SIE25_URL_RAPRT',
      aa.do_substitutions ('f?p=&APP_ID.:' || pnu_page || ':&SESSION.:' || pva_reqst || ':::SIDF:&SIDF.')
    );
  end defnr_url_impre;

  procedure obten_raprt_pdf (pva_nom_raprt in varchar2,
                             pva_nom_parmt1 in varchar2,
                             pnu_parmt1 in number) is
    vva_prefx_url                           varchar2 (2000);
    vva_url                                 varchar2 (2000);
    vnu_pos                                 number;
    vnu_id_raprt                            number;
    vnu_code_stat                           number default 1;

    vre_reqt                                utl_http.req;
    vre_repns                               utl_http.resp;
    vva_ligne                               varchar2 (2000);
    vnu_compt                               number;
    vbl_raprt                               blob;
    vra_morc_raprt                          raw (2000);
  begin
    -- Etape 1. Construire l'URL pour commander l'execution
    vva_url := 'http://192.168.1.62:8080/birt-viewer/run?__report=report\test.rptdesign&__format=pdf';

    -- Etape 2. Demarrer l'execution
    dbms_lob.createtemporary (vbl_raprt,
                              true);

    begin
      vre_reqt := utl_http.begin_request (vva_url);
      utl_http.set_header (vre_reqt,
                           'User-Agent',
                           'Oracle UTL_HTTP');


      loop
        utl_http.read_raw (vre_repns,
                           vra_morc_raprt,
                           1000);
        dbms_lob.writeappend (vbl_raprt,
                              utl_raw.length (vra_morc_raprt),
                              vra_morc_raprt);
      end loop;
    exception
      when utl_http.end_of_body then
        utl_http.end_response (vre_repns);
    end;


    -- Etape 3. Verifier le statut de l'execution
    --sie_07_util_pkg.aret_trait_page_apex;
    owa_util.mime_header ('application/pdf',
                          false);
    htp.p ('Content-length: ' || dbms_lob.getlength (vbl_raprt));
    htp.p ('Content-Disposition: attachment; filename="test1.pdf"');

    owa_util.http_header_close;

    wpg_docload.download_file (vbl_raprt);
  --dbms_lob.freetemporary(vbl_raprt);
  /*
      if vnu_code_stat = 4 then
        -- Etape 4. Transmettre l'adresse du rapport produit
        vva_url := vva_prefx_url || '/getjobid' || vnu_id_raprt;
        /*owa_util.redirect_url (vva_url);
        sie_07_util_pkg.aret_trait_page_apex;*/
                                                   /*

  sie_07_util_pkg.defnr_etat_sessn ('A_SIE25_URL_RAPRT',
                                    vva_url);
elsif vnu_code_stat = 5 then
  raise_application_error (-20502,
                           'Le rapport a termine en echec.');
else
  raise_application_error (-20503,
                           'Erreur a la verification du statut du rapport: ' || vnu_code_stat);
end if;*/

  exception
    when others then
      raise;
  end obten_raprt_pdf;
end sie_25_appel_raprt_apex_pkg;
/

Prompt Package Body SIE_25_DOMN_TYPE_PUBLC_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_domn_type_publc_pkg is
  procedure ajout_domn_type_publc (pnu_domn in number,
                                   pnu_type in number) is
  begin
    insert into   vd_i_sie_25_domn_type_publc (ref_domn, ref_type_publc)
         values   (pnu_domn,
                   pnu_type);
  end ajout_domn_type_publc;

  procedure maj_domn_type_publc is
    cursor cur_domn is
      select   seqnc
        from   vd_i_sie_12_domn;

    cursor cur_type_publc is
      select   seqnc
        from   vd_i_sie_25_type_publc;
  begin
    for rec_domn in cur_domn loop
      for rec_type in cur_type_publc loop
        sie_25_domn_type_publc_pkg.ajout_domn_type_publc (rec_domn.seqnc,
                                                          rec_type.seqnc);
      end loop;
    end loop;
  end maj_domn_type_publc;

  procedure creat_domn_type_publc (pnu_domn_type_publc in number,
                                   pnu_domn_cible in number) is
  begin
    insert into   vd_sie_25_domn_type_publc (ref_domn, ref_type_publc, ref_publc)
      select   pnu_domn_cible,
               ref_type_publc,
               ref_publc
        from   vd_sie_25_domn_type_publc
       where   seqnc = pnu_domn_type_publc;
  end creat_domn_type_publc;
end sie_25_domn_type_publc_pkg;
/

Prompt Package Body SIE_25_FORMT_IR_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_formt_ir_pkg is
  function obten_bals_formt (pva_porte in varchar2,
                             pva_gras in varchar2,
                             pva_coulr in varchar2 default null)
    return varchar2 is
    vva_bals                                varchar2 (1000)
      default '<span style="font-weight:%gras%; portee:%porte%; display:none; color:%coulr%;" class="portee_%porte% font_weight_%gras% %font_coulr%"></span>';
  begin
    if sie_07_util_pkg.v ('REQUEST') = 'CSV' then
      return null;
    else
      vva_bals :=
        replace (vva_bals,
                 '%gras%',
                 case pva_gras when knu_propr_oui then 'bold' else 'normal' end);

      vva_bals :=
        replace (vva_bals,
                 '%font_coulr%',
                 case when pva_coulr is not null then 'font_color' else null end);

      vva_bals :=
        replace (vva_bals,
                 '%coulr%',
                 case when pva_coulr is not null then pva_coulr else null end);

      --pour le moment, ne gère que ligne
      vva_bals :=
        replace (vva_bals,
                 '%porte%',
                 case pva_porte when knu_porte_ligne then 'ligne' else 'coln' end);
    end if;

    return vva_bals;
  end obten_bals_formt;

  function digr_bals_formt (pva_bals in varchar2)
    return typ_formt is
    vva_bals                                varchar2 (2000) default lower (pva_bals);
    vnu_i_deux_point                        pls_integer;
    vnu_i_point_virgl                       pls_integer;
    vva_propr                               varchar2 (100);
    vva_valr                                varchar2 (100);
    vre_retr                                typ_formt;
  begin
    if vva_bals like '<span style="%"></span>' then
      vva_bals :=
        substr (vva_bals,
                14,
                length (vva_bals) - 14 - 8);

      while vva_bals like '%:%;%' loop
        vnu_i_deux_point :=
          instr (vva_bals,
                 ':');
        vnu_i_point_virgl :=
          instr (vva_bals,
                 ';');
        vva_propr :=
          substr (vva_bals,
                  1,
                  vnu_i_deux_point - 1);
        vva_valr :=
          substr (vva_bals,
                  vnu_i_deux_point + 1,
                  vnu_i_point_virgl - vnu_i_deux_point - 1);

        --gérer la propriété
        case trim (vva_propr)
          when 'font-weight' then
            vre_retr.indic_gras := vva_valr = 'bold';
          when 'portee' then
            vre_retr.indic_ligne := vva_valr = 'ligne';
          else
            null;
        end case;

        vva_bals :=
          substr (vva_bals,
                  vnu_i_point_virgl + 1);
      end loop;
    end if;

    return vre_retr;
  end digr_bals_formt;
end sie_25_formt_ir_pkg;
/

Prompt Package Body SIE_25_FUSN_PDF_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_FUSN_PDF_PKG" as
  procedure ajout_valr_champ_fusn (pnu_champ in number,
                                   pnu_publc_travl in number,
                                   pda_valr_date in date) is
  begin
    insert into   vd_i_sie_25_valr_champ (ref_champ, ref_publc_travl, valr_date)
         values   (pnu_champ,
                   pnu_publc_travl,
                   pda_valr_date);
  end ajout_valr_champ_fusn;

  procedure ajout_valr_champ_fusn (pnu_champ in number,
                                   pnu_publc_travl in number,
                                   pnu_valr_nombr in number) is
  begin
    insert into   vd_i_sie_25_valr_champ (ref_champ, ref_publc_travl, valr_nombr)
         values   (pnu_champ,
                   pnu_publc_travl,
                   pnu_valr_nombr);
  end ajout_valr_champ_fusn;

  procedure ajout_valr_champ_fusn (pnu_champ in number,
                                   pnu_publc_travl in number,
                                   pva_valr_varch in varchar2) is
  begin
    insert into   vd_i_sie_25_valr_champ (ref_champ, ref_publc_travl, valr_varch)
         values   (pnu_champ,
                   pnu_publc_travl,
                   pva_valr_varch);
  end ajout_valr_champ_fusn;
end sie_25_fusn_pdf_pkg;
/

Prompt Package Body SIE_25_JAVSC_PKG;
/* Formatted on 04/12/2013 11:35:42 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_JAVSC_PKG" as
  procedure ajout_scrip_charg is
    vva_script                              varchar2 (4000);
    vnu_nombr_ir                            number;
  begin
    sie_07_util_pkg.ajout_info_debug ('SIE 25 Rapport interactif - JavaScript au chargement');

    select   count (*)
      into   vnu_nombr_ir
      from   vd_sie_13_page_ir pi
     where   pi.ref_page = sie_13_page_pkg.obten_page_sesn ();

    if vnu_nombr_ir > 0 then
      sie_07_util_pkg.ajout_libr_javsc ('jquery.apex-ir_tri_alter-4.1.0',
                                        sie_11_prodt_pkg.obten_dosr_fichr_afw || 'javascript/jquery/plugin/');

      vva_script :=
           'if (apex.worksheet.ws) {'
        || '  gReport = new apex.worksheet.ws("");'
        || '  function trans_ir(){'
        || '   gReport.l_LastFunction = trans_ir;'
        || '   afw.jQuery.trans_IR_tri_alter();'
        || '   if (afw.jQuery(".sie_25_formt_entet_vertc").length>0) {afw.sie_25.entet_vertc.formt();}'
        || '  }'
        || '  trans_ir();'
        || '  setInterval('
        || '   function(){'
        || '    trans_ir();'
        || '   },'
        || '   1000'
        || '  );'
        || '}';

      sie_07_util_pkg.ajout_code_javsc_charg (vva_script);
    end if;
  exception
    when no_data_found then
      null;
  end ajout_scrip_charg;
end sie_25_javsc_pkg;
/

Prompt Package Body SIE_25_PLPDF_EXPOR_IR_PKG;
/* Formatted on 04/12/2013 11:35:44 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_PLPDF_EXPOR_IR_PKG" as
  knu_marge_gauch                constant number default 0.5;
  knu_marge_droit                constant number default 0.5;
  kva_apex_expr                  constant varchar2 (30) default '#APXWS_EXPR#';
  kva_apex_expr2                 constant varchar2 (30) default '#APXWS_EXPR2#';
  kva_apex_hl_id                 constant varchar2 (30) default '#APXWS_HL_ID#';
  kva_apex_cc_expr               constant varchar2 (30) default '#APXWS_CC_EXPR#';
  kva_varbl_cc                   constant varchar2 (30) default 'APXWS_CC%';

  type typ_rec_page is record
  (
    nu_largr                                number default 0,
    nu_dernr_coln                           binary_integer default 0
  );

  type typ_arr_page is table of typ_rec_page
                         index by binary_integer;

  type typ_rec_surlg is record
  (
    vva_indic_afich                         varchar2 (1) default 'N',
    vva_type_surlg                          varchar2 (23),
    vva_coulr_polc_ligne                    apex_ir_condt.row_font_color%type,
    vva_coulr_backg_ligne                   apex_ir_condt.row_bg_color%type,
    vva_coulr_polc_cel                      apex_ir_condt.column_font_color%type,
    vva_coulr_backg_cel                     apex_ir_condt.column_bg_color%type,
    vva_condt_surlg                         apex_ir_condt.condition_sql%type,
    vva_nom_coln                            apex_ir_condt.column_name%type,
    vva_opert                               apex_ir_condt.operator%type,
    vva_expr                                apex_ir_condt.expr%type,
    vva_expr2                               apex_ir_condt.expr2%type,
    vnu_seqnc                               apex_ir_condt.highlight_sequence%type,
    vnu_max_seqnc                           apex_ir_condt.highlight_sequence%type,
    vva_expr_type                           apex_ir_condt.expr_type%type
  );

  type typ_tab_surlg is table of typ_rec_surlg
                          index by pls_integer;

  type typ_rec_coln_surlg is record
  (
    vva_type_surlg                          varchar2 (30) default 'LIGNE',
    vre_coulr_backg                         plpdf_type.t_color,
    vre_coulr_polc                          plpdf_type.t_color
  );

  type typ_tab_coln_surlg is table of typ_rec_coln_surlg
                               index by varchar2 (30);

  type typ_rec_ligne_surlg is record
  (
    vre_coulr_backg                         plpdf_type.t_color,
    vre_coulr_polc                          plpdf_type.t_color,
    vta_coln_surlg                          typ_tab_coln_surlg
  );

  type typ_rec_group_entet is record
  (
    vva_group                               apex_ir_rpts.break_on%type,
    vva_group_sur                           apex_ir_rpts.break_enabled_on%type,
    vva_coln_somme                          apex_ir_rpts.sum_columns_on_break%type,
    vva_coln_moyen                          apex_ir_rpts.avg_columns_on_break%type,
    vva_coln_max                            apex_ir_rpts.max_columns_on_break%type,
    vva_coln_min                            apex_ir_rpts.min_columns_on_break%type,
    vva_coln_medn                           apex_ir_rpts.median_columns_on_break%type,
    vva_coln_mode                           apex_ir_rpts.mode_columns_on_break%type,
    vva_coln_compt                          apex_ir_rpts.count_columns_on_break%type,
    vva_coln_compt_distn                    apex_ir_rpts.count_distnt_col_on_break%type
  );

  type typ_tab_compt_distn is table of pls_integer
                                index by varchar2 (4000);

  type typ_tab_medn is table of number;

  type typ_rec_parmt_group_coln is record
  (
    vva_indic_afich                         varchar2 (1),
    vva_nom_coln                            varchar2 (30),
    vnu_numr_group                          pls_integer,
    vva_indic_somme                         varchar2 (1),
    vnu_somme                               number,
    vva_indic_moyen                         varchar2 (1),
    vnu_moyen                               number,
    vva_indic_max                           varchar2 (1),
    vnu_max                                 number,
    vva_indic_min                           varchar2 (1),
    vnu_min                                 number,
    vva_indic_medn                          varchar2 (1),
    vnu_medn                                number,
    vta_tabl_medn                           typ_tab_medn,
    vva_indic_mode                          varchar2 (1),
    --Prévoir donnée (probablement un type) pour gérer le mode
    vva_indic_compt                         varchar2 (1),
    vnu_compt                               number,
    vva_indic_compt_distn                   varchar2 (1),
    vnu_compt_distn                         number,
    vta_tabl_compt                          typ_tab_compt_distn
  );

  type typ_tab_parmt_group_coln is table of typ_rec_parmt_group_coln
                                     index by pls_integer;

  type typ_rec_parmt_group is record
  (
    vva_nom_coln_1                          varchar2 (30),
    vva_nom_coln_2                          varchar2 (30),
    vva_nom_coln_3                          varchar2 (30),
    vva_nom_coln_4                          varchar2 (30),
    vva_nom_coln_5                          varchar2 (30),
    vva_nom_coln_6                          varchar2 (30),
    vva_valr_coln_1                         varchar2 (4000),
    vva_valr_coln_2                         varchar2 (4000),
    vva_valr_coln_3                         varchar2 (4000),
    vva_valr_coln_4                         varchar2 (4000),
    vva_valr_coln_5                         varchar2 (4000),
    vva_valr_coln_6                         varchar2 (4000),
    vva_libl_coln_1                         varchar2 (4000),
    vva_libl_coln_2                         varchar2 (4000),
    vva_libl_coln_3                         varchar2 (4000),
    vva_libl_coln_4                         varchar2 (4000),
    vva_libl_coln_5                         varchar2 (4000),
    vva_libl_coln_6                         varchar2 (4000)
  );

  type typ_rec_parmt_group_plugn is record
  (
    vva_ligne_1                             varchar2 (4000),
    vva_ligne_2                             varchar2 (4000),
    vva_ligne_3                             varchar2 (4000),
    vva_trans_libl                          varchar2 (4000),
    vva_indic_ventl                         varchar2 (1),
    vnu_nombr_coln_ventl                    number default 1
  );

  type typ_rec_coln_plugn is record
  (
    vva_valr                                varchar2 (4000),
    vnu_colsp                               number,
    vnu_rowsp                               number,
    vva_indic_ventl                         varchar2 (1)
  );

  type typ_tab_coln_plugn is table of typ_rec_coln_plugn
                               index by pls_integer;

  type typ_tab_trans_libl is table of varchar2 (4000)
                               index by varchar2 (100);

  gar_tail_papr                           sie_07_sql_pkg.typ_arr_ndx_vc30;
  --Gestion du highlight
  gre_ligne_a_surlg                       typ_rec_ligne_surlg;
  gnu_max_seqnc                           number;
  gre_style_ligne                         sie_25_formt_ir_pkg.typ_formt;
  --Gestion des groupes
  gre_group                               typ_rec_parmt_group;
  --Gestion des fonctions
  gta_fonct_coln                          typ_tab_parmt_group_coln;
  --Gestion des groupements d'entêtes (plugin)
  gre_parmt_group_plugn                   typ_rec_parmt_group_plugn;
  gta_trans_libl                          typ_tab_trans_libl;

  gva_valr_nul                            varchar2 (4000);
  gbo_presn_group                         boolean default false;

  function formt_chain_br (pva_elemn in varchar2)
    return varchar2 is
    vva_elemn                               varchar2 (4000);
  begin
    vva_elemn :=
      sie_07_sql_pkg.rempl_br (pva_elemn,
                               chr (10) || chr (13));
    return replace (vva_elemn,
                    '&nbsp;',
                    ' ');
  end formt_chain_br;

  function formt_nom_fichr (pva_nom in varchar2)
    return varchar2 is
    vva_nom                                 varchar2 (1000) default lower (pva_nom);
  begin
    vva_nom :=
      sie_07_sql_pkg.rempl_br (vva_nom,
                               '_');

    vva_nom :=
      replace (vva_nom,
               chr (10) || chr (13),
               '_');
    vva_nom :=
      replace (vva_nom,
               chr (10),
               '_');
    vva_nom :=
      substr (translate (vva_nom,
                         'çàâéèêöùû /\?',
                         'caaeeeouu____'),
              1,
              120);

    while instr (vva_nom,
                 '__') > 0 loop
      vva_nom :=
        replace (vva_nom,
                 '__',
                 '_');
    end loop;

    vva_nom :=
      replace (vva_nom,
               '_.',
               '.');

    return vva_nom;
  end;

  function formt_date (pda_date in date default sysdate)
    return varchar2 is
  begin
    return    'Le '
           || trim (to_char (pda_date,
                             'day'))
           || ' '
           || extract (day from pda_date)
           || ' '
           || trim (to_char (pda_date,
                             'month'))
           || ' '
           || extract (year from pda_date);
  end;

  function convr_parmt_align (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case upper (pva_parmt) when 'LEFT' then 'L' when 'RIGHT' then 'R' when 'CENTER' then 'C' else pva_deft end;
  end;

  function convr_parmt_faml (pva_parmt in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt) when 'times' then 'Times new roman' when 'courier' then 'Courier' else 'Arial' -- Défaut
                                                                                                                end;
  end;

  function convr_parmt_poids (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt) when 'bold' then 'B' when 'normal' then null else pva_deft end;
  end;

  procedure init_hautr_cel (pva_faml_polc in varchar2 default 'Arial') is
  begin
    case pva_faml_polc
      when 'Arial' then
        gta_hautr_cel ('Arial').vta_hautr_minml ('5') :=
          plpdf_toolkit.conv (3.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('5.5') :=
          plpdf_toolkit.conv (3.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('6') :=
          plpdf_toolkit.conv (3.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('6.5') :=
          plpdf_toolkit.conv (4,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('7') :=
          plpdf_toolkit.conv (4,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('7.5') :=
          plpdf_toolkit.conv (4.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('8') :=
          plpdf_toolkit.conv (4.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('8.5') :=
          plpdf_toolkit.conv (4.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('9') :=
          plpdf_toolkit.conv (5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('9.5') :=
          plpdf_toolkit.conv (5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('10') :=
          plpdf_toolkit.conv (5.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('10.5') :=
          plpdf_toolkit.conv (5.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('11') :=
          plpdf_toolkit.conv (5.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('11.5') :=
          plpdf_toolkit.conv (6,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('12') :=
          plpdf_toolkit.conv (6.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('12.5') :=
          plpdf_toolkit.conv (6.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('13') :=
          plpdf_toolkit.conv (6.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('13.5') :=
          plpdf_toolkit.conv (6.5,
                              'mm');
        gta_hautr_cel ('Arial').vta_hautr_minml ('14') :=
          plpdf_toolkit.conv (7,
                              'mm');
      else
        null;
    end case;
  end init_hautr_cel;

  function obten_hautr_cel (pva_faml_polc in varchar2 default 'Arial',
                            pnu_tail_polc in number default 8)
    return number is
    vva_tail_polc                           varchar2 (4000)
                                              default replace (pnu_tail_polc,
                                                               ',',
                                                               '.');
  begin
    --if gta_hautr_cel.exists (/*case pva_faml_polc when 'Helvetica' then 'Arial' else */pva_faml_polc /*end*/) then
    if gta_hautr_cel ('Arial').vta_hautr_minml.exists (vva_tail_polc) then
      return gta_hautr_cel ('Arial').vta_hautr_minml (vva_tail_polc);
    end if;

    --end if;

    return plpdf_toolkit.conv (7,
                               'mm');
  end obten_hautr_cel;

  function obten_parmt_impre_raprt (pnu_ref_ir in number)
    return typ_rec_parmt_impre is
    vpi_deft                                typ_rec_parmt_impre;
    gpi_parmt_impr                          typ_rec_parmt_impre;
  begin
    begin
      select   'O',
               reg.prn_content_disposition,
               reg.prn_paper_size,
               reg.prn_orientation,
               reg.prn_units,
               reg.prn_width,
               reg.prn_height,
               reg.prn_border_width,
               reg.prn_border_color,
               reg.prn_page_header_font_family,
               reg.prn_page_header_font_weight,
               reg.prn_page_header_font_size,
               reg.prn_page_header_font_color,
               reg.prn_page_header_alignment,
               reg.prn_page_header,
               reg.prn_header_font_family,
               reg.prn_header_font_weight,
               reg.prn_header_font_size,
               reg.prn_header_font_color,
               reg.prn_header_bg_color,
               reg.prn_body_font_family,
               reg.prn_body_font_weight,
               reg.prn_body_font_size,
               reg.prn_body_font_color,
               reg.prn_body_bg_color,
               reg.prn_page_footer_font_family,
               reg.prn_page_footer_font_weight,
               reg.prn_page_footer_font_size,
               reg.prn_page_footer_font_color,
               reg.prn_page_footer_alignment,
               reg.prn_page_footer
        into   gpi_parmt_impr
        from   vd_sie_13_page_ir pir,
               apex_ir air,
               apex_regn reg
       where   pir.seqnc = pnu_ref_ir and air.id = pir.id_apex and reg.id = air.region_id;
    exception
      when no_data_found then
        gpi_parmt_impr.va_indic_trouv := 'N';
    end;

    return gpi_parmt_impr;
  end;

  function detrm_type_surlg (pva_coulr_polc_ligne apex_ir_condt.row_font_color%type,
                             pva_coulr_backg_ligne apex_ir_condt.row_bg_color%type)
    return varchar2 is
    vva_type_surlg                          varchar2 (23);
  begin
    if pva_coulr_polc_ligne is not null
    or pva_coulr_backg_ligne is not null then
      vva_type_surlg := 'LIGNE';
    else
      vva_type_surlg := 'CEL';
    end if;

    return vva_type_surlg;
  end detrm_type_surlg;

  function obten_parmt_surlg_raprt (pnu_rpts_id in number)
    return typ_tab_surlg is
    vta_parmt_surlg                         typ_tab_surlg;
    vre_parmt_surlg                         typ_rec_surlg;
    vnu_compt                               pls_integer default 1;

    cursor cur_surlg is
      select     'O' indic_afich,
                 detrm_type_surlg (airc.row_font_color,
                                   airc.row_bg_color)
                   type_surlg,
                 row_font_color coulr_polc_ligne,
                 row_bg_color coulr_backg_ligne,
                 column_font_color coulr_polc_cel,
                 column_bg_color coulr_backg_cel,
                 condition_sql condt_surlg,
                 column_name nom_coln,
                 expr expr,
                 expr2 expr2,
                 operator opert,
                 highlight_sequence seqnc,
                 expr_type expr_type
          from   apex_ir_rpts airr,
                 apex_ir_condt airc
         where   airr.id = pnu_rpts_id
             and airr.id = airc.report_id
             and airc.condition_type = 'HIGHLIGHT'
             and airc.enabled = 'Y'
      order by   airc.highlight_sequence;
  begin
    for rec_surlg in cur_surlg loop
      vre_parmt_surlg.vva_indic_afich := rec_surlg.indic_afich;
      vre_parmt_surlg.vva_type_surlg := rec_surlg.type_surlg;
      vre_parmt_surlg.vva_coulr_polc_ligne := rec_surlg.coulr_polc_ligne;
      vre_parmt_surlg.vva_coulr_backg_ligne := rec_surlg.coulr_backg_ligne;
      vre_parmt_surlg.vva_coulr_polc_cel := rec_surlg.coulr_polc_cel;
      vre_parmt_surlg.vva_coulr_backg_cel := rec_surlg.coulr_backg_cel;
      vre_parmt_surlg.vva_condt_surlg := rec_surlg.condt_surlg;
      vre_parmt_surlg.vva_nom_coln := rec_surlg.nom_coln;
      vre_parmt_surlg.vva_expr := rec_surlg.expr;
      vre_parmt_surlg.vva_expr2 := rec_surlg.expr2;
      vre_parmt_surlg.vva_opert := rec_surlg.opert;
      vre_parmt_surlg.vnu_seqnc := rec_surlg.seqnc;
      vre_parmt_surlg.vva_expr_type := rec_surlg.expr_type;

      vta_parmt_surlg (vnu_compt) := vre_parmt_surlg;
      vnu_compt := vnu_compt + 1;
    end loop;

    return vta_parmt_surlg;
  end obten_parmt_surlg_raprt;

  function obten_parmt_group_raprt (pnu_rpts_id in number)
    return typ_rec_group_entet is
    vre_parmt_group                         typ_rec_group_entet;
  begin
    select   break_on,
             break_enabled_on,
             sum_columns_on_break,
             avg_columns_on_break,
             max_columns_on_break,
             min_columns_on_break,
             median_columns_on_break,
             mode_columns_on_break,
             count_columns_on_break,
             count_distnt_col_on_break
      into   vre_parmt_group
      from   apex_ir_rpts airr
     where   airr.id = pnu_rpts_id;

    return vre_parmt_group;
  end obten_parmt_group_raprt;

  function obten_parmt_group_plugn (pnu_reprt_id in number)
    return typ_rec_parmt_group_plugn is
    vre_parmt_group_plugn                   typ_rec_parmt_group_plugn;
  begin
    select   apex_application.do_substitutions (attribute_01),
             apex_application.do_substitutions (attribute_02),
             apex_application.do_substitutions (attribute_03),
             apex_application.do_substitutions (attribute_04),
             attribute_05,
             attribute_10
      into   vre_parmt_group_plugn
      from   apex_actio_dynmq_actio
     where   affected_elements_type = 'REGION'
         and affected_region_id = pnu_reprt_id
         and action = 'PLUGIN_CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT'
         and rownum <= 1;

    return vre_parmt_group_plugn;
  exception
    when no_data_found then
      return null;
  end obten_parmt_group_plugn;

  procedure defnr_coulr_pdf (pva_nom_procd in varchar2) is
    vva_progr_a_lancr                       varchar2 (4000)
      default    'begin '
              || '  sie_25_plpdf_expor_ir_pkg.gre_coulr_pdf := %PROCD_PERSN%; '
              || '  exception when others then 
                        ete();'
              || 'end;';
    vre_coulr_deft                          typ_rec_coulr_pdf;
  begin
    vva_progr_a_lancr :=
      replace (vva_progr_a_lancr,
               '%PROCD_PERSN%',
               pva_nom_procd);

    execute immediate vva_progr_a_lancr;
  exception
    when others then
      gre_coulr_pdf.vva_coulr_polc_entet := '#FFFFFF';
      gre_coulr_pdf.vva_coulr_backg_entet := '#E0E0E0';
  end defnr_coulr_pdf;

  function obten_coulr_a_partr_hex (pva_valr_hex in varchar2)
    return plpdf_type.t_color is
    vre_coulr                               plpdf_type.t_color;
    vre_coulr_deft                          plpdf_type.t_color;

    function obten_rgb_de_hex (pva_part_hex in varchar2)
      return number is
    begin
      return plpdf_util.to_dec (pva_part_hex);
    end obten_rgb_de_hex;
  begin
    --Vérifier si la longueur du hex est bien de 7 (# + 6 * {0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F})
    if length (pva_valr_hex) = 7 and pva_valr_hex is not null then
      vre_coulr.r :=
        obten_rgb_de_hex (substr (pva_valr_hex,
                                  2,
                                  2));
      vre_coulr.g :=
        obten_rgb_de_hex (substr (pva_valr_hex,
                                  4,
                                  2));
      vre_coulr.b :=
        obten_rgb_de_hex (substr (pva_valr_hex,
                                  6,
                                  2));

      return vre_coulr;
    end if;

    vre_coulr_deft.r := 255;
    vre_coulr_deft.g := 255;
    vre_coulr_deft.b := 255;

    return vre_coulr_deft;
  end obten_coulr_a_partr_hex;

  procedure init_surlg_ligne is
  begin
    gnu_max_seqnc := 0;
    gre_ligne_a_surlg.vre_coulr_polc := null;
    gre_ligne_a_surlg.vre_coulr_backg := null;
  end init_surlg_ligne;

  procedure init_surlg_coln (pva_nom_coln in varchar2) is
  begin
    gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vva_type_surlg := null;
    gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_polc := null;
    gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_backg := null;
  end init_surlg_coln;

  procedure gerer_surlg (pta_parmt_surlg in typ_tab_surlg,
                         pva_valr_a_compr in out varchar2,
                         pva_nom_coln in varchar2,
                         pva_type_coln in varchar2,
                         pva_formt_coln in varchar2) is
    vva_condt_sql                           apex_ir_condt.condition_sql%type;
    vbo_presn_expr                          boolean;
    vbo_presn_expr2                         boolean;
    vva_valr_retr                           varchar2 (1);
    vre_coulr_polc                          plpdf_type.t_color;
    vre_coulr_fond                          plpdf_type.t_color;
  begin
    if pta_parmt_surlg.exists (1) then
      for i in pta_parmt_surlg.first () .. pta_parmt_surlg.last () loop
        --Valider si le nom de la colonne est présente dans la condition ou verifier si c'est un champ calculé
        if instr (pta_parmt_surlg (i).vva_condt_surlg,
                  '"' || pva_nom_coln || '"') > 0
        or (pva_nom_coln like kva_varbl_cc
        and instr (pta_parmt_surlg (i).vva_condt_surlg,
                   kva_apex_cc_expr) > 0) then
          vva_condt_sql :=
            replace (pta_parmt_surlg (i).vva_condt_surlg,
                     '"' || pta_parmt_surlg (i).vva_nom_coln || '"',
                     kva_apex_cc_expr);

          --Dans un cas où la valeur a comparer est égale à la valeur nullable du IR, ikl faut la remplacer par null
          if pva_valr_a_compr = formt_chain_br (gva_valr_nul) then
            vva_condt_sql :=
              replace (vva_condt_sql,
                       kva_apex_cc_expr,
                       'null');
          else
            --Remplace le nom de colonne et expr
            case pva_type_coln
              when 'VARCH' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                              ''''
                           || replace (pva_valr_a_compr,
                                       '''',
                                       '''''')
                           || '''');
              when 'NUMBR' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                           replace (to_number (pva_valr_a_compr,
                                               pva_formt_coln),
                                    ',',
                                    '.'));
              when 'DATE' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                           to_date (pva_valr_a_compr,
                                    pva_formt_coln));
              when 'TIMST' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                           to_timestamp (pva_valr_a_compr,
                                         pva_formt_coln));
              else
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                              ''''
                           || replace (pva_valr_a_compr,
                                       '''',
                                       '''''')
                           || '''');
            end case;
          end if;

          vva_condt_sql :=
            replace (vva_condt_sql,
                     kva_apex_hl_id,
                     '''O''');

          if instr (vva_condt_sql,
                    kva_apex_expr) > 0 then
            vbo_presn_expr := true;
            vva_condt_sql :=
              replace (vva_condt_sql,
                       kva_apex_expr,
                       ':valr_expr');
          else
            vbo_presn_expr := false;
          end if;

          if instr (vva_condt_sql,
                    kva_apex_expr2) > 0 then
            vbo_presn_expr2 := true;
            vva_condt_sql :=
              replace (vva_condt_sql,
                       kva_apex_expr2,
                       ':valr_expr2');
          else
            vbo_presn_expr2 := false;
          end if;

          --Valider si la condition pour le surlignage est respectée
          --Afficher ensuite la couleur selon le type
          if vbo_presn_expr2 then
            execute immediate 'select ' || vva_condt_sql || ' from dual'
                                                  into   vva_valr_retr
              using pta_parmt_surlg (i).vva_expr,
                    pta_parmt_surlg (i).vva_expr2;
          elsif vbo_presn_expr then
            execute immediate 'select ' || vva_condt_sql || ' from dual'
                                                  into   vva_valr_retr
              using pta_parmt_surlg (i).vva_expr;
          else
            execute immediate 'select ' || vva_condt_sql || ' from dual'
                                                  into   vva_valr_retr;
          end if;

          --Il faut ajouter les paramètres de highlight à la colonne courante
          if vva_valr_retr is not null then
            if pta_parmt_surlg (i).vva_type_surlg = 'LIGNE' and pta_parmt_surlg (i).vnu_seqnc >= gnu_max_seqnc then
              gnu_max_seqnc := pta_parmt_surlg (i).vnu_seqnc;
              gre_ligne_a_surlg.vre_coulr_backg := obten_coulr_a_partr_hex (pta_parmt_surlg (i).vva_coulr_backg_ligne);
              gre_ligne_a_surlg.vre_coulr_polc := obten_coulr_a_partr_hex (pta_parmt_surlg (i).vva_coulr_polc_ligne);
            end if;

            if pta_parmt_surlg (i).vva_type_surlg <> 'LIGNE' then
              gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vva_type_surlg := 'COL';
              gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_backg :=
                obten_coulr_a_partr_hex (
                  nvl (pta_parmt_surlg (i).vva_coulr_backg_cel, pta_parmt_surlg (i).vva_coulr_backg_ligne)
                );
              gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_polc :=
                obten_coulr_a_partr_hex (
                  nvl (pta_parmt_surlg (i).vva_coulr_polc_cel, pta_parmt_surlg (i).vva_coulr_polc_ligne)
                );
            end if;
          end if;
        end if;
      end loop;
    end if;
  end gerer_surlg;

  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID')) is
    vta_parmt_surlg                         typ_tab_surlg;
    vre_parmt_group                         typ_rec_group_entet;
    vre_parmt_group_plugn                   typ_rec_parmt_group_plugn;
    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (4000);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    vnu_id_plugn                            number;
    vva_procd_coulr                         varchar2 (200);
    vva_procd_entet                         varchar2 (200);
    vva_procd_pied_page                     varchar2 (200);
    vbo_presn_fonct                         boolean default false;
    vva_indic_forcr_ajust_page              varchar2 (1);
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_largr_dispo                         number;
    var_pages                               typ_arr_page;
    vnu_index_page                          binary_integer;
    vnu_somme_largr                         number;
    vnu_dernr_coln_ajout                    number;
    vnu_rpts_id                             number;
    vnu_hautr_ligne                         number;
    --variable pour afficher fonctions
    vnu_tail_group                          pls_integer default 0;
    -- variables plpdf
    vnu_elmnt_lign                          number := 0;
    vnu_elmnt_tabl                          number := 0;
    vnu_elmnt_restn                         number := 0;
    vnu_tail_polc_ent                       number := 0;
    vnu_tail_polc_corps                     number := 0;
    vnu_tail_polc_pied                      number := 0;
    vnu_largr_restn                         number := 0;
    vva_elmnt                               varchar2 (300);
    vbo_type_indtr                          boolean := false;
    v_blob                                  blob;
    --variable des paramètres du tableau
    v_bordr_cell                            plpdf_type.t_row_borders;
    v_data_cell                             plpdf_type.t_row_datas;
    v_data_row_ent                          plpdf_type.t_row_datas;
    v_tail_cell                             plpdf_type.t_row_widths;
    v_tail_intr_cell                        plpdf_type.t_row_widths;
    v_algnm_cell                            plpdf_type.t_row_aligns;
    v_algnm_entet                           plpdf_type.t_row_aligns;
    v_style_cell                            plpdf_type.t_row_styles;
    v_lign_max                              plpdf_type.t_row_maxlines;
    v_coulr_cell                            plpdf_type.t_row_filles;

    procedure init_pdf is
      vva_progr_a_lancr                       varchar2 (4000)
        default 'begin ' || '  %PROCD_PERSN%(:a); ' || '  exception when others then ete();' || 'end;';
    begin
      --compter le nombre d'éléments
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'O' then
          vnu_elmnt_lign := vnu_elmnt_lign + 1;
        end if;
      end loop;

      --initialiser le pdf
      if gpi_parmt_impr.va_orien_papr = 'VERTICAL' then
        plpdf_pkg.init1 (
          'P',
          plpdf_const.point,
          case gpi_parmt_impr.va_formt_papr
            when 'LEGAL' then plpdf_const.legal
            when 'LETTER' then plpdf_const.letter
            when 'A3' then plpdf_const.a3
            when 'A4' then plpdf_const.a4
            else plpdf_const.letter
          end
        );
      else
        plpdf_pkg.init1 (
          'L',
          plpdf_const.point,
          case gpi_parmt_impr.va_formt_papr
            when 'LEGAL' then plpdf_const.legal
            when 'LETTER' then plpdf_const.letter
            when 'A3' then plpdf_const.a3
            when 'A4' then plpdf_const.a4
            else plpdf_const.letter
          end
        );
      end if;

      plpdf_pkg.nopalias;
      plpdf_pkg.setdoctitle (formt_nom_fichr (vva_nom_raprt) || '.pdf');
      plpdf_pkg.setallmargin (plpdf_toolkit.conv (knu_marge_droit,
                                                  'in'),
                              plpdf_toolkit.conv (0.5,
                                                  'in'),
                              plpdf_toolkit.conv (knu_marge_gauch,
                                                  'in'));
      plpdf_pkg.newpage;
      plpdf_pkg.setcellmargin (knu_marge_cel);

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_entet_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_entet_polc_faml));
      end if;

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml));
      end if;

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_corps_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_corps_polc_faml));
      end if;

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_pied_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_pied_polc_faml));
      end if;

      if vva_procd_entet is not null then
        vva_progr_a_lancr :=
          replace (vva_progr_a_lancr,
                   '%PROCD_PERSN%',
                   vva_procd_entet);

        execute immediate vva_progr_a_lancr using vva_nom_raprt;
      else
        plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_entet_polc_faml),
                                convr_parmt_poids (gpi_parmt_impr.va_entet_polc_poids,
                                                   'B'),
                                gpi_parmt_impr.nu_entet_polc_tail);
        plpdf_pkg.printcell (0,
                             obten_hautr_cel (gpi_parmt_impr.va_entet_polc_faml,
                                              gpi_parmt_impr.nu_entet_polc_tail),
                             vva_nom_raprt,
                             0,
                             0,
                             convr_parmt_align (gpi_parmt_impr.va_entet_align,
                                                'C'));
        plpdf_pkg.linebreak (plpdf_toolkit.conv (20,
                                                 'mm'));
      end if;
    end init_pdf;

    procedure calcl_largr_raprt is
      vnu_total_reltf                         number default 0;
      vbo_activ_fit_to_page                   boolean default false;
      vnu_largr_total_reel                    number default 0;
    begin
      -- Créer les différents set d'entêtes (tableau)
      vnu_dernr_coln_ajout := 0;
      vnu_largr_restn := plpdf_pkg.getpageavailablewidth;
      vnu_elmnt_restn := vnu_elmnt_lign;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'O' then
          case var_infor_coln (i).va_type_largr
            when 'POUCE' then
              vnu_largr_restn :=
                vnu_largr_restn -
                plpdf_toolkit.conv (var_infor_coln (i).nu_largr,
                                    'in');
            when 'INDET' then
              var_infor_coln (i).nu_largr := vnu_largr_deft;
              vnu_largr_restn :=
                vnu_largr_restn -
                plpdf_toolkit.conv (var_infor_coln (i).nu_largr,
                                    'in');
            when 'RELTF' then
              vnu_total_reltf := vnu_total_reltf + var_infor_coln (i).nu_largr;
            else
              --Ne devrait pas arriver
              null;
          end case;

          if var_infor_coln (i).va_type_largr in ('POUCE', 'INDET') then
            vnu_largr_total_reel :=
              vnu_largr_total_reel +
              plpdf_toolkit.conv (var_infor_coln (i).nu_largr,
                                  'in');
          end if;
        end if;
      end loop;

      if vnu_largr_restn <= 0
      or vnu_total_reltf = 0
     and vnu_largr_total_reel < plpdf_pkg.getpageavailablewidth
     and vva_indic_forcr_ajust_page = 'O' then
        vbo_activ_fit_to_page := true;
      end if;

      for j in var_pages.first () .. var_pages.last () loop
        for i in vnu_dernr_coln_ajout + 1 .. var_pages (j).nu_dernr_coln loop
          if vbo_activ_fit_to_page and var_infor_coln (i).va_type_largr = 'RELTF' then
            var_infor_coln (i).va_indic_expor := 'N';
            gta_fonct_coln (i).vva_indic_afich := 'N';
          end if;

          if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'O' then
            --Taille selon la largeur du champ
            case var_infor_coln (i).va_type_largr
              when 'RELTF' then
                var_infor_coln (i).nu_largr_reltv := var_infor_coln (i).nu_largr / vnu_total_reltf;
                v_tail_intr_cell (i) := vnu_largr_restn * var_infor_coln (i).nu_largr_reltv;
              else
                if not vbo_activ_fit_to_page then
                  v_tail_intr_cell (i) :=
                    plpdf_toolkit.conv (var_infor_coln (i).nu_largr,
                                        'in');
                else
                  v_tail_intr_cell (i) :=
                    plpdf_pkg.getpageavailablewidth *
                    (plpdf_toolkit.conv (var_infor_coln (i).nu_largr,
                                         'in') /
                     vnu_largr_total_reel);
                end if;
            end case;

            vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

            if gta_trans_libl.exists (var_infor_coln (i).va_nom) then
              vva_elmnt := gta_trans_libl (var_infor_coln (i).va_nom);
            else
              vva_elmnt := var_infor_coln (i).va_libl;
            end if;

            vva_elmnt := formt_chain_br (vva_elmnt);

            v_bordr_cell (vnu_elmnt_tabl) := '1';
            v_tail_cell (vnu_elmnt_tabl) := v_tail_intr_cell (i);

            vnu_elmnt_restn := vnu_elmnt_lign - vnu_elmnt_tabl;

            v_algnm_entet (vnu_elmnt_tabl) :=
              convr_parmt_align (var_infor_coln (i).va_align_entet,
                                 'C');
            v_data_row_ent (vnu_elmnt_tabl) := vva_elmnt;
            vbo_type_indtr := false;
          end if;
        end loop;

        vnu_dernr_coln_ajout := var_pages (j).nu_dernr_coln;
      end loop;

      vnu_elmnt_tabl := 0;
    end calcl_largr_raprt;

    procedure impri_entet is
    begin
      if gpi_parmt_impr.nu_coln_polc_tail is not null then
        vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
      else
        vnu_tail_polc_ent := 11;
      end if;

      plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                 'B'),
                              vnu_tail_polc_ent);

      plpdf_pkg.row_print2 (v_data_row_ent,
                            v_bordr_cell,
                            v_tail_cell,
                            v_algnm_entet,
                            v_style_cell,
                            v_lign_max,
                            obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                             vnu_tail_polc_ent),
                            1,
                            0,
                            0);
    end impri_entet;

    procedure impri_corps is
    begin
      if gpi_parmt_impr.nu_corps_polc_tail is not null then
        vnu_tail_polc_corps := gpi_parmt_impr.nu_corps_polc_tail;
      else
        vnu_tail_polc_corps := 8;
      end if;

      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_corps_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_corps_polc_poids,
                                                 null),
                              vnu_tail_polc_corps);

      plpdf_pkg.row_print2 (v_data_cell,
                            v_bordr_cell,
                            v_tail_cell,
                            v_algnm_cell,
                            v_style_cell,
                            v_lign_max,
                            obten_hautr_cel (gpi_parmt_impr.va_corps_polc_faml,
                                             vnu_tail_polc_corps),
                            v_coulr_cell);
      vnu_elmnt_tabl := 0;
    end impri_corps;

    procedure defnr_ligne is
      vbo_presn_ligne_bold                    boolean default false;
    begin
      gre_style_ligne.indic_ligne := false;
      gre_style_ligne.indic_gras := false;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          if gta_fonct_coln (i).vva_indic_afich = 'O' then
            vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

            v_bordr_cell (vnu_elmnt_tabl) := '1';

            v_tail_cell (vnu_elmnt_tabl) := v_tail_intr_cell (i);

            --Aligner selon le type de données
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                vva_elmnt := var_infor_coln (i).va_valr_varch;

                if vva_elmnt is null then
                  vva_elmnt := gva_valr_nul;
                end if;
              when 'NUMBR' then
                if var_infor_coln (i).nu_valr_numbr is null then
                  vva_elmnt := gva_valr_nul;
                else
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := to_char (var_infor_coln (i).nu_valr_numbr);
                  else
                    vva_elmnt :=
                      (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                       var_infor_coln (i).va_formt)));
                  end if;
                end if;
              when 'DATE' then
                if var_infor_coln (i).da_valr_date is null then
                  vva_elmnt := gva_valr_nul;
                else
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := to_char (var_infor_coln (i).da_valr_date);
                  else
                    vva_elmnt :=
                      (to_char (var_infor_coln (i).da_valr_date,
                                var_infor_coln (i).va_formt));
                  end if;
                end if;
              when 'TIMST' then
                if var_infor_coln (i).ts_valr_timst is null then
                  vva_elmnt := gva_valr_nul;
                else
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := to_char (var_infor_coln (i).ts_valr_timst);
                  else
                    vva_elmnt :=
                      (to_char (var_infor_coln (i).ts_valr_timst,
                                var_infor_coln (i).va_formt));
                  end if;
                end if;
              else
                vva_elmnt := var_infor_coln (i).va_valr_varch;
            end case;

            vva_elmnt := apex_application.do_substitutions (vva_elmnt);

            if vva_elmnt like '<span style="%"></span>%' then
              declare
                vnu_postn                               number;
              begin
                vnu_postn :=
                  instr (vva_elmnt,
                         '</span>') +
                  length ('</span>') -
                  1;
                gre_style_ligne :=
                  sie_25_formt_ir_pkg.digr_bals_formt (substr (vva_elmnt,
                                                               1,
                                                               vnu_postn));
                vva_elmnt :=
                  substr (vva_elmnt,
                          vnu_postn + 1);

                if gre_style_ligne.indic_ligne and gre_style_ligne.indic_gras then
                  vbo_presn_ligne_bold := true;
                end if;
              end;
            end if;

            v_style_cell (vnu_elmnt_tabl) := null;
            vva_elmnt := formt_chain_br (vva_elmnt);
            v_algnm_cell (vnu_elmnt_tabl) :=
              convr_parmt_align (var_infor_coln (i).va_align_coln,
                                 'C');
            v_data_cell (vnu_elmnt_tabl) := vva_elmnt;
          end if;

          --Alimenter le highlight pour les colonnes
          init_surlg_coln (var_infor_coln (i).va_nom);
          gerer_surlg (vta_parmt_surlg,
                       vva_elmnt,
                       var_infor_coln (i).va_nom,
                       var_infor_coln (i).va_type_valr,
                       var_infor_coln (i).va_formt);
        end if;
      end loop;

      if vbo_presn_ligne_bold then
        for c in v_style_cell.first () .. v_style_cell.last () loop
          if v_style_cell (c) not like '%B%'
          or v_style_cell (c) is null then
            v_style_cell (c) := v_style_cell (c) || 'B';
          end if;
        end loop;
      end if;

      vnu_elmnt_tabl := 0;
    end defnr_ligne;

    procedure impri_pied_page is
      vva_progr_a_lancr                       varchar2 (4000)
        default 'begin ' || '  %PROCD_PERSN%; ' || '  exception when others then ete();' || 'end;';
    begin
      if vva_procd_pied_page is not null then
        vva_progr_a_lancr :=
          replace (vva_progr_a_lancr,
                   '%PROCD_PERSN%',
                   vva_procd_pied_page);

        execute immediate vva_progr_a_lancr;
      else
        if gpi_parmt_impr.nu_pied_polc_tail is not null then
          vnu_tail_polc_pied := gpi_parmt_impr.nu_pied_polc_tail;
        else
          vnu_tail_polc_pied := 8;
        end if;

        plpdf_pkg.setcurrenty (round (plpdf_pkg.getpageavailableheight +
                                      plpdf_toolkit.conv (5,
                                                          'mm'),
                                      0));
        plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_pied_polc_faml),
                                convr_parmt_poids (gpi_parmt_impr.va_pied_polc_poids,
                                                   null),
                                vnu_tail_polc_pied);

        if gpi_parmt_impr.va_pied_texte is not null then
          plpdf_pkg.printcell (0,
                               obten_hautr_cel (gpi_parmt_impr.va_pied_polc_faml,
                                                vnu_tail_polc_pied),
                               apex_application.do_substitutions (gpi_parmt_impr.va_pied_texte),
                               0,
                               0,
                               'C');
        end if;

        plpdf_pkg.printcell (0,
                             obten_hautr_cel (gpi_parmt_impr.va_pied_polc_faml,
                                              vnu_tail_polc_pied),
                             to_char (plpdf_pkg.currentpagenumber),
                             0,
                             0,
                             'C');
      end if;
    end impri_pied_page;

    --Gestion du surlignement
    procedure defnr_surlg is
    begin
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          if gta_fonct_coln (i).vva_indic_afich = 'O' then
            vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

            v_coulr_cell (vnu_elmnt_tabl) := gre_ligne_a_surlg.vre_coulr_backg;

            if gre_ligne_a_surlg.vta_coln_surlg (var_infor_coln (i).va_nom).vva_type_surlg <> 'LIGNE' then
              v_coulr_cell (vnu_elmnt_tabl) :=
                gre_ligne_a_surlg.vta_coln_surlg (var_infor_coln (i).va_nom).vre_coulr_backg;
            end if;
          end if;
        end if;
      end loop;
    end defnr_surlg;

    --Gestion des regroupements
    function obten_valr_fonct (pva_nom_coln in varchar2,
                               pva_fonct in varchar2 default 'SOMME')
      return number is
      vnu_fonct                               number;
    begin
      case pva_fonct
        when 'SOMME' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_somme,
                   pva_nom_coln);
        when 'MOYEN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_moyen,
                   pva_nom_coln);
        when 'MAX' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_max,
                   pva_nom_coln);
        when 'MIN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_min,
                   pva_nom_coln);
        when 'MEDN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_medn,
                   pva_nom_coln);
        when 'MODE' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_mode,
                   pva_nom_coln);
        when 'COMPT' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_compt,
                   pva_nom_coln);
        when 'DISTN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_compt_distn,
                   pva_nom_coln);
        else
          null;
      end case;

      return vnu_fonct;
    end obten_valr_fonct;

    function afich_fonct (pnu_valr in number,
                          pva_formt in varchar2,
                          pva_fonct in varchar2 default 'SOMME')
      return varchar2 is
      vva_fonct                               varchar2 (4000);
    begin
      case pva_fonct
        when 'SOMME' then
          vva_fonct := null;
        when 'MOYEN' then
          vva_fonct := 'Moyenne';
        when 'MAX' then
          vva_fonct := 'Maximum';
        when 'MIN' then
          vva_fonct := 'Minimum';
        when 'MEDN' then
          vva_fonct := 'Médiane';
        when 'MODE' then
          vva_fonct := 'Mode';
        when 'COMPT' then
          vva_fonct := 'Calculer';
        when 'DISTN' then
          vva_fonct := 'Nombre de valeurs distinctes';
        else
          null;
      end case;

      if pva_fonct <> 'SOMME' then
        vva_fonct := vva_fonct || ': ';
      end if;

      if pva_fonct in ('COMPT', 'DISTN') then
        return vva_fonct || to_char (pnu_valr);
      else
        return    vva_fonct
               || to_char (pnu_valr,
                           pva_formt);
      end if;
    end afich_fonct;

    function obten_group_actif (pva_nom_coln in varchar2)
      return boolean is
    begin
      return instr (':' || vre_parmt_group.vva_group_sur || ':',
                    ':' || pva_nom_coln || ':') > 0;
    end obten_group_actif;

    function obten_fonct_activ (pva_nom_coln in varchar2,
                                pva_mode in varchar2 default 'SOMME')
      return boolean is
      vbo_activ                               boolean default false;
    begin
      case pva_mode
        when 'SOMME' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_somme || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MOYEN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_moyen || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MAX' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_max || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MIN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_min || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MEDN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_medn || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MODE' then
          vbo_activ :=
            instr (vre_parmt_group.vva_coln_mode || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'COMPT' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_compt || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'DISTN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_compt_distn || ':',
                   ':' || pva_nom_coln || ':') > 0;
        else
          null;
      end case;

      return vbo_activ;
    end obten_fonct_activ;

    /*Création des métadonnées*/
    procedure init_group_entet is
      vbo_presn_group                         boolean default false;
      vnu_compt                               pls_integer default 0;
      vnu_compt_group                         pls_integer default 0;
      vbo_presn_fonct                         boolean default false;

      function detrm_postn_coln_group (pva_nom_coln in varchar2,
                                       pva_break_on in varchar2)
        return pls_integer is
        vva_chain                               varchar2 (4000);
        vnu_postn                               pls_integer default 0;
      begin
        vva_chain :=
          substr (pva_break_on,
                  1,
                  instr (pva_break_on,
                         pva_nom_coln));

        select   length (vva_chain) -
                 length (replace (vva_chain,
                                  ':',
                                  '')) +
                 1
          into   vnu_postn
          from   dual;

        return vnu_postn;
      end detrm_postn_coln_group;
    begin
      --Déterminer les colonnes qui font partie du break ainsi que les fonctions par colonnes,
      --les ajouter au tableau des groupes globaux
      --Ne pas oublier le format number pour la colonne
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          if obten_group_actif (var_infor_coln (i).va_nom) then
            vbo_presn_group := true;
            gbo_presn_group := vbo_presn_group;
            vnu_compt_group :=
              detrm_postn_coln_group (var_infor_coln (i).va_nom,
                                      vre_parmt_group.vva_group);

            --Alimenter les colonnes qui font parties du groupe
            case vnu_compt_group
              when 1 then
                gre_group.vva_nom_coln_1 := var_infor_coln (i).va_nom;
              when 2 then
                gre_group.vva_nom_coln_2 := var_infor_coln (i).va_nom;
              when 3 then
                gre_group.vva_nom_coln_3 := var_infor_coln (i).va_nom;
              when 4 then
                gre_group.vva_nom_coln_4 := var_infor_coln (i).va_nom;
              when 5 then
                gre_group.vva_nom_coln_5 := var_infor_coln (i).va_nom;
              when 6 then
                gre_group.vva_nom_coln_6 := var_infor_coln (i).va_nom;
              else
                null;
            end case;

            gta_fonct_coln (i).vnu_numr_group := vnu_compt_group;
          end if;

          gta_fonct_coln (i).vva_nom_coln := var_infor_coln (i).va_nom;

          if vbo_presn_group then
            gta_fonct_coln (i).vva_indic_afich := 'N';
          else
            gta_fonct_coln (i).vva_indic_afich := 'O';


            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'SOMME') then
              gta_fonct_coln (i).vva_indic_somme := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MOYEN') then
              gta_fonct_coln (i).vva_indic_moyen := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MAX') then
              gta_fonct_coln (i).vva_indic_max := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MIN') then
              gta_fonct_coln (i).vva_indic_min := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MEDN') then
              gta_fonct_coln (i).vva_indic_medn := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MODE') then
              gta_fonct_coln (i).vva_indic_mode := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'COMPT') then
              gta_fonct_coln (i).vva_indic_compt := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'DISTN') then
              gta_fonct_coln (i).vva_indic_compt_distn := 'O';
            end if;
          end if;

          vbo_presn_group := false;
        end if;
      end loop;

      vnu_elmnt_tabl := 0;
    end init_group_entet;

    function verfr_chang_group
      return boolean is
      vbo_chang                               boolean default false;
      vva_elemn                               varchar2 (32767);
    begin
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'N' then
          --Déterminer s'il y a eu changement de groupe
          case var_infor_coln (i).va_type_valr
            when 'VARCH' then
              vva_elemn := var_infor_coln (i).va_valr_varch;
            when 'NUMBR' then
              vva_elemn :=
                (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                 var_infor_coln (i).va_formt)));
            when 'DATE' then
              vva_elemn :=
                (to_char (var_infor_coln (i).da_valr_date,
                          var_infor_coln (i).va_formt));
            when 'TIMST' then
              vva_elemn :=
                (to_char (var_infor_coln (i).ts_valr_timst,
                          var_infor_coln (i).va_formt));
            else
              vva_elemn := var_infor_coln (i).va_valr_varch;
          end case;

          case gta_fonct_coln (i).vnu_numr_group
            when 1 then
              vbo_chang :=
                gre_group.vva_valr_coln_1 <> vva_elemn
             or gre_group.vva_valr_coln_1 is null;
            when 2 then
              vbo_chang :=
                gre_group.vva_valr_coln_2 <> vva_elemn
             or gre_group.vva_valr_coln_2 is null;
            when 3 then
              vbo_chang :=
                gre_group.vva_valr_coln_3 <> vva_elemn
             or gre_group.vva_valr_coln_3 is null;
            when 4 then
              vbo_chang :=
                gre_group.vva_valr_coln_4 <> vva_elemn
             or gre_group.vva_valr_coln_4 is null;
            when 5 then
              vbo_chang :=
                gre_group.vva_valr_coln_5 <> vva_elemn
             or gre_group.vva_valr_coln_5 is null;
            when 6 then
              vbo_chang :=
                gre_group.vva_valr_coln_6 <> vva_elemn
             or gre_group.vva_valr_coln_6 is null;
            else
              null;
          end case;
        end if;

        if vbo_chang then
          exit;
        end if;
      end loop;

      return vbo_chang;
    end verfr_chang_group;

    /*Print à chaque groupe*/
    procedure gerer_group_entet is
      vbo_presn_entet                         boolean default false;
      vva_elemn                               varchar2 (4000);
      vva_valr_coln                           varchar2 (200);
    begin
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'N' then
          --Construire la cellule à imprimer
          vbo_presn_entet := true;

          case var_infor_coln (i).va_type_valr
            when 'VARCH' then
              vva_valr_coln := var_infor_coln (i).va_valr_varch;
            when 'NUMBR' then
              vva_valr_coln :=
                (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                 var_infor_coln (i).va_formt)));
            when 'DATE' then
              vva_valr_coln :=
                (to_char (var_infor_coln (i).da_valr_date,
                          var_infor_coln (i).va_formt));
            when 'TIMST' then
              vva_valr_coln :=
                (to_char (var_infor_coln (i).ts_valr_timst,
                          var_infor_coln (i).va_formt));
            else
              vva_valr_coln := var_infor_coln (i).va_valr_varch;
          end case;

          case gta_fonct_coln (i).vnu_numr_group
            when 1 then
              gre_group.vva_libl_coln_1 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_1 := vva_valr_coln;
            when 2 then
              gre_group.vva_libl_coln_2 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_2 := vva_valr_coln;
            when 3 then
              gre_group.vva_libl_coln_3 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_3 := vva_valr_coln;
            when 4 then
              gre_group.vva_libl_coln_4 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_4 := vva_valr_coln;
            when 5 then
              gre_group.vva_libl_coln_5 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_5 := vva_valr_coln;
            when 6 then
              gre_group.vva_libl_coln_6 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_6 := vva_valr_coln;
            else
              null;
          end case;
        end if;
      end loop;

      if gre_group.vva_nom_coln_1 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_1 || ' : ' || gre_group.vva_valr_coln_1;
      end if;

      if gre_group.vva_nom_coln_2 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_2 || ' : ' || gre_group.vva_valr_coln_2;
      end if;

      if gre_group.vva_nom_coln_3 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_3 || ' : ' || gre_group.vva_valr_coln_3;
      end if;

      if gre_group.vva_nom_coln_4 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_4 || ' : ' || gre_group.vva_valr_coln_4;
      end if;

      if gre_group.vva_nom_coln_5 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_5 || ' : ' || gre_group.vva_valr_coln_5;
      end if;

      if gre_group.vva_nom_coln_6 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_6 || ' : ' || gre_group.vva_valr_coln_6;
      end if;

      if vbo_presn_entet then
        if gpi_parmt_impr.nu_coln_polc_tail is not null then
          vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
        else
          vnu_tail_polc_ent := 11;
        end if;

        plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
        plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                                convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                   'B'),
                                vnu_tail_polc_ent);

        plpdf_pkg.printmultilinecell (0,
                                      obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                                       vnu_tail_polc_ent),
                                      substr (vva_elemn,
                                              3),
                                      '1',
                                      'L',
                                      1,
                                      p_ln                       => 1);
      end if;
    end gerer_group_entet;

    /* Fin print à chaque groupe*/
    procedure termn_group_entet is
      vva_elemn                               varchar2 (4000);
      vnu_compt_termn                         pls_integer default 0;
      v_data_row_fonct                        plpdf_type.t_row_datas;
      v_algnm_fonct                           plpdf_type.t_row_aligns;
      vbo_retrn                               boolean default false;

      function obten_medn
        return number is
        vta_medn                                typ_tab_medn;
      begin /*
       select cast(multiset(
                 select * from table(gta_fonct_coln(c).vta_tabl_medn)
                 order by 1) as typ_tab_medn)
   into vta_medn from dual;

 --Médianne est la valeur
 if mod (vta_medn.count(), 2) = 1 then
   null;
 else --Sinon, il faut calculer la position avant et après
   null;
 end if;*/
        return null;
      end obten_medn;

      function nouvl_ligne
        return varchar2 is
      begin
        return chr (13) || chr (10);
      end nouvl_ligne;
    begin
      for c in gta_fonct_coln.first () .. gta_fonct_coln.last () loop
        if gta_fonct_coln (c).vva_indic_afich = 'O' then
          vnu_compt_termn := vnu_compt_termn + 1;

          if gta_fonct_coln (c).vva_indic_somme = 'O' then
            vbo_retrn := true;
            vva_elemn :=
              afich_fonct (gta_fonct_coln (c).vnu_somme,
                           var_infor_coln (c).va_formt,
                           'SOMME');
          end if;

          if gta_fonct_coln (c).vva_indic_moyen = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct ( (gta_fonct_coln (c).vnu_moyen / gta_fonct_coln (c).vnu_compt),
                              nvl (var_infor_coln (c).va_formt, kva_formt_nombr),
                              'MOYEN');
          end if;

          if gta_fonct_coln (c).vva_indic_max = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_max,
                              var_infor_coln (c).va_formt,
                              'MAX');
          end if;

          if gta_fonct_coln (c).vva_indic_min = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_min,
                              var_infor_coln (c).va_formt,
                              'MIN');
          end if;

          /*
                               if gta_fonct_coln (c).vva_indic_medn = 'O' then
                                if vbo_retrn then
                                  vva_elemn := vva_elemn || nouvl_ligne;
                                end if;
                                vbo_retrn := true;
                              vva_elemn := vva_elemn || afich_fonct(obten_medn, var_infor_coln(c).va_formt, 'MEDN');
                    end if;
          */

          if gta_fonct_coln (c).vva_indic_compt = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_compt,
                              null,
                              'COMPT');
          end if;

          if gta_fonct_coln (c).vva_indic_compt_distn = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_compt_distn,
                              null,
                              'DISTN');
          end if;

          v_algnm_fonct (vnu_compt_termn) := 'R';
          v_data_row_fonct (vnu_compt_termn) := vva_elemn;
          vva_elemn := null;
          vbo_retrn := false;
        end if;
      end loop;

      if gpi_parmt_impr.nu_coln_polc_tail is not null then
        vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
      else
        vnu_tail_polc_ent := 11;
      end if;

      plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                 'B'),
                              vnu_tail_polc_ent);

      plpdf_pkg.row_print2 (v_data_row_fonct,
                            v_bordr_cell,
                            v_tail_cell,
                            v_algnm_fonct,
                            v_style_cell,
                            v_lign_max,
                            obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                             vnu_tail_polc_ent),
                            1);
    end termn_group_entet;

    procedure init_calcl_fonct is
    begin
      vnu_tail_group := 0;

      for i in gta_fonct_coln.first () .. gta_fonct_coln.last () loop
        if gta_fonct_coln (i).vva_indic_afich = 'O' then
          if gta_fonct_coln (i).vva_indic_somme = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_somme := 0;
          end if;

          if gta_fonct_coln (i).vva_indic_min = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_min := null;
          end if;

          if gta_fonct_coln (i).vva_indic_max = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_max := null;
          end if;

          if gta_fonct_coln (i).vva_indic_moyen = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_moyen := 0;
          end if;

          if gta_fonct_coln (i).vva_indic_compt = 'O'
          or gta_fonct_coln (i).vva_indic_moyen = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_compt := 0;
          end if;

          if gta_fonct_coln (i).vva_indic_compt_distn = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_compt_distn := 0;
            gta_fonct_coln (i).vta_tabl_compt.delete ();
          end if;

          if gta_fonct_coln (i).vva_indic_medn = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_medn := 0;
          --gta_fonct_coln (i).vta_tabl_medn.delete ();
          end if;
        end if;
      end loop;
    end init_calcl_fonct;

    procedure calcl_fonct is
      vbo_elemn_exist                         boolean default false;
      i                                       pls_integer;
    begin
      vnu_tail_group := vnu_tail_group + 1;

      for i in gta_fonct_coln.first () .. gta_fonct_coln.last () loop
        if gta_fonct_coln (i).vva_indic_afich = 'O' then
          if gta_fonct_coln (i).vva_indic_somme = 'O' then
            gta_fonct_coln (i).vnu_somme := gta_fonct_coln (i).vnu_somme + nvl (var_infor_coln (i).nu_valr_numbr, 0);
          end if;

          if gta_fonct_coln (i).vva_indic_min = 'O'
         and (gta_fonct_coln (i).vnu_min is null
           or gta_fonct_coln (i).vnu_min > var_infor_coln (i).nu_valr_numbr) then
            gta_fonct_coln (i).vnu_min := var_infor_coln (i).nu_valr_numbr;
          end if;

          if gta_fonct_coln (i).vva_indic_max = 'O'
         and (gta_fonct_coln (i).vnu_max is null
           or gta_fonct_coln (i).vnu_max < var_infor_coln (i).nu_valr_numbr) then
            gta_fonct_coln (i).vnu_max := var_infor_coln (i).nu_valr_numbr;
          end if;

          if gta_fonct_coln (i).vva_indic_moyen = 'O' then
            gta_fonct_coln (i).vnu_moyen := gta_fonct_coln (i).vnu_moyen + nvl (var_infor_coln (i).nu_valr_numbr, 0);
          end if;

          if gta_fonct_coln (i).vva_indic_compt = 'O'
          or gta_fonct_coln (i).vva_indic_moyen = 'O' then
            if var_infor_coln (i).nu_valr_numbr is not null
            or var_infor_coln (i).va_valr_varch is not null
            or var_infor_coln (i).da_valr_date is not null
            or var_infor_coln (i).ts_valr_timst is not null then
              gta_fonct_coln (i).vnu_compt := gta_fonct_coln (i).vnu_compt + 1;
            end if;
          end if;

          if gta_fonct_coln (i).vva_indic_compt_distn = 'O' then
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (var_infor_coln (i).va_valr_varch) then
                  gta_fonct_coln (i).vta_tabl_compt (var_infor_coln (i).va_valr_varch) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              when 'NUMBR' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (to_char (var_infor_coln (i).nu_valr_numbr)) then
                  gta_fonct_coln (i).vta_tabl_compt (to_char (var_infor_coln (i).nu_valr_numbr)) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              when 'DATE' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (to_char (var_infor_coln (i).da_valr_date)) then
                  gta_fonct_coln (i).vta_tabl_compt (to_char (var_infor_coln (i).da_valr_date)) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              when 'TIMST' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (to_char (var_infor_coln (i).ts_valr_timst)) then
                  gta_fonct_coln (i).vta_tabl_compt (to_char (var_infor_coln (i).ts_valr_timst)) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              else
                if not gta_fonct_coln (i).vta_tabl_compt.exists (var_infor_coln (i).va_valr_varch) then
                  gta_fonct_coln (i).vta_tabl_compt (var_infor_coln (i).va_valr_varch) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
            end case;
          end if;
        /*
                  if gta_fonct_coln (i).vva_indic_medn = 'O' then
          if var_infor_coln (i).nu_valr_numbr is not null then
            gta_fonct_coln (i).vta_tabl_medn(vnu_tail_group) := var_infor_coln (i).nu_valr_numbr;
          end if;
        end if;*/
        end if;
      end loop;
    end calcl_fonct;

    procedure trans_libl is
      vva_tabl_javsc                          varchar2 (4000);
      vvc_liste_a_trans                       apex_application_global.vc_arr2;
      vvc_liste_coupl                         apex_application_global.vc_arr2;
    begin
      vvc_liste_a_trans :=
        sie_07_util_pkg.string_to_table (vre_parmt_group_plugn.vva_trans_libl,
                                         ',');

      if vvc_liste_a_trans.count > 0 then
        for v in vvc_liste_a_trans.first .. vvc_liste_a_trans.last loop
          vvc_liste_coupl :=
            sie_07_util_pkg.string_to_table (vvc_liste_a_trans (v),
                                             ';');

          gta_trans_libl (vvc_liste_coupl (1)) := vvc_liste_coupl (2);
        end loop;
      end if;
    end trans_libl;

    procedure impri_entet_plugn is
      vta_ligne_1                             typ_tab_coln_plugn;
      vta_ligne_2                             typ_tab_coln_plugn;
      vta_ligne_3                             typ_tab_coln_plugn;

      function analz_ligne_entet (pva_ligne in varchar2)
        return typ_tab_coln_plugn is
        vta_coln_plugn                          typ_tab_coln_plugn;
        vvc_liste_group                         apex_application_global.vc_arr2;
        vvc_liste_sous_group                    apex_application_global.vc_arr2;
        vnu_compt                               pls_integer default 0;
      begin
        vvc_liste_group :=
          sie_07_util_pkg.string_to_table (pva_ligne,
                                           ',');

        if vvc_liste_group.count > 0 then
          for v in vvc_liste_group.first .. vvc_liste_group.last loop
            vnu_compt := vnu_compt + 1;
            vvc_liste_sous_group :=
              sie_07_util_pkg.string_to_table (vvc_liste_group (v),
                                               ';');
            vta_coln_plugn (vnu_compt).vva_valr := trim (vvc_liste_sous_group (1));
            vta_coln_plugn (vnu_compt).vnu_colsp := vvc_liste_sous_group (2);
            vta_coln_plugn (vnu_compt).vnu_rowsp := vvc_liste_sous_group (3);
          end loop;
        end if;

        return vta_coln_plugn;
      end analz_ligne_entet;

      procedure impri_ligne (pta_ligne in typ_tab_coln_plugn) is
        v_data_row_plugn                        plpdf_type.t_row_datas;
        v_algnm_plugn                           plpdf_type.t_row_aligns;
        v_tail_plugn                            plpdf_type.t_row_widths;
        vnu_compt                               pls_integer default 0;
        vnu_tail_ventl                          pls_integer default 0;
        vnu_coln_courn                          pls_integer default 1;
        vnu_coln_max                            pls_integer default 0;
      begin
        if pta_ligne.count > 0 then
          for v in pta_ligne.first () .. pta_ligne.last () loop
            vnu_compt := vnu_compt + 1;
            v_data_row_plugn (vnu_compt) := formt_chain_br (pta_ligne (v).vva_valr);

            if v = pta_ligne.first () and vre_parmt_group_plugn.vva_indic_ventl = 'Y' then
              for c in v .. vre_parmt_group_plugn.vnu_nombr_coln_ventl loop
                vnu_tail_ventl := vnu_tail_ventl + v_tail_cell (c);
              end loop;

              v_tail_plugn (vnu_compt) := vnu_tail_ventl;
              vnu_coln_courn := vnu_coln_courn + vre_parmt_group_plugn.vnu_nombr_coln_ventl - 1;
            else
              vnu_coln_max := vnu_coln_courn + pta_ligne (v).vnu_colsp - 1;
              v_tail_plugn (vnu_compt) := 0;

              for b in vnu_coln_courn .. vnu_coln_max loop
                v_tail_plugn (vnu_compt) := v_tail_plugn (vnu_compt) + v_tail_cell (b);
              end loop;

              vnu_coln_courn := vnu_coln_max;
            end if;

            vnu_coln_courn := vnu_coln_courn + 1;
            v_algnm_plugn (vnu_compt) := 'C';
          end loop;

          plpdf_pkg.row_print2 (v_data_row_plugn,
                                v_bordr_cell,
                                v_tail_plugn,
                                v_algnm_plugn,
                                v_style_cell,
                                v_lign_max,
                                obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                                 vnu_tail_polc_ent),
                                1);
        end if;
      end impri_ligne;
    begin
      vta_ligne_1 := analz_ligne_entet (vre_parmt_group_plugn.vva_ligne_1);
      vta_ligne_2 := analz_ligne_entet (vre_parmt_group_plugn.vva_ligne_2);
      vta_ligne_3 := analz_ligne_entet (vre_parmt_group_plugn.vva_ligne_3);


      if gpi_parmt_impr.nu_coln_polc_tail is not null then
        vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
      else
        vnu_tail_polc_ent := 11;
      end if;

      plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                 'B'),
                              vnu_tail_polc_ent);

      impri_ligne (vta_ligne_1);
      impri_ligne (vta_ligne_2);
      impri_ligne (vta_ligne_3);
    end impri_entet_plugn;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select   apex_application.do_substitutions (pir.libl_regn),
               air.region_id id_plug,
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft,
               apex_application.do_substitutions (air.show_nulls_as)
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vnu_id_plugn,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft,
               gva_valr_nul
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page_ir pir,
               apex_ir air
       where   pir.app_id_formt = pnu_aplic and pir.app_page_id_formt = pnu_page and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vnu_largr_deft := nvl (vnu_largr_deft, 0);

    if vnu_largr_deft <= 0 then
      vnu_largr_deft := 1.5;
    end if;

    -- Récupérer les paramètres du raport
    gpi_parmt_impr := obten_parmt_impre_raprt (vnu_ref_ir);
    -- Obtenir les paramètres pour le surlignement
    vta_parmt_surlg := obten_parmt_surlg_raprt (vnu_rpts_id);
    vre_parmt_group := obten_parmt_group_raprt (vnu_rpts_id);
    vre_parmt_group_plugn := obten_parmt_group_plugn (vnu_id_plugn);

    vva_nom_raprt :=
      nvl (replace (gpi_parmt_impr.va_entet_texte,
                    '#TITLE#',
                    vva_nom_raprt),
           vva_nom_raprt);
    vva_nom_raprt := apex_application.do_substitutions (vva_nom_raprt);
    vva_nom_raprt := formt_chain_br (vva_nom_raprt);

    --Obtenir la procédure de couleur
    vva_procd_coulr :=
      sie_11_prodt_pkg.obten_procd_coulr_plpdf (
        sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic (pnu_aplic))
      );

    if vva_procd_coulr is not null then
      defnr_coulr_pdf (vva_procd_coulr);
    end if;

    vva_procd_entet :=
      sie_11_prodt_pkg.obten_procd_entet_plpdf (
        sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic (pnu_aplic))
      );
    vva_procd_pied_page :=
      sie_11_prodt_pkg.obten_procd_pied_page_plpdf (
        sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic (pnu_aplic))
      );

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  apex_application.do_substitutions (vva_selct),
                                  var_infor_coln,
                                  chr (10) || chr (13));

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      -- vnu_largr_dispo                            := obten_largr_dispo_page (gpi_parmt_impr);

      -- Transformer toutes les valeurs en pouces
      vnu_index_page := 1;
      -- Créer la premiere page
      var_pages (vnu_index_page).nu_dernr_coln := 0;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          -- La page sera créée si elle n'existe pas
          var_pages (vnu_index_page).nu_dernr_coln := i;
          var_pages (vnu_index_page).nu_largr := var_pages (vnu_index_page).nu_largr + var_infor_coln (i).nu_largr_reltv;
        end if;
      end loop;

      begin
        init_group_entet;
        init_calcl_fonct;

        init_pdf;

        trans_libl;
        calcl_largr_raprt;

        impri_entet_plugn;

        if not gbo_presn_group then
          impri_entet;
        end if;

        -- Écrire les données
        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          --Créer une nouvelle entête de tableau sur une nouvelle page s'il reste des données
          if round ( (plpdf_pkg.getpageavailableheight -
                      plpdf_toolkit.conv (12,
                                          'mm')),
                    0) < round (plpdf_pkg.getcurrenty,
                                0) then
            impri_pied_page;
            plpdf_pkg.newpage;
            gerer_group_entet;
            impri_entet;
          end if;

          if verfr_chang_group then
            if vnu_tail_group <> 0 and vbo_presn_fonct then
              termn_group_entet;
              init_calcl_fonct;
            end if;

            if round ( (plpdf_pkg.getpageavailableheight -
                        plpdf_toolkit.conv (12,
                                            'mm')),
                      0) < round (plpdf_pkg.getcurrenty,
                                  0) then
              impri_pied_page;
              plpdf_pkg.newpage;
              gerer_group_entet;
              impri_entet;
            end if;

            gerer_group_entet;
            impri_entet;
          end if;

          init_surlg_ligne;
          calcl_fonct;

          --Remplir le tableau
          defnr_ligne;

          --Définir le highlight pour la ligne courante.
          defnr_surlg;

          if round ( (plpdf_pkg.getpageavailableheight -
                      plpdf_toolkit.conv (12,
                                          'mm')),
                    0) < round (plpdf_pkg.getcurrenty,
                                0) then
            impri_pied_page;
            plpdf_pkg.newpage;
            gerer_group_entet;
            impri_entet;
          end if;

          --imprimer la ligne
          impri_corps;
        end loop;

        --pied de page
        if vbo_presn_fonct then
          termn_group_entet;
        end if;

        impri_pied_page;

        --Envoyer les données au fichier blob
        plpdf_pkg.senddoc (v_blob);
      end;

      --téléverser pdf
      owa_util.mime_header ('application/pdf',
                            false);
      htp.p ('Content-length: ' || dbms_lob.getlength (v_blob));
      htp.p (   'Content-Disposition: attachment; filename="'
             || replace (formt_nom_fichr (vva_nom_raprt) || '.pdf',
                         chr (13),
                         '_'));
      owa_util.http_header_close ();
      wpg_docload.download_file (v_blob);
    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  exception
    when others then
      ete ();
  end;

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln) is
    vbo_dirct                               boolean default false;
    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (200);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vcl_corps                               clob;
    vva_seprt_coln                          varchar2 (1);
    vnu_compt_ligne                         number;
    vnu_rpts_id                             number;

    procedure ajouter (pva_pre in varchar2,
                       pva_chaine in varchar2) is
    begin
      if pva_pre is not null
      or pva_chaine is not null then
        if vbo_dirct then
          --htp.putraw (utl_raw.cast_to_raw(pva_pre || pva_chaine));
          htp.prn (pva_pre || pva_chaine);
        --dbms_output.put (pva_pre || pva_chaine);
        else
          dbms_lob.writeappend (vcl_corps,
                                length (pva_pre || pva_chaine),
                                pva_pre || pva_chaine);
        end if;
      end if;
    end;

    procedure ajouter_chaine (pva_pre in varchar2,
                              pva_chaine in varchar2) is
    begin
      ajouter (pva_pre,
                  '"'
               || replace (pva_chaine,
                           '"',
                           '""')
               || '"');
    end;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select   pir.libl_regn,
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page pag,
               vd_sie_13_page_ir pir,
               apex_ir air
       where   pag.ref_aplic = sie_11_aplic_pkg.obten_aplic_numr_apex (pnu_aplic)
           and pag.numr_apex = pnu_page
           and pir.ref_page = pag.seqnc
           and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  vva_selct,
                                  var_infor_coln,
                                  chr (10));

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      if vbo_dirct then
        owa_util.mime_header ('text/csv',
                              false);
        htp.p ('Content-Disposition: attachment; filename="' || formt_nom_fichr (vva_nom_raprt) || '.csv' || '"');
        --dbms_output.put_line ('HTTP/1.x 200 OK');
        --dbms_output.put_line ('Content-Type: text/csv; charset=UTF-8');
        --dbms_output.put_line ('Content-Disposition: attachment; filename="' || formt_nom_fichr(vva_nom_raprt) || '.csv' || '"');
        owa_util.http_header_close;
      --dbms_output.put_line (null);
      else
        dbms_lob.createtemporary (vcl_corps,
                                  true);
      end if;

      -- Créer la ligne d'entête
      vva_seprt_coln := null;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          ajouter_chaine (vva_seprt_coln,
                          var_infor_coln (i).va_libl);
          vva_seprt_coln := pva_seprt_coln;
        end if;
      end loop;

      -- Saut de ligne
      ajouter (null,
               chr (10));

      -- Écrire les données
      vnu_compt_ligne := 0;

      while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                             var_infor_coln) loop
        vnu_compt_ligne := vnu_compt_ligne + 1;

        vva_seprt_coln := null;

        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
              when 'NUMBR' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).nu_valr_numbr);
              when 'DATE' then
                ajouter_chaine (vva_seprt_coln,
                                to_char (var_infor_coln (i).da_valr_date,
                                         'YYYY-MM-DD'));
              when 'TIMST' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).ts_valr_timst);
              else
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
            end case;

            vva_seprt_coln := pva_seprt_coln;
          end if;
        end loop;

        -- Saut de ligne
        ajouter (null,
                 chr (10));
      end loop;

      if vnu_compt_ligne = 0 then
        ajouter_chaine (null,
                        vva_mesg_aucun_don);
        ajouter (null,
                 chr (10));
      end if;

      if vbo_dirct then
        null;
      else
        sie_11_prodt_pkg.telvs_fichr (vcl_corps,
                                      formt_nom_fichr (vva_nom_raprt) || '.csv',
                                      true,
                                      'texte/csv');

        dbms_lob.freetemporary (vcl_corps);
      end if;
    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  /*exception
                                                                                                                                                                                                                                                                                    when others then
    htp.p (sqlerrm);*/
  end;
end;
/

Prompt Package Body SIE_25_PUBLC_IMEDT_PKG;
/* Formatted on 04/12/2013 11:35:44 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_publc_imedt_pkg as
  gnu_travl                               number (10);

  function obten_nouv_travl (pva_nom_raprt in varchar2)
    return number is
  begin
    gnu_travl :=
      sie_25_publc_noyau_pkg.initl_travl (pva_nom_raprt,
                                          'O');
    return gnu_travl;
  end obten_nouv_travl;

  function ajout_publc (pnu_travl in number,
                        pva_nom_fichr_sort in varchar2,
                        pva_code_type_publc in varchar2)
    return number is
  begin
    return sie_25_publc_noyau_pkg.ajout_publc_travl (pva_nom_fichr_sort,
                                                     pva_code_type_publc,
                                                     pnu_travl);
  end ajout_publc;

  function ajout_parmt (pva_code_parmt in varchar2,
                        pda_valr_parmt in date,
                        pnu_publc_travl in number)
    return number is
    pnu_parmt_seqnc                         number (10);
  begin
    pnu_parmt_seqnc :=
      sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                          null,
                                          null,
                                          pda_valr_parmt,
                                          pnu_publc_travl);
    return pnu_parmt_seqnc;
  end ajout_parmt;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pva_valr_parmt in varchar2,
                         pnu_publc_travl in number) is
  begin
    sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                        pva_valr_parmt,
                                        null,
                                        null,
                                        pnu_publc_travl);
  end ajout_parmt;

  function ajout_parmt (pva_code_parmt in varchar2,
                        pnu_valr_parmt in number,
                        pnu_publc_travl in number)
    return number is
    pnu_parmt_seqnc                         number (10);
  begin
    pnu_parmt_seqnc :=
      sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                          null,
                                          pnu_valr_parmt,
                                          null,
                                          pnu_publc_travl);
    return pnu_parmt_seqnc;
  end ajout_parmt;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pnu_valr_parmt in number,
                         pnu_publc_travl in number) is
  begin
    sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                        null,
                                        pnu_valr_parmt,
                                        null,
                                        pnu_publc_travl);
  end ajout_parmt;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pda_valr_parmt in date,
                         pnu_publc_travl in number) is
  begin
    sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                        null,
                                        null,
                                        pda_valr_parmt,
                                        pnu_publc_travl);
  end ajout_parmt;

  procedure lancr_raprt is
  begin
    sie_25_publc_noyau_pkg.lancr_travl ('PDF',
                                        gnu_travl);
  end lancr_raprt;

  procedure lancr_raprt (pva_nom_raprt in varchar2,
                         pva_type_publc in varchar2,
                         pva_code_parmt in varchar2,
                         pnu_valr_parmt in number,
                         pbo_redrg_web_reslt in boolean default true,
                         pnu_domn in number default null,
                         pnu_utils in number default null) is
    pragma autonomous_transaction;
    vnu_publc_travl                         number (10);
  begin
    gnu_travl :=
      sie_25_publc_noyau_pkg.initl_travl (pva_nom_raprt,
                                          'O');

    vnu_publc_travl :=
      sie_25_publc_noyau_pkg.ajout_publc_travl (pva_nom_raprt,
                                                pva_type_publc,
                                                gnu_travl,
                                                null);

    sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                        null,
                                        pnu_valr_parmt,
                                        null,
                                        vnu_publc_travl);
    commit;
    sie_25_publc_noyau_pkg.lancr_travl ('PDF',
                                        gnu_travl,
                                        pbo_redrg_web_reslt);
    commit;
  end lancr_raprt;
end sie_25_publc_imedt_pkg;
/

Prompt Package Body SIE_25_PUBLC_NOYAU_PKG;
/* Formatted on 04/12/2013 11:35:44 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_publc_noyau_pkg is
  function obten_travl_courn (pbo_imedt in boolean default true,
                              pnu_type_travl in number default null,
                              pbo_mesgr in boolean default false,
                              pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn,
                              pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return number is
    vnu_stat_initl                          number (10)
                                              default sie_12_stat_pkg.obten_stat_initl_struc_aplic ('TRAVL',
                                                                                                    'AFW');
    vnu_travl                               number (10);
    vva_imedt                               varchar2 (1);
    vnu_type_travl                          number (10);
  begin
    if not pbo_mesgr then
      if pbo_imedt then
        vva_imedt := 'O';
      else
        vva_imedt := 'N';
      end if;

      if pnu_type_travl is null then
        select   seqnc
          into   vnu_type_travl
          from   vd_sie_25_type_travl
         where   seqnc = sie_12_domn_pkg.obten_type_travl_deft (pnu_domn);
      else
        vnu_type_travl := pnu_type_travl;
      end if;

      select   min (seqnc)
        into   vnu_travl
        from   vd_i_sie_25_travl t
       where   t.ref_stat = vnu_stat_initl
           and ref_utils = pnu_utils
           and indic_imedt = vva_imedt
           and ref_type_travl = vnu_type_travl;
    end if;

    return vnu_travl;
  exception
    when others then
      raise;
  end obten_travl_courn;

  function initl_travl (pva_nom_fichr_sort in varchar2,
                        pva_indic_imedt in varchar2,
                        pnu_type_travl in number default null,
                        pbo_mesgr in boolean default false,
                        pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn,
                        pnu_utils in number default sie_12_utils_pkg.obten_usagr_conct)
    return number is
    vnu_travl_courn                         number (10)
                                              default obten_travl_courn (pva_indic_imedt = 'O',
                                                                         pnu_type_travl,
                                                                         pbo_mesgr,
                                                                         pnu_domn                   => pnu_domn,
                                                                         pnu_utils                  => pnu_utils);
  begin
    if vnu_travl_courn is null then
      insert into   vd_i_sie_25_travl (ref_utils, indic_imedt, nom, ref_domn, ref_type_travl)
           values   (pnu_utils,
                     pva_indic_imedt,
                     pva_nom_fichr_sort,
                     pnu_domn,
                     pnu_type_travl)
        returning   seqnc
             into   vnu_travl_courn;
    end if;

    return vnu_travl_courn;
  exception
    when others then
      raise;
  end initl_travl;

  function ajout_publc_travl (pva_nom_fichr_sort in varchar2,
                              pva_code_type_publc in varchar2,
                              pnu_travl in number,
                              pva_code_publc in varchar2 default null,
                              pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn)
    return number is
    vnu_type_publc                          number (10);
    vnu_publc                               number (10);
    vnu_publc_travl                         number (10);
    vnu_versn_publc                         number (10);
  begin
    select   seqnc
      into   vnu_type_publc
      from   vd_i_sie_25_type_publc tp
     where   tp.code = pva_code_type_publc;

    if pva_code_publc is not null then
      --Si on a un code de publication, prendre cette publication
      select   seqnc
        into   vnu_publc
        from   vd_i_sie_25_publc
       where   code = pva_code_publc and ref_type_publc = vnu_type_publc;
    else
      --Prendre la publication par defaut pour le domaine
      select   ref_publc
        into   vnu_publc
        from   vd_i_sie_25_domn_type_publc
       where   ref_domn = pnu_domn and ref_type_publc = vnu_type_publc;
    end if;


    declare
      vva_nom_publc                           varchar2 (60);
    begin
      select   seqnc
        into   vnu_versn_publc
        from   vd_i_sie_25_versn_publc
       where   (select   sysdate
                  from   dual) between date_debut_efect
                                   and nvl (date_fin_efect,
                                            (select   sysdate + 10
                                               from   dual))
           and ref_publc = vnu_publc;
    exception
      when no_data_found then
        if (vnu_publc is not null) then
          select   nom
            into   vva_nom_publc
            from   vd_sie_25_publc
           where   seqnc = vnu_publc;
        else
          vva_nom_publc := 'ce rapport';
        end if;

        sie_01_err_apex_pkg.lever_err_apex_code ('RAP.000005',
                                                 vva_nom_publc,
                                                 pva_code_prodt             => 'SEM');
    end;

    insert into   vd_i_sie_25_publc_travl pt (nom, ref_versn_publc, ref_travl)
         values   (pva_nom_fichr_sort,
                   vnu_versn_publc,
                   pnu_travl)
      returning   seqnc
           into   vnu_publc_travl;

    return vnu_publc_travl;
  end ajout_publc_travl;

  procedure ajout_publc_travl (pva_nom_fichr_sort in varchar2,
                               pva_code_type_publc in varchar2,
                               pnu_travl in number,
                               pva_code_publc in varchar2 default null,
                               pnu_domn in number default sie_12_domn_pkg.obten_domn_sesn) is
    vnu_publc_travl                         number (10);
  begin
    vnu_publc_travl :=
      ajout_publc_travl (pva_nom_fichr_sort,
                         pva_code_type_publc,
                         pnu_travl,
                         pva_code_publc);
  end ajout_publc_travl;

  function obten_type_publc (pnu_publc_travl in number)
    return number is
    vnu_type_publc                          number (10);
  begin
    select   p.ref_type_publc
      into   vnu_type_publc
      from   vd_i_sie_25_publc_travl pt,
             vd_i_sie_25_publc p,
             vd_i_sie_25_versn_publc vp
     where   vp.seqnc = pt.ref_versn_publc and vp.ref_publc = p.seqnc and pt.seqnc = pnu_publc_travl;

    return vnu_type_publc;
  end obten_type_publc;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pva_valr_varch in varchar2,
                         pnu_valr_numbr in number,
                         pda_valr_date date,
                         pnu_publc_travl in number) is
    vnu_seqnc_parmt                         number (10);
    vnu_type_publc                          number (10);
  begin
    vnu_type_publc := obten_type_publc (pnu_publc_travl);

    select   seqnc
      into   vnu_seqnc_parmt
      from   vd_i_sie_25_parmt_type_publc
     where   ref_type_publc = vnu_type_publc and upper (code) = upper (pva_code_parmt);

    insert
      into   vd_i_sie_25_parmt_publc_travl (ref_publc_travl, ref_parmt_type_publc, valr_varch, valr_date, valr_numbr)
    values   (pnu_publc_travl,
              vnu_seqnc_parmt,
              pva_valr_varch,
              pda_valr_date,
              pnu_valr_numbr);
  end ajout_parmt;

  function ajout_parmt (pva_code_parmt in varchar2,
                        pva_valr_varch in varchar2,
                        pnu_valr_numbr in number,
                        pda_valr_date date,
                        pnu_publc_travl in number)
    return number is
    vnu_seqnc_parmt                         number (10);
    vnu_type_publc                          number (10);
    vnu_seqnc                               number (10);
  begin
    vnu_type_publc := obten_type_publc (pnu_publc_travl);

    select   seqnc
      into   vnu_seqnc_parmt
      from   vd_i_sie_25_parmt_type_publc
     where   ref_type_publc = vnu_type_publc and upper (code) = upper (pva_code_parmt);

    insert
         into   vd_i_sie_25_parmt_publc_travl (ref_publc_travl, ref_parmt_type_publc, valr_varch, valr_date, valr_numbr)
       values   (pnu_publc_travl,
                 vnu_seqnc_parmt,
                 pva_valr_varch,
                 pda_valr_date,
                 pnu_valr_numbr)
    returning   seqnc
         into   vnu_seqnc;

    return vnu_seqnc;
  end ajout_parmt;

  procedure lancr_travl (pva_formt in varchar2,
                         pnu_travl in number,
                         pbo_redrg_web_reslt in boolean default true) is
  begin
    sie_25_travl_publc_pkg.lancr_travl (pnu_travl,
                                        pva_formt,
                                        pbo_redrg_web_reslt);
  end lancr_travl;

  function obten_nombr_ocurn_exect_courn
    return number is
  begin
    return 0;
  end obten_nombr_ocurn_exect_courn;
end sie_25_publc_noyau_pkg;
/

Prompt Package Body SIE_25_PUBLC_PKG;
/* Formatted on 04/12/2013 11:35:45 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_publc_pkg is
  function obten_travl_courn (pva_imedt in varchar2)
    return number is
  begin
    if (pva_imedt = 'YES'
     or pva_imedt = 'TRUE') then
      return sie_25_publc_noyau_pkg.obten_travl_courn (true);
    else
      return sie_25_publc_noyau_pkg.obten_travl_courn (false);
    end if;
  end obten_travl_courn;

  function obten_travl_courn (pbo_imedt in boolean default true)
    return number is
  begin
    return sie_25_publc_noyau_pkg.obten_travl_courn (pbo_imedt);
  end obten_travl_courn;

  function obten_nouv_travl (pva_nom_raprt in varchar2,
                             pnu_type_travl in number default null,
                             pbo_mesgr in boolean default false)
    return number is
  begin
    return sie_25_publc_noyau_pkg.initl_travl (pva_nom_raprt,
                                               'N',
                                               pnu_type_travl,
                                               pbo_mesgr);
  end obten_nouv_travl;

  function obten_nombr_publc_travl (pnu_travl in number default null)
    return number is
    vnu_travl                               number (10) default nvl (pnu_travl, obten_travl_courn ());
    vnu_count                               pls_integer;
  begin
    select   count (1)
      into   vnu_count
      from   vd_sie_25_publc_travl pt
     where   pt.ref_travl = vnu_travl;

    return vnu_count;
  end obten_nombr_publc_travl;

  procedure ajout_publc_travl (pva_nom in varchar2,
                               pva_type_publc in varchar2,
                               pva_code_parmt in varchar2,
                               pnu_valr_parmt in number,
                               pnu_travl in number default null,
                               pnu_type_travl in number default null,
                               pbo_mesgr in boolean default false) is
    vnu_travl                               number (10);
  begin
    vnu_travl :=
      ajout_publc_travl (pva_nom,
                         pva_type_publc,
                         pva_code_parmt,
                         pnu_valr_parmt,
                         pnu_travl,
                         pnu_type_travl,
                         pbo_mesgr);
  end ajout_publc_travl;

  function ajout_publc_travl (pva_nom in varchar2,
                              pva_type_publc in varchar2,
                              pva_code_parmt in varchar2,
                              pnu_valr_parmt in number,
                              pnu_travl in number default null,
                              pnu_type_travl in number default null,
                              pbo_mesgr in boolean default false)
    return number is
    vnu_travl                               number (10);
    vnu_publc_travl                         number (10);
  begin
    vnu_travl :=
      nvl (pnu_travl,
           sie_25_publc_noyau_pkg.initl_travl (null,
                                               'N',
                                               pnu_type_travl,
                                               pbo_mesgr));

    vnu_publc_travl :=
      sie_25_publc_noyau_pkg.ajout_publc_travl (pva_nom,
                                                pva_type_publc,
                                                vnu_travl,
                                                null);

    ajout_parmt (pva_code_parmt,
                 pnu_valr_parmt,
                 vnu_publc_travl);

    return vnu_publc_travl;
  end ajout_publc_travl;

  function initl_travl (pnu_travl in number,
                        pva_nom_fichr_sort in varchar2,
                        pva_indic_imedt in varchar2,
                        pnu_type_travl in number default null)
    return number is
    vnu_travl                               number (10);
  begin
    vnu_travl :=
      nvl (pnu_travl,
           sie_25_publc_noyau_pkg.initl_travl (null,
                                               'N',
                                               pnu_type_travl));

    return vnu_travl;
  end initl_travl;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pva_valr_parmt in varchar2,
                         pnu_travl_publc in number) is
  begin
    sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                        pva_valr_parmt,
                                        null,
                                        null,
                                        pnu_travl_publc);
  end ajout_parmt;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pnu_valr_parmt in number,
                         pnu_travl_publc in number) is
  begin
    sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                        null,
                                        pnu_valr_parmt,
                                        null,
                                        pnu_travl_publc);
  end ajout_parmt;

  procedure ajout_parmt (pva_code_parmt in varchar2,
                         pda_valr_parmt in date,
                         pnu_travl_publc in number) is
  begin
    sie_25_publc_noyau_pkg.ajout_parmt (pva_code_parmt,
                                        null,
                                        null,
                                        pda_valr_parmt,
                                        pnu_travl_publc);
  end ajout_parmt;

  procedure copie_publc_travl (pnu_sorc_travl in number,
                               pnu_destn_travl in number,
                               pnu_publc_travl in number default null) is
    vnu_nouv_publc_travl                    number (10);
    vnu_nouv_parmt_publc_travl              number (10);

    cursor cur_publc_travl is
      select   seqnc,
               ref_versn_publc,
               ref_stat,
               nom,
               indic_parmt_alimn
        from   vd_i_sie_25_publc_travl
       where   (ref_travl = pnu_sorc_travl
             or pnu_sorc_travl is null)
           and (seqnc = pnu_publc_travl
             or pnu_publc_travl is null)
           and (pnu_sorc_travl is not null
             or pnu_publc_travl is not null);

    cursor cur_parmt_publc_travl (pnu_publc_travl_seqnc in number) is
      select   seqnc,
               ref_parmt_type_publc,
               valr_varch,
               valr_date,
               valr_numbr
        from   vd_i_sie_25_parmt_publc_travl
       where   ref_publc_travl = pnu_publc_travl_seqnc;

    cursor cur_ocurn_parmt_publc (pnu_parmt_publc_seqnc in number) is
      select   seqnc,
               valr_date,
               valr_numbr,
               valr_varch
        from   vd_i_sie_25_ocurn_parmt_publc
       where   ref_parmt_publc_travl = pnu_parmt_publc_seqnc;
  begin
    for rec_publc_travl in cur_publc_travl loop
      -- Copie de chaque publc_travl de la job à merger
      insert into   vd_i_sie_25_publc_travl (ref_versn_publc, ref_travl, ref_stat, nom, indic_parmt_alimn)
           values   (rec_publc_travl.ref_versn_publc,
                     pnu_destn_travl,
                     rec_publc_travl.ref_stat,
                     rec_publc_travl.nom,
                     'N')
        returning   seqnc
             into   vnu_nouv_publc_travl;

      -- copie de chaque parmt_publc_travl associé au publc_travl
      for rec_parmt_publc_travl in cur_parmt_publc_travl (rec_publc_travl.seqnc) loop
        insert
             into   vd_i_sie_25_parmt_publc_travl (ref_publc_travl, ref_parmt_type_publc, valr_varch, valr_date, valr_numbr)
           values   (vnu_nouv_publc_travl,
                     rec_parmt_publc_travl.ref_parmt_type_publc,
                     rec_parmt_publc_travl.valr_varch,
                     rec_parmt_publc_travl.valr_date,
                     rec_parmt_publc_travl.valr_numbr)
        returning   seqnc
             into   vnu_nouv_parmt_publc_travl;

        --copie de chaque ocurn_parmt_publc_travl asocié au parmt_publc_travl
        for rec_ocurn_parmt_publc in cur_ocurn_parmt_publc (rec_parmt_publc_travl.seqnc) loop
          insert into   vd_i_sie_25_ocurn_parmt_publc (valr_date, valr_numbr, valr_varch, ref_parmt_publc_travl)
               values   (rec_ocurn_parmt_publc.valr_date,
                         rec_ocurn_parmt_publc.valr_numbr,
                         rec_ocurn_parmt_publc.valr_varch,
                         vnu_nouv_parmt_publc_travl);
        end loop;
      end loop;
    end loop;
  end copie_publc_travl;

  procedure ajout_travl_courn (pnu_travl in number default null,
                               pnu_publc_travl in number default null) is
    vnu_travl_courn                         number (10) default 0;
  begin
    vnu_travl_courn := nvl (obten_travl_courn (false), obten_nouv_travl (null));
    copie_publc_travl (pnu_travl,
                       vnu_travl_courn,
                       pnu_publc_travl);
  end ajout_travl_courn;

  procedure defnr_stat_publc_travl (pnu_seqnc in number,
                                    pva_code_stat in varchar2) is
    vnu_stat_seqnc                          number (10);
  begin
    vnu_stat_seqnc :=
      sie_12_stat_pkg.obten_stat ('PUBLC_TRAVL',
                                  pva_code_stat,
                                  'AFW');

    update   vd_sie_25_publc_travl
       set   ref_stat = vnu_stat_seqnc
     where   seqnc = pnu_seqnc;

    commit;
  end defnr_stat_publc_travl;
/*
          procedure lancr_raprt is
  begin
    sie_25_publc_noyau_pkg.lancr_travl ('PDF');
  end lancr_raprt;
  procedure lancr_raprt (pva_nom_raprt in varchar2,
                         pva_type_raprt in varchar2,
                         pva_code_parmt in varchar2,
                         pnu_valr_parmt in number) is
    pragma autonomous_transaction;
  begin
    initl_exect_raprt (pva_nom_raprt,
                       pva_type_raprt);
    ajout_parmt (pva_code_parmt,
                 pnu_valr_parmt);
    commit;
    lancr_raprt ();
    commit;
  end lancr_raprt;*/

end sie_25_publc_pkg;
/

Prompt Package Body SIE_25_RAPRT_INTER_EXPOR_PKG;
/* Formatted on 04/12/2013 11:35:45 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_RAPRT_INTER_EXPOR_PKG" as
  knu_marge_gauch                constant number default 0.5;
  knu_marge_droit                constant number default 0.5;

  type typ_rec_parmt_impre is record
  (
    va_indic_trouv                          varchar2 (1) default 'N',
    va_contn_disps                          apex_regn.prn_content_disposition%type default 'ATTACHMENT',
    va_formt_papr                           apex_regn.prn_paper_size%type default 'LETTER',
    va_orien_papr                           apex_regn.prn_orientation%type default 'VERTICAL',
    va_unite_mesr                           apex_regn.prn_units%type default 'INCHES',
    nu_largr_papr                           apex_regn.prn_width%type default 8.5,
    nu_hautr_papr                           apex_regn.prn_height%type default 11,
    nu_bordr_tail                           apex_regn.prn_border_width%type default 0.5,
    va_bordr_coulr                          apex_regn.prn_border_color%type,
    va_entet_polc_faml                      apex_regn.prn_page_header_font_family%type default 'Helvetica',
    va_entet_polc_poids                     apex_regn.prn_page_header_font_weight%type default 'normal',
    nu_entet_polc_tail                      apex_regn.prn_page_header_font_size%type default 12,
    va_entet_polc_coulr                     apex_regn.prn_page_header_font_color%type,
    va_entet_align                          apex_regn.prn_page_header_alignment%type default 'LEFT',
    va_entet_texte                          apex_regn.prn_page_header%type,
    va_coln_polc_faml                       apex_regn.prn_header_font_family%type default 'Helvetica',
    va_coln_polc_poids                      apex_regn.prn_header_font_weight%type default 'bold',
    nu_coln_polc_tail                       apex_regn.prn_header_font_size%type default 8,
    va_coln_polc_coulr                      apex_regn.prn_header_font_color%type,
    va_coln_fond_coulr                      apex_regn.prn_header_bg_color%type default '#e0e0e0',
    va_corps_polc_faml                      apex_regn.prn_body_font_family%type default 'Helvetica',
    va_corps_polc_poids                     apex_regn.prn_body_font_weight%type default 'normal',
    nu_corps_polc_tail                      apex_regn.prn_body_font_size%type default 8,
    va_corps_polc_coulr                     apex_regn.prn_body_font_color%type,
    va_corps_fond_coulr                     apex_regn.prn_body_bg_color%type default '#f5f5f5',
    va_pied_polc_faml                       apex_regn.prn_page_footer_font_family%type default 'Helvetica',
    va_pied_polc_poids                      apex_regn.prn_page_footer_font_weight%type default 'normal',
    nu_pied_polc_tail                       apex_regn.prn_page_footer_font_size%type default 8,
    va_pied_polc_coulr                      apex_regn.prn_page_footer_font_color%type,
    va_pied_align                           apex_regn.prn_page_footer_alignment%type default 'LEFT',
    va_pied_texte                           apex_regn.prn_page_footer%type
  );

  type typ_rec_page is record
  (
    nu_largr                                number default 0,
    nu_dernr_coln                           binary_integer default 0
  );

  type typ_arr_page is table of typ_rec_page
                         index by binary_integer;

  gar_tail_papr                           sie_07_sql_pkg.typ_arr_ndx_vc30;

  function formt_nom_fichr (pva_nom in varchar2)
    return varchar2 is
    vva_nom                                 varchar2 (1000) default lower (pva_nom);
  begin
    vva_nom :=
      sie_07_sql_pkg.rempl_br (vva_nom,
                               '_');

    return substr (translate (vva_nom,
                              'çàâéèêöùû /\?',
                              'caaeeeouu____'),
                   1,
                   120);
  end;

  function formt_date (pda_date in date default sysdate)
    return varchar2 is
  begin
    return    'Le '
           || trim (to_char (pda_date,
                             'day'))
           || ' '
           || extract (day from pda_date)
           || ' '
           || trim (to_char (pda_date,
                             'month'))
           || ' '
           || extract (year from pda_date);
  end;

  function convr_parmt_align (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case upper (pva_parmt) when 'LEFT' then 'L' when 'RIGHT' then 'R' when 'CENTER' then 'C' else pva_deft end;
  end;

  function convr_parmt_faml (pva_parmt in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt) when 'times' then 'Times new roman' when 'courier' then 'Courier' else 'Arial' -- Défaut
                                                                                                                end;
  end;

  function convr_parmt_poids (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt) when 'bold' then 'B' when 'normal' then null else pva_deft end;
  end;

  function obten_parmt_impre_raprt (pnu_ref_ir in number)
    return typ_rec_parmt_impre is
    vpi_deft                                typ_rec_parmt_impre;
    vpi_parmt_impr                          typ_rec_parmt_impre;
  begin
    begin
      select   'O',
               reg.prn_content_disposition,
               reg.prn_paper_size,
               reg.prn_orientation,
               reg.prn_units,
               reg.prn_width,
               reg.prn_height,
               reg.prn_border_width,
               reg.prn_border_color,
               reg.prn_page_header_font_family,
               reg.prn_page_header_font_weight,
               reg.prn_page_header_font_size,
               reg.prn_page_header_font_color,
               reg.prn_page_header_alignment,
               reg.prn_page_header,
               reg.prn_header_font_family,
               reg.prn_header_font_weight,
               reg.prn_header_font_size,
               reg.prn_header_font_color,
               reg.prn_header_bg_color,
               reg.prn_body_font_family,
               reg.prn_body_font_weight,
               reg.prn_body_font_size,
               reg.prn_body_font_color,
               reg.prn_body_bg_color,
               reg.prn_page_footer_font_family,
               reg.prn_page_footer_font_weight,
               reg.prn_page_footer_font_size,
               reg.prn_page_footer_font_color,
               reg.prn_page_footer_alignment,
               reg.prn_page_footer
        into   vpi_parmt_impr
        from   vd_sie_13_page_ir pir,
               apex_ir air,
               apex_regn reg
       where   pir.seqnc = pnu_ref_ir and air.id = pir.id_apex and reg.id = air.region_id;
    exception
      when no_data_found then
        vpi_parmt_impr.va_indic_trouv := 'N';
    end;

    return vpi_parmt_impr;
  end;


  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID')) is
    vpi_parmt_impr                          typ_rec_parmt_impre;

    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (200);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_largr_dispo                         number;
    vnu_compt_ligne                         number;

    var_pages                               typ_arr_page;
    vnu_index_page                          binary_integer;
    vnu_somme_largr                         number;
    vnu_dernr_coln_ajout                    number;
    vnu_rpts_id                             number;

    -- variables plpdf
    vnu_elmnt_lign                          number := 0;
    vnu_elmnt_tabl                          number := 0;
    vnu_elmnt_restn                         number := 0;
    vnu_tail_polc_ent                       number := 0;
    vnu_tail_polc_corps                     number := 0;
    vnu_tail_polc_pied                      number := 0;
    vnu_largr_restn                         number := 0;
    vva_elmnt                               varchar2 (300);
    vbo_type_indtr                          boolean := false;
    v_blob                                  blob;

    --variable des paramètres du tableau
    v_bordr_cell                            plpdf.plpdf_type.t_row_borders;
    v_data_cell                             plpdf.plpdf_type.t_row_datas;
    v_data_row_ent                          plpdf.plpdf_type.t_row_datas;
    v_tail_cell                             plpdf.plpdf_type.t_row_widths;
    v_tail_intr_cell                        plpdf.plpdf_type.t_row_widths;
    v_algnm_cell                            plpdf.plpdf_type.t_row_aligns;
    v_algnm_entet                           plpdf.plpdf_type.t_row_aligns;
    v_style_cell                            plpdf.plpdf_type.t_row_styles;
    v_lign_max                              plpdf.plpdf_type.t_row_maxlines;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select                                                                                           /*pir.libl_regn*/
             ( select   plug_name
                 from   apex_regn reg
                where   reg.id = air.region_id),
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page pag,
               vd_sie_13_page_ir pir,
               apex_ir air
       where   pag.ref_aplic = sie_11_aplic_pkg.obten_aplic_numr_apex (pnu_aplic)
           and pag.numr_apex = pnu_page
           and pir.ref_page = pag.seqnc
           and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    vva_nom_raprt := aa.do_substitutions (vva_nom_raprt);

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vnu_largr_deft := nvl (vnu_largr_deft, 0);

    if vnu_largr_deft <= 0 then
      vnu_largr_deft := 1.5;
    end if;

    -- Récupérer les paramètres du raport
    vpi_parmt_impr := obten_parmt_impre_raprt (vnu_ref_ir);

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  vva_selct,
                                  var_infor_coln,
                                  '\n');

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      -- vnu_largr_dispo                            := obten_largr_dispo_page (vpi_parmt_impr);

      -- Transformer toutes les valeurs en pouces
      vnu_index_page := 1;
      -- Créer la premiere page
      var_pages (vnu_index_page).nu_dernr_coln := 0;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          -- La page sera créée si elle n'existe pas
          var_pages (vnu_index_page).nu_dernr_coln := i;
          var_pages (vnu_index_page).nu_largr := var_pages (vnu_index_page).nu_largr + var_infor_coln (i).nu_largr_reltv;
        end if;
      end loop;


      -- Instancier le titre du rapport
      declare
        vva_titre_raprt                         varchar2 (1000);
      begin
        vva_titre_raprt := apex_application.do_substitutions (vpi_parmt_impr.va_entet_texte);
        vva_titre_raprt :=
          sie_07_sql_pkg.rempl_br (vva_titre_raprt,
                                   ' ');

        vva_titre_raprt :=
          nvl (replace (vva_titre_raprt,
                        '#TITLE#',
                        vva_nom_raprt),
               vva_nom_raprt);
        vva_titre_raprt :=
          sie_07_sql_pkg.rempl_br (vva_titre_raprt,
                                   chr (10));
      end;

      begin
        --compter le nombre d'éléments
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vnu_elmnt_lign := vnu_elmnt_lign + 1;
          end if;
        end loop;

        --initialiser le pdf
        if vnu_elmnt_lign > 4 then
          plpdf.plpdf.init ('L');
          plpdf.plpdf.nopalias;
          plpdf.plpdf.setdoctitle (formt_nom_fichr (vva_nom_raprt) || '.pdf');
          plpdf.plpdf.setallmargin (plpdf.plpdf_toolkit.conv (knu_marge_droit,
                                                              'cm'),
                                    plpdf.plpdf_toolkit.conv (0.5,
                                                              'cm'),
                                    plpdf.plpdf_toolkit.conv (knu_marge_gauch,
                                                              'cm'));
          plpdf.plpdf.newpage;
          plpdf.plpdf.setprintfont (convr_parmt_faml (vpi_parmt_impr.va_entet_polc_faml),
                                    convr_parmt_poids (vpi_parmt_impr.va_entet_polc_poids,
                                                       'B'),
                                    14);
          plpdf.plpdf.printcell (0,
                                 10,
                                 vva_nom_raprt,
                                 0,
                                 0,
                                 'C');
          plpdf.plpdf.linebreak (20);
        else
          plpdf.plpdf.init;
          plpdf.plpdf.nopalias;
          plpdf.plpdf.setdoctitle (formt_nom_fichr (vva_nom_raprt) || '.pdf');
          plpdf.plpdf.setallmargin (plpdf.plpdf_toolkit.conv (knu_marge_droit,
                                                              'cm'),
                                    plpdf.plpdf_toolkit.conv (0.5,
                                                              'cm'),
                                    plpdf.plpdf_toolkit.conv (knu_marge_gauch,
                                                              'cm'));
          plpdf.plpdf.newpage;
          plpdf.plpdf.setprintfont (convr_parmt_faml (vpi_parmt_impr.va_entet_polc_faml),
                                    convr_parmt_poids (vpi_parmt_impr.va_entet_polc_poids,
                                                       'B'),
                                    14);
          plpdf.plpdf.printcell (0,
                                 10,
                                 vva_nom_raprt,
                                 0,
                                 0,
                                 convr_parmt_align (vpi_parmt_impr.va_entet_align,
                                                    'C'));
          plpdf.plpdf.linebreak (20);
        end if;

        -- Créer les différents set d'entêtes (tableau)
        vnu_dernr_coln_ajout := 0;
        vnu_largr_restn := (plpdf.plpdf.getpageavailablewidth);
        vnu_elmnt_restn := vnu_elmnt_lign;

        for j in var_pages.first () .. var_pages.last () loop
          for i in vnu_dernr_coln_ajout + 1 .. var_pages (j).nu_dernr_coln loop
            if var_infor_coln (i).va_indic_expor = 'O' then
              --Taille selon la largeur du champ
              case var_infor_coln (i).va_type_largr
                when 'POUCE' then
                  var_infor_coln (i).nu_largr_reltv :=
                    plpdf.plpdf_toolkit.conv (var_infor_coln (i).nu_largr,
                                              'in');
                  v_tail_intr_cell (i) := (var_infor_coln (i).nu_largr_reltv / plpdf.plpdf.getpageavailablewidth) * 100;
                when 'POURC' then
                  var_infor_coln (i).nu_largr_reltv := var_infor_coln (i).nu_largr / 100;
                  v_tail_intr_cell (i) := plpdf.plpdf.getpageavailablewidth * var_infor_coln (i).nu_largr_reltv;
                when 'POINT' then
                  var_infor_coln (i).nu_largr_reltv := var_infor_coln (i).nu_largr;
                  v_tail_intr_cell (i) := var_infor_coln (i).nu_largr_reltv;
                else
                  v_tail_intr_cell (i) := vnu_largr_restn / vnu_elmnt_restn;
              end case;

              vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

              vva_elmnt := var_infor_coln (i).va_libl;

              v_bordr_cell (vnu_elmnt_tabl) := '1';
              v_tail_cell (vnu_elmnt_tabl) := v_tail_intr_cell (i);

              if var_infor_coln (i).va_type_largr != 'INDET' then
                vnu_largr_restn := vnu_largr_restn - v_tail_cell (vnu_elmnt_tabl);
                vnu_elmnt_restn := vnu_elmnt_lign - vnu_elmnt_tabl;
              else
                --Vérifier s'il y d'autre type que 'indeterminé' et calculer la largeur restante
                for k in i .. var_pages (j).nu_dernr_coln loop
                  if k != var_pages (j).nu_dernr_coln and var_infor_coln (k).va_type_largr != 'INDET' then
                    vbo_type_indtr := true;
                  end if;
                end loop;

                if vbo_type_indtr then
                  vnu_largr_restn := vnu_largr_restn - v_tail_cell (vnu_elmnt_tabl);
                  vnu_elmnt_restn := vnu_elmnt_lign - vnu_elmnt_tabl;
                end if;
              end if;

              v_algnm_entet (vnu_elmnt_tabl) :=
                convr_parmt_align (var_infor_coln (i).va_align_entet,
                                   'C');
              v_data_cell (vnu_elmnt_tabl) := vva_elmnt;
              vbo_type_indtr := false;
            end if;
          end loop;

          vnu_dernr_coln_ajout := var_pages (j).nu_dernr_coln;
        end loop;

        vnu_elmnt_tabl := 0;

        if vpi_parmt_impr.nu_coln_polc_tail is not null then
          vnu_tail_polc_ent := vpi_parmt_impr.nu_coln_polc_tail;
        else
          vnu_tail_polc_ent := 11;
        end if;

        plpdf.plpdf.setcolor4filling (224,
                                      224,
                                      224);
        plpdf.plpdf.setprintfont (convr_parmt_faml (vpi_parmt_impr.va_coln_polc_faml),
                                  convr_parmt_poids (vpi_parmt_impr.va_coln_polc_poids,
                                                     'B'),
                                  vnu_tail_polc_ent);
        v_data_row_ent := v_data_cell;
        plpdf.plpdf.row_print2 (v_data_cell,
                                v_bordr_cell,
                                v_tail_cell,
                                v_algnm_entet,
                                v_style_cell,
                                v_lign_max,
                                10,
                                1);

        -- Écrire les données
        vnu_compt_ligne := 0;

        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          vnu_compt_ligne := vnu_compt_ligne + 1;

          --Instancier les couleurs de fond des lignes paires et impaires
          if mod (vnu_compt_ligne,
                  2) = 0 then
            plpdf.plpdf.setcolor4filling (245,
                                          245,
                                          245);
          else
            plpdf.plpdf.setcolor4filling (255,
                                          255,
                                          255);
          end if;

          --Remplir le tableau
          for i in var_infor_coln.first () .. var_infor_coln.last () loop
            if var_infor_coln (i).va_indic_expor = 'O' then
              vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

              v_bordr_cell (vnu_elmnt_tabl) := '1';

              v_tail_cell (vnu_elmnt_tabl) := v_tail_intr_cell (i);

              --Aligner selon le type de données
              case var_infor_coln (i).va_type_valr
                when 'VARCH' then
                  vva_elmnt := var_infor_coln (i).va_valr_varch;

                  if vva_elmnt is null then
                    vva_elmnt := '-';
                  end if;
                when 'NUMBR' then
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := '-';
                  else
                    vva_elmnt :=
                      (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                       var_infor_coln (i).va_formt)));
                  end if;
                when 'DATE' then
                  if to_char (var_infor_coln (i).da_valr_date,
                              var_infor_coln (i).va_formt)
                       is null then
                    vva_elmnt := '-';
                  else
                    vva_elmnt :=
                      (to_char (var_infor_coln (i).da_valr_date,
                                var_infor_coln (i).va_formt));
                  end if;
                when 'TIMST' then
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := '-';
                  else
                    vva_elmnt :=
                      (to_char (var_infor_coln (i).ts_valr_timst,
                                var_infor_coln (i).va_formt));
                  end if;
                else
                  vva_elmnt := var_infor_coln (i).va_valr_varch;
              end case;

              v_algnm_cell (vnu_elmnt_tabl) :=
                convr_parmt_align (var_infor_coln (i).va_align_coln,
                                   'C');
              v_data_cell (vnu_elmnt_tabl) := vva_elmnt;
            end if;
          end loop;

          vnu_elmnt_tabl := 0;

          if vpi_parmt_impr.nu_corps_polc_tail is not null then
            vnu_tail_polc_corps := vpi_parmt_impr.nu_corps_polc_tail;
          else
            vnu_tail_polc_corps := 8;
          end if;

          plpdf.plpdf.setprintfont (convr_parmt_faml (vpi_parmt_impr.va_corps_polc_faml),
                                    convr_parmt_poids (vpi_parmt_impr.va_corps_polc_poids,
                                                       null),
                                    vnu_tail_polc_corps);
          plpdf.plpdf.row_print2 (v_data_cell,
                                  v_bordr_cell,
                                  v_tail_cell,
                                  v_algnm_cell,
                                  v_style_cell,
                                  v_lign_max,
                                  5,
                                  1);

          if vpi_parmt_impr.nu_pied_polc_tail is not null then
            vnu_tail_polc_pied := vpi_parmt_impr.nu_pied_polc_tail;
          else
            vnu_tail_polc_pied := 8;
          end if;

          --pied de page
          if round ( (plpdf.plpdf.getpageavailableheight - 20),
                    0) < round (plpdf.plpdf.getcurrenty,
                                0) then
            plpdf.plpdf.setcurrenty (round (plpdf.plpdf.getpageavailableheight - 6,
                                            0));
            plpdf.plpdf.setprintfont (convr_parmt_faml (vpi_parmt_impr.va_pied_polc_faml),
                                      convr_parmt_poids (vpi_parmt_impr.va_pied_polc_poids,
                                                         null),
                                      vnu_tail_polc_pied);

            if vpi_parmt_impr.va_pied_texte is not null then
              plpdf.plpdf.printcell (0,
                                     10,
                                     apex_application.do_substitutions (vpi_parmt_impr.va_pied_texte),
                                     0,
                                     0,
                                     'C');
            end if;

            plpdf.plpdf.printcell (0,
                                   10,
                                   to_char (plpdf.plpdf.currentpagenumber),
                                   0,
                                   0,
                                   'C');

            --Créer une nouvelle entête de tableau sur une nouvelle page s'il reste des données
            if sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                                var_infor_coln) = true then
              plpdf.plpdf.newpage;
              plpdf.plpdf.setprintfont (convr_parmt_faml (vpi_parmt_impr.va_coln_polc_faml),
                                        convr_parmt_poids (vpi_parmt_impr.va_coln_polc_poids,
                                                           null),
                                        vnu_tail_polc_ent);
              plpdf.plpdf.setcolor4filling (224,
                                            224,
                                            224);
              plpdf.plpdf.row_print2 (v_data_row_ent,
                                      v_bordr_cell,
                                      v_tail_cell,
                                      v_algnm_entet,
                                      v_style_cell,
                                      v_lign_max,
                                      10,
                                      1);
            end if;
          end if;
        end loop;

        --pied de page
        plpdf.plpdf.setcurrenty (round (plpdf.plpdf.getpageavailableheight - 6,
                                        0));
        plpdf.plpdf.setprintfont (convr_parmt_faml (vpi_parmt_impr.va_pied_polc_faml),
                                  convr_parmt_poids (vpi_parmt_impr.va_pied_polc_poids,
                                                     null),
                                  vnu_tail_polc_pied);

        if vpi_parmt_impr.va_pied_texte is not null then
          plpdf.plpdf.printcell (0,
                                 10,
                                 apex_application.do_substitutions (vpi_parmt_impr.va_pied_texte),
                                 0,
                                 0,
                                 'C');
        end if;

        plpdf.plpdf.printcell (0,
                               10,
                               to_char (plpdf.plpdf.currentpagenumber),
                               0,
                               0,
                               'C');

        --Envoyer les données au fichier blob
        plpdf.plpdf.senddoc (v_blob);
      end;

      --téléverser pdf
      owa_util.mime_header ('application/pdf',
                            false);
      htp.p ('Content-length: ' || dbms_lob.getlength (v_blob));
      htp.p ('Content-Disposition: attachment; filename="' || formt_nom_fichr (vva_nom_raprt) || '.pdf');
      owa_util.http_header_close ();
      wpg_docload.download_file (v_blob);
    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  end;

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln) is
    vbo_dirct                               boolean default false;
    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (200);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;

    vcl_corps                               clob;
    vva_seprt_coln                          varchar2 (1);

    vnu_compt_ligne                         number;
    vnu_rpts_id                             number;

    procedure ajouter (pva_pre in varchar2,
                       pva_chaine in varchar2) is
    begin
      if pva_pre is not null
      or pva_chaine is not null then
        if vbo_dirct then
          --htp.putraw (utl_raw.cast_to_raw(pva_pre || pva_chaine));
          htp.prn (pva_pre || pva_chaine);
        --dbms_output.put (pva_pre || pva_chaine);
        else
          dbms_lob.writeappend (vcl_corps,
                                length (pva_pre || pva_chaine),
                                pva_pre || pva_chaine);
        end if;
      end if;
    end;

    procedure ajouter_chaine (pva_pre in varchar2,
                              pva_chaine in varchar2) is
    begin
      ajouter (pva_pre,
                  '"'
               || replace (pva_chaine,
                           '"',
                           '""')
               || '"');
    end;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select   pir.libl_regn,
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page pag,
               vd_sie_13_page_ir pir,
               apex_ir air
       where   pag.ref_aplic = sie_11_aplic_pkg.obten_aplic_numr_apex (pnu_aplic)
           and pag.numr_apex = pnu_page
           and pir.ref_page = pag.seqnc
           and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  vva_selct,
                                  var_infor_coln,
                                  chr (10));

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      if vbo_dirct then
        owa_util.mime_header ('text/csv',
                              false);
        htp.p ('Content-Disposition: attachment; filename="' || formt_nom_fichr (vva_nom_raprt) || '.csv' || '"');
        --dbms_output.put_line ('HTTP/1.x 200 OK');
        --dbms_output.put_line ('Content-Type: text/csv; charset=UTF-8');
        --dbms_output.put_line ('Content-Disposition: attachment; filename="' || formt_nom_fichr(vva_nom_raprt) || '.csv' || '"');
        owa_util.http_header_close;
      --dbms_output.put_line (null);
      else
        dbms_lob.createtemporary (vcl_corps,
                                  true);
      end if;

      -- Créer la ligne d'entête
      vva_seprt_coln := null;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          ajouter_chaine (vva_seprt_coln,
                          var_infor_coln (i).va_libl);
          vva_seprt_coln := pva_seprt_coln;
        end if;
      end loop;

      -- Saut de ligne
      ajouter (null,
               chr (10));

      -- Écrire les données
      vnu_compt_ligne := 0;

      while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                             var_infor_coln) loop
        vnu_compt_ligne := vnu_compt_ligne + 1;

        vva_seprt_coln := null;

        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
              when 'NUMBR' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).nu_valr_numbr);
              when 'DATE' then
                ajouter_chaine (vva_seprt_coln,
                                to_char (var_infor_coln (i).da_valr_date,
                                         'YYYY-MM-DD'));
              when 'TIMST' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).ts_valr_timst);
              else
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
            end case;

            vva_seprt_coln := pva_seprt_coln;
          end if;
        end loop;

        -- Saut de ligne
        ajouter (null,
                 chr (10));
      end loop;

      if vnu_compt_ligne = 0 then
        ajouter_chaine (null,
                        vva_mesg_aucun_don);
        ajouter (null,
                 chr (10));
      end if;

      if vbo_dirct then
        null;
      else
        sie_11_prodt_pkg.telvs_fichr (vcl_corps,
                                      formt_nom_fichr (vva_nom_raprt) || '.csv',
                                      true,
                                      'texte/csv, charset=UTF-8');

        dbms_lob.freetemporary (vcl_corps);
      end if;
    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  /*exception
  when others then
    htp.p (sqlerrm);*/
  end;
end;
/

Prompt Package Body SIE_25_SPX_EXPOR_IR_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_SPX_EXPOR_IR_PKG" as
  knu_marge_gauch                constant number default 0.5;
  knu_marge_droit                constant number default 0.5;

  type typ_rec_parmt_impre is record
  (
    va_indic_trouv                          varchar2 (1) default 'N',
    va_contn_disps                          apex_regn.prn_content_disposition%type default 'ATTACHMENT',
    va_formt_papr                           apex_regn.prn_paper_size%type default 'LETTER',
    va_orien_papr                           apex_regn.prn_orientation%type default 'VERTICAL',
    va_unite_mesr                           apex_regn.prn_units%type default 'INCHES',
    nu_largr_papr                           apex_regn.prn_width%type default 8.5,
    nu_hautr_papr                           apex_regn.prn_height%type default 11,
    nu_bordr_tail                           apex_regn.prn_border_width%type default 0.5,
    va_bordr_coulr                          apex_regn.prn_border_color%type,
    va_entet_polc_faml                      apex_regn.prn_page_header_font_family%type default 'Helvetica',
    va_entet_polc_poids                     apex_regn.prn_page_header_font_weight%type default 'normal',
    nu_entet_polc_tail                      apex_regn.prn_page_header_font_size%type default 12,
    va_entet_polc_coulr                     apex_regn.prn_page_header_font_color%type,
    va_entet_align                          apex_regn.prn_page_header_alignment%type default 'LEFT',
    va_entet_texte                          apex_regn.prn_page_header%type,
    va_coln_polc_faml                       apex_regn.prn_header_font_family%type default 'Helvetica',
    va_coln_polc_poids                      apex_regn.prn_header_font_weight%type default 'bold',
    nu_coln_polc_tail                       apex_regn.prn_header_font_size%type default 8,
    va_coln_polc_coulr                      apex_regn.prn_header_font_color%type,
    va_coln_fond_coulr                      apex_regn.prn_header_bg_color%type default '#e0e0e0',
    va_corps_polc_faml                      apex_regn.prn_body_font_family%type default 'Helvetica',
    va_corps_polc_poids                     apex_regn.prn_body_font_weight%type default 'normal',
    nu_corps_polc_tail                      apex_regn.prn_body_font_size%type default 8,
    va_corps_polc_coulr                     apex_regn.prn_body_font_color%type,
    va_corps_fond_coulr                     apex_regn.prn_body_bg_color%type default '#f5f5f5',
    va_pied_polc_faml                       apex_regn.prn_page_footer_font_family%type default 'Helvetica',
    va_pied_polc_poids                      apex_regn.prn_page_footer_font_weight%type default 'normal',
    nu_pied_polc_tail                       apex_regn.prn_page_footer_font_size%type default 8,
    va_pied_polc_coulr                      apex_regn.prn_page_footer_font_color%type,
    va_pied_align                           apex_regn.prn_page_footer_alignment%type default 'LEFT',
    va_pied_texte                           apex_regn.prn_page_footer%type
  );

  type typ_rec_page is record
  (
    nu_largr                                number default 0,
    nu_dernr_coln                           binary_integer default 0
  );

  type typ_arr_page is table of typ_rec_page
                         index by binary_integer;

  gar_tail_papr                           sie_07_sql_pkg.typ_arr_ndx_vc30;

  function formt_nom_fichr (pva_nom in varchar2)
    return varchar2 is
    vva_nom                                 varchar2 (1000) default lower (pva_nom);
  begin
    vva_nom :=
      sie_07_sql_pkg.rempl_br (vva_nom,
                               '_');

    return substr (translate (vva_nom,
                              'çàâéèêöùû /\?',
                              'caaeeeouu____'),
                   1,
                   120);
  end;

  function formt_date (pda_date in date default sysdate)
    return varchar2 is
  begin
    return    'Le '
           || trim (to_char (pda_date,
                             'day'))
           || ' '
           || extract (day from pda_date)
           || ' '
           || trim (to_char (pda_date,
                             'month'))
           || ' '
           || extract (year from pda_date);
  end;

  procedure alimn_tail_papr (ppi_parmt in typ_rec_parmt_impre) is
    vnu_factr_conv                          number;
  begin
    gar_tail_papr ('LETTER-L') := 8.5;
    gar_tail_papr ('LETTER-H') := 11;

    gar_tail_papr ('LEGAL-L') := 8.5;
    gar_tail_papr ('LEGAL-H') := 14;

    gar_tail_papr ('A4-L') := 8.26;
    gar_tail_papr ('A4-H') := 11.69;

    gar_tail_papr ('A3-L') := 11.69;
    gar_tail_papr ('A3-H') := 16.53;

    gar_tail_papr ('TABLOID-L') := 17;
    gar_tail_papr ('TABLOID-H') := 11;

    if nvl (ppi_parmt.nu_largr_papr, 0) = 0
    or nvl (ppi_parmt.nu_hautr_papr, 0) = 0 then
      gar_tail_papr ('CUSTOM-L') := gar_tail_papr ('LETTER-L');
      gar_tail_papr ('CUSTOM-H') := gar_tail_papr ('LETTER-H');
    else
      vnu_factr_conv :=
        case upper (nvl (ppi_parmt.va_unite_mesr, 'INCHES'))
          when 'POINTS' then 72
          when 'MILLIMETERS' then 25.4
          when 'CENTIMETERS' then 2.54
          else 1                                                                                        --Défaut: INCHES
        end;
      gar_tail_papr ('CUSTOM-L') :=
        round (ppi_parmt.nu_largr_papr / vnu_factr_conv,
               2);
      gar_tail_papr ('CUSTOM-H') :=
        round (ppi_parmt.nu_hautr_papr / vnu_factr_conv,
               2);
    end if;
  end;

  function convr_parmt_largr_papr (ppi_parmt in typ_rec_parmt_impre)
    return number is
    vva_axe                                 varchar2 (1);
    vva_index                               varchar2 (30);
  begin
    if nvl (ppi_parmt.va_orien_papr, 'VERTICAL') = 'VERTICAL' then
      vva_axe := 'L';
    else
      vva_axe := 'H';
    end if;

    vva_index := ppi_parmt.va_formt_papr || '-' || vva_axe;

    if not gar_tail_papr.exists (vva_index) then
      vva_index := 'LETTER-' || vva_axe;
    end if;

    return gar_tail_papr (vva_index);
  end;

  function convr_parmt_hautr_papr (ppi_parmt in typ_rec_parmt_impre)
    return number is
    vva_axe                                 varchar2 (1);
    vva_index                               varchar2 (30);
  begin
    if nvl (ppi_parmt.va_orien_papr, 'VERTICAL') = 'VERTICAL' then
      vva_axe := 'H';
    else
      vva_axe := 'L';
    end if;

    vva_index := ppi_parmt.va_formt_papr || '-' || vva_axe;

    if not gar_tail_papr.exists (vva_index) then
      vva_index := 'LETTER-' || vva_axe;
    end if;

    return gar_tail_papr (vva_index);
  end;

  function convr_parmt_align (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case upper (pva_parmt)
             when 'LEFT' then 'gauche'
             when 'RIGHT' then 'droite'
             when 'CENTER' then 'centre'
             else pva_deft
           end;
  end;

  function convr_parmt_faml (pva_parmt in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt)
             when 'times' then 'times new roman'
             when 'courier' then 'courier'
             else 'helvetica'                                                                                  -- Défaut
           end;
  end;

  function convr_parmt_poids (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt) when 'bold' then 'gras' when 'normal' then 'normal' else pva_deft end;
  end;

  procedure ecrir_feuil_style (ppi_parmt in typ_rec_parmt_impre) is
  begin
    spx_xml_pkg.creer_sectn_feuil_style ();

    -- Marges gauches et droites sont communes
    spx_xml_pkg.creer_sectn_style ();
    spx_xml_pkg.creer_elemn_cible_style ('entete');
    spx_xml_pkg.creer_elemn_cible_style ('pied-page');
    spx_xml_pkg.creer_elemn_cible_style ('section');
    spx_xml_pkg.creer_elemn_atrib_numrq ('marge-gauche',
                                         knu_marge_gauch);
    spx_xml_pkg.creer_elemn_atrib_numrq ('marge-droite',
                                         knu_marge_droit);
    spx_xml_pkg.fermr_sectn ('style');

    spx_xml_pkg.creer_sectn_style ('entete');
    spx_xml_pkg.creer_elemn_atrib_numrq ('marge-haut',
                                         0.5);
    spx_xml_pkg.creer_elemn_atrib ('police-famille',
                                   convr_parmt_faml (ppi_parmt.va_entet_polc_faml));
    spx_xml_pkg.creer_elemn_atrib ('police-poids',
                                   convr_parmt_poids (ppi_parmt.va_entet_polc_poids,
                                                      'gras'));
    spx_xml_pkg.creer_elemn_atrib_numrq ('police-taille',
                                         nvl (ppi_parmt.nu_entet_polc_tail, 10));

    if ppi_parmt.va_entet_polc_coulr like '#%' then
      spx_xml_pkg.creer_elemn_atrib ('police-couleur',
                                     ppi_parmt.va_entet_polc_coulr);
    end if;

    spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                   convr_parmt_align (ppi_parmt.va_entet_align,
                                                      'gauche'));
    spx_xml_pkg.fermr_sectn ('style');

    begin
      spx_xml_pkg.creer_sectn_style ('pied-page');

      begin
        spx_xml_pkg.creer_sectn_style ('texte',
                                       'pied-texte');
        spx_xml_pkg.creer_elemn_atrib_numrq ('espacement-bas',
                                             0.04);
        spx_xml_pkg.fermr_sectn ('style');
      end;

      begin
        spx_xml_pkg.creer_sectn_style ('tableau');
        spx_xml_pkg.creer_elemn_atrib_numrq ('bordure-haut-taille',
                                             1);

        --spx_xml_pkg.creer_elemn_atrib_rgb ('bordure-haut-couleur', 224, 224, 224);
        if ppi_parmt.va_pied_polc_coulr like '#%' then
          spx_xml_pkg.creer_elemn_atrib ('bordure-haut-couleur',
                                         ppi_parmt.va_pied_polc_coulr);
        end if;

        spx_xml_pkg.fermr_sectn ('style');
      end;

      spx_xml_pkg.creer_elemn_atrib_numrq ('marge-bas',
                                           0.5);

      spx_xml_pkg.creer_elemn_atrib ('police-famille',
                                     convr_parmt_faml (ppi_parmt.va_pied_polc_faml));
      spx_xml_pkg.creer_elemn_atrib ('police-poids',
                                     convr_parmt_poids (ppi_parmt.va_pied_polc_poids,
                                                        'normal'));
      spx_xml_pkg.creer_elemn_atrib_numrq ('police-taille',
                                           nvl (ppi_parmt.nu_pied_polc_tail, 8));

      if ppi_parmt.va_pied_polc_coulr like '#%' then
        spx_xml_pkg.creer_elemn_atrib ('police-couleur',
                                       ppi_parmt.va_pied_polc_coulr);
      end if;

      spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                     convr_parmt_align (ppi_parmt.va_pied_align,
                                                        'centre'));

      begin
        spx_xml_pkg.creer_sectn_style (null,
                                       'usager');
        spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                       'gauche');
        spx_xml_pkg.fermr_sectn ('style');

        spx_xml_pkg.creer_sectn_style (null,
                                       'date');
        spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                       'centre');
        spx_xml_pkg.fermr_sectn ('style');

        spx_xml_pkg.creer_sectn_style (null,
                                       'page-x-de-y');
        spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                       'droite');
        spx_xml_pkg.fermr_sectn ('style');
      end;

      spx_xml_pkg.fermr_sectn ('style');
    end;

    begin
      spx_xml_pkg.creer_sectn_style ('section');
      spx_xml_pkg.creer_elemn_atrib_numrq ('largeur',
                                           convr_parmt_largr_papr (ppi_parmt));
      spx_xml_pkg.creer_elemn_atrib_numrq ('hauteur',
                                           convr_parmt_hautr_papr (ppi_parmt));
      spx_xml_pkg.creer_elemn_atrib_numrq ('marge-haut',
                                           0.125);
      spx_xml_pkg.creer_elemn_atrib_numrq ('marge-bas',
                                           0.125);

      spx_xml_pkg.creer_elemn_atrib ('police-famille',
                                     convr_parmt_faml (ppi_parmt.va_corps_polc_faml));
      spx_xml_pkg.creer_elemn_atrib ('police-poids',
                                     convr_parmt_poids (ppi_parmt.va_corps_polc_poids,
                                                        'normal'));
      spx_xml_pkg.creer_elemn_atrib_numrq ('police-taille',
                                           nvl (ppi_parmt.nu_corps_polc_tail, 8));

      if ppi_parmt.va_corps_polc_coulr like '#%' then
        spx_xml_pkg.creer_elemn_atrib ('police-couleur',
                                       ppi_parmt.va_corps_polc_coulr);
      end if;

      begin
        spx_xml_pkg.creer_sectn_style ('ligne',
                                       'pair');

        spx_xml_pkg.creer_sectn_style ('cellule');

        if ppi_parmt.va_corps_fond_coulr like '#%' then
          spx_xml_pkg.creer_elemn_atrib ('fond-couleur',
                                         ppi_parmt.va_corps_fond_coulr);
        else
          spx_xml_pkg.creer_elemn_atrib_rgb ('fond-couleur',
                                             245,
                                             245,
                                             245);
        end if;

        spx_xml_pkg.fermr_sectn ('style');

        spx_xml_pkg.fermr_sectn ('style');
      end;

      begin
        spx_xml_pkg.creer_sectn_style ('ligne',
                                       'impair');
        -- Aucun style particulier pour les lignes impaires
        spx_xml_pkg.fermr_sectn ('style');
      end;

      begin
        spx_xml_pkg.creer_sectn_style ('entete-tableau');
        spx_xml_pkg.creer_elemn_atrib ('police-famille',
                                       convr_parmt_faml (ppi_parmt.va_coln_polc_faml));
        spx_xml_pkg.creer_elemn_atrib ('police-poids',
                                       convr_parmt_poids (ppi_parmt.va_coln_polc_poids,
                                                          'gras'));
        spx_xml_pkg.creer_elemn_atrib_numrq ('police-taille',
                                             nvl (ppi_parmt.nu_coln_polc_tail, 8));

        if ppi_parmt.va_coln_polc_coulr like '#%' then
          spx_xml_pkg.creer_elemn_atrib ('police-couleur',
                                         ppi_parmt.va_coln_polc_coulr);
        end if;

        if ppi_parmt.va_coln_fond_coulr like '#%' then
          spx_xml_pkg.creer_elemn_atrib ('fond-couleur',
                                         ppi_parmt.va_coln_fond_coulr);
        else
          spx_xml_pkg.creer_elemn_atrib_rgb ('fond-couleur',
                                             245,
                                             245,
                                             245);
        end if;

        spx_xml_pkg.fermr_sectn ('style');

        spx_xml_pkg.creer_sectn_style ('colonne');

        spx_xml_pkg.creer_elemn_atrib_rgb ('bordure-couleur',
                                           20,
                                           20,
                                           20);

        spx_xml_pkg.creer_elemn_atrib_numrq ('bordure-taille',
                                             0.01);
        spx_xml_pkg.fermr_sectn ('style');
      end;

      spx_xml_pkg.fermr_sectn ('style');
    end;

    spx_xml_pkg.creer_sectn_style (null,
                                   'gauche');
    spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                   'gauche');
    spx_xml_pkg.fermr_sectn ('style');

    spx_xml_pkg.creer_sectn_style (null,
                                   'centre');
    spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                   'centre');
    spx_xml_pkg.fermr_sectn ('style');

    spx_xml_pkg.creer_sectn_style (null,
                                   'droite');
    spx_xml_pkg.creer_elemn_atrib ('alignement-h',
                                   'droite');
    spx_xml_pkg.fermr_sectn ('style');

    spx_xml_pkg.creer_sectn_style (null,
                                   'gras');
    spx_xml_pkg.creer_elemn_atrib ('police-poids',
                                   'gras');
    spx_xml_pkg.fermr_sectn ('style');

    --Style utilisé pour aligner vert. texte
    spx_xml_pkg.creer_sectn_style (null,
                                   'align_vertc');
    spx_xml_pkg.creer_elemn_atrib_numrq ('police-taille',
                                         1);
    spx_xml_pkg.fermr_sectn ('style');

    spx_xml_pkg.fermr_sectn ('feuil_style');
  end;

  function obten_parmt_impre_raprt (pnu_ref_ir in number)
    return typ_rec_parmt_impre is
    vpi_deft                                typ_rec_parmt_impre;
    vpi_parmt_impr                          typ_rec_parmt_impre;
  begin
    begin
      select   'O',
               reg.prn_content_disposition,
               reg.prn_paper_size,
               reg.prn_orientation,
               reg.prn_units,
               reg.prn_width,
               reg.prn_height,
               reg.prn_border_width,
               reg.prn_border_color,
               reg.prn_page_header_font_family,
               reg.prn_page_header_font_weight,
               reg.prn_page_header_font_size,
               reg.prn_page_header_font_color,
               reg.prn_page_header_alignment,
               reg.prn_page_header,
               reg.prn_header_font_family,
               reg.prn_header_font_weight,
               reg.prn_header_font_size,
               reg.prn_header_font_color,
               reg.prn_header_bg_color,
               reg.prn_body_font_family,
               reg.prn_body_font_weight,
               reg.prn_body_font_size,
               reg.prn_body_font_color,
               reg.prn_body_bg_color,
               reg.prn_page_footer_font_family,
               reg.prn_page_footer_font_weight,
               reg.prn_page_footer_font_size,
               reg.prn_page_footer_font_color,
               reg.prn_page_footer_alignment,
               reg.prn_page_footer
        into   vpi_parmt_impr
        from   vd_sie_13_page_ir pir,
               apex_ir air,
               apex_regn reg
       where   pir.seqnc = pnu_ref_ir and air.id = pir.id_apex and reg.id = air.region_id;
    exception
      when no_data_found then
        vpi_parmt_impr.va_indic_trouv := 'N';
    end;

    alimn_tail_papr (vpi_parmt_impr);

    return vpi_parmt_impr;
  end;

  function obten_largr_dispo_page (ppi_parmt in typ_rec_parmt_impre)
    return number is
    vnu_largr_page                          number;
  begin
    vnu_largr_page := convr_parmt_largr_papr (ppi_parmt);

    return vnu_largr_page - knu_marge_gauch - knu_marge_droit;
  end;

  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID')) is
    vpi_parmt_impr                          typ_rec_parmt_impre;
    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (200);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_largr_dispo                         number;
    vnu_compt_ligne                         number;
    var_pages                               typ_arr_page;
    vnu_index_page                          binary_integer;
    vnu_somme_largr                         number;
    vnu_dernr_coln_ajout                    number;
    vnu_rpts_id                             number;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select                                                                                           /*pir.libl_regn*/
             ( select   plug_name
                 from   apex_regn reg
                where   reg.id = air.region_id),
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page pag,
               vd_sie_13_page_ir pir,
               apex_ir air
       where   pag.ref_aplic = (select   pro.seqnc
                                  from   vd_sie_11_aplic pro
                                 where   pro.numr_aplic_apex = pnu_aplic)
           and pag.numr_apex = pnu_page
           and pir.ref_page = pag.seqnc
           and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    vva_nom_raprt := aa.do_substitutions (vva_nom_raprt);

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'SDP');
    end if;

    vnu_largr_deft := nvl (vnu_largr_deft, 0);

    if vnu_largr_deft <= 0 then
      vnu_largr_deft := 1.5;
    end if;

    -- Récupérer les paramètres du raport
    vpi_parmt_impr := obten_parmt_impre_raprt (vnu_ref_ir);

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  vva_selct,
                                  var_infor_coln,
                                  '\n');

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      vnu_largr_dispo := obten_largr_dispo_page (vpi_parmt_impr);

      -- Transformer toutes les valeurs en pouces
      vnu_index_page := 1;
      -- Créer la premiere page
      var_pages (vnu_index_page).nu_dernr_coln := 0;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        case var_infor_coln (i).va_type_largr
          when 'POUCE' then
            var_infor_coln (i).nu_largr_reltv := var_infor_coln (i).nu_largr;
          when 'POURC' then
            var_infor_coln (i).nu_largr_reltv := (var_infor_coln (i).nu_largr / 100) * vnu_largr_dispo;
          when 'RELTF' then
            var_infor_coln (i).nu_largr_reltv := var_infor_coln (i).nu_largr * vnu_largr_deft;
          when 'POINT' then
            var_infor_coln (i).nu_largr_reltv := var_infor_coln (i).nu_largr / 72;
          else
            var_infor_coln (i).nu_largr_reltv := vnu_largr_deft;
        end case;

        -- Assurer une largeur minimale
        if nvl (var_infor_coln (i).nu_largr_reltv, 0) < 0.25 then
          var_infor_coln (i).nu_largr_reltv := 0.25;
        end if;

        -- Assurer une largeur maximale
        if nvl (var_infor_coln (i).nu_largr_reltv, 0) > vnu_largr_dispo then
          var_infor_coln (i).nu_largr_reltv := vnu_largr_dispo;
        end if;

        if var_infor_coln (i).va_indic_expor = 'O' then
          -- Changer de page si ca ne rentre pas
          if var_pages (vnu_index_page).nu_largr + var_infor_coln (i).nu_largr_reltv > vnu_largr_dispo then
            vnu_index_page := vnu_index_page + 1;
          end if;

          -- La page sera créée si elle n'existe pas
          var_pages (vnu_index_page).nu_dernr_coln := i;
          var_pages (vnu_index_page).nu_largr := var_pages (vnu_index_page).nu_largr + var_infor_coln (i).nu_largr_reltv;
        end if;
      end loop;

      spx_util_pkg.debtr_docmn (formt_nom_fichr (vva_nom_raprt) || '.pdf',
                                true);

      -- Écrire la feuille de style
      ecrir_feuil_style (vpi_parmt_impr);

      -- Écrire l'entête
      declare
        vva_titre_raprt                         varchar2 (1000);
      begin
        vva_titre_raprt := apex_application.do_substitutions (vpi_parmt_impr.va_entet_texte);
        vva_titre_raprt :=
          sie_07_sql_pkg.rempl_br (vva_titre_raprt,
                                   ' ');

        vva_titre_raprt :=
          nvl (replace (vva_titre_raprt,
                        '#TITLE#',
                        vva_nom_raprt),
               vva_nom_raprt);
        vva_titre_raprt :=
          sie_07_sql_pkg.rempl_br (vva_titre_raprt,
                                   chr (10));

        spx_xml_pkg.creer_sectn_entet ();

        if gbl_logo is not null then
          declare
            vnu_largr_table                         number;
          begin
            if nvl (gnu_largr_logo, 0) = 0 then
              vnu_largr_table := 100;
            else
              vnu_largr_table :=
                (gnu_largr_logo * 100) / (convr_parmt_largr_papr (vpi_parmt_impr) - knu_marge_gauch - knu_marge_droit);
            end if;

            spx_xml_pkg.creer_sectn_tabl ();
            spx_xml_pkg.creer_sectn_entet_tabl (false);
            spx_xml_pkg.creer_elemn_coln_tabl (null,
                                               round (vnu_largr_table));
            spx_xml_pkg.creer_elemn_coln_tabl (null,
                                               5);
            spx_xml_pkg.creer_elemn_coln_tabl (null,
                                               95 - round (vnu_largr_table));
            spx_xml_pkg.fermr_sectn ('entet_tabl');
            spx_xml_pkg.creer_sectn_ligne ();
            spx_xml_pkg.creer_sectn_cell ();
            spx_xml_pkg.creer_elemn_image ('logo',
                                           gbl_logo);
            spx_xml_pkg.fermr_sectn ('cell');
            spx_xml_pkg.creer_sectn_cell ();
            spx_xml_pkg.fermr_sectn ('cell');
            spx_xml_pkg.creer_sectn_cell ();
            spx_xml_pkg.creer_elemn_ligne_texte (vva_titre_raprt);
            spx_xml_pkg.fermr_sectn ('cell');
            spx_xml_pkg.fermr_sectn ('ligne');
            spx_xml_pkg.fermr_sectn ('tabl');
          end;
        else
          spx_xml_pkg.creer_elemn_ligne_texte (vva_titre_raprt);
        end if;

        spx_xml_pkg.fermr_sectn ('entet');
      end;

      -- Écrire le pied de page
      begin
        spx_xml_pkg.creer_sectn_pied_page ();

        if vpi_parmt_impr.va_pied_texte is not null then
          spx_xml_pkg.creer_elemn_ligne_texte (apex_application.do_substitutions (vpi_parmt_impr.va_pied_texte),
                                               'pied-texte');
        end if;

        begin
          spx_xml_pkg.creer_sectn_tabl ();

          begin
            spx_xml_pkg.creer_sectn_entet_tabl (false);
            spx_xml_pkg.creer_elemn_coln_tabl (null,
                                               1,
                                               'usager');
            spx_xml_pkg.creer_elemn_coln_tabl (null,
                                               1,
                                               'date');
            spx_xml_pkg.creer_elemn_coln_tabl (null,
                                               1,
                                               'page-x-de-y');
            spx_xml_pkg.fermr_sectn ('entet_tabl');
          end;

          begin
            spx_xml_pkg.creer_sectn_ligne ();

            spx_xml_pkg.creer_sectn_cell ();
            spx_xml_pkg.creer_elemn_ligne_texte (
              'Demandé par: ' || sie_12_utils_pkg.obten_nom_formt_de_code_utils (sie_07_util_pkg.v ('APP_USER'))
            );
            spx_xml_pkg.fermr_sectn ('cell');

            spx_xml_pkg.creer_sectn_cell ();
            spx_xml_pkg.creer_elemn_ligne_texte (formt_date ());
            spx_xml_pkg.fermr_sectn ('cell');

            spx_xml_pkg.creer_sectn_cell ();
            spx_xml_pkg.creer_elemn_ligne_texte (
              'Page ' || spx_xml_pkg.obten_champ_numr_page () || ' de ' || spx_xml_pkg.obten_champ_nombr_pages ()
            );
            spx_xml_pkg.fermr_sectn ('cell');

            spx_xml_pkg.fermr_sectn ('ligne');
          end;

          spx_xml_pkg.fermr_sectn ('tabl');
        end;

        spx_xml_pkg.fermr_sectn ('pied_page');
      end;

      -- Créer le corps du rapport
      begin
        spx_xml_pkg.creer_sectn_sectn (null,
                                       null,
                                       'aucun',
                                       false);

        -- Créer le tableau qui affichera les données
        spx_xml_pkg.creer_sectn_tabl ();

        -- Créer les différents set d'entêtes (pages)
        vnu_dernr_coln_ajout := 0;

        for j in var_pages.first () .. var_pages.last () loop
          spx_xml_pkg.creer_sectn_entet_tabl ();
          spx_xml_pkg.ajout_atrib ('largeur',
                                      round ( (var_pages (j).nu_largr / vnu_largr_dispo) * 100,
                                             0)
                                   || '%');

          for i in vnu_dernr_coln_ajout + 1 .. var_pages (j).nu_dernr_coln loop
            if var_infor_coln (i).va_indic_expor = 'O' then
              spx_xml_pkg.creer_elemn_coln_tabl (var_infor_coln (i).va_libl,
                                                 var_infor_coln (i).nu_largr_reltv,
                                                 convr_parmt_align (var_infor_coln (i).va_align_entet,
                                                                    'gauche'));
            end if;
          end loop;

          vnu_dernr_coln_ajout := var_pages (j).nu_dernr_coln;

          spx_xml_pkg.fermr_sectn ('entet_tabl');
        end loop;

        -- Écrire les données
        vnu_compt_ligne := 0;

        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          vnu_compt_ligne := vnu_compt_ligne + 1;

          spx_xml_pkg.creer_sectn_ligne ();

          if instr (var_infor_coln (1).va_valr_varch,
                    'indic_surlg_ligne_raprt') != 0 then
            spx_xml_pkg.ajout_atrib ('classe',
                                     'gras');
            var_infor_coln (1).va_valr_varch :=
              substr (var_infor_coln (1).va_valr_varch,
                      instr (var_infor_coln (1).va_valr_varch,
                             '</span>') +
                      7);
          end if;

          /*if mod (vnu_compt_ligne,
                  2) = 0 then
            spx_xml_pkg.ajout_atrib ('classe',
                                     'pair');
          else
            spx_xml_pkg.ajout_atrib ('classe',
                                     'impair');
          end if;*/

          for i in var_infor_coln.first () .. var_infor_coln.last () loop
            if var_infor_coln (i).va_indic_expor = 'O' then
              spx_xml_pkg.creer_sectn_cell ();
              spx_xml_pkg.ajout_atrib ('classe',
                                       convr_parmt_align (var_infor_coln (i).va_align_coln,
                                                          'gauche'));

              case var_infor_coln (i).va_type_valr
                when 'VARCH' then
                  spx_xml_pkg.creer_elemn_bloc_texte (var_infor_coln (i).va_valr_varch);
                when 'NUMBR' then
                  if var_infor_coln (i).va_formt is null then
                    spx_xml_pkg.creer_elemn_ligne_texte (var_infor_coln (i).nu_valr_numbr);
                  else
                    spx_xml_pkg.creer_elemn_ligne_texte (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                                                         var_infor_coln (i).va_formt)));
                  end if;
                when 'DATE' then
                  if var_infor_coln (i).va_formt is null then
                    spx_xml_pkg.creer_elemn_ligne_texte (var_infor_coln (i).da_valr_date);
                  else
                    spx_xml_pkg.creer_elemn_ligne_texte (to_char (var_infor_coln (i).da_valr_date,
                                                                  var_infor_coln (i).va_formt));
                  end if;
                when 'TIMST' then
                  if var_infor_coln (i).va_formt is null then
                    spx_xml_pkg.creer_elemn_ligne_texte (var_infor_coln (i).ts_valr_timst);
                  else
                    spx_xml_pkg.creer_elemn_ligne_texte (to_char (var_infor_coln (i).ts_valr_timst,
                                                                  var_infor_coln (i).va_formt));
                  end if;
                else
                  spx_xml_pkg.creer_elemn_bloc_texte (var_infor_coln (i).va_valr_varch);
              end case;

              spx_xml_pkg.creer_elemn_ligne_texte (' ',
                                                   'align_vertc');
              spx_xml_pkg.fermr_sectn ('cell');
            end if;
          end loop;

          spx_xml_pkg.fermr_sectn ('ligne');
        end loop;

        spx_xml_pkg.fermr_sectn ('tabl');

        if vnu_compt_ligne = 0 then
          spx_xml_pkg.creer_elemn_ligne_texte (aa.do_substitutions (vva_mesg_aucun_don));
        end if;

        spx_xml_pkg.fermr_sectn ('sectn');
      end;

      spx_util_pkg.afich_pdf ( (nvl (vpi_parmt_impr.va_contn_disps, 'ATTACHMENT') = 'ATTACHMENT'),
                              true);
    /*sie_02_fichr_pkg.telvs_fichr (
      spx_xml_pkg.obten_xml(),
      formt_nom_fichr(vva_nom_raprt) || '.xml',
      true,
      'texte/xml'
    );*/

    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  end;

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln) is
    vbo_dirct                               boolean default false;
    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (200);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vcl_corps                               clob;
    vva_seprt_coln                          varchar2 (1);
    vnu_compt_ligne                         number;
    vnu_rpts_id                             number;

    procedure ajouter (pva_pre in varchar2,
                       pva_chaine in varchar2) is
    begin
      if pva_pre is not null
      or pva_chaine is not null then
        if vbo_dirct then
          --htp.putraw (utl_raw.cast_to_raw(pva_pre || pva_chaine));
          htp.prn (pva_pre || pva_chaine);
        --dbms_output.put (pva_pre || pva_chaine);
        else
          dbms_lob.writeappend (vcl_corps,
                                length (pva_pre || pva_chaine),
                                pva_pre || pva_chaine);
        end if;
      end if;
    end;

    procedure ajouter_chaine (pva_pre in varchar2,
                              pva_chaine in varchar2) is
    begin
      ajouter (pva_pre,
                  '"'
               || replace (pva_chaine,
                           '"',
                           '""')
               || '"');
    end;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select   pir.libl_regn,
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page pag,
               vd_sie_13_page_ir pir,
               apex_ir air
       where   pag.ref_aplic = (select   pro.seqnc
                                  from   vd_sie_11_aplic pro
                                 where   pro.numr_aplic_apex = pnu_aplic)
           and pag.numr_apex = pnu_page
           and pir.ref_page = pag.seqnc
           and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  vva_selct,
                                  var_infor_coln,
                                  chr (10));

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      if vbo_dirct then
        owa_util.mime_header ('text/csv',
                              false);
        htp.p ('Content-Disposition: attachment; filename="' || formt_nom_fichr (vva_nom_raprt) || '.csv' || '"');
        --dbms_output.put_line ('HTTP/1.x 200 OK');
        --dbms_output.put_line ('Content-Type: text/csv; charset=UTF-8');
        --dbms_output.put_line ('Content-Disposition: attachment; filename="' || formt_nom_fichr(vva_nom_raprt) || '.csv' || '"');
        owa_util.http_header_close;
      --dbms_output.put_line (null);
      else
        dbms_lob.createtemporary (vcl_corps,
                                  true);
      end if;

      -- Créer la ligne d'entête
      vva_seprt_coln := null;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          ajouter_chaine (vva_seprt_coln,
                          var_infor_coln (i).va_libl);
          vva_seprt_coln := pva_seprt_coln;
        end if;
      end loop;

      -- Saut de ligne
      ajouter (null,
               chr (10));

      -- Écrire les données
      vnu_compt_ligne := 0;

      while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                             var_infor_coln) loop
        vnu_compt_ligne := vnu_compt_ligne + 1;

        vva_seprt_coln := null;

        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
              when 'NUMBR' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).nu_valr_numbr);
              when 'DATE' then
                ajouter_chaine (vva_seprt_coln,
                                to_char (var_infor_coln (i).da_valr_date,
                                         'YYYY-MM-DD'));
              when 'TIMST' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).ts_valr_timst);
              else
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
            end case;

            vva_seprt_coln := pva_seprt_coln;
          end if;
        end loop;

        -- Saut de ligne
        ajouter (null,
                 chr (10));
      end loop;

      if vnu_compt_ligne = 0 then
        ajouter_chaine (null,
                        vva_mesg_aucun_don);
        ajouter (null,
                 chr (10));
      end if;

      if vbo_dirct then
        null;
      else
        sie_11_prodt_pkg.telvs_fichr (vcl_corps,
                                      formt_nom_fichr (vva_nom_raprt) || '.csv',
                                      true,
                                      'texte/csv');

        dbms_lob.freetemporary (vcl_corps);
      end if;
    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  /*exception
          when others then
    htp.p (sqlerrm);*/
  end;
end;
/

Prompt Package Body SIE_25_TRAVL_PUBLC_CU_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_travl_publc_cu_pkg is
  function obten_pdf (pnu_travl in number,
                      pnu_publc_travl in number,
                      pva_iden_procd in varchar2)
    return blob is
    vbl_pdf                                 blob;
  begin
    execute immediate 'select ' || pva_iden_procd || '(:1, :2) from dual'
                                          into   vbl_pdf
      using pnu_travl,
            pnu_publc_travl;

    update   vd_i_sie_25_travl
       set   ref_stat =
               sie_12_stat_pkg.obten_stat ('TRAVL',
                                           'TERMN',
                                           'AFW')
     where   seqnc = pnu_travl;

    return vbl_pdf;
  exception
    when others then
      ete ();
      raise;
  end obten_pdf;
end sie_25_travl_publc_cu_pkg;
/

Prompt Package Body SIE_25_TRAVL_PUBLC_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_travl_publc_pkg as
  gnu_travl                               number (10);
  gnu_publc_travl                         number (10);
  gbl_travl_termn                         blob;
  gva_mime_type_travl                     varchar2 (100);
  gnu_tail_fichr                          pls_integer;
  gva_nom_fichr                           varchar2 (200);

  procedure maj_stat_travl (pnu_travl in number,
                            pnu_stat in number) is
    pragma autonomous_transaction;
  begin
    update   vd_i_sie_25_travl
       set   ref_stat = pnu_stat
     where   seqnc = pnu_travl;

    commit;
  end maj_stat_travl;

  function exect_raprt (pva_indic_secrs varchar2,
                        pva_servr varchar2,
                        pva_parmt varchar2,
                        pnu_travl in number)
    return varchar2 is
    vva_prefx_url                           varchar2 (2000);
    vva_url                                 varchar2 (2000);
    vnu_pos                                 number;
    vnu_id_raprt                            number;
    vnu_code_stat                           number default 1;

    vre_reqt                                utl_http.req;
    vre_repns                               utl_http.resp;
    vva_ligne                               varchar2 (2000);
    vnu_compt                               number;
  begin
    -- Etape 1. Construire l'URL pour commander l'execution
    vva_prefx_url := 'http' || case when pva_indic_secrs = 'O' then 's' else null end || '://' || pva_servr;

    vva_url := vva_prefx_url || '?background=yes&statusformat=xml&' || pva_parmt;

    -- Etape 2. Demarrer l'execution
    begin
      begin
        vre_reqt := utl_http.begin_request (vva_url);
      exception
        when others then
          ete ('Erreur',
               utl_http.get_detailed_sqlerrm);
      end;

      utl_http.set_header (vre_reqt,
                           'User-Agent',
                           'Oracle UTL_HTTP');

      vre_repns := utl_http.get_response (vre_reqt);

      loop
        utl_http.read_line (vre_repns,
                            vva_ligne,
                            true);
        vnu_pos :=
          instr (vva_ligne,
                 '<job id="');

        if vnu_pos > 0 then
          vnu_id_raprt :=
            substr (vva_ligne,
                    vnu_pos + 9,
                    instr (vva_ligne,
                           '"',
                           1,
                           2) -
                    (vnu_pos + 9));
        end if;
      end loop;

      utl_http.end_response (vre_repns);
    exception
      when utl_http.end_of_body then
        utl_http.end_response (vre_repns);
    end;

    if vnu_id_raprt is null then
      maj_stat_travl (pnu_travl,
                      sie_12_stat_pkg.obten_stat ('TRAVL',
                                                  'EREUR',
                                                  'AFW'));
      raise_application_error (-20501,
                               'Erreur au demarrage du rapport');
    end if;

    -- Etape 3. Verifier le statut de l'execution
    vva_url := vva_prefx_url || '/showjobid' || vnu_id_raprt || '?statusformat=xml';
    vnu_compt := 0;

    while vnu_code_stat > 0 and vnu_code_stat < 4 loop
      dbms_lock.sleep (1);                                                                   -- Pause de 1/10 de seconde

      begin
        vre_reqt := utl_http.begin_request (vva_url);
        utl_http.set_header (vre_reqt,
                             'User-Agent',
                             'Oracle UTL_HTTP');

        vre_repns := utl_http.get_response (vre_reqt);
        vnu_code_stat := 0;

        loop
          utl_http.read_line (vre_repns,
                              vva_ligne,
                              true);

          vnu_pos :=
            instr (vva_ligne,
                   '<status code="');

          if vnu_pos > 0 then
            vnu_code_stat :=
              substr (vva_ligne,
                      vnu_pos + 14,
                      instr (vva_ligne,
                             '"',
                             1,
                             2) -
                      (vnu_pos + 14));
          end if;
        end loop;

        utl_http.end_response (vre_repns);
      exception
        when utl_http.end_of_body then
          utl_http.end_response (vre_repns);
      end;

      vnu_compt := vnu_compt + 1;
    end loop;

    if vnu_code_stat = 4 then
      -- Etape 4. Transmettre l'adresse du rapport produit
      maj_stat_travl (pnu_travl,
                      sie_12_stat_pkg.obten_stat ('TRAVL',
                                                  'TERMN',
                                                  'AFW'));

      vva_url := vva_prefx_url || '/getjobid' || vnu_id_raprt;

      return vva_url;
    elsif vnu_code_stat = 5 then
      maj_stat_travl (pnu_travl,
                      sie_12_stat_pkg.obten_stat ('TRAVL',
                                                  'EREUR',
                                                  'AFW'));
      raise_application_error (-20502,
                               'Le rapport a termine en echec.');
    else
      maj_stat_travl (pnu_travl,
                      sie_12_stat_pkg.obten_stat ('TRAVL',
                                                  'EREUR',
                                                  'AFW'));
      raise_application_error (-20503,
                               'Erreur a la verification du statut du rapport: ' || vnu_code_stat);
    end if;
  end exect_raprt;

  procedure lancr_travl (pnu_travl in number,
                         pnu_publc_travl in number,
                         pnu_formt in varchar,
                         pbo_redrg_web_reslt in boolean default true) is
    vva_url_inter                           varchar2 (256);
    vva_url_exter                           varchar2 (256);
    vnu_engin                               number (10);
    vnu_travl_publc                         number (10);
    vbo_pdf                                 blob;
    vbo_pdf_travl                           blob;
    vva_url                                 varchar2 (300);
    vva_imedt                               varchar2 (1);
    vva_parmt                               varchar2 (4000);
    vva_nom_raprt                           varchar2 (60);
    vva_nom_fichr_sort                      varchar2 (200);
    vnu_publc                               number (10);
    vbo_premr_exect                         boolean default true;

    cursor cur_parmt (pnu_publc_travl in number) is
      select   ppt.ref_code_parmt_tp_formt,
               coalesce (valr_varch,
                         to_char (valr_numbr),
                         to_char (valr_date))
                 valr
        from   vd_sie_25_parmt_publc_travl ppt
       where   (ppt.ref_publc_travl = pnu_publc_travl) and indic_presn_appel = 'O';

    cursor cur_parmt_engin (pnu_engin in number) is
      select   code,
               valr_deft valr
        from   vd_i_sie_25_parmt_type_publc
       where   ref_engin = pnu_engin and indic_presn_appel = 'O';

    cursor cur_publc_distn is
      select   distinct ref_versn_publc
        from   vd_i_sie_25_publc_travl pt
       where   pt.ref_travl = pnu_travl
           and (pt.seqnc = pnu_publc_travl
             or pnu_publc_travl is null);
  begin
    select   t.indic_imedt
      into   vva_imedt
      from   vd_i_sie_25_travl t
     where   t.seqnc = pnu_travl;

    if pnu_formt = 'PDF' then
      select   e.seqnc,
               url_servl,
               e.url_servl url_servl_exter
        into   vnu_engin,
               vva_url_inter,
               vva_url_exter
        from   vd_i_sie_25_engin e
       where   e.code = 'ORACL_REPRT';

      for rec_publc_distn in cur_publc_distn loop
        --Obtenir le nom du fichier reports à lancer
        select   iden_acces
          into   vva_nom_raprt
          from   vd_i_sie_25_engin_versn_publc evp
         where   evp.ref_versn_publc = rec_publc_distn.ref_versn_publc                 /*and evp.ref_engin = vnu_engin*/
                                                                      ;

        if lower (vva_nom_raprt) like '%rep' then
          for rec_parmt in cur_parmt_engin (vnu_engin) loop
            if rec_parmt.code = 'PNU_TRAVL' then
              vva_parmt :=
                   vva_parmt
                || '&'
                || rec_parmt.code
                || '='
                || replace (rec_parmt.valr,
                            '#SEQNC#',
                            pnu_travl);
            elsif rec_parmt.code = 'PNU_PUBLC_TRAVL' then
              vva_parmt :=
                   vva_parmt
                || '&'
                || rec_parmt.code
                || '='
                || replace (rec_parmt.valr,
                            '#SEQNC_PUBLC_TRAVL#',
                            pnu_publc_travl);
            elsif rec_parmt.code = 'report' then
              vva_parmt := vva_parmt || '&' || rec_parmt.code || '=' || rec_parmt.valr || vva_nom_raprt;
            else
              vva_parmt := vva_parmt || '&' || rec_parmt.code || '=' || rec_parmt.valr;
            end if;
          end loop;

          if substr (vva_parmt,
                     1,
                     1) = '&' then
            vva_parmt :=
              substr (vva_parmt,
                      2);
          end if;

          for rec_parmt in cur_parmt (vnu_travl_publc) loop
            vva_parmt := vva_parmt || '&' || rec_parmt.ref_code_parmt_tp_formt || '=' || rec_parmt.valr;
          end loop;

          if substr (vva_parmt,
                     1,
                     1) = '&' then
            vva_parmt :=
              substr (vva_parmt,
                      2);
          end if;

          vva_url :=
            exect_raprt (pva_indic_secrs            => 'N',
                         pva_servr                  => vva_url_inter,
                         pva_parmt                  => vva_parmt,
                         pnu_travl                  => pnu_travl);
          sie_08_url_pkg.obten_pdf_de_url (vva_url,
                                           vbo_pdf);
        else
          vbo_pdf :=
            sie_25_travl_publc_cu_pkg.obten_pdf (pnu_travl,
                                                 pnu_publc_travl,
                                                 vva_nom_raprt);
        end if;

        --merger les pdf
        if vbo_premr_exect then
          vbo_premr_exect := false;
          vbo_pdf_travl := vbo_pdf;
        else
          vbo_pdf_travl :=
            plpdf_toolkit.merge (vbo_pdf_travl,
                                 vbo_pdf);
        end if;
      end loop;

      if pnu_publc_travl is null then
        select   nom
          into   vva_nom_fichr_sort
          from   vd_i_sie_25_travl t
         where   t.seqnc = pnu_travl;

        if vva_nom_fichr_sort is null then
          vva_nom_fichr_sort :=
               'Lot d''impression généré le '
            || to_char (sysdate,
                        'yyyy-mm-dd hh24:mi:ss')
            || '.pdf';
        end if;
      else
        select   nom
          into   vva_nom_fichr_sort
          from   vd_sie_25_publc_travl pt
         where   pt.seqnc = pnu_publc_travl;
      end if;

      if pbo_redrg_web_reslt then
        sie_11_prodt_pkg.telvs_fichr (vbo_pdf_travl,
                                      vva_nom_fichr_sort,
                                      'application/pdf',
                                      true,
                                      true);
      else
        gbl_travl_termn := vbo_pdf_travl;
        gva_mime_type_travl := 'application/pdf';
        gnu_tail_fichr := dbms_lob.getlength (vbo_pdf_travl);
        gva_nom_fichr := vva_nom_fichr_sort;
      end if;
    end if;
  exception
    when others then
      ete ();
      raise;
  end lancr_travl;

  procedure lancr_publc_travl (pnu_publc_travl in number,
                               pnu_formt in varchar,
                               pbo_redrg_web_reslt in boolean default true) is
    vnu_travl                               number (10);
  begin
    select   ref_travl
      into   vnu_travl
      from   vd_i_sie_25_publc_travl pt
     where   pt.seqnc = pnu_publc_travl;

    lancr_travl (vnu_travl,
                 pnu_publc_travl,
                 pnu_formt,
                 pbo_redrg_web_reslt);
  end lancr_publc_travl;

  procedure lancr_travl (pnu_travl in number,
                         pnu_formt in varchar,
                         pbo_redrg_web_reslt in boolean default true) is
  begin
    lancr_travl (pnu_travl,
                 null,
                 pnu_formt,
                 pbo_redrg_web_reslt);
  end lancr_travl;

  procedure defnr_contx_exect_raprt (pnu_travl in number,
                                     pnu_travl_publc in number,
                                     pva_type_publc in varchar2,
                                     pva_code_publc in varchar2) is
    vva_varch                               varchar2 (256);
    vda_date                                date;
    vnu_numbr                               number;
    vva_parmt_alimn                         varchar2 (1);
    pragma autonomous_transaction;

    cursor cur_travl_publc is
      select   seqnc
        from   vd_sie_25_publc_travl pt
       where   pt.ref_travl = pnu_travl
           and pt.ref_code_type_publc = pva_type_publc
           and ref_code_publc = pva_code_publc
           and pt.ref_stat <> sie_12_stat_pkg.obten_stat ('PUBLC_TRAVL',
                                                          'ANUL',
                                                          'AFW');

    cursor cur_parmt (pnu_publc_travl in number) is
      select     valr_varch,
                 valr_date,
                 valr_numbr
          from   vd_sie_25_parmt_publc_travl
         where   ref_publc_travl = pnu_publc_travl and indic_presn_appel = 'N'
      order by   ordre_presn asc;

    vnu_numr_elemn                          pls_integer;

    procedure trans_ajout_parmt_table_ts (pnu_numr_elemn in number,
                                          pnu_travl_publc in number,
                                          pva_valr in varchar2,
                                          pva_numbr in number,
                                          pva_date in date) is
      vva_enonc_updat                         varchar2 (500)
        default 'update vd_i_sie_25_par_pub_tra_exect set  valr_numbr% = :1, valr_varch% = :2, valr_date% = :3 where ref_travl_publc = :4 and ref_travl = :5';
    begin
      if pnu_numr_elemn = 1 then
        insert into   vd_i_sie_25_par_pub_tra_exect (ref_travl, ref_travl_publc, valr_numbr1, valr_varch1, valr_date1)
             values   (gnu_travl,
                       pnu_travl_publc,
                       pva_numbr,
                       pva_valr,
                       pva_date);
      else
        vva_enonc_updat :=
          replace (vva_enonc_updat,
                   '%',
                   pnu_numr_elemn);

        execute immediate vva_enonc_updat
          using pva_numbr,
                pva_valr,
                pva_date,
                pnu_travl_publc,
                gnu_travl;
      end if;
    end trans_ajout_parmt_table_ts;
  begin
    select   indic_parmt_alimn
      into   vva_parmt_alimn
      from   vd_sie_25_publc_travl pt
     where   ref_code_publc = pva_code_publc and ref_travl = pnu_travl and rownum = 1;

    gnu_travl := pnu_travl;
    gnu_publc_travl := pnu_travl_publc;

    if vva_parmt_alimn = 'N' then
      --Alimenter la table temporaire des paramètres
      for rec_travl_publc in cur_travl_publc loop
        vnu_numr_elemn := 0;

        for rec_parmt in cur_parmt (rec_travl_publc.seqnc) loop
          vnu_numr_elemn := vnu_numr_elemn + 1;
          trans_ajout_parmt_table_ts (vnu_numr_elemn,
                                      rec_travl_publc.seqnc,
                                      rec_parmt.valr_varch,
                                      rec_parmt.valr_numbr,
                                      rec_parmt.valr_date);
        end loop;
      end loop;

      update   vd_sie_25_publc_travl pt
         set   indic_parmt_alimn = 'O'
       where   ref_code_publc = pva_code_publc and ref_travl = pnu_travl;
    end if;

    commit;
  exception
    when others then
      raise;
  end defnr_contx_exect_raprt;

  function obten_domn_contx_exect
    return number is
    vnu_domn                                number (10);
  begin
    select   ref_domn
      into   vnu_domn
      from   vd_i_sie_25_travl t
     where   t.seqnc = gnu_travl;

    return vnu_domn;
  exception
    when no_data_found then
      return null;
  end obten_domn_contx_exect;

  function obten_travl_exect
    return number is
  begin
    return gnu_travl;
  end obten_travl_exect;

  function obten_publc_travl_exect
    return number is
  begin
    return gnu_publc_travl;
  end obten_publc_travl_exect;

  function obten_utils_contx_exect
    return number is
    vnu_utils                               number (10);
  begin
    select   ref_utils
      into   vnu_utils
      from   vd_i_sie_25_travl t
     where   t.seqnc = gnu_travl;

    return vnu_utils;
  exception
    when no_data_found then
      return null;
  end obten_utils_contx_exect;

  procedure vider_cache is
  begin
    gbl_travl_termn := null;
    gva_mime_type_travl := null;
    gnu_tail_fichr := null;
    gva_nom_fichr := null;
  end vider_cache;

  procedure obten_fichr_sort (pbl_travl_termn   out nocopy blob,
                              pva_mime_type_travl   out varchar2,
                              pnu_tail_fichr   out pls_integer,
                              pva_nom_fichr   out varchar2,
                              pbo_suprm_fichr_cache in boolean default true) is
  begin
    pbl_travl_termn := gbl_travl_termn;
    pva_mime_type_travl := gva_mime_type_travl;
    pnu_tail_fichr := gnu_tail_fichr;
    pva_nom_fichr := gva_nom_fichr;

    if pbo_suprm_fichr_cache then
      vider_cache ();
    end if;
  end obten_fichr_sort;

  function obten_stat_publc_travl (pnu_publc_travl in number)
    return number is
    vnu_stat                                number (10);
  begin
    select   ref_stat
      into   vnu_stat
      from   vd_i_sie_25_publc_travl
     where   seqnc = pnu_publc_travl;

    return vnu_stat;
  end obten_stat_publc_travl;

  function obten_versn_publc_courn (pnu_publc in number)
    return number is
    vnu_versn_publc                         number (10);
  begin
    select   seqnc
      into   vnu_versn_publc
      from   vd_sie_25_versn_publc
     where   date_debut_efect <= (select   sysdate
                                    from   dual)
         and (date_fin_efect is null
           or date_fin_efect >= (select   sysdate
                                   from   dual))
         and ref_publc = pnu_publc;

    return vnu_versn_publc;
  end obten_versn_publc_courn;
end sie_25_travl_publc_pkg;
/

Prompt Package Body SIE_25_TRI_ALTER_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_TRI_ALTER_PKG" as
  kva_chemn_image_tri_asc                 varchar2 (100) := '/i/ws/dup.gif';
  kva_chemn_image_tri_desc                varchar2 (100) := '/i/ws/ddown.gif';

  procedure afich_info_tri_alter is
    vnu_rpts_id                             number;

    cursor cur_tri_alter is
      select   s.nom,
               nvl (upper (t.dirct), 'ASC') dirct,
               t.ordre
        from   (select   sort_column_1 nom,
                         sort_direction_1 dirct,
                         1 ordre
                  from   apex_ir_rpts
                 where   id = vnu_rpts_id
                union all
                select   sort_column_2 nom,
                         sort_direction_2 dirct,
                         2 ordre
                  from   apex_ir_rpts
                 where   id = vnu_rpts_id
                union all
                select   sort_column_3 nom,
                         sort_direction_3 dirct,
                         3 ordre
                  from   apex_ir_rpts
                 where   id = vnu_rpts_id
                union all
                select   sort_column_4 nom,
                         sort_direction_4 dirct,
                         4 ordre
                  from   apex_ir_rpts
                 where   id = vnu_rpts_id
                union all
                select   sort_column_5 nom,
                         sort_direction_5 dirct,
                         5 ordre
                  from   apex_ir_rpts
                 where   id = vnu_rpts_id
                union all
                select   sort_column_6 nom,
                         sort_direction_6 dirct,
                         6 ordre
                  from   apex_ir_rpts
                 where   id = vnu_rpts_id) t,
               (select   cs.column_value nom
                  from   apex_ir_rpts r,
                         table (sie_07_util_pkg.strin_to_table_va (r.report_columns)) cs
                 where   r.id = vnu_rpts_id) s
       where   t.nom like '%$TRI'
           and s.nom =    substr (t.nom,
                                  1,
                                  length (t.nom) - 4)
                       || '$AFF';

    vva_chemn_image_tri                     varchar2 (100);
    vnu_nb_coln                             number default 0;
  begin
    -- Construire un objet du type: [{coln:'COLONNE$AFF',img:'<img src="/..." />'},{}]
    -- OU
    -- Générer du JS: $('#apexir_COLONNE$AFF').append('<img src="/..." />');
    vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();

    htp.prn ('[');

    for rec_tri_alter in cur_tri_alter loop
      vnu_nb_coln := vnu_nb_coln + 1;

      if vnu_nb_coln <> 1 then
        htp.prn (',');
      end if;

      if rec_tri_alter.dirct = 'ASC' then
        vva_chemn_image_tri := kva_chemn_image_tri_asc;
      else
        vva_chemn_image_tri := kva_chemn_image_tri_desc;
      end if;

      htp.prn (
           '{nom:'''
        || rec_tri_alter.nom
        || ''','
        || 'img:''<img align="absmiddle" alt="" src="'
        || vva_chemn_image_tri
        || '" />'','
        || 'ordre:'
        || rec_tri_alter.ordre
        || '}'
      );
    end loop;

    htp.prn (']');
  end afich_info_tri_alter;
end sie_25_tri_alter_pkg;
/

Prompt Package Body SIE_25_TYPE_PUBLC_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_type_publc_pkg is
  procedure alimn_domn_type_publc (pnu_seqnc in number) is
    cseqnc                                  vd_i_sie_12_domn.seqnc%type;

    cursor c_domn is
      select   seqnc
        from   vd_i_sie_12_domn;
  begin
    open c_domn;

    loop
      fetch c_domn
      into cseqnc;

      exit when c_domn%notfound;

      if c_domn%found then
        sie_25_domn_type_publc_pkg.ajout_domn_type_publc (cseqnc,
                                                          pnu_seqnc);
      end if;
    end loop;

    close c_domn;
  end alimn_domn_type_publc;
end sie_25_type_publc_pkg;
/

Prompt Package Body SIE_25_TYPE_TRAVL_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_25_type_travl_pkg is
  function obten_seqnc (pnu_domn in number,
                        pva_code in varchar2)
    return vd_sie_25_type_publc.seqnc%type is
    vnu_seqnc                               vd_sie_25_type_publc.seqnc%type;
  begin
    select   seqnc
      into   vnu_seqnc
      from   vd_sie_25_type_travl
     where   ref_domn = pnu_domn and code = pva_code;

    return vnu_seqnc;
  exception
    when no_data_found then
      return null;
  end obten_seqnc;
end sie_25_type_travl_pkg;
/

Prompt Package Body SIE_29_ASURN_QUALT_CORCT_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_29_asurn_qualt_corct_pkg as
  procedure corgr_item_hidn (pnu_aplic number) is
    vnu_id                                  number;
    vnu_compt                               number (1);
    vnu_numr_aplic_apex                     number;

    cursor cur_item is
      select   id,
               flow_id
        from   apex_item_page aip
       where   display_as like '%HIDDEN%'
           and item_plug_id != (select   id
                                  from   apex_regn ar
                                 where   page_id = 0 and plug_name = 'Items cachés' and ar.flow_id = aip.flow_id)
           and flow_id = (select   numr_aplic_apex
                            from   vd_i_sie_11_aplic p
                           where   p.seqnc = pnu_aplic);
  begin
    select   numr_aplic_apex
      into   vnu_numr_aplic_apex
      from   vd_i_sie_11_aplic p
     where   p.seqnc = pnu_aplic;


    select   count (1)
      into   vnu_compt
      from   apex_regn
     where   page_id = 0 and plug_name = 'Items cachés' and flow_id = vnu_numr_aplic_apex;

    if (vnu_compt != 0) then
      select   id
        into   vnu_id
        from   apex_regn
       where   page_id = 0 and plug_name = 'Items cachés' and flow_id = vnu_numr_aplic_apex;

      for rec_item in cur_item loop
        update   apex_item_page aia
           set   item_plug_id = vnu_id
         where   aia.id = rec_item.id;
      end loop;
    end if;
  end corgr_item_hidn;

  procedure corgr_ir_aucun_don_trouv (pnu_aplic number) is
  begin
    update   apex_ir
       set   no_data_found_message = '&A_SIE_13_MESG_AUCUN_DON_TROUV.'
     where   flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic)
         and no_data_found_message != '&A_SIE_13_MESG_AUCUN_DON_TROUV.';
  end corgr_ir_aucun_don_trouv;

  procedure corgr_ir_trop_don_trouv (pnu_aplic number) is
  begin
    update   apex_ir
       set   max_row_count_message = '&A_SIE_13_MESG_TROP_DON_TROUV.'
     where   flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic)
         and max_row_count_message != '&A_SIE_13_MESG_TROP_DON_TROUV.';
  end corgr_ir_trop_don_trouv;

  procedure corgr_regn_trop_don_trouv (pnu_aplic number) is
  begin
    update   apex_regn
       set   plug_query_more_data = '&A_SIE_13_MESG_TROP_DON_TROUV.'
     where   flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic)
         and (plug_query_more_data != '&A_SIE_13_MESG_TROP_DON_TROUV.'
           or plug_query_more_data is null)
         and plug_source_type like '%SQL_QUERY%';
  end corgr_regn_trop_don_trouv;

  procedure corgr_regn_aucun_don_trouv (pnu_aplic number) is
  begin
    update   apex_regn
       set   plug_query_no_data_found = '&A_SIE_13_MESG_AUCUN_DON_TROUV.'
     where   flow_id = sie_11_aplic_pkg.obten_numr_apex_aplic (pnu_aplic)
         and (plug_query_no_data_found != '&A_SIE_13_MESG_AUCUN_DON_TROUV.'
           or plug_query_no_data_found is null)
         and plug_source_type like '%SQL_QUERY%';
  end corgr_regn_aucun_don_trouv;
end sie_29_asurn_qualt_corct_pkg;
/

Prompt Package Body SIE_29_ASURN_QUALT_PKG;
/* Formatted on 04/12/2013 11:35:46 PM (QP5 v5.185.11230.41888) */
create or replace package body sie_29_asurn_qualt_pkg as
  procedure exect_reqt (pva_liste_contrl in varchar2,
                        pnu_page in number default null) is
    cursor cur_contr is
      select   c.seqnc,
               c.nom_struc_acces,
               c.niv_gravt
        from   vd_sie_29_contr c
       where   instr (':' || pva_liste_contrl || ':',
                      ':' || to_char (c.seqnc) || ':') > 0;

    vva_where                               varchar2 (1000);
  begin
    vva_where := 'where flow_id not between 4000 and 4999';

    if pnu_page is not null then
      vva_where := vva_where || ' and page_id = ' || pnu_page;

      delete   vd_i_sie_29_reslt_requt_aq
       where   page_id = pnu_page
           and instr (':' || pva_liste_contrl || ':',
                      ':' || to_char (ref_contr) || ':') > 0;
    else
      delete   vd_i_sie_29_reslt_requt_aq
       where   instr (':' || pva_liste_contrl || ':',
                      ':' || to_char (ref_contr) || ':') > 0;
    end if;

    for rec_contr in cur_contr loop
      execute immediate
           'insert into vd_i_sie_29_reslt_requt_aq(ref_contr,id,flow_id,page_id,nom_comps,natr,niv_gravt) 
        select :ref_contr, sa.id, sa.flow_id, sa.page_id, sa.nom_comps, sa.natr, :niv_gravt
          from '
        || rec_contr.nom_struc_acces
        || ' sa '
        || vva_where
        using rec_contr.seqnc,
              rec_contr.niv_gravt;
    end loop;
  exception
    when others then
      raise;
  end exect_reqt;
end sie_29_asurn_qualt_pkg;
/

CREATE OR REPLACE package "SIE_25_PLPDF_EXPOR_IR_PKG"
  authid current_user as
  --En point
  knu_marge_cel                  constant number default 0.6;
  kva_formt_nombr                constant varchar2 (30) default 'FM9G999G999G990D00';

  type typ_rec_coulr_pdf is record
  (
    vva_coulr_polc_entet                    varchar2 (7),
    vva_coulr_backg_entet                   varchar2 (7)
  );

  type typ_rec_parmt_impre is record
  (
    va_indic_trouv                          varchar2 (1) default 'N',
    va_contn_disps                          apex_regn.prn_content_disposition%type default 'ATTACHMENT',
    va_formt_papr                           apex_regn.prn_paper_size%type default 'LETTER',
    va_orien_papr                           apex_regn.prn_orientation%type default 'VERTICAL',
    va_unite_mesr                           apex_regn.prn_units%type default 'INCHES',
    nu_largr_papr                           apex_regn.prn_width%type default 8.5,
    nu_hautr_papr                           apex_regn.prn_height%type default 11,
    nu_bordr_tail                           apex_regn.prn_border_width%type default 0.5,
    va_bordr_coulr                          apex_regn.prn_border_color%type,
    va_entet_polc_faml                      apex_regn.prn_page_header_font_family%type default 'Helvetica',
    va_entet_polc_poids                     apex_regn.prn_page_header_font_weight%type default 'normal',
    nu_entet_polc_tail                      apex_regn.prn_page_header_font_size%type default 12,
    va_entet_polc_coulr                     apex_regn.prn_page_header_font_color%type,
    va_entet_align                          apex_regn.prn_page_header_alignment%type default 'LEFT',
    va_entet_texte                          apex_regn.prn_page_header%type,
    va_coln_polc_faml                       apex_regn.prn_header_font_family%type default 'Helvetica',
    va_coln_polc_poids                      apex_regn.prn_header_font_weight%type default 'bold',
    nu_coln_polc_tail                       apex_regn.prn_header_font_size%type default 8,
    va_coln_polc_coulr                      apex_regn.prn_header_font_color%type,
    va_coln_fond_coulr                      apex_regn.prn_header_bg_color%type default '#e0e0e0',
    va_corps_polc_faml                      apex_regn.prn_body_font_family%type default 'Helvetica',
    va_corps_polc_poids                     apex_regn.prn_body_font_weight%type default 'normal',
    nu_corps_polc_tail                      apex_regn.prn_body_font_size%type default 8,
    va_corps_polc_coulr                     apex_regn.prn_body_font_color%type,
    va_corps_fond_coulr                     apex_regn.prn_body_bg_color%type default '#f5f5f5',
    va_pied_polc_faml                       apex_regn.prn_page_footer_font_family%type default 'Helvetica',
    va_pied_polc_poids                      apex_regn.prn_page_footer_font_weight%type default 'normal',
    nu_pied_polc_tail                       apex_regn.prn_page_footer_font_size%type default 8,
    va_pied_polc_coulr                      apex_regn.prn_page_footer_font_color%type,
    va_pied_align                           apex_regn.prn_page_footer_alignment%type default 'LEFT',
    va_pied_texte                           apex_regn.prn_page_footer%type
  );

  type typ_tab_hautr_minml is table of number
                                index by varchar2 (5);

  type typ_rec_hautr_faml_polc is record (vta_hautr_minml typ_tab_hautr_minml);

  type typ_tab_hautr_faml_polc is table of typ_rec_hautr_faml_polc
                                    index by varchar2 (4000);

  kva_seprt_coln                 constant varchar2 (1) default ',';
  gnu_largr_logo                          number;
  gbl_logo                                blob;
  gre_coulr_pdf                           typ_rec_coulr_pdf;
  gpi_parmt_impr                          typ_rec_parmt_impre;
  gta_hautr_cel                           typ_tab_hautr_faml_polc;

  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'));

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln);

  function detrm_type_surlg (pva_coulr_polc_ligne apex_ir_condt.row_font_color%type,
                             pva_coulr_backg_ligne apex_ir_condt.row_bg_color%type)
    return varchar2;

  function convr_parmt_align (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2;

  function convr_parmt_faml (pva_parmt in varchar2)
    return varchar2;

  function convr_parmt_poids (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2;

  procedure init_hautr_cel (pva_faml_polc in varchar2 default 'Arial');

  function obten_hautr_cel (pva_faml_polc in varchar2 default 'Arial',
                            pnu_tail_polc in number default 8)
    return number;
end;
/

/* Formatted on 10/12/2013 11:56:21 AM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_25_PLPDF_EXPOR_IR_PKG" as
  knu_marge_gauch                constant number default 0.5;
  knu_marge_droit                constant number default 0.5;
  kva_apex_expr                  constant varchar2 (30) default '#APXWS_EXPR#';
  kva_apex_expr2                 constant varchar2 (30) default '#APXWS_EXPR2#';
  kva_apex_hl_id                 constant varchar2 (30) default '#APXWS_HL_ID#';
  kva_apex_cc_expr               constant varchar2 (30) default '#APXWS_CC_EXPR#';
  kva_varbl_cc                   constant varchar2 (30) default 'APXWS_CC%';

  type typ_rec_page is record
  (
    nu_largr                                number default 0,
    nu_dernr_coln                           binary_integer default 0
  );

  type typ_arr_page is table of typ_rec_page
                         index by binary_integer;

  type typ_rec_surlg is record
  (
    vva_indic_afich                         varchar2 (1) default 'N',
    vva_type_surlg                          varchar2 (23),
    vva_coulr_polc_ligne                    apex_ir_condt.row_font_color%type,
    vva_coulr_backg_ligne                   apex_ir_condt.row_bg_color%type,
    vva_coulr_polc_cel                      apex_ir_condt.column_font_color%type,
    vva_coulr_backg_cel                     apex_ir_condt.column_bg_color%type,
    vva_condt_surlg                         apex_ir_condt.condition_sql%type,
    vva_nom_coln                            apex_ir_condt.column_name%type,
    vva_opert                               apex_ir_condt.operator%type,
    vva_expr                                apex_ir_condt.expr%type,
    vva_expr2                               apex_ir_condt.expr2%type,
    vnu_seqnc                               apex_ir_condt.highlight_sequence%type,
    vnu_max_seqnc                           apex_ir_condt.highlight_sequence%type,
    vva_expr_type                           apex_ir_condt.expr_type%type
  );

  type typ_tab_surlg is table of typ_rec_surlg
                          index by pls_integer;

  type typ_rec_coln_surlg is record
  (
    vva_type_surlg                          varchar2 (30) default 'LIGNE',
    vre_coulr_backg                         plpdf_type.t_color,
    vre_coulr_polc                          plpdf_type.t_color
  );

  type typ_tab_coln_surlg is table of typ_rec_coln_surlg
                               index by varchar2 (30);

  type typ_rec_ligne_surlg is record
  (
    vre_coulr_backg                         plpdf_type.t_color,
    vre_coulr_polc                          plpdf_type.t_color,
    vta_coln_surlg                          typ_tab_coln_surlg
  );

  type typ_rec_group_entet is record
  (
    vva_group                               apex_ir_rpts.break_on%type,
    vva_group_sur                           apex_ir_rpts.break_enabled_on%type,
    vva_coln_somme                          apex_ir_rpts.sum_columns_on_break%type,
    vva_coln_moyen                          apex_ir_rpts.avg_columns_on_break%type,
    vva_coln_max                            apex_ir_rpts.max_columns_on_break%type,
    vva_coln_min                            apex_ir_rpts.min_columns_on_break%type,
    vva_coln_medn                           apex_ir_rpts.median_columns_on_break%type,
    vva_coln_mode                           apex_ir_rpts.mode_columns_on_break%type,
    vva_coln_compt                          apex_ir_rpts.count_columns_on_break%type,
    vva_coln_compt_distn                    apex_ir_rpts.count_distnt_col_on_break%type
  );

  type typ_tab_compt_distn is table of pls_integer
                                index by varchar2 (4000);

  type typ_tab_medn is table of number;

  type typ_rec_parmt_group_coln is record
  (
    vva_indic_afich                         varchar2 (1),
    vva_nom_coln                            varchar2 (30),
    vnu_numr_group                          pls_integer,
    vva_indic_somme                         varchar2 (1),
    vnu_somme                               number,
    vva_indic_moyen                         varchar2 (1),
    vnu_moyen                               number,
    vva_indic_max                           varchar2 (1),
    vnu_max                                 number,
    vva_indic_min                           varchar2 (1),
    vnu_min                                 number,
    vva_indic_medn                          varchar2 (1),
    vnu_medn                                number,
    vta_tabl_medn                           typ_tab_medn,
    vva_indic_mode                          varchar2 (1),
    --Prévoir donnée (probablement un type) pour gérer le mode
    vva_indic_compt                         varchar2 (1),
    vnu_compt                               number,
    vva_indic_compt_distn                   varchar2 (1),
    vnu_compt_distn                         number,
    vta_tabl_compt                          typ_tab_compt_distn
  );

  type typ_tab_parmt_group_coln is table of typ_rec_parmt_group_coln
                                     index by pls_integer;

  type typ_rec_parmt_group is record
  (
    vva_nom_coln_1                          varchar2 (30),
    vva_nom_coln_2                          varchar2 (30),
    vva_nom_coln_3                          varchar2 (30),
    vva_nom_coln_4                          varchar2 (30),
    vva_nom_coln_5                          varchar2 (30),
    vva_nom_coln_6                          varchar2 (30),
    vva_valr_coln_1                         varchar2 (4000),
    vva_valr_coln_2                         varchar2 (4000),
    vva_valr_coln_3                         varchar2 (4000),
    vva_valr_coln_4                         varchar2 (4000),
    vva_valr_coln_5                         varchar2 (4000),
    vva_valr_coln_6                         varchar2 (4000),
    vva_libl_coln_1                         varchar2 (4000),
    vva_libl_coln_2                         varchar2 (4000),
    vva_libl_coln_3                         varchar2 (4000),
    vva_libl_coln_4                         varchar2 (4000),
    vva_libl_coln_5                         varchar2 (4000),
    vva_libl_coln_6                         varchar2 (4000)
  );

  type typ_rec_parmt_group_plugn is record
  (
    vva_ligne_1                             varchar2 (4000),
    vva_ligne_2                             varchar2 (4000),
    vva_ligne_3                             varchar2 (4000),
    vva_trans_libl                          varchar2 (4000),
    vva_indic_ventl                         varchar2 (1),
    vnu_nombr_coln_ventl                    number default 1
  );

  type typ_rec_coln_plugn is record
  (
    vva_valr                                varchar2 (4000),
    vnu_colsp                               number,
    vnu_rowsp                               number,
    vva_indic_ventl                         varchar2 (1)
  );

  type typ_tab_coln_plugn is table of typ_rec_coln_plugn
                               index by pls_integer;

  type typ_tab_trans_libl is table of varchar2 (4000)
                               index by varchar2 (100);

  gar_tail_papr                           sie_07_sql_pkg.typ_arr_ndx_vc30;
  --Gestion du highlight
  gre_ligne_a_surlg                       typ_rec_ligne_surlg;
  gnu_max_seqnc                           number;
  gre_style_ligne                         sie_25_formt_ir_pkg.typ_formt;
  --Gestion des groupes
  gre_group                               typ_rec_parmt_group;
  --Gestion des fonctions
  gta_fonct_coln                          typ_tab_parmt_group_coln;
  --Gestion des groupements d'entêtes (plugin)
  gre_parmt_group_plugn                   typ_rec_parmt_group_plugn;
  gta_trans_libl                          typ_tab_trans_libl;

  gva_valr_nul                            varchar2 (4000);
  gbo_presn_group                         boolean default false;

  function formt_chain_br (pva_elemn in varchar2)
    return varchar2 is
    vva_elemn                               varchar2 (4000);
  begin
    vva_elemn :=
      sie_07_sql_pkg.rempl_br (pva_elemn,
                               chr (10) || chr (13));
    return replace (vva_elemn,
                    '&nbsp;',
                    ' ');
  end formt_chain_br;

  function formt_nom_fichr (pva_nom in varchar2)
    return varchar2 is
    vva_nom                                 varchar2 (1000) default lower (pva_nom);
  begin
    vva_nom :=
      sie_07_sql_pkg.rempl_br (vva_nom,
                               '_');

    vva_nom :=
      replace (vva_nom,
               chr (10) || chr (13),
               '_');
    vva_nom :=
      replace (vva_nom,
               chr (10),
               '_');
    vva_nom :=
      substr (translate (vva_nom,
                         'çàâéèêöùû /\?',
                         'caaeeeouu____'),
              1,
              120);

    while instr (vva_nom,
                 '__') > 0 loop
      vva_nom :=
        replace (vva_nom,
                 '__',
                 '_');
    end loop;

    vva_nom :=
      replace (vva_nom,
               '_.',
               '.');

    return vva_nom;
  end;

  function formt_date (pda_date in date default sysdate)
    return varchar2 is
  begin
    return    'Le '
           || trim (to_char (pda_date,
                             'day'))
           || ' '
           || extract (day from pda_date)
           || ' '
           || trim (to_char (pda_date,
                             'month'))
           || ' '
           || extract (year from pda_date);
  end;

  function convr_parmt_align (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case upper (pva_parmt) when 'LEFT' then 'L' when 'RIGHT' then 'R' when 'CENTER' then 'C' else pva_deft end;
  end;

  function convr_parmt_faml (pva_parmt in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt) when 'times' then 'Times new roman' when 'courier' then 'Courier' else 'Arial' -- Défaut
                                                                                                                end;
  end;

  function convr_parmt_poids (pva_parmt in varchar2,
                              pva_deft in varchar2)
    return varchar2 is
  begin
    return case lower (pva_parmt) when 'bold' then 'B' when 'normal' then null else pva_deft end;
  end;

  procedure init_hautr_cel (pva_faml_polc in varchar2 default 'Arial') is
  begin
    --En points
    case pva_faml_polc
      when 'Arial' then
        gta_hautr_cel ('Arial').vta_hautr_minml ('5') := 10;
        gta_hautr_cel ('Arial').vta_hautr_minml ('5.5') := 10;
        gta_hautr_cel ('Arial').vta_hautr_minml ('6') := 10;
        gta_hautr_cel ('Arial').vta_hautr_minml ('6.5') := 11.5;
        gta_hautr_cel ('Arial').vta_hautr_minml ('7') := 11.5;
        gta_hautr_cel ('Arial').vta_hautr_minml ('7.5') := 12.8;
        gta_hautr_cel ('Arial').vta_hautr_minml ('8') := 12.8;
        gta_hautr_cel ('Arial').vta_hautr_minml ('8.5') := 12.8;
        gta_hautr_cel ('Arial').vta_hautr_minml ('9') := 14.2;
        gta_hautr_cel ('Arial').vta_hautr_minml ('9.5') := 14.2;
        gta_hautr_cel ('Arial').vta_hautr_minml ('10') := 15.6;
        gta_hautr_cel ('Arial').vta_hautr_minml ('10.5') := 15.6;
        gta_hautr_cel ('Arial').vta_hautr_minml ('11') := 15.6;
        gta_hautr_cel ('Arial').vta_hautr_minml ('11.5') := 17.05;
        gta_hautr_cel ('Arial').vta_hautr_minml ('12') := 18.5;
        gta_hautr_cel ('Arial').vta_hautr_minml ('12.5') := 18.5;
        gta_hautr_cel ('Arial').vta_hautr_minml ('13') := 18.5;
        gta_hautr_cel ('Arial').vta_hautr_minml ('13.5') := 18.5;
        gta_hautr_cel ('Arial').vta_hautr_minml ('14') := 19.9;
      else
        null;
    end case;
  end init_hautr_cel;

  function obten_hautr_cel (pva_faml_polc in varchar2 default 'Arial',
                            pnu_tail_polc in number default 8)
    return number is
    vva_tail_polc                           varchar2 (4000)
                                              default replace (pnu_tail_polc,
                                                               ',',
                                                               '.');
  begin
    --if gta_hautr_cel.exists (/*case pva_faml_polc when 'Helvetica' then 'Arial' else */pva_faml_polc /*end*/) then
    if gta_hautr_cel ('Arial').vta_hautr_minml.exists (vva_tail_polc) then
      return gta_hautr_cel ('Arial').vta_hautr_minml (vva_tail_polc);
    end if;

    --end if;

    return 19.9;
  end obten_hautr_cel;

  function obten_parmt_impre_raprt (pnu_ref_ir in number)
    return typ_rec_parmt_impre is
    vpi_deft                                typ_rec_parmt_impre;
    gpi_parmt_impr                          typ_rec_parmt_impre;
  begin
    begin
      select   'O',
               reg.prn_content_disposition,
               reg.prn_paper_size,
               reg.prn_orientation,
               reg.prn_units,
               reg.prn_width,
               reg.prn_height,
               reg.prn_border_width,
               reg.prn_border_color,
               reg.prn_page_header_font_family,
               reg.prn_page_header_font_weight,
               reg.prn_page_header_font_size,
               reg.prn_page_header_font_color,
               reg.prn_page_header_alignment,
               reg.prn_page_header,
               reg.prn_header_font_family,
               reg.prn_header_font_weight,
               reg.prn_header_font_size,
               reg.prn_header_font_color,
               reg.prn_header_bg_color,
               reg.prn_body_font_family,
               reg.prn_body_font_weight,
               reg.prn_body_font_size,
               reg.prn_body_font_color,
               reg.prn_body_bg_color,
               reg.prn_page_footer_font_family,
               reg.prn_page_footer_font_weight,
               reg.prn_page_footer_font_size,
               reg.prn_page_footer_font_color,
               reg.prn_page_footer_alignment,
               reg.prn_page_footer
        into   gpi_parmt_impr
        from   vd_sie_13_page_ir pir,
               apex_ir air,
               apex_regn reg
       where   pir.seqnc = pnu_ref_ir and air.id = pir.id_apex and reg.id = air.region_id;
    exception
      when no_data_found then
        gpi_parmt_impr.va_indic_trouv := 'N';
    end;

    return gpi_parmt_impr;
  end;

  function detrm_type_surlg (pva_coulr_polc_ligne apex_ir_condt.row_font_color%type,
                             pva_coulr_backg_ligne apex_ir_condt.row_bg_color%type)
    return varchar2 is
    vva_type_surlg                          varchar2 (23);
  begin
    if pva_coulr_polc_ligne is not null
    or pva_coulr_backg_ligne is not null then
      vva_type_surlg := 'LIGNE';
    else
      vva_type_surlg := 'CEL';
    end if;

    return vva_type_surlg;
  end detrm_type_surlg;

  function obten_parmt_surlg_raprt (pnu_rpts_id in number)
    return typ_tab_surlg is
    vta_parmt_surlg                         typ_tab_surlg;
    vre_parmt_surlg                         typ_rec_surlg;
    vnu_compt                               pls_integer default 1;

    cursor cur_surlg is
      select     'O' indic_afich,
                 detrm_type_surlg (airc.row_font_color,
                                   airc.row_bg_color)
                   type_surlg,
                 row_font_color coulr_polc_ligne,
                 row_bg_color coulr_backg_ligne,
                 column_font_color coulr_polc_cel,
                 column_bg_color coulr_backg_cel,
                 condition_sql condt_surlg,
                 column_name nom_coln,
                 expr expr,
                 expr2 expr2,
                 operator opert,
                 highlight_sequence seqnc,
                 expr_type expr_type
          from   apex_ir_rpts airr,
                 apex_ir_condt airc
         where   airr.id = pnu_rpts_id
             and airr.id = airc.report_id
             and airc.condition_type = 'HIGHLIGHT'
             and airc.enabled = 'Y'
      order by   airc.highlight_sequence;
  begin
    for rec_surlg in cur_surlg loop
      vre_parmt_surlg.vva_indic_afich := rec_surlg.indic_afich;
      vre_parmt_surlg.vva_type_surlg := rec_surlg.type_surlg;
      vre_parmt_surlg.vva_coulr_polc_ligne := rec_surlg.coulr_polc_ligne;
      vre_parmt_surlg.vva_coulr_backg_ligne := rec_surlg.coulr_backg_ligne;
      vre_parmt_surlg.vva_coulr_polc_cel := rec_surlg.coulr_polc_cel;
      vre_parmt_surlg.vva_coulr_backg_cel := rec_surlg.coulr_backg_cel;
      vre_parmt_surlg.vva_condt_surlg := rec_surlg.condt_surlg;
      vre_parmt_surlg.vva_nom_coln := rec_surlg.nom_coln;
      vre_parmt_surlg.vva_expr := rec_surlg.expr;
      vre_parmt_surlg.vva_expr2 := rec_surlg.expr2;
      vre_parmt_surlg.vva_opert := rec_surlg.opert;
      vre_parmt_surlg.vnu_seqnc := rec_surlg.seqnc;
      vre_parmt_surlg.vva_expr_type := rec_surlg.expr_type;

      vta_parmt_surlg (vnu_compt) := vre_parmt_surlg;
      vnu_compt := vnu_compt + 1;
    end loop;

    return vta_parmt_surlg;
  end obten_parmt_surlg_raprt;

  function obten_parmt_group_raprt (pnu_rpts_id in number)
    return typ_rec_group_entet is
    vre_parmt_group                         typ_rec_group_entet;
  begin
    select   break_on,
             break_enabled_on,
             sum_columns_on_break,
             avg_columns_on_break,
             max_columns_on_break,
             min_columns_on_break,
             median_columns_on_break,
             mode_columns_on_break,
             count_columns_on_break,
             count_distnt_col_on_break
      into   vre_parmt_group
      from   apex_ir_rpts airr
     where   airr.id = pnu_rpts_id;

    return vre_parmt_group;
  end obten_parmt_group_raprt;

  function obten_parmt_group_plugn (pnu_reprt_id in number)
    return typ_rec_parmt_group_plugn is
    vre_parmt_group_plugn                   typ_rec_parmt_group_plugn;
  begin
    select   apex_application.do_substitutions (attribute_01),
             apex_application.do_substitutions (attribute_02),
             apex_application.do_substitutions (attribute_03),
             apex_application.do_substitutions (attribute_04),
             attribute_05,
             attribute_10
      into   vre_parmt_group_plugn
      from   apex_actio_dynmq_actio
     where   affected_elements_type = 'REGION'
         and affected_region_id = pnu_reprt_id
         and action = 'PLUGIN_CA_SIESOLUTIONS_SIE21_GROUP_ENTET_RAPRT'
         and rownum <= 1;

    return vre_parmt_group_plugn;
  exception
    when no_data_found then
      return null;
  end obten_parmt_group_plugn;

  procedure defnr_coulr_pdf (pva_nom_procd in varchar2) is
    vva_progr_a_lancr                       varchar2 (4000)
      default    'begin '
              || '  sie_25_plpdf_expor_ir_pkg.gre_coulr_pdf := %PROCD_PERSN%; '
              || '  exception when others then 
                        ete();'
              || 'end;';
    vre_coulr_deft                          typ_rec_coulr_pdf;
  begin
    vva_progr_a_lancr :=
      replace (vva_progr_a_lancr,
               '%PROCD_PERSN%',
               pva_nom_procd);

    execute immediate vva_progr_a_lancr;
  exception
    when others then
      gre_coulr_pdf.vva_coulr_polc_entet := '#FFFFFF';
      gre_coulr_pdf.vva_coulr_backg_entet := '#E0E0E0';
  end defnr_coulr_pdf;

  function obten_coulr_a_partr_hex (pva_valr_hex in varchar2)
    return plpdf_type.t_color is
    vre_coulr                               plpdf_type.t_color;
    vre_coulr_deft                          plpdf_type.t_color;

    function obten_rgb_de_hex (pva_part_hex in varchar2)
      return number is
    begin
      return plpdf_util.to_dec (pva_part_hex);
    end obten_rgb_de_hex;
  begin
    --Vérifier si la longueur du hex est bien de 7 (# + 6 * {0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F})
    if length (pva_valr_hex) = 7 and pva_valr_hex is not null then
      vre_coulr.r :=
        obten_rgb_de_hex (substr (pva_valr_hex,
                                  2,
                                  2));
      vre_coulr.g :=
        obten_rgb_de_hex (substr (pva_valr_hex,
                                  4,
                                  2));
      vre_coulr.b :=
        obten_rgb_de_hex (substr (pva_valr_hex,
                                  6,
                                  2));

      return vre_coulr;
    end if;

    vre_coulr_deft.r := 255;
    vre_coulr_deft.g := 255;
    vre_coulr_deft.b := 255;

    return vre_coulr_deft;
  end obten_coulr_a_partr_hex;

  procedure init_surlg_ligne is
  begin
    gnu_max_seqnc := 0;
    gre_ligne_a_surlg.vre_coulr_polc := null;
    gre_ligne_a_surlg.vre_coulr_backg := null;
  end init_surlg_ligne;

  procedure init_surlg_coln (pva_nom_coln in varchar2) is
  begin
    gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vva_type_surlg := null;
    gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_polc := null;
    gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_backg := null;
  end init_surlg_coln;

  procedure gerer_surlg (pta_parmt_surlg in typ_tab_surlg,
                         pva_valr_a_compr in out varchar2,
                         pva_nom_coln in varchar2,
                         pva_type_coln in varchar2,
                         pva_formt_coln in varchar2) is
    vva_condt_sql                           apex_ir_condt.condition_sql%type;
    vbo_presn_expr                          boolean;
    vbo_presn_expr2                         boolean;
    vva_valr_retr                           varchar2 (1);
    vre_coulr_polc                          plpdf_type.t_color;
    vre_coulr_fond                          plpdf_type.t_color;
  begin
    if pta_parmt_surlg.exists (1) then
      for i in pta_parmt_surlg.first () .. pta_parmt_surlg.last () loop
        --Valider si le nom de la colonne est présente dans la condition ou verifier si c'est un champ calculé
        if instr (pta_parmt_surlg (i).vva_condt_surlg,
                  '"' || pva_nom_coln || '"') > 0
        or (pva_nom_coln like kva_varbl_cc
        and instr (pta_parmt_surlg (i).vva_condt_surlg,
                   kva_apex_cc_expr) > 0) then
          vva_condt_sql :=
            replace (pta_parmt_surlg (i).vva_condt_surlg,
                     '"' || pta_parmt_surlg (i).vva_nom_coln || '"',
                     kva_apex_cc_expr);

          --Dans un cas où la valeur a comparer est égale à la valeur nullable du IR, ikl faut la remplacer par null
          if pva_valr_a_compr = formt_chain_br (gva_valr_nul) then
            vva_condt_sql :=
              replace (vva_condt_sql,
                       kva_apex_cc_expr,
                       'null');
          else
            --Remplace le nom de colonne et expr
            case pva_type_coln
              when 'VARCH' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                              ''''
                           || replace (pva_valr_a_compr,
                                       '''',
                                       '''''')
                           || '''');
              when 'NUMBR' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                           replace (to_number (pva_valr_a_compr,
                                               pva_formt_coln),
                                    ',',
                                    '.'));
              when 'DATE' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                           to_date (pva_valr_a_compr,
                                    pva_formt_coln));
              when 'TIMST' then
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                           to_timestamp (pva_valr_a_compr,
                                         pva_formt_coln));
              else
                vva_condt_sql :=
                  replace (vva_condt_sql,
                           kva_apex_cc_expr,
                              ''''
                           || replace (pva_valr_a_compr,
                                       '''',
                                       '''''')
                           || '''');
            end case;
          end if;

          vva_condt_sql :=
            replace (vva_condt_sql,
                     kva_apex_hl_id,
                     '''O''');

          if instr (vva_condt_sql,
                    kva_apex_expr) > 0 then
            vbo_presn_expr := true;
            vva_condt_sql :=
              replace (vva_condt_sql,
                       kva_apex_expr,
                       ':valr_expr');
          else
            vbo_presn_expr := false;
          end if;

          if instr (vva_condt_sql,
                    kva_apex_expr2) > 0 then
            vbo_presn_expr2 := true;
            vva_condt_sql :=
              replace (vva_condt_sql,
                       kva_apex_expr2,
                       ':valr_expr2');
          else
            vbo_presn_expr2 := false;
          end if;

          --Valider si la condition pour le surlignage est respectée
          --Afficher ensuite la couleur selon le type
          if vbo_presn_expr2 then
            execute immediate 'select ' || vva_condt_sql || ' from dual'
                                                  into   vva_valr_retr
              using pta_parmt_surlg (i).vva_expr,
                    pta_parmt_surlg (i).vva_expr2;
          elsif vbo_presn_expr then
            execute immediate 'select ' || vva_condt_sql || ' from dual'
                                                  into   vva_valr_retr
              using pta_parmt_surlg (i).vva_expr;
          else
            execute immediate 'select ' || vva_condt_sql || ' from dual'
                                                  into   vva_valr_retr;
          end if;

          --Il faut ajouter les paramètres de highlight à la colonne courante
          if vva_valr_retr is not null then
            if pta_parmt_surlg (i).vva_type_surlg = 'LIGNE' and pta_parmt_surlg (i).vnu_seqnc >= gnu_max_seqnc then
              gnu_max_seqnc := pta_parmt_surlg (i).vnu_seqnc;
              gre_ligne_a_surlg.vre_coulr_backg := obten_coulr_a_partr_hex (pta_parmt_surlg (i).vva_coulr_backg_ligne);
              gre_ligne_a_surlg.vre_coulr_polc := obten_coulr_a_partr_hex (pta_parmt_surlg (i).vva_coulr_polc_ligne);
            end if;

            if pta_parmt_surlg (i).vva_type_surlg <> 'LIGNE' then
              gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vva_type_surlg := 'COL';
              gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_backg :=
                obten_coulr_a_partr_hex (
                  nvl (pta_parmt_surlg (i).vva_coulr_backg_cel, pta_parmt_surlg (i).vva_coulr_backg_ligne)
                );
              gre_ligne_a_surlg.vta_coln_surlg (pva_nom_coln).vre_coulr_polc :=
                obten_coulr_a_partr_hex (
                  nvl (pta_parmt_surlg (i).vva_coulr_polc_cel, pta_parmt_surlg (i).vva_coulr_polc_ligne)
                );
            end if;
          end if;
        end if;
      end loop;
    end if;
  end gerer_surlg;

  procedure afich_pdf (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID')) is
    vta_parmt_surlg                         typ_tab_surlg;
    vre_parmt_group                         typ_rec_group_entet;
    vre_parmt_group_plugn                   typ_rec_parmt_group_plugn;
    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (4000);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    vnu_id_plugn                            number;
    vva_procd_coulr                         varchar2 (200);
    vva_procd_entet                         varchar2 (200);
    vva_procd_pied_page                     varchar2 (200);
    vbo_presn_fonct                         boolean default false;
    vva_indic_forcr_ajust_page              varchar2 (1);
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vnu_largr_dispo                         number;
    var_pages                               typ_arr_page;
    vnu_index_page                          binary_integer;
    vnu_somme_largr                         number;
    vnu_dernr_coln_ajout                    number;
    vnu_rpts_id                             number;
    vnu_hautr_ligne                         number;
    --variable pour afficher fonctions
    vnu_tail_group                          pls_integer default 0;
    -- variables plpdf
    vnu_elmnt_lign                          number := 0;
    vnu_elmnt_tabl                          number := 0;
    vnu_elmnt_restn                         number := 0;
    vnu_tail_polc_ent                       number := 0;
    vnu_tail_polc_corps                     number := 0;
    vnu_tail_polc_pied                      number := 0;
    vnu_largr_restn                         number := 0;
    vva_elmnt                               varchar2 (300);
    vbo_type_indtr                          boolean := false;
    v_blob                                  blob;
    --variable des paramètres du tableau
    v_bordr_cell                            plpdf_type.t_row_borders;
    v_data_cell                             plpdf_type.t_row_datas;
    v_data_row_ent                          plpdf_type.t_row_datas;
    v_tail_cell                             plpdf_type.t_row_widths;
    v_tail_intr_cell                        plpdf_type.t_row_widths;
    v_algnm_cell                            plpdf_type.t_row_aligns;
    v_algnm_entet                           plpdf_type.t_row_aligns;
    v_style_cell                            plpdf_type.t_row_styles;
    v_lign_max                              plpdf_type.t_row_maxlines;
    v_coulr_cell                            plpdf_type.t_row_filles;

    procedure init_pdf is
      vva_progr_a_lancr                       varchar2 (4000)
        default 'begin ' || '  %PROCD_PERSN%(:a); ' || '  exception when others then ete();' || 'end;';
    begin
      --compter le nombre d'éléments
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'O' then
          vnu_elmnt_lign := vnu_elmnt_lign + 1;
        end if;
      end loop;

      --initialiser le pdf
      if gpi_parmt_impr.va_orien_papr = 'VERTICAL' then
        plpdf_pkg.init1 (
          'P',
          plpdf_const.point,
          case gpi_parmt_impr.va_formt_papr
            when 'LEGAL' then plpdf_const.legal
            when 'LETTER' then plpdf_const.letter
            when 'A3' then plpdf_const.a3
            when 'A4' then plpdf_const.a4
            else plpdf_const.letter
          end
        );
      else
        plpdf_pkg.init1 (
          'L',
          plpdf_const.point,
          case gpi_parmt_impr.va_formt_papr
            when 'LEGAL' then plpdf_const.legal
            when 'LETTER' then plpdf_const.letter
            when 'A3' then plpdf_const.a3
            when 'A4' then plpdf_const.a4
            else plpdf_const.letter
          end
        );
      end if;

      plpdf_pkg.nopalias;
      plpdf_pkg.setdoctitle (formt_nom_fichr (vva_nom_raprt) || '.pdf');
      plpdf_pkg.setallmargin (knu_marge_droit * 72,
                              0.5 * 72,
                              knu_marge_gauch * 72);
      plpdf_pkg.newpage;
      plpdf_pkg.setcellmargin (knu_marge_cel);

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_entet_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_entet_polc_faml));
      end if;

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml));
      end if;

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_corps_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_corps_polc_faml));
      end if;

      if not gta_hautr_cel.exists (convr_parmt_faml (gpi_parmt_impr.va_pied_polc_faml)) then
        init_hautr_cel (convr_parmt_faml (gpi_parmt_impr.va_pied_polc_faml));
      end if;

      if vva_procd_entet is not null then
        vva_progr_a_lancr :=
          replace (vva_progr_a_lancr,
                   '%PROCD_PERSN%',
                   vva_procd_entet);

        execute immediate vva_progr_a_lancr using vva_nom_raprt;
      else
        plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_entet_polc_faml),
                                convr_parmt_poids (gpi_parmt_impr.va_entet_polc_poids,
                                                   'B'),
                                gpi_parmt_impr.nu_entet_polc_tail);
        plpdf_pkg.printcell (0,
                             obten_hautr_cel (gpi_parmt_impr.va_entet_polc_faml,
                                              gpi_parmt_impr.nu_entet_polc_tail),
                             vva_nom_raprt,
                             0,
                             0,
                             convr_parmt_align (gpi_parmt_impr.va_entet_align,
                                                'C'));
        plpdf_pkg.linebreak (56.7);
      end if;
    end init_pdf;

    procedure calcl_largr_raprt is
      vnu_total_reltf                         number default 0;
      vbo_activ_fit_to_page                   boolean default false;
      vnu_largr_total_reel                    number default 0;
    begin
      -- Créer les différents set d'entêtes (tableau)
      vnu_dernr_coln_ajout := 0;
      vnu_largr_restn := plpdf_pkg.getpageavailablewidth;
      vnu_elmnt_restn := vnu_elmnt_lign;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'O' then
          case var_infor_coln (i).va_type_largr
            when 'POUCE' then
              vnu_largr_restn := vnu_largr_restn - (var_infor_coln (i).nu_largr * 72);
            when 'INDET' then
              var_infor_coln (i).nu_largr := vnu_largr_deft;
              vnu_largr_restn := vnu_largr_restn - (var_infor_coln (i).nu_largr * 72);
            when 'RELTF' then
              vnu_total_reltf := vnu_total_reltf + var_infor_coln (i).nu_largr;
            else
              --Ne devrait pas arriver
              null;
          end case;

          if var_infor_coln (i).va_type_largr in ('POUCE', 'INDET') then
            vnu_largr_total_reel := vnu_largr_total_reel + (var_infor_coln (i).nu_largr * 72);
          end if;
        end if;
      end loop;

      if vnu_largr_restn <= 0
      or vnu_total_reltf = 0
     and vnu_largr_total_reel < plpdf_pkg.getpageavailablewidth
     and vva_indic_forcr_ajust_page = 'O' then
        vbo_activ_fit_to_page := true;
      end if;

      for j in var_pages.first () .. var_pages.last () loop
        for i in vnu_dernr_coln_ajout + 1 .. var_pages (j).nu_dernr_coln loop
          if vbo_activ_fit_to_page and var_infor_coln (i).va_type_largr = 'RELTF' then
            var_infor_coln (i).va_indic_expor := 'N';
            gta_fonct_coln (i).vva_indic_afich := 'N';
          end if;

          if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'O' then
            --Taille selon la largeur du champ
            case var_infor_coln (i).va_type_largr
              when 'RELTF' then
                var_infor_coln (i).nu_largr_reltv := var_infor_coln (i).nu_largr / vnu_total_reltf;
                v_tail_intr_cell (i) := vnu_largr_restn * var_infor_coln (i).nu_largr_reltv;
              else
                if not vbo_activ_fit_to_page then
                  v_tail_intr_cell (i) := (var_infor_coln (i).nu_largr * 72);
                else
                  v_tail_intr_cell (i) :=
                    plpdf_pkg.getpageavailablewidth * ( (var_infor_coln (i).nu_largr * 72) / vnu_largr_total_reel);
                end if;
            end case;

            vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

            if gta_trans_libl.exists (var_infor_coln (i).va_nom) then
              vva_elmnt := gta_trans_libl (var_infor_coln (i).va_nom);
            else
              vva_elmnt := var_infor_coln (i).va_libl;
            end if;

            vva_elmnt := formt_chain_br (vva_elmnt);

            v_bordr_cell (vnu_elmnt_tabl) := '1';
            v_tail_cell (vnu_elmnt_tabl) := v_tail_intr_cell (i);

            vnu_elmnt_restn := vnu_elmnt_lign - vnu_elmnt_tabl;

            v_algnm_entet (vnu_elmnt_tabl) :=
              convr_parmt_align (var_infor_coln (i).va_align_entet,
                                 'C');
            v_data_row_ent (vnu_elmnt_tabl) := vva_elmnt;
            vbo_type_indtr := false;
          end if;
        end loop;

        vnu_dernr_coln_ajout := var_pages (j).nu_dernr_coln;
      end loop;

      vnu_elmnt_tabl := 0;
    end calcl_largr_raprt;

    procedure impri_entet is
    begin
      if gpi_parmt_impr.nu_coln_polc_tail is not null then
        vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
      else
        vnu_tail_polc_ent := 11;
      end if;

      plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                 'B'),
                              vnu_tail_polc_ent);

      plpdf_pkg.row_print2 (v_data_row_ent,
                            v_bordr_cell,
                            v_tail_cell,
                            v_algnm_entet,
                            v_style_cell,
                            v_lign_max,
                            obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                             vnu_tail_polc_ent),
                            1,
                            0,
                            0);
    end impri_entet;

    procedure impri_corps is
    begin
      if gpi_parmt_impr.nu_corps_polc_tail is not null then
        vnu_tail_polc_corps := gpi_parmt_impr.nu_corps_polc_tail;
      else
        vnu_tail_polc_corps := 8;
      end if;

      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_corps_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_corps_polc_poids,
                                                 null),
                              vnu_tail_polc_corps);

      plpdf_pkg.row_print2 (v_data_cell,
                            v_bordr_cell,
                            v_tail_cell,
                            v_algnm_cell,
                            v_style_cell,
                            v_lign_max,
                            obten_hautr_cel (gpi_parmt_impr.va_corps_polc_faml,
                                             vnu_tail_polc_corps),
                            v_coulr_cell);
      vnu_elmnt_tabl := 0;
    end impri_corps;

    procedure defnr_ligne is
      vbo_presn_ligne_bold                    boolean default false;
    begin
      gre_style_ligne.indic_ligne := false;
      gre_style_ligne.indic_gras := false;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          if gta_fonct_coln (i).vva_indic_afich = 'O' then
            vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

            v_bordr_cell (vnu_elmnt_tabl) := '1';

            v_tail_cell (vnu_elmnt_tabl) := v_tail_intr_cell (i);

            --Aligner selon le type de données
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                vva_elmnt := var_infor_coln (i).va_valr_varch;

                if vva_elmnt is null then
                  vva_elmnt := gva_valr_nul;
                end if;
              when 'NUMBR' then
                if var_infor_coln (i).nu_valr_numbr is null then
                  vva_elmnt := gva_valr_nul;
                else
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := to_char (var_infor_coln (i).nu_valr_numbr);
                  else
                    vva_elmnt :=
                      (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                       var_infor_coln (i).va_formt)));
                  end if;
                end if;
              when 'DATE' then
                if var_infor_coln (i).da_valr_date is null then
                  vva_elmnt := gva_valr_nul;
                else
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := to_char (var_infor_coln (i).da_valr_date);
                  else
                    vva_elmnt :=
                      (to_char (var_infor_coln (i).da_valr_date,
                                var_infor_coln (i).va_formt));
                  end if;
                end if;
              when 'TIMST' then
                if var_infor_coln (i).ts_valr_timst is null then
                  vva_elmnt := gva_valr_nul;
                else
                  if var_infor_coln (i).va_formt is null then
                    vva_elmnt := to_char (var_infor_coln (i).ts_valr_timst);
                  else
                    vva_elmnt :=
                      (to_char (var_infor_coln (i).ts_valr_timst,
                                var_infor_coln (i).va_formt));
                  end if;
                end if;
              else
                vva_elmnt := var_infor_coln (i).va_valr_varch;
            end case;

            vva_elmnt := apex_application.do_substitutions (vva_elmnt);

            if vva_elmnt like '<span style="%"></span>%' then
              declare
                vnu_postn                               number;
              begin
                vnu_postn :=
                  instr (vva_elmnt,
                         '</span>') +
                  length ('</span>') -
                  1;
                gre_style_ligne :=
                  sie_25_formt_ir_pkg.digr_bals_formt (substr (vva_elmnt,
                                                               1,
                                                               vnu_postn));
                vva_elmnt :=
                  substr (vva_elmnt,
                          vnu_postn + 1);

                if gre_style_ligne.indic_ligne and gre_style_ligne.indic_gras then
                  vbo_presn_ligne_bold := true;
                end if;
              end;
            end if;

            v_style_cell (vnu_elmnt_tabl) := null;
            vva_elmnt := formt_chain_br (vva_elmnt);
            v_algnm_cell (vnu_elmnt_tabl) :=
              convr_parmt_align (var_infor_coln (i).va_align_coln,
                                 'C');
            v_data_cell (vnu_elmnt_tabl) := vva_elmnt;
          end if;

          --Alimenter le highlight pour les colonnes
          init_surlg_coln (var_infor_coln (i).va_nom);
          gerer_surlg (vta_parmt_surlg,
                       vva_elmnt,
                       var_infor_coln (i).va_nom,
                       var_infor_coln (i).va_type_valr,
                       var_infor_coln (i).va_formt);
        end if;
      end loop;

      if vbo_presn_ligne_bold then
        for c in v_style_cell.first () .. v_style_cell.last () loop
          if v_style_cell (c) not like '%B%'
          or v_style_cell (c) is null then
            v_style_cell (c) := v_style_cell (c) || 'B';
          end if;
        end loop;
      end if;

      vnu_elmnt_tabl := 0;
    end defnr_ligne;

    procedure impri_pied_page is
      vva_progr_a_lancr                       varchar2 (4000)
        default 'begin ' || '  %PROCD_PERSN%; ' || '  exception when others then ete();' || 'end;';
    begin
      if vva_procd_pied_page is not null then
        vva_progr_a_lancr :=
          replace (vva_progr_a_lancr,
                   '%PROCD_PERSN%',
                   vva_procd_pied_page);

        execute immediate vva_progr_a_lancr;
      else
        if gpi_parmt_impr.nu_pied_polc_tail is not null then
          vnu_tail_polc_pied := gpi_parmt_impr.nu_pied_polc_tail;
        else
          vnu_tail_polc_pied := 8;
        end if;

        plpdf_pkg.setcurrenty (round (plpdf_pkg.getpageavailableheight + 14.2,
                                      0));
        plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_pied_polc_faml),
                                convr_parmt_poids (gpi_parmt_impr.va_pied_polc_poids,
                                                   null),
                                vnu_tail_polc_pied);

        if gpi_parmt_impr.va_pied_texte is not null then
          plpdf_pkg.printcell (0,
                               obten_hautr_cel (gpi_parmt_impr.va_pied_polc_faml,
                                                vnu_tail_polc_pied),
                               apex_application.do_substitutions (gpi_parmt_impr.va_pied_texte),
                               0,
                               0,
                               'C');
        end if;

        plpdf_pkg.printcell (0,
                             obten_hautr_cel (gpi_parmt_impr.va_pied_polc_faml,
                                              vnu_tail_polc_pied),
                             to_char (plpdf_pkg.currentpagenumber),
                             0,
                             0,
                             'C');
      end if;
    end impri_pied_page;

    --Gestion du surlignement
    procedure defnr_surlg is
    begin
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          if gta_fonct_coln (i).vva_indic_afich = 'O' then
            vnu_elmnt_tabl := vnu_elmnt_tabl + 1;

            v_coulr_cell (vnu_elmnt_tabl) := gre_ligne_a_surlg.vre_coulr_backg;

            if gre_ligne_a_surlg.vta_coln_surlg (var_infor_coln (i).va_nom).vva_type_surlg <> 'LIGNE' then
              v_coulr_cell (vnu_elmnt_tabl) :=
                gre_ligne_a_surlg.vta_coln_surlg (var_infor_coln (i).va_nom).vre_coulr_backg;
            end if;
          end if;
        end if;
      end loop;
    end defnr_surlg;

    --Gestion des regroupements
    function obten_valr_fonct (pva_nom_coln in varchar2,
                               pva_fonct in varchar2 default 'SOMME')
      return number is
      vnu_fonct                               number;
    begin
      case pva_fonct
        when 'SOMME' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_somme,
                   pva_nom_coln);
        when 'MOYEN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_moyen,
                   pva_nom_coln);
        when 'MAX' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_max,
                   pva_nom_coln);
        when 'MIN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_min,
                   pva_nom_coln);
        when 'MEDN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_medn,
                   pva_nom_coln);
        when 'MODE' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_mode,
                   pva_nom_coln);
        when 'COMPT' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_compt,
                   pva_nom_coln);
        when 'DISTN' then
          vnu_fonct :=
            instr (vre_parmt_group.vva_coln_compt_distn,
                   pva_nom_coln);
        else
          null;
      end case;

      return vnu_fonct;
    end obten_valr_fonct;

    function afich_fonct (pnu_valr in number,
                          pva_formt in varchar2,
                          pva_fonct in varchar2 default 'SOMME')
      return varchar2 is
      vva_fonct                               varchar2 (4000);
    begin
      case pva_fonct
        when 'SOMME' then
          vva_fonct := null;
        when 'MOYEN' then
          vva_fonct := 'Moyenne';
        when 'MAX' then
          vva_fonct := 'Maximum';
        when 'MIN' then
          vva_fonct := 'Minimum';
        when 'MEDN' then
          vva_fonct := 'Médiane';
        when 'MODE' then
          vva_fonct := 'Mode';
        when 'COMPT' then
          vva_fonct := 'Calculer';
        when 'DISTN' then
          vva_fonct := 'Nombre de valeurs distinctes';
        else
          null;
      end case;

      if pva_fonct <> 'SOMME' then
        vva_fonct := vva_fonct || ': ';
      end if;

      if pva_fonct in ('COMPT', 'DISTN') then
        return vva_fonct || to_char (pnu_valr);
      else
        return    vva_fonct
               || to_char (pnu_valr,
                           pva_formt);
      end if;
    end afich_fonct;

    function obten_group_actif (pva_nom_coln in varchar2)
      return boolean is
    begin
      return instr (':' || vre_parmt_group.vva_group_sur || ':',
                    ':' || pva_nom_coln || ':') > 0;
    end obten_group_actif;

    function obten_fonct_activ (pva_nom_coln in varchar2,
                                pva_mode in varchar2 default 'SOMME')
      return boolean is
      vbo_activ                               boolean default false;
    begin
      case pva_mode
        when 'SOMME' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_somme || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MOYEN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_moyen || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MAX' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_max || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MIN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_min || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MEDN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_medn || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'MODE' then
          vbo_activ :=
            instr (vre_parmt_group.vva_coln_mode || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'COMPT' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_compt || ':',
                   ':' || pva_nom_coln || ':') > 0;
        when 'DISTN' then
          vbo_activ :=
            instr (':' || vre_parmt_group.vva_coln_compt_distn || ':',
                   ':' || pva_nom_coln || ':') > 0;
        else
          null;
      end case;

      return vbo_activ;
    end obten_fonct_activ;

    /*Création des métadonnées*/
    procedure init_group_entet is
      vbo_presn_group                         boolean default false;
      vnu_compt                               pls_integer default 0;
      vnu_compt_group                         pls_integer default 0;
      vbo_presn_fonct                         boolean default false;

      function detrm_postn_coln_group (pva_nom_coln in varchar2,
                                       pva_break_on in varchar2)
        return pls_integer is
        vva_chain                               varchar2 (4000);
        vnu_postn                               pls_integer default 0;
      begin
        vva_chain :=
          substr (pva_break_on,
                  1,
                  instr (pva_break_on,
                         pva_nom_coln));

        select   length (vva_chain) -
                 length (replace (vva_chain,
                                  ':',
                                  '')) +
                 1
          into   vnu_postn
          from   dual;

        return vnu_postn;
      end detrm_postn_coln_group;
    begin
      --Déterminer les colonnes qui font partie du break ainsi que les fonctions par colonnes,
      --les ajouter au tableau des groupes globaux
      --Ne pas oublier le format number pour la colonne
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          if obten_group_actif (var_infor_coln (i).va_nom) then
            vbo_presn_group := true;
            gbo_presn_group := vbo_presn_group;
            vnu_compt_group :=
              detrm_postn_coln_group (var_infor_coln (i).va_nom,
                                      vre_parmt_group.vva_group);

            --Alimenter les colonnes qui font parties du groupe
            case vnu_compt_group
              when 1 then
                gre_group.vva_nom_coln_1 := var_infor_coln (i).va_nom;
              when 2 then
                gre_group.vva_nom_coln_2 := var_infor_coln (i).va_nom;
              when 3 then
                gre_group.vva_nom_coln_3 := var_infor_coln (i).va_nom;
              when 4 then
                gre_group.vva_nom_coln_4 := var_infor_coln (i).va_nom;
              when 5 then
                gre_group.vva_nom_coln_5 := var_infor_coln (i).va_nom;
              when 6 then
                gre_group.vva_nom_coln_6 := var_infor_coln (i).va_nom;
              else
                null;
            end case;

            gta_fonct_coln (i).vnu_numr_group := vnu_compt_group;
          end if;

          gta_fonct_coln (i).vva_nom_coln := var_infor_coln (i).va_nom;

          if vbo_presn_group then
            gta_fonct_coln (i).vva_indic_afich := 'N';
          else
            gta_fonct_coln (i).vva_indic_afich := 'O';


            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'SOMME') then
              gta_fonct_coln (i).vva_indic_somme := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MOYEN') then
              gta_fonct_coln (i).vva_indic_moyen := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MAX') then
              gta_fonct_coln (i).vva_indic_max := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MIN') then
              gta_fonct_coln (i).vva_indic_min := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MEDN') then
              gta_fonct_coln (i).vva_indic_medn := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'MODE') then
              gta_fonct_coln (i).vva_indic_mode := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'COMPT') then
              gta_fonct_coln (i).vva_indic_compt := 'O';
            end if;

            if obten_fonct_activ (var_infor_coln (i).va_nom,
                                  'DISTN') then
              gta_fonct_coln (i).vva_indic_compt_distn := 'O';
            end if;
          end if;

          vbo_presn_group := false;
        end if;
      end loop;

      vnu_elmnt_tabl := 0;
    end init_group_entet;

    function verfr_chang_group
      return boolean is
      vbo_chang                               boolean default false;
      vva_elemn                               varchar2 (32767);
    begin
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'N' then
          --Déterminer s'il y a eu changement de groupe
          case var_infor_coln (i).va_type_valr
            when 'VARCH' then
              vva_elemn := var_infor_coln (i).va_valr_varch;
            when 'NUMBR' then
              vva_elemn :=
                (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                 var_infor_coln (i).va_formt)));
            when 'DATE' then
              vva_elemn :=
                (to_char (var_infor_coln (i).da_valr_date,
                          var_infor_coln (i).va_formt));
            when 'TIMST' then
              vva_elemn :=
                (to_char (var_infor_coln (i).ts_valr_timst,
                          var_infor_coln (i).va_formt));
            else
              vva_elemn := var_infor_coln (i).va_valr_varch;
          end case;

          case gta_fonct_coln (i).vnu_numr_group
            when 1 then
              vbo_chang :=
                gre_group.vva_valr_coln_1 <> vva_elemn
             or gre_group.vva_valr_coln_1 is null;
            when 2 then
              vbo_chang :=
                gre_group.vva_valr_coln_2 <> vva_elemn
             or gre_group.vva_valr_coln_2 is null;
            when 3 then
              vbo_chang :=
                gre_group.vva_valr_coln_3 <> vva_elemn
             or gre_group.vva_valr_coln_3 is null;
            when 4 then
              vbo_chang :=
                gre_group.vva_valr_coln_4 <> vva_elemn
             or gre_group.vva_valr_coln_4 is null;
            when 5 then
              vbo_chang :=
                gre_group.vva_valr_coln_5 <> vva_elemn
             or gre_group.vva_valr_coln_5 is null;
            when 6 then
              vbo_chang :=
                gre_group.vva_valr_coln_6 <> vva_elemn
             or gre_group.vva_valr_coln_6 is null;
            else
              null;
          end case;
        end if;

        if vbo_chang then
          exit;
        end if;
      end loop;

      return vbo_chang;
    end verfr_chang_group;

    /*Print à chaque groupe*/
    procedure gerer_group_entet is
      vbo_presn_entet                         boolean default false;
      vva_elemn                               varchar2 (4000);
      vva_valr_coln                           varchar2 (200);
    begin
      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' and gta_fonct_coln (i).vva_indic_afich = 'N' then
          --Construire la cellule à imprimer
          vbo_presn_entet := true;

          case var_infor_coln (i).va_type_valr
            when 'VARCH' then
              vva_valr_coln := var_infor_coln (i).va_valr_varch;
            when 'NUMBR' then
              vva_valr_coln :=
                (ltrim (to_char (var_infor_coln (i).nu_valr_numbr,
                                 var_infor_coln (i).va_formt)));
            when 'DATE' then
              vva_valr_coln :=
                (to_char (var_infor_coln (i).da_valr_date,
                          var_infor_coln (i).va_formt));
            when 'TIMST' then
              vva_valr_coln :=
                (to_char (var_infor_coln (i).ts_valr_timst,
                          var_infor_coln (i).va_formt));
            else
              vva_valr_coln := var_infor_coln (i).va_valr_varch;
          end case;

          case gta_fonct_coln (i).vnu_numr_group
            when 1 then
              gre_group.vva_libl_coln_1 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_1 := vva_valr_coln;
            when 2 then
              gre_group.vva_libl_coln_2 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_2 := vva_valr_coln;
            when 3 then
              gre_group.vva_libl_coln_3 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_3 := vva_valr_coln;
            when 4 then
              gre_group.vva_libl_coln_4 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_4 := vva_valr_coln;
            when 5 then
              gre_group.vva_libl_coln_5 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_5 := vva_valr_coln;
            when 6 then
              gre_group.vva_libl_coln_6 := var_infor_coln (i).va_libl;
              gre_group.vva_valr_coln_6 := vva_valr_coln;
            else
              null;
          end case;
        end if;
      end loop;

      if gre_group.vva_nom_coln_1 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_1 || ' : ' || gre_group.vva_valr_coln_1;
      end if;

      if gre_group.vva_nom_coln_2 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_2 || ' : ' || gre_group.vva_valr_coln_2;
      end if;

      if gre_group.vva_nom_coln_3 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_3 || ' : ' || gre_group.vva_valr_coln_3;
      end if;

      if gre_group.vva_nom_coln_4 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_4 || ' : ' || gre_group.vva_valr_coln_4;
      end if;

      if gre_group.vva_nom_coln_5 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_5 || ' : ' || gre_group.vva_valr_coln_5;
      end if;

      if gre_group.vva_nom_coln_6 is not null then
        vva_elemn := vva_elemn || ', ' || gre_group.vva_libl_coln_6 || ' : ' || gre_group.vva_valr_coln_6;
      end if;

      if vbo_presn_entet then
        if gpi_parmt_impr.nu_coln_polc_tail is not null then
          vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
        else
          vnu_tail_polc_ent := 11;
        end if;

        plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
        plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                                convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                   'B'),
                                vnu_tail_polc_ent);

        plpdf_pkg.printmultilinecell (0,
                                      obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                                       vnu_tail_polc_ent),
                                      substr (vva_elemn,
                                              3),
                                      '1',
                                      'L',
                                      1,
                                      p_ln                       => 1);
      end if;
    end gerer_group_entet;

    /* Fin print à chaque groupe*/
    procedure termn_group_entet is
      vva_elemn                               varchar2 (4000);
      vnu_compt_termn                         pls_integer default 0;
      v_data_row_fonct                        plpdf_type.t_row_datas;
      v_algnm_fonct                           plpdf_type.t_row_aligns;
      vbo_retrn                               boolean default false;

      function obten_medn
        return number is
        vta_medn                                typ_tab_medn;
      begin /*
       select cast(multiset(
                 select * from table(gta_fonct_coln(c).vta_tabl_medn)
                 order by 1) as typ_tab_medn)
   into vta_medn from dual;

 --Médianne est la valeur
 if mod (vta_medn.count(), 2) = 1 then
   null;
 else --Sinon, il faut calculer la position avant et après
   null;
 end if;*/
        return null;
      end obten_medn;

      function nouvl_ligne
        return varchar2 is
      begin
        return chr (13) || chr (10);
      end nouvl_ligne;
    begin
      for c in gta_fonct_coln.first () .. gta_fonct_coln.last () loop
        if gta_fonct_coln (c).vva_indic_afich = 'O' then
          vnu_compt_termn := vnu_compt_termn + 1;

          if gta_fonct_coln (c).vva_indic_somme = 'O' then
            vbo_retrn := true;
            vva_elemn :=
              afich_fonct (gta_fonct_coln (c).vnu_somme,
                           var_infor_coln (c).va_formt,
                           'SOMME');
          end if;

          if gta_fonct_coln (c).vva_indic_moyen = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct ( (gta_fonct_coln (c).vnu_moyen / gta_fonct_coln (c).vnu_compt),
                              nvl (var_infor_coln (c).va_formt, kva_formt_nombr),
                              'MOYEN');
          end if;

          if gta_fonct_coln (c).vva_indic_max = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_max,
                              var_infor_coln (c).va_formt,
                              'MAX');
          end if;

          if gta_fonct_coln (c).vva_indic_min = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_min,
                              var_infor_coln (c).va_formt,
                              'MIN');
          end if;

          /*
                               if gta_fonct_coln (c).vva_indic_medn = 'O' then
                                if vbo_retrn then
                                  vva_elemn := vva_elemn || nouvl_ligne;
                                end if;
                                vbo_retrn := true;
                              vva_elemn := vva_elemn || afich_fonct(obten_medn, var_infor_coln(c).va_formt, 'MEDN');
                    end if;
          */

          if gta_fonct_coln (c).vva_indic_compt = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_compt,
                              null,
                              'COMPT');
          end if;

          if gta_fonct_coln (c).vva_indic_compt_distn = 'O' then
            if vbo_retrn then
              vva_elemn := vva_elemn || nouvl_ligne;
            end if;

            vbo_retrn := true;
            vva_elemn :=
                 vva_elemn
              || afich_fonct (gta_fonct_coln (c).vnu_compt_distn,
                              null,
                              'DISTN');
          end if;

          v_algnm_fonct (vnu_compt_termn) := 'R';
          v_data_row_fonct (vnu_compt_termn) := vva_elemn;
          vva_elemn := null;
          vbo_retrn := false;
        end if;
      end loop;

      if gpi_parmt_impr.nu_coln_polc_tail is not null then
        vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
      else
        vnu_tail_polc_ent := 11;
      end if;

      plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                 'B'),
                              vnu_tail_polc_ent);

      plpdf_pkg.row_print2 (v_data_row_fonct,
                            v_bordr_cell,
                            v_tail_cell,
                            v_algnm_fonct,
                            v_style_cell,
                            v_lign_max,
                            obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                             vnu_tail_polc_ent),
                            1);
    end termn_group_entet;

    procedure init_calcl_fonct is
    begin
      vnu_tail_group := 0;

      for i in gta_fonct_coln.first () .. gta_fonct_coln.last () loop
        if gta_fonct_coln (i).vva_indic_afich = 'O' then
          if gta_fonct_coln (i).vva_indic_somme = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_somme := 0;
          end if;

          if gta_fonct_coln (i).vva_indic_min = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_min := null;
          end if;

          if gta_fonct_coln (i).vva_indic_max = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_max := null;
          end if;

          if gta_fonct_coln (i).vva_indic_moyen = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_moyen := 0;
          end if;

          if gta_fonct_coln (i).vva_indic_compt = 'O'
          or gta_fonct_coln (i).vva_indic_moyen = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_compt := 0;
          end if;

          if gta_fonct_coln (i).vva_indic_compt_distn = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_compt_distn := 0;
            gta_fonct_coln (i).vta_tabl_compt.delete ();
          end if;

          if gta_fonct_coln (i).vva_indic_medn = 'O' then
            vbo_presn_fonct := true;
            gta_fonct_coln (i).vnu_medn := 0;
          --gta_fonct_coln (i).vta_tabl_medn.delete ();
          end if;
        end if;
      end loop;
    end init_calcl_fonct;

    procedure calcl_fonct is
      vbo_elemn_exist                         boolean default false;
      i                                       pls_integer;
    begin
      vnu_tail_group := vnu_tail_group + 1;

      for i in gta_fonct_coln.first () .. gta_fonct_coln.last () loop
        if gta_fonct_coln (i).vva_indic_afich = 'O' then
          if gta_fonct_coln (i).vva_indic_somme = 'O' then
            gta_fonct_coln (i).vnu_somme := gta_fonct_coln (i).vnu_somme + nvl (var_infor_coln (i).nu_valr_numbr, 0);
          end if;

          if gta_fonct_coln (i).vva_indic_min = 'O'
         and (gta_fonct_coln (i).vnu_min is null
           or gta_fonct_coln (i).vnu_min > var_infor_coln (i).nu_valr_numbr) then
            gta_fonct_coln (i).vnu_min := var_infor_coln (i).nu_valr_numbr;
          end if;

          if gta_fonct_coln (i).vva_indic_max = 'O'
         and (gta_fonct_coln (i).vnu_max is null
           or gta_fonct_coln (i).vnu_max < var_infor_coln (i).nu_valr_numbr) then
            gta_fonct_coln (i).vnu_max := var_infor_coln (i).nu_valr_numbr;
          end if;

          if gta_fonct_coln (i).vva_indic_moyen = 'O' then
            gta_fonct_coln (i).vnu_moyen := gta_fonct_coln (i).vnu_moyen + nvl (var_infor_coln (i).nu_valr_numbr, 0);
          end if;

          if gta_fonct_coln (i).vva_indic_compt = 'O'
          or gta_fonct_coln (i).vva_indic_moyen = 'O' then
            if var_infor_coln (i).nu_valr_numbr is not null
            or var_infor_coln (i).va_valr_varch is not null
            or var_infor_coln (i).da_valr_date is not null
            or var_infor_coln (i).ts_valr_timst is not null then
              gta_fonct_coln (i).vnu_compt := gta_fonct_coln (i).vnu_compt + 1;
            end if;
          end if;

          if gta_fonct_coln (i).vva_indic_compt_distn = 'O' then
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (var_infor_coln (i).va_valr_varch) then
                  gta_fonct_coln (i).vta_tabl_compt (var_infor_coln (i).va_valr_varch) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              when 'NUMBR' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (to_char (var_infor_coln (i).nu_valr_numbr)) then
                  gta_fonct_coln (i).vta_tabl_compt (to_char (var_infor_coln (i).nu_valr_numbr)) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              when 'DATE' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (to_char (var_infor_coln (i).da_valr_date)) then
                  gta_fonct_coln (i).vta_tabl_compt (to_char (var_infor_coln (i).da_valr_date)) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              when 'TIMST' then
                if not gta_fonct_coln (i).vta_tabl_compt.exists (to_char (var_infor_coln (i).ts_valr_timst)) then
                  gta_fonct_coln (i).vta_tabl_compt (to_char (var_infor_coln (i).ts_valr_timst)) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
              else
                if not gta_fonct_coln (i).vta_tabl_compt.exists (var_infor_coln (i).va_valr_varch) then
                  gta_fonct_coln (i).vta_tabl_compt (var_infor_coln (i).va_valr_varch) := 1;
                  gta_fonct_coln (i).vnu_compt_distn := gta_fonct_coln (i).vnu_compt_distn + 1;
                end if;
            end case;
          end if;
        /*
                  if gta_fonct_coln (i).vva_indic_medn = 'O' then
          if var_infor_coln (i).nu_valr_numbr is not null then
            gta_fonct_coln (i).vta_tabl_medn(vnu_tail_group) := var_infor_coln (i).nu_valr_numbr;
          end if;
        end if;*/
        end if;
      end loop;
    end calcl_fonct;

    procedure trans_libl is
      vva_tabl_javsc                          varchar2 (4000);
      vvc_liste_a_trans                       apex_application_global.vc_arr2;
      vvc_liste_coupl                         apex_application_global.vc_arr2;
    begin
      vvc_liste_a_trans :=
        sie_07_util_pkg.string_to_table (vre_parmt_group_plugn.vva_trans_libl,
                                         ',');

      if vvc_liste_a_trans.count > 0 then
        for v in vvc_liste_a_trans.first .. vvc_liste_a_trans.last loop
          vvc_liste_coupl :=
            sie_07_util_pkg.string_to_table (vvc_liste_a_trans (v),
                                             ';');

          gta_trans_libl (vvc_liste_coupl (1)) := vvc_liste_coupl (2);
        end loop;
      end if;
    end trans_libl;

    procedure impri_entet_plugn is
      vta_ligne_1                             typ_tab_coln_plugn;
      vta_ligne_2                             typ_tab_coln_plugn;
      vta_ligne_3                             typ_tab_coln_plugn;

      function analz_ligne_entet (pva_ligne in varchar2)
        return typ_tab_coln_plugn is
        vta_coln_plugn                          typ_tab_coln_plugn;
        vvc_liste_group                         apex_application_global.vc_arr2;
        vvc_liste_sous_group                    apex_application_global.vc_arr2;
        vnu_compt                               pls_integer default 0;
      begin
        vvc_liste_group :=
          sie_07_util_pkg.string_to_table (pva_ligne,
                                           ',');

        if vvc_liste_group.count > 0 then
          for v in vvc_liste_group.first .. vvc_liste_group.last loop
            vnu_compt := vnu_compt + 1;
            vvc_liste_sous_group :=
              sie_07_util_pkg.string_to_table (vvc_liste_group (v),
                                               ';');
            vta_coln_plugn (vnu_compt).vva_valr := trim (vvc_liste_sous_group (1));
            vta_coln_plugn (vnu_compt).vnu_colsp := vvc_liste_sous_group (2);
            vta_coln_plugn (vnu_compt).vnu_rowsp := vvc_liste_sous_group (3);
          end loop;
        end if;

        return vta_coln_plugn;
      end analz_ligne_entet;

      procedure impri_ligne (pta_ligne in typ_tab_coln_plugn) is
        v_data_row_plugn                        plpdf_type.t_row_datas;
        v_algnm_plugn                           plpdf_type.t_row_aligns;
        v_tail_plugn                            plpdf_type.t_row_widths;
        vnu_compt                               pls_integer default 0;
        vnu_tail_ventl                          pls_integer default 0;
        vnu_coln_courn                          pls_integer default 1;
        vnu_coln_max                            pls_integer default 0;
      begin
        if pta_ligne.count > 0 then
          for v in pta_ligne.first () .. pta_ligne.last () loop
            vnu_compt := vnu_compt + 1;
            v_data_row_plugn (vnu_compt) := formt_chain_br (pta_ligne (v).vva_valr);

            if v = pta_ligne.first () and vre_parmt_group_plugn.vva_indic_ventl = 'Y' then
              for c in v .. vre_parmt_group_plugn.vnu_nombr_coln_ventl loop
                vnu_tail_ventl := vnu_tail_ventl + v_tail_cell (c);
              end loop;

              v_tail_plugn (vnu_compt) := vnu_tail_ventl;
              vnu_coln_courn := vnu_coln_courn + vre_parmt_group_plugn.vnu_nombr_coln_ventl - 1;
            else
              vnu_coln_max := vnu_coln_courn + pta_ligne (v).vnu_colsp - 1;
              v_tail_plugn (vnu_compt) := 0;

              for b in vnu_coln_courn .. vnu_coln_max loop
                v_tail_plugn (vnu_compt) := v_tail_plugn (vnu_compt) + v_tail_cell (b);
              end loop;

              vnu_coln_courn := vnu_coln_max;
            end if;

            vnu_coln_courn := vnu_coln_courn + 1;
            v_algnm_plugn (vnu_compt) := 'C';
          end loop;

          plpdf_pkg.row_print2 (v_data_row_plugn,
                                v_bordr_cell,
                                v_tail_plugn,
                                v_algnm_plugn,
                                v_style_cell,
                                v_lign_max,
                                obten_hautr_cel (gpi_parmt_impr.va_coln_polc_faml,
                                                 vnu_tail_polc_ent),
                                1);
        end if;
      end impri_ligne;
    begin
      vta_ligne_1 := analz_ligne_entet (vre_parmt_group_plugn.vva_ligne_1);
      vta_ligne_2 := analz_ligne_entet (vre_parmt_group_plugn.vva_ligne_2);
      vta_ligne_3 := analz_ligne_entet (vre_parmt_group_plugn.vva_ligne_3);


      if gpi_parmt_impr.nu_coln_polc_tail is not null then
        vnu_tail_polc_ent := gpi_parmt_impr.nu_coln_polc_tail;
      else
        vnu_tail_polc_ent := 11;
      end if;

      plpdf_pkg.setcolor4filling (obten_coulr_a_partr_hex (gre_coulr_pdf.vva_coulr_backg_entet));
      plpdf_pkg.setprintfont (convr_parmt_faml (gpi_parmt_impr.va_coln_polc_faml),
                              convr_parmt_poids (gpi_parmt_impr.va_coln_polc_poids,
                                                 'B'),
                              vnu_tail_polc_ent);

      impri_ligne (vta_ligne_1);
      impri_ligne (vta_ligne_2);
      impri_ligne (vta_ligne_3);
    end impri_entet_plugn;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select   apex_application.do_substitutions (pir.libl_regn),
               air.region_id id_plug,
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft,
               apex_application.do_substitutions (air.show_nulls_as)
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vnu_id_plugn,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft,
               gva_valr_nul
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page_ir pir,
               apex_ir air
       where   pir.app_id_formt = pnu_aplic and pir.app_page_id_formt = pnu_page and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vnu_largr_deft := nvl (vnu_largr_deft, 0);

    if vnu_largr_deft <= 0 then
      vnu_largr_deft := 1.5;
    end if;

    -- Récupérer les paramètres du raport
    gpi_parmt_impr := obten_parmt_impre_raprt (vnu_ref_ir);
    -- Obtenir les paramètres pour le surlignement
    vta_parmt_surlg := obten_parmt_surlg_raprt (vnu_rpts_id);
    vre_parmt_group := obten_parmt_group_raprt (vnu_rpts_id);
    vre_parmt_group_plugn := obten_parmt_group_plugn (vnu_id_plugn);

    vva_nom_raprt :=
      nvl (replace (gpi_parmt_impr.va_entet_texte,
                    '#TITLE#',
                    vva_nom_raprt),
           vva_nom_raprt);
    vva_nom_raprt := apex_application.do_substitutions (vva_nom_raprt);
    vva_nom_raprt := formt_chain_br (vva_nom_raprt);

    --Obtenir la procédure de couleur
    vva_procd_coulr :=
      sie_11_prodt_pkg.obten_procd_coulr_plpdf (
        sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic (pnu_aplic))
      );

    if vva_procd_coulr is not null then
      defnr_coulr_pdf (vva_procd_coulr);
    end if;

    vva_procd_entet :=
      sie_11_prodt_pkg.obten_procd_entet_plpdf (
        sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic (pnu_aplic))
      );
    vva_procd_pied_page :=
      sie_11_prodt_pkg.obten_procd_pied_page_plpdf (
        sie_11_aplic_pkg.obten_prodt (sie_11_aplic_pkg.obten_aplic (pnu_aplic))
      );

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  apex_application.do_substitutions (vva_selct),
                                  var_infor_coln,
                                  chr (10) || chr (13));

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      -- vnu_largr_dispo                            := obten_largr_dispo_page (gpi_parmt_impr);

      -- Transformer toutes les valeurs en pouces
      vnu_index_page := 1;
      -- Créer la premiere page
      var_pages (vnu_index_page).nu_dernr_coln := 0;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          -- La page sera créée si elle n'existe pas
          var_pages (vnu_index_page).nu_dernr_coln := i;
          var_pages (vnu_index_page).nu_largr := var_pages (vnu_index_page).nu_largr + var_infor_coln (i).nu_largr_reltv;
        end if;
      end loop;

      begin
        init_group_entet;
        init_calcl_fonct;

        init_pdf;

        trans_libl;
        calcl_largr_raprt;

        impri_entet_plugn;

        if not gbo_presn_group then
          impri_entet;
        end if;

        -- Écrire les données
        while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                               var_infor_coln) loop
          --Créer une nouvelle entête de tableau sur une nouvelle page s'il reste des données
          if round ( (plpdf_pkg.getpageavailableheight - 34.05),
                    0) < round (plpdf_pkg.getcurrenty,
                                0) then
            impri_pied_page;
            plpdf_pkg.newpage;
            gerer_group_entet;
            impri_entet;
          end if;

          if verfr_chang_group then
            if vnu_tail_group <> 0 and vbo_presn_fonct then
              termn_group_entet;
              init_calcl_fonct;
            end if;

            if round ( (plpdf_pkg.getpageavailableheight - 34.05),
                      0) < round (plpdf_pkg.getcurrenty,
                                  0) then
              impri_pied_page;
              plpdf_pkg.newpage;
              gerer_group_entet;
              impri_entet;
            end if;

            gerer_group_entet;
            impri_entet;
          end if;

          init_surlg_ligne;
          calcl_fonct;

          --Remplir le tableau
          defnr_ligne;

          --Définir le highlight pour la ligne courante.
          defnr_surlg;

          if round ( (plpdf_pkg.getpageavailableheight - 34.05),
                    0) < round (plpdf_pkg.getcurrenty,
                                0) then
            impri_pied_page;
            plpdf_pkg.newpage;
            gerer_group_entet;
            impri_entet;
          end if;

          --imprimer la ligne
          impri_corps;
        end loop;

        --pied de page
        if vbo_presn_fonct then
          termn_group_entet;
        end if;

        impri_pied_page;

        --Envoyer les données au fichier blob
        plpdf_pkg.senddoc (v_blob);
      end;

      --téléverser pdf
      owa_util.mime_header ('application/pdf',
                            false);
      htp.p ('Content-length: ' || dbms_lob.getlength (v_blob));
      htp.p (   'Content-Disposition: attachment; filename="'
             || replace (formt_nom_fichr (vva_nom_raprt) || '.pdf',
                         chr (13),
                         '_'));
      owa_util.http_header_close ();
      wpg_docload.download_file (v_blob);
    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  exception
    when others then
      ete ();
  end;

  procedure afich_csv (pnu_aplic in number default sie_07_util_pkg.v ('APP_ID'),
                       pnu_page in number default sie_07_util_pkg.v ('APP_PAGE_ID'),
                       pva_seprt_coln in varchar2 default kva_seprt_coln) is
    vbo_dirct                               boolean default false;
    vnu_ref_ir                              number;
    vva_nom_raprt                           varchar2 (200);
    vva_mesg_aucun_don                      varchar2 (32767);
    vnu_largr_deft                          number;
    --vnu_unite_mesr_largr_deft number(10);

    vva_selct                               varchar2 (32767);
    vnu_cursr                               number;
    var_infor_coln                          sie_07_sql_pkg.typ_arr_infor_coln;
    vcl_corps                               clob;
    vva_seprt_coln                          varchar2 (1);
    vnu_compt_ligne                         number;
    vnu_rpts_id                             number;

    procedure ajouter (pva_pre in varchar2,
                       pva_chaine in varchar2) is
    begin
      if pva_pre is not null
      or pva_chaine is not null then
        if vbo_dirct then
          --htp.putraw (utl_raw.cast_to_raw(pva_pre || pva_chaine));
          htp.prn (pva_pre || pva_chaine);
        --dbms_output.put (pva_pre || pva_chaine);
        else
          dbms_lob.writeappend (vcl_corps,
                                length (pva_pre || pva_chaine),
                                pva_pre || pva_chaine);
        end if;
      end if;
    end;

    procedure ajouter_chaine (pva_pre in varchar2,
                              pva_chaine in varchar2) is
    begin
      ajouter (pva_pre,
                  '"'
               || replace (pva_chaine,
                           '"',
                           '""')
               || '"');
    end;
  begin
    begin
      -- Chercher le rapport interactif sur la page
      select   pir.libl_regn,
               air.no_data_found_message,
               pir.seqnc,
               pir.largr_deft
        --pir.unite_mesr_largr_deft
        into   vva_nom_raprt,
               vva_mesg_aucun_don,
               vnu_ref_ir,
               vnu_largr_deft
        --vnu_unite_mesr_largr_deft
        from   vd_sie_13_page pag,
               vd_sie_13_page_ir pir,
               apex_ir air
       where   pag.ref_aplic = sie_11_aplic_pkg.obten_aplic_numr_apex (pnu_aplic)
           and pag.numr_apex = pnu_page
           and pir.ref_page = pag.seqnc
           and air.id = pir.id_apex;

      -- Récupérer le select
      vnu_rpts_id := sie_13_raprt_inter_pkg.obten_repts_courn ();
      vva_selct := sie_13_raprt_inter_pkg.obten_selct_rpts (vnu_rpts_id);
    exception
      when no_data_found then
        vva_selct := null;
    end;

    if vva_selct is null then
      sie_01_err_apex_pkg.lever_err_apex_code ('SPX.000001',
                                               pva_code_prodt             => 'AFW');
    end if;

    vnu_cursr :=
      sie_07_sql_pkg.ouvri_selct (vnu_ref_ir,
                                  vnu_rpts_id,
                                  vva_selct,
                                  var_infor_coln,
                                  chr (10));

    declare
      vbo_aucun_afich                         boolean default true;
    begin
      if var_infor_coln.first () is not null then
        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            vbo_aucun_afich := false;
            exit;
          end if;
        end loop;
      end if;

      if vbo_aucun_afich then
        var_infor_coln.delete ();
      end if;
    end;

    if var_infor_coln.first () is not null then
      if vbo_dirct then
        owa_util.mime_header ('text/csv',
                              false);
        htp.p ('Content-Disposition: attachment; filename="' || formt_nom_fichr (vva_nom_raprt) || '.csv' || '"');
        --dbms_output.put_line ('HTTP/1.x 200 OK');
        --dbms_output.put_line ('Content-Type: text/csv; charset=UTF-8');
        --dbms_output.put_line ('Content-Disposition: attachment; filename="' || formt_nom_fichr(vva_nom_raprt) || '.csv' || '"');
        owa_util.http_header_close;
      --dbms_output.put_line (null);
      else
        dbms_lob.createtemporary (vcl_corps,
                                  true);
      end if;

      -- Créer la ligne d'entête
      vva_seprt_coln := null;

      for i in var_infor_coln.first () .. var_infor_coln.last () loop
        if var_infor_coln (i).va_indic_expor = 'O' then
          ajouter_chaine (vva_seprt_coln,
                          var_infor_coln (i).va_libl);
          vva_seprt_coln := pva_seprt_coln;
        end if;
      end loop;

      -- Saut de ligne
      ajouter (null,
               chr (10));

      -- Écrire les données
      vnu_compt_ligne := 0;

      while sie_07_sql_pkg.lire_ligne_selct (vnu_cursr,
                                             var_infor_coln) loop
        vnu_compt_ligne := vnu_compt_ligne + 1;

        vva_seprt_coln := null;

        for i in var_infor_coln.first () .. var_infor_coln.last () loop
          if var_infor_coln (i).va_indic_expor = 'O' then
            case var_infor_coln (i).va_type_valr
              when 'VARCH' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
              when 'NUMBR' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).nu_valr_numbr);
              when 'DATE' then
                ajouter_chaine (vva_seprt_coln,
                                to_char (var_infor_coln (i).da_valr_date,
                                         'YYYY-MM-DD'));
              when 'TIMST' then
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).ts_valr_timst);
              else
                ajouter_chaine (vva_seprt_coln,
                                var_infor_coln (i).va_valr_varch);
            end case;

            vva_seprt_coln := pva_seprt_coln;
          end if;
        end loop;

        -- Saut de ligne
        ajouter (null,
                 chr (10));
      end loop;

      if vnu_compt_ligne = 0 then
        ajouter_chaine (null,
                        vva_mesg_aucun_don);
        ajouter (null,
                 chr (10));
      end if;

      if vbo_dirct then
        null;
      else
        sie_11_prodt_pkg.telvs_fichr (vcl_corps,
                                      formt_nom_fichr (vva_nom_raprt) || '.csv',
                                      true,
                                      'texte/csv');

        dbms_lob.freetemporary (vcl_corps);
      end if;
    else
      null;
      -- On a un problème... afficher une erreur dans le PDF ou lever une erreur...
      htp.p ('<h1>Aucune colonne affichable n''a été trouvée.</h1>');
    end if;

    -- Fermer le curseur
    sie_07_sql_pkg.fermr_selct (vnu_cursr);

    -- Arrêter tous les autres traitements d'APEX
    sie_07_util_pkg.aret_trait_page_apex;
  /*exception
                                                                                                                                                                                                                                                                                    when others then
    htp.p (sqlerrm);*/
  end;
end;
/

SET DEFINE OFF;
Prompt Package SIE_11_PRODT_PKG;
/* Formatted on 18/12/2013 11:31:09 AM (QP5 v5.185.11230.41888) */
create or replace package "SIE_11_PRODT_PKG" is
  gva_base_url                            varchar2 (1000);

  /*
    &api: afw
  */

  /*
        &nom: obten_prodt_sesn
    &descr: Retourne la sequence du produit (vd_sie_11_prodt.seqnc)
    &param:
  */
  function obten_prodt_sesn
    return number;

  /*
        &nom: obten_prodt
    &descr: Retourne la sequence du produit (vd_sie_11_prodt.seqnc)
    &param: pva_code_prodt in varchar2
  */
  function obten_prodt (pva_code_prodt in varchar2)
    return number;

  function obten_code_prodt (pnu_seqnc in number default null)
    return varchar2;

  function obten_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_acuei%type;

  function obten_numr_apex_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number;

  function obten_page_acuei (pnu_prodt in number default null)
    return number;

  function obten_numr_apex_page_acuei (pnu_prodt in number default null)
    return number;

  function obten_aplic_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_comnt_bogue%type;

  function obten_numr_apex_aplic_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number;

  function obten_page_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_page_comnt_bogue%type;

  function obten_numr_apex_page_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number;

  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic;

  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic;

  function obten_versn
    return varchar2;

  /*
    function obten_schem (pnu_seqnc in number default null)
      return varchar2;
  */
  function obten_schem_afw
    return varchar2;

  function obten_dosr_fichr_prodt (pnu_seqnc in number default null)
    return varchar2;

  procedure inser_prodt (pva_code in varchar2,
                         pva_nom in varchar2,
                         pnu_numr_versn_1 in number,
                         pnu_numr_versn_2 in number,
                         pnu_numr_versn_3 in number,
                         pnu_numr_versn_4 in number);

  function maj_prodt (pva_code in varchar2,
                      pva_nom in varchar2,
                      pva_procd_expor_metdn in varchar2,
                      pnu_tail_tabl_extra in number,
                      pva_indic_extra_tout in varchar2,
                      pnu_ref_versn_courn in number default null)
    return number;

  procedure telvs_fichr (pcl_fichr in clob,
                         pva_nom_fichr in varchar2,
                         pbo_atach in boolean default true,
                         pva_contn_type in varchar2 default 'text/plain',
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0);

  procedure telvs_fichr (pbl_fichr in out nocopy blob,
                         pva_nom_fichr in varchar2,
                         pva_contn_type in varchar2,
                         pbo_atach in  boolean default true,
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0);

  function obten_lang (pva_code in varchar2)
    return number;

  function obten_lang_sesn (pva_code_deft in varchar2 default null)
    return number;

  function obten_code_lang_sesn (pva_code_deft in varchar2 default null)
    return varchar2;

  function obten_ident_envir (pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2;

  function obten_versn_courn (pnu_prodt in number)
    return number;

  function obten_jquer_ui_css_scope (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_tout_droit_resrv (pnu_prodt in number default null)
    return varchar2;

  function obten_url_acuei (pnu_prodt in number default obten_prodt_sesn)
    return varchar2;

  function obten_url_authe_cible_sesn
    return varchar2;

  procedure defnr_item_aplic_apex;

  function obten_page_inexs_maj_refrn (pnu_prodt in vd_i_sie_11_prodt.seqnc%type)
    return boolean;

  function obten_mesg_sucs_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_echec_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_fetch_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_suprm_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_modf_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_inser_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_aucun_don_prodt (pnu_prodt in number default null)
    return varchar2;

  function obten_mesg_trop_don_prodt (pnu_prodt in number default null)
    return varchar2;

  procedure deplr_formt_resrc_prodt (pnu_prodt in number);

  function obten_dosr_fichr_afw (pnu_prodt in number default null)
    return varchar2
    result_cache;

  function obten_base_url (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2;

  function obten_procd_entet_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_entet_pdf_ir%type;

  function obten_procd_pied_page_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_pied_page_pdf_ir%type;

  function obten_procd_coulr_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_plpdf_coulr%type;

  function obten_numr_versn_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2;

  function obten_numr_versn_prodt_afw
    return varchar2;

  function obten_nom (pnu_seqnc in number)
    return varchar2;

  procedure creer_mesg_base_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type,
                                   pnu_lang in vd_i_sie_01_lang.seqnc%type default null);
--OBSOLETE::CARLO
/*procedure defnr_prodt_safp (pnu_prodt in number);*/

--OBSOLETE::CARLO
/*procedure chang_prodt_safp (pnu_prodt in number);*/

end sie_11_prodt_pkg;
/
SET DEFINE OFF;
Prompt Package Body SIE_11_PRODT_PKG;
/* Formatted on 18/12/2013 11:31:10 AM (QP5 v5.185.11230.41888) */
create or replace package body "SIE_11_PRODT_PKG" is
  gda_const_date                 constant date
    default to_date ('1' || '9' || '8' || '7' || '-' || '0' || '7' || '-' || '0' || '9',
                     'yyyy-mm-dd') ;
  gnu_versn_niv_1                         number default 2;
  gnu_versn_niv_2                         number default 3;
  gnu_versn_niv_3                         number default 0;
  gnu_versn_niv_4                         number default 0;

  function obten_prodt_sesn
    return number is
    vnu_seqnc_prodt                         vd_i_sie_11_prodt.seqnc%type;
  begin
    select   pr.seqnc
      into   vnu_seqnc_prodt
      from   vd_i_sie_11_prodt pr,
             vd_i_sie_11_aplic ap
     where   pr.seqnc = ap.ref_prodt and ap.seqnc = sie_11_aplic_pkg.obten_aplic_sesn ();

    return vnu_seqnc_prodt;
  exception
    when no_data_found then
      raise;
  end obten_prodt_sesn;

  function obten_prodt (pva_code_prodt in varchar2)
    return number is
    vnu_prodt                               sie_11_prodt.seqnc%type;
  begin
    select   seqnc
      into   vnu_prodt
      from   vd_i_sie_11_prodt
     where   code = pva_code_prodt;

    return vnu_prodt;
  exception
    when no_data_found then
      return null;
  end obten_prodt;

  function obten_code_prodt (pnu_seqnc in number default null)
    return varchar2 is
    vva_code                                sie_11_prodt.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_seqnc, obten_prodt_sesn);

    return vva_code;
  end obten_code_prodt;

  function obten_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_acuei%type is
    vnu_aplic                               vd_i_sie_11_aplic.seqnc%type;
  begin
    select   p.ref_aplic_acuei
      into   vnu_aplic
      from   vd_i_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_aplic;
  end obten_aplic_acuei;

  function obten_numr_apex_aplic_acuei (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number is
    vnu_aplic_acuei                         vd_sie_11_prodt.ref_numr_aplic_acuei%type;
  begin
    select   p.ref_numr_aplic_acuei
      into   vnu_aplic_acuei
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);


    return vnu_aplic_acuei;
  end obten_numr_apex_aplic_acuei;

  function obten_page_acuei (pnu_prodt in number default null)
    return number is
    vnu_page                                vd_i_sie_13_page.seqnc%type;
  begin
    select   p.ref_page_acuei
      into   vnu_page
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page;
  end obten_page_acuei;

  function obten_numr_apex_page_acuei (pnu_prodt in number default null)
    return number is
    vnu_page_acuei                          vd_sie_11_prodt.ref_numr_page_acuei%type;
  begin
    select   p.ref_numr_page_acuei
      into   vnu_page_acuei
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page_acuei;
  end obten_numr_apex_page_acuei;

  function obten_aplic_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_aplic_comnt_bogue%type is
    vnu_aplic_comnt_bogue                   vd_sie_11_prodt.ref_aplic_comnt_bogue%type;
  begin
    select   p.ref_aplic_comnt_bogue
      into   vnu_aplic_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_aplic_comnt_bogue;
  end obten_aplic_comnt_bogue;

  function obten_numr_apex_aplic_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number is
    vnu_aplic_comnt_bogue                   vd_sie_11_prodt.ref_numr_aplic_comnt_bogue%type;
  begin
    select   p.ref_numr_aplic_comnt_bogue
      into   vnu_aplic_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_aplic_comnt_bogue;
  end obten_numr_apex_aplic_cb;

  function obten_page_comnt_bogue (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return vd_i_sie_11_prodt.ref_page_comnt_bogue%type is
    vnu_page_comnt_bogue                    vd_sie_11_prodt.ref_page_comnt_bogue%type;
  begin
    select   p.ref_page_comnt_bogue
      into   vnu_page_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page_comnt_bogue;
  end obten_page_comnt_bogue;

  function obten_numr_apex_page_cb (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default null)
    return number is
    vnu_page_comnt_bogue                    vd_sie_11_prodt.ref_numr_page_comnt_bogue%type;
  begin
    select   p.ref_numr_page_comnt_bogue
      into   vnu_page_comnt_bogue
      from   vd_sie_11_prodt p
     where   p.seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vnu_page_comnt_bogue;
  end obten_numr_apex_page_cb;

  /*
      OBSOLETE: il faut utiliser SIE_11_VERSN_PKG.OBTEN_NUMR_VERSN
  */
  function obten_numr_versn (pnu_versn_niv_1 in number,
                             pnu_versn_niv_2 in number,
                             pnu_versn_niv_3 in number,
                             pnu_versn_niv_4 in number)
    return number
    deterministic is
  begin
    return sie_11_versn_pkg.obten_numr_versn (pnu_versn_niv_1,
                                              pnu_versn_niv_2,
                                              pnu_versn_niv_3,
                                              pnu_versn_niv_4);
  end obten_numr_versn;

  --CONAL :: Ne devrait plus etre utilise
  /*
          function obten_numr_versn_aplic (pnu_numr_aplic in number default null)
      return number is
      vnu_versn_formt   number;
    begin
      --TODO revoir cette partie lorsqu'on remplacera le repartiteur
      if pnu_numr_aplic is null then
        return obten_numr_versn (gnu_versn_niv_1,
                                 gnu_versn_niv_2,
                                 gnu_versn_niv_3,
                                 gnu_versn_niv_4);
      else
        select (select obten_numr_versn (v.numr_versn_1,
                                                          v.numr_versn_2,
                                                          v.numr_versn_3,
                                                          v.numr_versn_4)
                  from vd_i_sie_11_versn v
                 where v.ref_prodt = p.seqnc)
          into vnu_versn_formt
          from vd_sie_11_prodt p
         where p.numr_aplic_apex = pnu_numr_aplic;
        return vnu_versn_formt;
      end if;
    end obten_numr_versn_aplic;
  */

  --OBSOLETE: il faut utiliser SIE_11_VERSN_PKG.OBTEN_VERSN
  function obten_versn (pnu_versn_niv_1 in number,
                        pnu_versn_niv_2 in number,
                        pnu_versn_niv_3 in number,
                        pnu_versn_niv_4 in number)
    return varchar2
    deterministic is
  begin
    return sie_11_versn_pkg.obten_versn (pnu_versn_niv_1,
                                         pnu_versn_niv_2,
                                         pnu_versn_niv_3,
                                         pnu_versn_niv_4);
  end obten_versn;

  function obten_versn
    return varchar2 is
    vva_nom                                 varchar2 (200);
  begin
    select      p.nom
             || ' '
             || (select   obten_versn (v.numr_versn_1,
                                       v.numr_versn_2,
                                       v.numr_versn_3,
                                       v.numr_versn_4)
                   from   vd_i_sie_11_versn v
                  where   v.seqnc = p.ref_versn)
      into   vva_nom
      from   vd_i_sie_11_prodt p
     where   p.seqnc = obten_prodt_sesn;

    return vva_nom;
  end obten_versn;

  --CONAL, il faut trouver une facon d'obtenir le schema d'un produit
  /*
        function obten_schem (pnu_seqnc in number default null )
      return varchar2 is
      vva_schem                               varchar2 (60);
    begin
      if pnu_seqnc is null then
        select   a.owner
          into   vva_schem
          from   apex_aplic a
         where   a.id = sie_07_util_pkg.nv ('APP_ID');
      else
        select   a.owner
          into   vva_schem
          from   apex_aplic a,
                 vd_i_sie_11_prodt p
         where   a.id = p.numr_aplic_apex and p.seqnc = pnu_seqnc;
      end if;
      return vva_schem;
    end obten_schem;
  */
  --Temporairement, j'en ai besoin pour la migration CONAL
  function obten_schem_afw
    return varchar2 is
    vnu_seqnc_safp                          vd_i_sie_11_aplic.seqnc%type default sie_11_aplic_pkg.obten_aplic ('SAFP');
  begin
    return sie_11_aplic_pkg.obten_schem (vnu_seqnc_safp);
  end obten_schem_afw;

  function obten_dosr_fichr_prodt (pnu_seqnc in number default null)
    return varchar2 is
    vva_dosr_fichr                          vd_sie_11_prodt.dosr_fichr%type;
  begin
    select   dosr_fichr
      into   vva_dosr_fichr
      from   vd_sie_11_prodt
     where   seqnc = nvl (pnu_seqnc, obten_prodt_sesn);

    return vva_dosr_fichr;
  end obten_dosr_fichr_prodt;

  procedure inser_prodt (pva_code in varchar2,
                         pva_nom in varchar2,
                         pnu_numr_versn_1 in number,
                         pnu_numr_versn_2 in number,
                         pnu_numr_versn_3 in number,
                         pnu_numr_versn_4 in number) is
    vnu_prodt                               vd_i_sie_11_prodt.seqnc%type;
    vnu_versn                               vd_i_sie_11_versn.seqnc%type;
  begin
    insert into   vd_i_sie_11_prodt (code, nom)
         values   (pva_code,
                   pva_nom)
      returning   seqnc
           into   vnu_prodt;

    insert into   vd_i_sie_11_versn (ref_prodt, numr_versn_1, numr_versn_2, numr_versn_3, numr_versn_4, dnr_ref_prodt)
         values   (vnu_prodt,
                   pnu_numr_versn_1,
                   pnu_numr_versn_2,
                   pnu_numr_versn_3,
                   pnu_numr_versn_4,
                   vnu_prodt)
      returning   seqnc
           into   vnu_versn;

    update   vd_i_sie_11_prodt
       set   ref_versn = vnu_versn
     where   seqnc = vnu_prodt;
  exception
    when others then
      raise_application_error (-20001,
                               'Erreur - sie_11_prodt_pkg.inser_prodt - ' || sqlerrm);
  end inser_prodt;

  function maj_prodt (pva_code in varchar2,
                      pva_nom in varchar2,
                      pva_procd_expor_metdn in varchar2,
                      pnu_tail_tabl_extra in number,
                      pva_indic_extra_tout in varchar2,
                      pnu_ref_versn_courn in number default null)
    return number is
    vnu_seqnc                               number;
  begin
    begin
      select   seqnc
        into   vnu_seqnc
        from   vd_i_sie_11_prodt
       where   code = upper (pva_code);

      update   vd_i_sie_11_prodt
         set   nom = pva_nom,
               procd_expor_metdn = pva_procd_expor_metdn,
               tail_tabl_extra = pnu_tail_tabl_extra,
               indic_extra_tout = pva_indic_extra_tout,
               ref_versn = pnu_ref_versn_courn
       where   seqnc = vnu_seqnc;
    exception
      when no_data_found then
        null;

        insert into   vd_i_sie_11_prodt (code, nom, procd_expor_metdn, tail_tabl_extra, indic_extra_tout, ident_envir)
             values   (pva_code,
                       pva_nom,
                       pva_procd_expor_metdn,
                       pnu_tail_tabl_extra,
                       pva_indic_extra_tout,
                       'ACC')
          returning   seqnc
               into   vnu_seqnc;
    end;

    return vnu_seqnc;
  exception
    when others then
      --TODO: revoir la gestion des erreurs selon CADRE SIE
      raise_application_error (-20001,
                               'Erreur - sie_11_prodt_pkg.maj_prodt - ' || sqlerrm);
  end maj_prodt;

  procedure telvs_fichr (pcl_fichr in clob,
                         pva_nom_fichr in varchar2,
                         pbo_atach in boolean default true,
                         pva_contn_type in varchar2 default 'text/plain',
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0) is
    vlb                                     blob;
    vnu_off_sourc                           pls_integer default 1;
    vnu_off_dest                            pls_integer default 1;
    vnu_lang                                pls_integer default 0;
    vnu_warng                               pls_integer;
  begin
    if pbo_arret_engin_apex then
      aa.g_page_text_generated := true;
      aa.g_unrecoverable_error := true;
    --sie_07_util_pkg.aret_trait_page_apex;
    end if;

    dbms_lob.createtemporary (vlb,
                              true);
    dbms_lob.converttoblob (vlb,
                            pcl_fichr,
                            dbms_lob.lobmaxsize,                                  --dbms_lob.getlength (pcl_fichr), /**/
                            vnu_off_dest,
                            vnu_off_sourc,
                            pnu_chars_id,
                            vnu_lang,
                            vnu_warng);
    owa_util.mime_header (ccontent_type              => nvl (pva_contn_type, 'application/octet'),
                          bclose_header              => false);

    htp.p ('Content-length: ' || dbms_lob.getlength (vlb));

    if pbo_atach then
      htp.p ('Content-Disposition: attachment; filename="' || pva_nom_fichr || '"');
    else
      htp.p ('Content-Disposition: filename="' || pva_nom_fichr || '"');
    end if;

    owa_util.http_header_close;
    wpg_docload.download_file (vlb);
  end;

  procedure telvs_fichr (pbl_fichr in out nocopy blob,
                         pva_nom_fichr in varchar2,
                         pva_contn_type in varchar2,
                         pbo_atach in  boolean default true,
                         pbo_arret_engin_apex in boolean default false,
                         pnu_chars_id in number default 0) is
  begin
    if pbo_arret_engin_apex then
      aa.g_page_text_generated := true;
      sie_07_util_pkg.aret_trait_page_apex;
    end if;

    owa_util.mime_header (ccontent_type              => nvl (pva_contn_type, 'application/octet'),
                          bclose_header              => false);

    htp.p ('Content-length: ' || dbms_lob.getlength (pbl_fichr));

    if pbo_atach then
      htp.p ('Content-Disposition: attachment; filename="' || pva_nom_fichr || '"');
    else
      htp.p ('Content-Disposition: filename="' || pva_nom_fichr || '"');
    end if;

    owa_util.http_header_close;
    wpg_docload.download_file (pbl_fichr);
  end;

  function obten_lang (pva_code in varchar2)
    return number is
    vnu_seqnc                               number (10);
  begin
    /*select   l.seqnc
                                                                                                      into   vnu_seqnc
      from   vd_sie_11_prodt p,
             vd_sie_01_lang l
     where   p.seqnc = obten_prodt_sesn () and l.seqnc = p.ref_lang and l.code = upper (pva_code)
    union*/
    select   l.seqnc
      into   vnu_seqnc
      from   vd_sie_11_prodt_lang pl,
             vd_sie_01_lang l
     where   pl.ref_prodt = obten_prodt_sesn () and l.seqnc = pl.ref_lang and l.code = upper (pva_code);

    return vnu_seqnc;
  exception
    when others then
      return null;
  end obten_lang;

  function obten_lang_sesn (pva_code_deft in varchar2 default null)
    return number is
    vnu_seqnc_lang                          number (10);
    vva_code_lang                           varchar2 (10) default sie_07_util_pkg.obten_lang_furtr ();
  begin
    -- Determiner si la langue du browser existe pour l'application
    vnu_seqnc_lang := obten_lang (vva_code_lang);

    -- Si la langue du browser n'existe pas pour l'application
    -- Determiner si la langue du browser sans territoire existe pour l'application
    if vnu_seqnc_lang is null
   and instr (vva_code_lang,
              '-') > 0 then
      vnu_seqnc_lang :=
        obten_lang (substr (vva_code_lang,
                            1,
                            instr (vva_code_lang,
                                   '-') -
                            1));
    end if;

    -- Si la langue du browser sans territoire n'existe pas pour l'application
    -- Utiliser la langue par defaut
    if vnu_seqnc_lang is null and pva_code_deft is not null then
      vnu_seqnc_lang := obten_lang (pva_code_deft);
    end if;

    --Prendre l'application primaire de l'application
    if vnu_seqnc_lang is null then
      vnu_seqnc_lang := obten_lang (sie_07_util_pkg.obten_lang_aplic_deft ());
    end if;

    return vnu_seqnc_lang;
  end obten_lang_sesn;

  function obten_code_lang_sesn (pva_code_deft in varchar2 default null)
    return varchar2 is
    vva_code                                vd_i_sie_01_lang.code%type;
  begin
    select   code
      into   vva_code
      from   vd_i_sie_01_lang l
     where   l.seqnc = obten_lang_sesn (pva_code_deft);

    return vva_code;
  end obten_code_lang_sesn;

  function obten_versn_plugn_formt (pnu_no_versn in number)
    return varchar2 is
  begin
    return null;
  end obten_versn_plugn_formt;

  function obten_ident_envir (pnu_prodt in number default sie_11_prodt_pkg.obten_prodt_sesn)
    return varchar2 is
    vva_ident_envir                         varchar2 (60);
  begin
    select   ident_envir
      into   vva_ident_envir
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_ident_envir;
  end obten_ident_envir;

  function obten_versn_courn (pnu_prodt in number)
    return number is
    vnu_versn                               number (10);
  begin
    select   ref_versn
      into   vnu_versn
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vnu_versn;
  end obten_versn_courn;

  function obten_jquer_ui_css_scope (pnu_prodt in number default null)
    return varchar2 is
    vva_jquer_ui_css_scope                  vd_i_sie_11_prodt.jquer_ui_css_scope%type;
  begin
    select   jquer_ui_css_scope
      into   vva_jquer_ui_css_scope
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_jquer_ui_css_scope;
  exception
    when others then
      --TODO::CARLO
      return obten_code_prodt (pnu_prodt);
  end obten_jquer_ui_css_scope;

  function obten_mesg_tout_droit_resrv (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg_tout_droit_resrv               vd_i_sie_11_prodt.mesg_tout_droit_resrv%type;
  begin
    select   mesg_tout_droit_resrv
      into   vva_mesg_tout_droit_resrv
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg_tout_droit_resrv;
  exception
    when others then
      return null;
  end obten_mesg_tout_droit_resrv;

  function obten_templ_javsc_core_1 (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                obten_dosr_fichr_afw || 'javascript/afw_core_4.1.0.js?v=' || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script');
  exception
    when others then
      return null;
  end obten_templ_javsc_core_1;

  function obten_templ_theme_jquer_ui (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    '<!-- APEXFramework - Theme - jQuery UI - CSS -->'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'theme/jquery-ui/css/ui-afw/jquery-ui-1.8.17.custom.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_prodt
           || 'theme/jquery-ui/css/'
           || obten_jquer_ui_css_scope
           || '/jquery-ui-1.8.17.custom.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<!-- APEXFramework - Theme - jQuery UI - Custom Icons -->'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'theme/jquery-ui/custom_icons/assets/css/fff.icon.core.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'theme/jquery-ui/custom_icons/assets/css/fff.icon.icons.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />';
  end obten_templ_theme_jquer_ui;

  function obten_templ_javsc_core_2 (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                obten_dosr_fichr_afw || 'javascript/afw_4.1.0.js?v=' || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script')
           || sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                obten_dosr_fichr_afw || 'javascript/afw_legacy.js?v=' || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script')
           || sie_15_htp_pkg.ouvri_bals (
                'script',
                'src',
                   obten_dosr_fichr_afw
                || 'theme/jquery-ui/js/jquery-ui-1.8.17.custom.min.js?v='
                || obten_numr_versn_prodt_afw,
                'type',
                'text/javascript'
              )
           || sie_15_htp_pkg.fermr_bals ('script');
  end obten_templ_javsc_core_2;

  function obten_templ_javsc_jquer (pnu_prodt in number default null)
    return varchar2 is
  begin
    --todo CARLO
    --remplacer impromptu par jquery ui dialog
    --trouver un remplacement pour hotkey
    return    '<!-- APEXFramework - JavaScript - jQuery Plug-in -->'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jquery.apex-aplic_procs-4.1.0.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jquery.apex-session-4.1.0.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jquery-impromptu.2.8.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>'
           || '<script src="'
           || obten_dosr_fichr_afw
           || 'javascript/jquery/plugin/jgrowl/javascript/jquery.jgrowl_minimized.js?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/javascript" defer></script>';
  end obten_templ_javsc_jquer;

  function obten_templ_custm (pnu_prodt in number default null)
    return varchar2 is
  begin
    return    '<!-- Application - Theme - CSS -->'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_afw
           || 'css/theme.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />'
           || '<link rel="stylesheet" href="'
           || obten_dosr_fichr_prodt
           || 'css/theme.css?v='
           || obten_numr_versn_prodt_afw
           || '" type="text/css" />';
  end obten_templ_custm;

  function obten_boutn_deplc_range_raprt
    return varchar2 is
  begin
    return    sie_15_htp_pkg.ouvri_bals ('div',
                                         'class',
                                         'barre_boutn_deplc_range_raprt')
           || sie_15_htp_pkg.ouvri_bals ('a',
                                         'href',
                                         '#',
                                         'onclick',
                                         'afw.sie_13.page.raprt_sql.deplc_rang_haut(this);')
           || sie_15_htp_pkg.ouvri_bals (
                'span',
                'class',
                'small_text_button ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only'
              )
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-icon-primary ui-icon ui-icon-triangle-1-n',
                                         'title',
                                         'Déplacer vers le haut.')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-button-text')
           || 'Déplacer vers le haut.'
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('a')
           || sie_15_htp_pkg.ouvri_bals ('a',
                                         'href',
                                         '#',
                                         'onclick',
                                         'afw.sie_13.page.raprt_sql.deplc_rang_bas(this);')
           || sie_15_htp_pkg.ouvri_bals (
                'span',
                'class',
                'small_text_button ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only'
              )
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-icon-primary ui-icon ui-icon-triangle-1-s',
                                         'title',
                                         'Déplacer vers le bas.')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.ouvri_bals ('span',
                                         'class',
                                         'ui-button-text')
           || 'Déplacer vers le bas.'
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('span')
           || sie_15_htp_pkg.fermr_bals ('a')
           || sie_15_htp_pkg.fermr_bals ('div');
  end obten_boutn_deplc_range_raprt;

  function obten_url_acuei (pnu_prodt in number default obten_prodt_sesn)
    return varchar2 is
  begin
    return    obten_base_url (pnu_prodt)
           || sie_08_url_pkg.genr_url (obten_numr_apex_aplic_acuei (pnu_prodt),
                                       obten_numr_apex_page_acuei (pnu_prodt),
                                       'SIDF',
                                       null);
  end obten_url_acuei;

  function obten_url_authe_cible_sesn
    return varchar2 is
  begin
    return    obten_base_url (obten_prodt_sesn)
           || sie_08_url_pkg.genr_url (sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_APLIC'),
                                       sie_07_sesn_pkg.obten_valr_sesn ('S_AUTHE_CIBLE_NUMR_APEX_PAGE'),
                                       'SIDF',
                                       null);
  end obten_url_authe_cible_sesn;

  procedure defnr_item_aplic_apex is
  begin
    --Initialisation d'etat dans la session
    if sie_12_utils_pkg.obten_usagr_conct is not null
   and sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_11_TRAIT_MESGS_ERR') is null then
      sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_TRAIT_MESGS_ERR',
                                       0);
    end if;

    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_NUMR_VERSN_PRODT',
                                     obten_numr_versn_prodt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_NUMR_VERSN_PRODT_AFW',
                                     obten_numr_versn_prodt_afw);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_DOSR_FICHR',
                                     obten_dosr_fichr_prodt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_DOSR_FICHR_AFW',
                                     obten_dosr_fichr_afw);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_ENVIR',
                                     '<span class="ident_envir">' || obten_ident_envir || '</span>');
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_VERSN_PRODT',
                                     obten_versn);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_ACRON_PRODT',
                                     obten_code_prodt);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_JQUER_UI_CSS_SCOPE',
                                     obten_jquer_ui_css_scope);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_MESG_TOUT_DROIT_RESRV',
                                     obten_mesg_tout_droit_resrv);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_JAVSC_CORE_1',
                                     obten_templ_javsc_core_1);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_THEME_JQUER_UI',
                                     obten_templ_theme_jquer_ui);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_JAVSC_CORE_2',
                                     obten_templ_javsc_core_2);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_JAVSC_JQUER',
                                     obten_templ_javsc_jquer);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TEMPL_CUSTM',
                                     obten_templ_custm);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_MESG_SUPRS',
                                     sie_07_util_pkg.obten_mesg_suprs ());
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_TRAIT_MESGS_ERR',
                                     nvl (sie_07_sesn_pkg.obten_valr_sesn ('S_SIE_11_TRAIT_MESGS_ERR'), 0));
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_URL_ACUEI',
                                     obten_url_acuei);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_URL_AUTHE_CIBLE',
                                     obten_url_authe_cible_sesn);
    sie_07_util_pkg.defnr_etat_sesn ('A_SIE_11_DEPLC_RANGE_RAPRT',
                                     obten_boutn_deplc_range_raprt);
  exception
    when others then
      ete ();
      raise;
  end defnr_item_aplic_apex;

  function obten_page_inexs_maj_refrn (pnu_prodt in vd_i_sie_11_prodt.seqnc%type)
    return boolean is
    vva_indic_page_inexs_maj_refrn          varchar2 (1);
  begin
    select   indic_page_inexs_maj_refrn
      into   vva_indic_page_inexs_maj_refrn
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return (vva_indic_page_inexs_maj_refrn = 'O');
  end obten_page_inexs_maj_refrn;

  function obten_mesg_sucs_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_sucs)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  exception
    when others then
      raise;
  end obten_mesg_sucs_prodt;

  function obten_mesg_echec_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_echec)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_echec_prodt;

  function obten_mesg_fetch_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_fetch)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_fetch_prodt;

  function obten_mesg_suprm_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_range_suprm)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_suprm_prodt;

  function obten_mesg_modf_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_range_modf)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_modf_prodt;

  function obten_mesg_inser_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_range_inser)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_inser_prodt;

  function obten_mesg_aucun_don_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_aucun_don_trouv)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_aucun_don_prodt;

  function obten_mesg_trop_don_prodt (pnu_prodt in number default null)
    return varchar2 is
    vva_mesg                                vd_i_sie_01_mesg_lang.mesg%type;
  begin
    select   sie_01_gestn_mesg_pkg.obten_mesg (ref_mesg_trop_don_trouv)
      into   vva_mesg
      from   vd_i_sie_11_prodt
     where   seqnc = nvl (pnu_prodt, obten_prodt_sesn);

    return vva_mesg;
  end obten_mesg_trop_don_prodt;

  procedure deplr_formt_resrc_prodt (pnu_prodt in number) is
  begin
    --delete from vd_i_sie_13_formt_resrc where ref_prodt = pnu_prodt;
    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('ICONE_16PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     16,
                     16,
                     'Icone 16 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_MOYEN',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     48,
                     48,
                     'Icone moyenne');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_24PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     24,
                     24,
                     'Icone 24 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_32PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     32,
                     32,
                     'Icone 32 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_64PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     64,
                     64,
                     'Icone 64 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_48PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     48,
                     48,
                     'Icone 48 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, largr, hautr, nom)
           values   ('IMAGE_128PX',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'IMAG'),
                     128,
                     128,
                     'Icone 128 pixels');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('NON_COMPR',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'CSS'),
                     'Non compresse');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('NON_COMPR',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Non compresse');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('COMPR',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Compresse');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('JS_MIN',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Javascript compresse (minify)');
    exception
      when dup_val_on_index then
        null;
    end;

    begin
      insert into   vd_i_sie_13_formt_resrc (code, ref_prodt, ref_type_fichr, nom)
           values   ('JS_DEBUG',
                     pnu_prodt,
                     (select   seqnc
                        from   vd_sie_13_type_fichr
                       where   code = 'JS'),
                     'Javascript non compresse (debug)');
    exception
      when dup_val_on_index then
        null;
    end;
  end deplr_formt_resrc_prodt;

  function obten_dosr_fichr_afw (pnu_prodt in number default null)
    return varchar2
    result_cache relies_on (sie_11_prodt) is
    vva_dosr_fichr                          varchar2 (200);
  begin
    select   dosr_fichr
      into   vva_dosr_fichr
      from   vd_i_sie_11_prodt
     where   code = 'AFW';

    return vva_dosr_fichr;
  end obten_dosr_fichr_afw;

  function obten_fonct_obten_base_url (pnu_prodt in vd_i_sie_11_prodt.seqnc%type)
    return varchar2 is
    vva_fonct_obten_base_url                vd_i_sie_11_prodt.fonct_obten_base_url%type;
  begin
    select   fonct_obten_base_url
      into   vva_fonct_obten_base_url
      from   vd_i_sie_11_prodt s
     where   s.seqnc = pnu_prodt;

    return vva_fonct_obten_base_url;
  exception
    when no_data_found then
      raise;
  end obten_fonct_obten_base_url;

  function obten_base_url (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2 is
    vva_base_url                            varchar2 (1000);
    vva_fonct_obten_base_url                vd_i_sie_11_prodt.fonct_obten_base_url%type;

    function exect_fonct_obten_base_url (pva_nom_fonct in varchar2)
      return varchar2 is
      vva_progr_a_lancr                       varchar2 (4000)
        default    'begin '
                || '  sie_11_prodt_pkg.gva_base_url := %FONCT_PERSN%; '
                || '  exception when others then ete();'
                || 'end;';
    begin
      vva_progr_a_lancr :=
        replace (vva_progr_a_lancr,
                 '%FONCT_PERSN%',
                 pva_nom_fonct);

      execute immediate vva_progr_a_lancr;

      return gva_base_url;
    exception
      when others then
        return null;
    end exect_fonct_obten_base_url;
  begin
    vva_fonct_obten_base_url := obten_fonct_obten_base_url (pnu_prodt);

    if vva_fonct_obten_base_url is not null then
      vva_base_url :=
           rtrim (exect_fonct_obten_base_url (vva_fonct_obten_base_url),
                  '/')
        || '/';
    else
      vva_base_url :=
           case when sie_08_url_pkg.obten_port_servr = 443 then 'https://' else 'http://' end
        || sie_08_url_pkg.obten_host_http
        || case
             when sie_08_url_pkg.obten_port_servr not in (80, 443, 8080) then ':' || sie_08_url_pkg.obten_port_servr
             else null
           end
        || sie_08_url_pkg.obten_nom_scrip
        || '/';
    end if;

    return vva_base_url;
  exception
    when others then
      return null;
  end obten_base_url;

  function obten_procd_entet_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_entet_pdf_ir%type is
    vva_procd                               vd_i_sie_11_prodt.procd_impre_entet_pdf_ir%type;
  begin
    select   procd_impre_entet_pdf_ir
      into   vva_procd
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_procd;
  end obten_procd_entet_plpdf;

  function obten_procd_pied_page_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_impre_pied_page_pdf_ir%type is
    vva_procd                               vd_i_sie_11_prodt.procd_impre_pied_page_pdf_ir%type;
  begin
    select   procd_impre_pied_page_pdf_ir
      into   vva_procd
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_procd;
  end obten_procd_pied_page_plpdf;

  function obten_procd_coulr_plpdf (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return vd_i_sie_11_prodt.procd_plpdf_coulr%type is
    vva_procd                               vd_i_sie_11_prodt.procd_plpdf_coulr%type;
  begin
    select   procd_plpdf_coulr
      into   vva_procd
      from   vd_sie_11_prodt
     where   seqnc = pnu_prodt;

    return vva_procd;
  end obten_procd_coulr_plpdf;

  function obten_numr_versn_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type default obten_prodt_sesn)
    return varchar2 is
    vva_numr_versn                          varchar2 (200);
  begin
    select   (select   sie_11_versn_pkg.obten_versn (v.numr_versn_1,
                                                     v.numr_versn_2,
                                                     v.numr_versn_3,
                                                     v.numr_versn_4)
                from   vd_i_sie_11_versn v
               where   v.seqnc = p.ref_versn)
      into   vva_numr_versn
      from   vd_sie_11_prodt p
     where   p.seqnc = pnu_prodt;

    return vva_numr_versn;
  exception
    when no_data_found then
      return null;
  end obten_numr_versn_prodt;

  function obten_numr_versn_prodt_afw
    return varchar2 is
  begin
    return obten_numr_versn_prodt (obten_prodt ('AFW'));
  end obten_numr_versn_prodt_afw;

  function obten_nom (pnu_seqnc in number)
    return varchar2 is
    vva_nom                                 vd_i_sie_11_prodt.nom%type;
  begin
    select   nom
      into   vva_nom
      from   vd_i_sie_11_prodt
     where   seqnc = pnu_seqnc;

    return vva_nom;
  exception
    when no_data_found then
      return null;
  end obten_nom;

  procedure creer_mesg_base_prodt (pnu_prodt in vd_i_sie_11_prodt.seqnc%type,
                                   pnu_lang in vd_i_sie_01_lang.seqnc%type default null) is
    vva_mesg_sucs                           vd_i_sie_01_mesg_lang.mesg%type default 'Opération réussie.';
    vva_type_mesg_sucs                      varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_echec                          vd_i_sie_01_mesg_lang.mesg%type default 'Opération échouée.';
    vva_type_mesg_echec                     varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_err;

    vva_mesg_extra                          vd_i_sie_01_mesg_lang.mesg%type default 'Impossible d''extraire la ligne.';
    vva_type_mesg_extra                     varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_err;

    vva_mesg_rang_suprm                     vd_i_sie_01_mesg_lang.mesg%type default 'rangée(s) supprimée(s)';
    vva_type_mesg_rang_suprm                varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_rang_modf                      vd_i_sie_01_mesg_lang.mesg%type default 'rangée(s) modifiée(s)';
    vva_type_mesg_rang_modf                 varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_rang_inser                     vd_i_sie_01_mesg_lang.mesg%type default 'rangée(s) insérée(s)';
    vva_type_mesg_rang_inser                varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_aucun_don                      vd_i_sie_01_mesg_lang.mesg%type default 'Aucune donnée trouvée.';
    vva_type_mesg_aucun_don                 varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_infor;

    vva_mesg_trop_don                       vd_i_sie_01_mesg_lang.mesg%type
      default 'La requête retourne plus de #MAX_ROW_COUNT# enregistrements. Veuillez utiliser un filtre pour accéder aux enregistrements désirés.';
    vva_type_mesg_trop_don                  varchar2 (1) default sie_01_gestn_mesg_pkg.kva_type_mesg_err;

    vva_catgr_mesg                          varchar2 (3) default 'GEN';

    vnu_mesg_sucs                           vd_i_sie_11_prodt.ref_mesg_sucs%type;
    vnu_mesg_echec                          vd_i_sie_11_prodt.ref_mesg_echec%type;
    vnu_mesg_extra                          vd_i_sie_11_prodt.ref_mesg_fetch%type;
    vnu_mesg_rang_suprm                     vd_i_sie_11_prodt.ref_mesg_range_suprm%type;
    vnu_mesg_rang_modf                      vd_i_sie_11_prodt.ref_mesg_range_modf%type;
    vnu_mesg_rang_inser                     vd_i_sie_11_prodt.ref_mesg_range_inser%type;
    vnu_mesg_aucun_don                      vd_i_sie_11_prodt.ref_mesg_aucun_don_trouv%type;
    vnu_mesg_trop_don                       vd_i_sie_11_prodt.ref_mesg_trop_don_trouv%type;

    vnu_lang                                vd_i_sie_01_lang.seqnc%type;
  begin
    vnu_lang := nvl (pnu_lang, sie_01_lang_pkg.obten_lang ('FR-CA'));

    vnu_mesg_sucs :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_sucs,
                                        vva_type_mesg_sucs,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_echec :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_echec,
                                        vva_type_mesg_echec,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_extra :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_extra,
                                        vva_type_mesg_extra,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_rang_suprm :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_rang_suprm,
                                        vva_type_mesg_rang_suprm,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_rang_modf :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_rang_modf,
                                        vva_type_mesg_rang_modf,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_rang_inser :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_rang_inser,
                                        vva_type_mesg_rang_inser,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_aucun_don :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_aucun_don,
                                        vva_type_mesg_aucun_don,
                                        pnu_prodt,
                                        vnu_lang);

    vnu_mesg_trop_don :=
      sie_01_gestn_mesg_pkg.creer_mesg (vva_catgr_mesg,
                                        vva_mesg_trop_don,
                                        vva_type_mesg_trop_don,
                                        pnu_prodt,
                                        vnu_lang);

    update   vd_i_sie_11_prodt
       set   ref_mesg_sucs = vnu_mesg_sucs,
             ref_mesg_echec = vnu_mesg_echec,
             ref_mesg_fetch = vnu_mesg_extra,
             ref_mesg_range_suprm = vnu_mesg_rang_suprm,
             ref_mesg_range_modf = vnu_mesg_rang_modf,
             ref_mesg_range_inser = vnu_mesg_rang_inser,
             ref_mesg_aucun_don_trouv = vnu_mesg_aucun_don,
             ref_mesg_trop_don_trouv = vnu_mesg_trop_don
     where   seqnc = pnu_prodt;
  end creer_mesg_base_prodt;
--OBSOLETE::CARLO
/*procedure defnr_prodt_safp (pnu_prodt in number) is
begin
  sie_07_sesn_pkg.defnr_valr_sesn ('S_SIE_11_PRODT_DEFT',
                                   obten_code_prodt (pnu_prodt));
end defnr_prodt_safp;*/

--OBSOLETE::CARLO
/*
procedure chang_prodt_safp (pnu_prodt in number) is
begin
  defnr_prodt_safp (pnu_prodt);
  apex_util.ir_reset (12031);
  apex_util.ir_clear (12031);
end chang_prodt_safp;
*/
end sie_11_prodt_pkg;
/
